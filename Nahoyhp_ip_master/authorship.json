[{"path":"CONTRIBUTORS.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Contributors"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Homepage"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---|:---:|:---:|:---:"},{"lineNumber":5,"author":{"gitId":"-"},"content":"![](https://avatars0.githubusercontent.com/u/22460123?s\u003d100) | Jeffry Lum | [Github](https://github.com/j-lum/) | [Homepage](https://se.kasugano.moe)"},{"lineNumber":6,"author":{"gitId":"-"},"content":"![](https://avatars0.githubusercontent.com/u/1673303?s\u003d100) | Damith C. Rajapakse | [Github](https://github.com/damithc/) | [Homepage](https://www.comp.nus.edu.sg/~damithch/)"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"![]()| Phyo Han | [Github](https://github.com/Nahoyhp/) | "},{"lineNumber":8,"author":{"gitId":"-"},"content":"# I would like to join this list. How can I help the project"},{"lineNumber":9,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"Nahoyhp":1,"-":8}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"    //For JavaFX Setup"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"    String javaFxVersion \u003d \u002711.0.1\u0027"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"Nahoyhp"},"content":"    toolVersion \u003d \u00278.36\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Nahoyhp":17,"-":44}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"T | 1 | homeworkTT"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":"T | 0 | assignment1"},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"D | 0 | Assigment 1 | 2020-09-18 14:00"}],"authorContributionMap":{"Nahoyhp":3}},{"path":"data/dukeIII.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"T | 1 | homeworkTT"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":"T | 0 | assignment1"},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"D | 0 | Assigment 1 | 2020-09-18 14:00"}],"authorContributionMap":{"Nahoyhp":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"# User Guide for Project Duke"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"Duke is a desktop application that is designed for keeping track of the various tasks at hand. It is optimized for "},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"use via a Command Line Interface (CLI) while still having Graphical User Interface (GUI). As a skilled typer, you should"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"be able to carry out various actions such as adding new tasks and marking a task as done much faster than the "},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"This is **an implementation of [Project Duke](https://nus-cs2103-ay1920s2.github.io/website/se-book-adapted/projectDuke/index.html)**"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":", an educational software project designed to take the new software developer through the steps of building"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"a small software incrementally, while applying as many Java and SE techniques as possible along the way."},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"![Example of Execution](https://github.com/Nahoyhp/ip/blob/master/docs/Ui.png)"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"## Setting up in Intellij"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"1. Ensure you have Java 11 or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"1. Download the latest ip.jar from [here](https://github.com/Nahoyhp/ip)."},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"1. Copy the file to the folder you want to use as the home folder."},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"   [] Make sure you have the priviledge to create a new directory and edit files within the directory."},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"1. Double-click the file to start the app. The GUI should appear in a few seconds (as shown below)."},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"1. Type the command in the command box and press Enter to execute it.  "},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"1. For the details of each command, refer to the [Features](##Features) below."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"![Image of GUI showing Welcome Message](https://github.com/Nahoyhp/ip/blob/master/docs/Welcome.png)"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"## Summary of Command  "},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"| Action | Format \u0026 Example |  "},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"|---|---|"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"|Add a ToDo task | `todo EVENT_TITLE ` \u003cbr/\u003e \u003cbr/\u003e e.g: `todo Assigment 1`|  "},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"|Add a Deadline task | `deadline EVENT_TITLE /by DATE TIME` \u003cbr/\u003e \u003cbr/\u003e e.g: `deadline Assignment 1 /by 2020-09-14 18:00`|  "},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"|Add an Event task | `event EVENT_TITLE /at DATE TIME - TIME` \u003cbr/\u003e \u003cbr/\u003e e.g: `event Birthday Party /at 2020-09-14 18:00 20:00`|  "},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"|List | `list` |"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"|Mark a Task as Done | `done INDEX` \u003cbr/\u003e \u003cbr/\u003e e.g: `done 2`|  "},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"|Delete a Task | `delete INDEX` \u003cbr/\u003e \u003cbr/\u003e e.g: `delete 2`  |"},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"|Find tasks with keyword | `find KEYWORD` \u003cbr/\u003e \u003cbr/\u003e e.g: `find homework`|  "},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"|Archive data into a separate file | `archive LOCATION_TO_SAVE` \u003cbr/\u003e \u003cbr/\u003e e.g: `archive data\\dukeII.txt`|  "},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"|Load Data | `load FILE_LOCATION` \u003cbr/\u003e \u003cbr/\u003e e.g: `load data\\dukeII.txt`  |"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"|Save | `save`  |"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"|End the session | `bye`|  "},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"\u003cblockquote\u003e"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"\u003ch5\u003eNotes\u003c/h5\u003e"},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":"\u003cfont\u003e"},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"Words in UPPER_CASE are the parameters to be supplied by the user."},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"e.g. in todo TITLE, TITLE is a parameter which can be used as todo homework.  "},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":"\u003cbr/\u003e"},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"\u003cbr/\u003e"},{"lineNumber":48,"author":{"gitId":"Nahoyhp"},"content":"In the Graphic Display, dialogue in Red Box indicates a Warning or error."},{"lineNumber":49,"author":{"gitId":"Nahoyhp"},"content":"\u003c/font\u003e"},{"lineNumber":50,"author":{"gitId":"Nahoyhp"},"content":"\u003c/blockquote\u003e"},{"lineNumber":51,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":52,"author":{"gitId":"Nahoyhp"},"content":"##### Add a ToDo : `todo`   "},{"lineNumber":53,"author":{"gitId":"Nahoyhp"},"content":"Add a todo list."},{"lineNumber":54,"author":{"gitId":"Nahoyhp"},"content":"Format: `todo EVENT_TITLE`  "},{"lineNumber":55,"author":{"gitId":"Nahoyhp"},"content":"E.g:"},{"lineNumber":56,"author":{"gitId":"Nahoyhp"},"content":"* `todo homework`"},{"lineNumber":57,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":58,"author":{"gitId":"Nahoyhp"},"content":"##### Add a Deadline : `deadline`  "},{"lineNumber":59,"author":{"gitId":"Nahoyhp"},"content":"Add a deadline list. The DATE should be in YYYY-MM-DD format and TIME should be HH:MM format.  "},{"lineNumber":60,"author":{"gitId":"Nahoyhp"},"content":"Format: `deadline EVENT_TITLE /at DATE TIME - TIME`  "},{"lineNumber":61,"author":{"gitId":"Nahoyhp"},"content":"E.g:"},{"lineNumber":62,"author":{"gitId":"Nahoyhp"},"content":"* `deadline Assignment 1 /by 2020-09-14 18:00`"},{"lineNumber":63,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":64,"author":{"gitId":"Nahoyhp"},"content":"##### Adding an Event : `event`  "},{"lineNumber":65,"author":{"gitId":"Nahoyhp"},"content":"Add a deadline list. The DATE should be in YYYY-MM-DD format and TIME should be HH:MM format.  "},{"lineNumber":66,"author":{"gitId":"Nahoyhp"},"content":"Format: `event EVENT_TITLE /at DATE TIME - TIME`  "},{"lineNumber":67,"author":{"gitId":"Nahoyhp"},"content":"E.g:"},{"lineNumber":68,"author":{"gitId":"Nahoyhp"},"content":"* `event Birthday Party /at 2020-09-14 18:00 20:00`"},{"lineNumber":69,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":70,"author":{"gitId":"Nahoyhp"},"content":"##### Listing out all Tasks : `list`  "},{"lineNumber":71,"author":{"gitId":"Nahoyhp"},"content":"List out all the tasks added to the application in order of the entry.   "},{"lineNumber":72,"author":{"gitId":"Nahoyhp"},"content":"Format: `list`"},{"lineNumber":73,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":74,"author":{"gitId":"Nahoyhp"},"content":"##### Marking a Task as done : `done`  "},{"lineNumber":75,"author":{"gitId":"Nahoyhp"},"content":"Mark the task at INDEX as done.  "},{"lineNumber":76,"author":{"gitId":"Nahoyhp"},"content":"INDEX should be a positive integer, e.g. 1, 2, 3, 4... and the order is in entry order.  "},{"lineNumber":77,"author":{"gitId":"Nahoyhp"},"content":"If you are not sure about the order, check with `list` command."},{"lineNumber":78,"author":{"gitId":"Nahoyhp"},"content":"Format: `done INDEX`  "},{"lineNumber":79,"author":{"gitId":"Nahoyhp"},"content":"E.g."},{"lineNumber":80,"author":{"gitId":"Nahoyhp"},"content":"* \u0027done 5\u0027"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"Nahoyhp"},"content":"##### Loading archived data : `delete`  "},{"lineNumber":83,"author":{"gitId":"Nahoyhp"},"content":"Delete the task at INDEX as done.  "},{"lineNumber":84,"author":{"gitId":"Nahoyhp"},"content":"INDEX should be a positive integer, e.g. 1, 2, 3, 4... and the order is in entry order.  "},{"lineNumber":85,"author":{"gitId":"Nahoyhp"},"content":"If you are not sure about the order, check with `list` command."},{"lineNumber":86,"author":{"gitId":"Nahoyhp"},"content":"Once the delete is completed, the index of all subsequent tasks will move down by 1. "},{"lineNumber":87,"author":{"gitId":"Nahoyhp"},"content":"Format: `delete INDEX`  "},{"lineNumber":88,"author":{"gitId":"Nahoyhp"},"content":"E.g."},{"lineNumber":89,"author":{"gitId":"Nahoyhp"},"content":"* \u0027delete 5\u0027  "},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"Nahoyhp"},"content":"##### Saving progress : `save`  "},{"lineNumber":92,"author":{"gitId":"Nahoyhp"},"content":"Save all the file into the default folder."},{"lineNumber":93,"author":{"gitId":"Nahoyhp"},"content":"The default folder is `data\\duke.txt` which will be located in the same folder as the application `.jar` file."},{"lineNumber":94,"author":{"gitId":"Nahoyhp"},"content":"Format: `save`"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"Nahoyhp"},"content":"##### Archiving data : `archive`  "},{"lineNumber":97,"author":{"gitId":"Nahoyhp"},"content":"Saves all the data of the current progress into the DESTINATION."},{"lineNumber":98,"author":{"gitId":"Nahoyhp"},"content":"DESTINATION should point to a `.txt` file and takes relative position from the folder that contains the application .jar."},{"lineNumber":99,"author":{"gitId":"Nahoyhp"},"content":"Format: `archive DESTINATION`"},{"lineNumber":100,"author":{"gitId":"Nahoyhp"},"content":"E.g."},{"lineNumber":101,"author":{"gitId":"Nahoyhp"},"content":"* `archive data\\dukeII.txt`  "},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"Nahoyhp"},"content":"##### Loading data : `load`  "},{"lineNumber":104,"author":{"gitId":"Nahoyhp"},"content":"Load the archived file at the DESTINATION."},{"lineNumber":105,"author":{"gitId":"Nahoyhp"},"content":"DESTINATION should point to a `.txt` file and takes relative position from the folder that contains the application .jar."},{"lineNumber":106,"author":{"gitId":"Nahoyhp"},"content":"It will not override the current data until `save` or `bye` command is entered.  "},{"lineNumber":107,"author":{"gitId":"Nahoyhp"},"content":"Format: `archive DESTINATION`"},{"lineNumber":108,"author":{"gitId":"Nahoyhp"},"content":"E.g."},{"lineNumber":109,"author":{"gitId":"Nahoyhp"},"content":"* `archive data\\dukeII.txt`"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"Nahoyhp"},"content":"##### Ending a session : `bye`  "},{"lineNumber":112,"author":{"gitId":"Nahoyhp"},"content":"Close the application window after 2 seconds.  "},{"lineNumber":113,"author":{"gitId":"Nahoyhp"},"content":"The application will automatically save the file to the default file path.  "},{"lineNumber":114,"author":{"gitId":"Nahoyhp"},"content":"Format: `bye`"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"Nahoyhp"},"content":"## Credit  "},{"lineNumber":117,"author":{"gitId":"Nahoyhp"},"content":"Credit goes to"},{"lineNumber":118,"author":{"gitId":"Nahoyhp"},"content":"1. [NUS CS2103T AY20201 Semester 1 Teaching Team](https://github.com/nus-cs2103-AY2021S1/ip) for the starter code and guidance"},{"lineNumber":119,"author":{"gitId":"Nahoyhp"},"content":"1. Refers to [SE-Education Adress Book Level 3](https://se-education.org/addressbook-level3/UserGuide.html) for the layout and content of"},{"lineNumber":120,"author":{"gitId":"Nahoyhp"},"content":"this User Guide. "},{"lineNumber":121,"author":{"gitId":"Nahoyhp"},"content":"1. Thanks to Jame_D\u0027s answer in [stack**overflow**](https://stackoverflow.com/questions/27334455/how-to-close-a-stage-after-a-certain-amount-of-time-javafx.)"},{"lineNumber":122,"author":{"gitId":"Nahoyhp"},"content":"implement the function that close windows after a few seconds."},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"Nahoyhp":108,"-":16}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"import graphic_interface.Gui;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":"import javafx.application.Application;"},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"public class Launcher {"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"    public static void main(String[] args) {"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"        Application.launch(Gui.class, args);"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":8}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":"package duke;"},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":" * Responsible for interpreting the input and interacting with the User."},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"    private TaskList tasks;"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"    private Storage storage;"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"    private final Parser parser;"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"     * Initialised duke.Duke with a designated location to read and save the data."},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"     * @param filePath File location to read and save data."},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"    public Duke(String filePath) {"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"            this.storage \u003d new Storage(filePath);"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException e) {"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"            this.storage \u003d new Storage();"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"            this.tasks \u003d new TaskList(this.storage.loadDefaultFile());"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException e) {"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"            this.tasks \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"    public String getWelcome() {"},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"        return Ui.showWelcome();"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"     ** Take in user input and carry out the respective command based on the input command."},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"     * @param input The user input."},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"     * @return Either Success Message or Error Message due to bad formatting."},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"    public String processInput(String input, Runnable terminationFunction) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":"        Command command \u003d parser.createCommandFromInput(input);"},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"        assert command !\u003d null : \"Error in Parser\";"},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"        return command.execute(storage, tasks, terminationFunction);"},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":47}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":" * Custom Exception for the project: duke.Duke"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"    public DukeException() {"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"        super();"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"     * Create a DukeException with custom message."},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"     * @param message Message to be displayed to user."},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"    public DukeException(String message) {"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"        super(message);"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"        assert !message.equals(\"\") : \"Empty Duke Exception Message\";"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":19}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.command.ArchiveCommand;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import duke.command.ByeCommand;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"import duke.command.Command;"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"import duke.command.CreateDeadlineCommand;"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"import duke.command.CreateEventCommand;"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"import duke.command.CreateTodoCommand;"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"import duke.command.DoneCommand;"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"import duke.command.FindCommand;"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"import duke.command.ListCommand;"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"import duke.command.LoadCommand;"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"import duke.command.SaveCommand;"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"public class Parser {"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"    private static final String[] TASK_TYPES \u003d {\"todo\", \"event\", \"deadline\"};"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"    private static final String[] MEMORY_COMMAND_TYPES \u003d {\"save\", \"archive\", \"load\"};"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"    private String currentInput;"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"    public Parser() {"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"        currentInput \u003d \"\";"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"     * Take in the String input and split into the 3 parts, namely"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"     * the command, the title and extra_descriptions."},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"     * @param input The input from the users."},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"     * @return a String array that contains different components of the input."},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"    public Command createCommandFromInput(String input) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"        String[] inputComponents \u003d splitIntoComponents(input);"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"        String command \u003d inputComponents[0];"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"        if (isRelatedToStorage(command)) {"},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"            return storageCommand(inputComponents);"},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":"        if (isCreateTask(command)) {"},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"            return createTaskCommand(inputComponents);"},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"        if (inputComponents.length \u003d\u003d 1) {"},{"lineNumber":48,"author":{"gitId":"Nahoyhp"},"content":"            return singleWordCommand(command);"},{"lineNumber":49,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":51,"author":{"gitId":"Nahoyhp"},"content":"        return taskManipulation(inputComponents);"},{"lineNumber":52,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":54,"author":{"gitId":"Nahoyhp"},"content":"    private String[] splitIntoComponents(String input) throws DukeException {"},{"lineNumber":55,"author":{"gitId":"Nahoyhp"},"content":"        this.currentInput \u003d input;"},{"lineNumber":56,"author":{"gitId":"Nahoyhp"},"content":"        ArrayList\u003cString\u003e inputComponents \u003d new ArrayList\u003c\u003e();"},{"lineNumber":57,"author":{"gitId":"Nahoyhp"},"content":"        int spaceIndex \u003d input.indexOf(\" \");"},{"lineNumber":58,"author":{"gitId":"Nahoyhp"},"content":"        if (spaceIndex \u003d\u003d -1) {"},{"lineNumber":59,"author":{"gitId":"Nahoyhp"},"content":"            inputComponents.add(input.toLowerCase());"},{"lineNumber":60,"author":{"gitId":"Nahoyhp"},"content":"            return inputComponents.toArray(new String[0]);"},{"lineNumber":61,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":63,"author":{"gitId":"Nahoyhp"},"content":"        int slashIndex \u003d input.indexOf(\"/\");"},{"lineNumber":64,"author":{"gitId":"Nahoyhp"},"content":"        //Find the position of the start of the detail"},{"lineNumber":65,"author":{"gitId":"Nahoyhp"},"content":"        int infoIndex \u003d input.indexOf(\" \", slashIndex);"},{"lineNumber":66,"author":{"gitId":"Nahoyhp"},"content":"        inputComponents.add(input.substring(0, spaceIndex).toLowerCase());"},{"lineNumber":67,"author":{"gitId":"Nahoyhp"},"content":"        if (slashIndex \u003d\u003d -1) {"},{"lineNumber":68,"author":{"gitId":"Nahoyhp"},"content":"            inputComponents.add(input.substring(spaceIndex + 1).trim());"},{"lineNumber":69,"author":{"gitId":"Nahoyhp"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"Nahoyhp"},"content":"            inputComponents.add(input.substring(spaceIndex + 1, slashIndex).trim());"},{"lineNumber":71,"author":{"gitId":"Nahoyhp"},"content":"            inputComponents.add(input.substring(infoIndex + 1).trim());"},{"lineNumber":72,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"Nahoyhp"},"content":"        return inputComponents.toArray(new String[0]);"},{"lineNumber":74,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":76,"author":{"gitId":"Nahoyhp"},"content":"    private boolean isCreateTask(String command) {"},{"lineNumber":77,"author":{"gitId":"Nahoyhp"},"content":"        return Arrays.asList(TASK_TYPES).contains(command);"},{"lineNumber":78,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":80,"author":{"gitId":"Nahoyhp"},"content":"    private boolean isRelatedToStorage(String command) {"},{"lineNumber":81,"author":{"gitId":"Nahoyhp"},"content":"        return Arrays.asList(MEMORY_COMMAND_TYPES).contains(command);"},{"lineNumber":82,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":84,"author":{"gitId":"Nahoyhp"},"content":"    private Command singleWordCommand(String command) throws DukeException {"},{"lineNumber":85,"author":{"gitId":"Nahoyhp"},"content":"        switch(command) {"},{"lineNumber":86,"author":{"gitId":"Nahoyhp"},"content":"        case \"bye\":"},{"lineNumber":87,"author":{"gitId":"Nahoyhp"},"content":"            return new ByeCommand();"},{"lineNumber":88,"author":{"gitId":"Nahoyhp"},"content":"        case \"list\":"},{"lineNumber":89,"author":{"gitId":"Nahoyhp"},"content":"            return new ListCommand();"},{"lineNumber":90,"author":{"gitId":"Nahoyhp"},"content":"        default:"},{"lineNumber":91,"author":{"gitId":"Nahoyhp"},"content":"            throwNoSuchCommandException();"},{"lineNumber":92,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"Nahoyhp"},"content":"        return null;"},{"lineNumber":94,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":96,"author":{"gitId":"Nahoyhp"},"content":"    private Command createTaskCommand(String[] input) throws DukeException {"},{"lineNumber":97,"author":{"gitId":"Nahoyhp"},"content":"        String command \u003d input[0];"},{"lineNumber":98,"author":{"gitId":"Nahoyhp"},"content":"        switch(command) {"},{"lineNumber":99,"author":{"gitId":"Nahoyhp"},"content":"        case \"todo\":"},{"lineNumber":100,"author":{"gitId":"Nahoyhp"},"content":"            if (input.length !\u003d 2) {"},{"lineNumber":101,"author":{"gitId":"Nahoyhp"},"content":"                throw new DukeException(\"Arrr......\\n\" + \"\u0027todo\u0027 should followed by its title.\");"},{"lineNumber":102,"author":{"gitId":"Nahoyhp"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"Nahoyhp"},"content":"            return new CreateTodoCommand(input[1]);"},{"lineNumber":104,"author":{"gitId":"Nahoyhp"},"content":"        case \"deadline\":"},{"lineNumber":105,"author":{"gitId":"Nahoyhp"},"content":"            if (input.length !\u003d 3) {"},{"lineNumber":106,"author":{"gitId":"Nahoyhp"},"content":"                throw new DukeException(\"Arrr......\\n\" + \"Format for Deadline should be:\\n\""},{"lineNumber":107,"author":{"gitId":"Nahoyhp"},"content":"                        + \"deadline TITLE /by YYYY-MM-DD HH:MM\");"},{"lineNumber":108,"author":{"gitId":"Nahoyhp"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"Nahoyhp"},"content":"            return new CreateDeadlineCommand(input);"},{"lineNumber":110,"author":{"gitId":"Nahoyhp"},"content":"        case \"event\":"},{"lineNumber":111,"author":{"gitId":"Nahoyhp"},"content":"            if (input.length !\u003d 3) {"},{"lineNumber":112,"author":{"gitId":"Nahoyhp"},"content":"                throw new DukeException(\"Arrr......\\n\" + \"Format for Event should be:\\n\""},{"lineNumber":113,"author":{"gitId":"Nahoyhp"},"content":"                        + \"deadline TITLE /by YYYY-MM-DD HH:MM HH:MM\");"},{"lineNumber":114,"author":{"gitId":"Nahoyhp"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"Nahoyhp"},"content":"            return new CreateEventCommand(input);"},{"lineNumber":116,"author":{"gitId":"Nahoyhp"},"content":"        default:"},{"lineNumber":117,"author":{"gitId":"Nahoyhp"},"content":"            throwNoSuchCommandException();"},{"lineNumber":118,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"Nahoyhp"},"content":"        return null;"},{"lineNumber":120,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":122,"author":{"gitId":"Nahoyhp"},"content":"    private Command storageCommand(String[] input) throws DukeException {"},{"lineNumber":123,"author":{"gitId":"Nahoyhp"},"content":"        String command \u003d input[0];"},{"lineNumber":124,"author":{"gitId":"Nahoyhp"},"content":"        if (command.equals(\"save\")) {"},{"lineNumber":125,"author":{"gitId":"Nahoyhp"},"content":"            return new SaveCommand();"},{"lineNumber":126,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"Nahoyhp"},"content":"        if (input.length !\u003d 2) {"},{"lineNumber":128,"author":{"gitId":"Nahoyhp"},"content":"            throw new DukeException(\"Invalid Input. \" + command + \"should be followed by the filePath\");"},{"lineNumber":129,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"Nahoyhp"},"content":"        switch(command) {"},{"lineNumber":131,"author":{"gitId":"Nahoyhp"},"content":"        case \"archive\":"},{"lineNumber":132,"author":{"gitId":"Nahoyhp"},"content":"            return new ArchiveCommand(input[1]);"},{"lineNumber":133,"author":{"gitId":"Nahoyhp"},"content":"        case \"load\":"},{"lineNumber":134,"author":{"gitId":"Nahoyhp"},"content":"            return new LoadCommand(input[1]);"},{"lineNumber":135,"author":{"gitId":"Nahoyhp"},"content":"        default:"},{"lineNumber":136,"author":{"gitId":"Nahoyhp"},"content":"            throwNoSuchCommandException();"},{"lineNumber":137,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"Nahoyhp"},"content":"        return null;"},{"lineNumber":139,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":141,"author":{"gitId":"Nahoyhp"},"content":"    private Command taskManipulation(String[] input) throws DukeException {"},{"lineNumber":142,"author":{"gitId":"Nahoyhp"},"content":"        String command \u003d input[0];"},{"lineNumber":143,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":144,"author":{"gitId":"Nahoyhp"},"content":"            switch (command) {"},{"lineNumber":145,"author":{"gitId":"Nahoyhp"},"content":"            case \"delete\":"},{"lineNumber":146,"author":{"gitId":"Nahoyhp"},"content":"                return new DeleteCommand(Integer.parseInt(input[1]));"},{"lineNumber":147,"author":{"gitId":"Nahoyhp"},"content":"            case \"done\":"},{"lineNumber":148,"author":{"gitId":"Nahoyhp"},"content":"                return new DoneCommand(Integer.parseInt(input[1]));"},{"lineNumber":149,"author":{"gitId":"Nahoyhp"},"content":"            case \"find\":"},{"lineNumber":150,"author":{"gitId":"Nahoyhp"},"content":"                return new FindCommand(input[1]);"},{"lineNumber":151,"author":{"gitId":"Nahoyhp"},"content":"            default:"},{"lineNumber":152,"author":{"gitId":"Nahoyhp"},"content":"                throwNoSuchCommandException();"},{"lineNumber":153,"author":{"gitId":"Nahoyhp"},"content":"            }"},{"lineNumber":154,"author":{"gitId":"Nahoyhp"},"content":"        } catch (NumberFormatException err) {"},{"lineNumber":155,"author":{"gitId":"Nahoyhp"},"content":"            throw new DukeException(\"Please key in an integer after \" + input[0]);"},{"lineNumber":156,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"Nahoyhp"},"content":"        return null;"},{"lineNumber":158,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":160,"author":{"gitId":"Nahoyhp"},"content":"    private void throwNoSuchCommandException() throws DukeException {"},{"lineNumber":161,"author":{"gitId":"Nahoyhp"},"content":"        throw new DukeException(\"Arrrrr.... I don\u0027t know what does it mean by \\\"\" + this.currentInput + \"\\\"\");"},{"lineNumber":162,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":163}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"import duke.task.Deadline;"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"import duke.task.Event;"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"import duke.task.Task;"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"import duke.task.ToDo;"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":" * Represents a file location that user\u0027s input. Capable of reading from and writing to the file."},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"    private static final String DEFAULT_SAVE_LOCATION \u003d \"data/duke.txt\";"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"    private static final DukeException FILE_NOT_FOUND \u003d new DukeException(\"Can\u0027t find the File. Please ensure that:\\n\""},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"            + \"Filepath is not pointed to a directory,\\n\""},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"            + \"you have permission to access/create file there and\\n\""},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"            + \"in this format: dir\\\\...\\\\filename.txt\\n\");"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"    private final File file;"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"    private final String filePath;"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"     * Points to the default save location."},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"    public Storage() {"},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"        this.file \u003d new File(DEFAULT_SAVE_LOCATION);"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"        this.filePath \u003d DEFAULT_SAVE_LOCATION;"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"     * Points to the file which filePath is input by User."},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"     * @param filePath filePath of the file that wish to be load/ write"},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"    public Storage(String filePath) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":"        assert !filePath.equals(\"\") : \"Empty FilePath\";"},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"        if (!isWritableFilePath(filePath)) {"},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":"            throw FILE_NOT_FOUND;"},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"Nahoyhp"},"content":"        this.file \u003d file;"},{"lineNumber":49,"author":{"gitId":"Nahoyhp"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":50,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":52,"author":{"gitId":"Nahoyhp"},"content":"    private boolean isWritableFilePath(String filePath) {"},{"lineNumber":53,"author":{"gitId":"Nahoyhp"},"content":"        return Files.isWritable(Paths.get(filePath));"},{"lineNumber":54,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":56,"author":{"gitId":"Nahoyhp"},"content":"    private boolean isReadableFilePath(String filePath) {"},{"lineNumber":57,"author":{"gitId":"Nahoyhp"},"content":"        return Files.isReadable(Paths.get(filePath));"},{"lineNumber":58,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":60,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"Nahoyhp"},"content":"     * If there is input in FilePaths, write to File"},{"lineNumber":62,"author":{"gitId":"Nahoyhp"},"content":"     * Write the argument into the file destinated during initialisation"},{"lineNumber":63,"author":{"gitId":"Nahoyhp"},"content":"     * @param data An array of String to be written to the designated file."},{"lineNumber":64,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException If no permission to create at filePath or filePath is a directory."},{"lineNumber":65,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"Nahoyhp"},"content":"    public void saveToFile(String[] data, String... filePaths) throws DukeException {"},{"lineNumber":67,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"Nahoyhp"},"content":"            //If not specified, write to assigned filePath during initialisation"},{"lineNumber":69,"author":{"gitId":"Nahoyhp"},"content":"            if (filePaths.length \u003d\u003d 0) {"},{"lineNumber":70,"author":{"gitId":"Nahoyhp"},"content":"                FileWriter fw \u003d new FileWriter(this.file);"},{"lineNumber":71,"author":{"gitId":"Nahoyhp"},"content":"                fw.write(\"\");"},{"lineNumber":72,"author":{"gitId":"Nahoyhp"},"content":"                for (String s: data) {"},{"lineNumber":73,"author":{"gitId":"Nahoyhp"},"content":"                    fw.append(s + \"\\n\");"},{"lineNumber":74,"author":{"gitId":"Nahoyhp"},"content":"                }"},{"lineNumber":75,"author":{"gitId":"Nahoyhp"},"content":"                fw.close();"},{"lineNumber":76,"author":{"gitId":"Nahoyhp"},"content":"                return;"},{"lineNumber":77,"author":{"gitId":"Nahoyhp"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"Nahoyhp"},"content":"            File currentFile \u003d new File(filePaths[0]);"},{"lineNumber":79,"author":{"gitId":"Nahoyhp"},"content":"            if (!isWritableFilePath(filePath)) {"},{"lineNumber":80,"author":{"gitId":"Nahoyhp"},"content":"                throw new DukeException(\"Specified location is not writable\");"},{"lineNumber":81,"author":{"gitId":"Nahoyhp"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"Nahoyhp"},"content":"            FileWriter fw \u003d new FileWriter(currentFile);"},{"lineNumber":83,"author":{"gitId":"Nahoyhp"},"content":"            fw.write(\"\");"},{"lineNumber":84,"author":{"gitId":"Nahoyhp"},"content":"            for (String s: data) {"},{"lineNumber":85,"author":{"gitId":"Nahoyhp"},"content":"                fw.append(s + \"\\n\");"},{"lineNumber":86,"author":{"gitId":"Nahoyhp"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"Nahoyhp"},"content":"            fw.close();"},{"lineNumber":88,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":89,"author":{"gitId":"Nahoyhp"},"content":"        } catch (IOException err) {"},{"lineNumber":90,"author":{"gitId":"Nahoyhp"},"content":"            throw new DukeException(\"File Path is a directory -OR- Can\u0027t create file at location\");"},{"lineNumber":91,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":94,"author":{"gitId":"Nahoyhp"},"content":"    /** Read and interpret the saved file."},{"lineNumber":95,"author":{"gitId":"Nahoyhp"},"content":"     * @return ArrayList of Task that is saved inside the designated file. If file / directory does not exist, create."},{"lineNumber":96,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException If file is not found."},{"lineNumber":97,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"Nahoyhp"},"content":"    public ArrayList\u003cTask\u003e loadDefaultFile() throws DukeException {"},{"lineNumber":99,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"Nahoyhp"},"content":"            return loadFile(this.file);"},{"lineNumber":101,"author":{"gitId":"Nahoyhp"},"content":"        } catch (FileNotFoundException err) {"},{"lineNumber":102,"author":{"gitId":"Nahoyhp"},"content":"            this.createNewFile(this.filePath);"},{"lineNumber":103,"author":{"gitId":"Nahoyhp"},"content":"            return new ArrayList\u003cTask\u003e();"},{"lineNumber":104,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":107,"author":{"gitId":"Nahoyhp"},"content":"    /** Load a file at path specified by the user."},{"lineNumber":108,"author":{"gitId":"Nahoyhp"},"content":"     * @param newFilePath Path of the file that user wish to load."},{"lineNumber":109,"author":{"gitId":"Nahoyhp"},"content":"     * @return ArrayList of Task that is saved inside the designated file. If file / directory does not exist, create."},{"lineNumber":110,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException If file is not found."},{"lineNumber":111,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"Nahoyhp"},"content":"    public ArrayList\u003cTask\u003e loadCustomFile(String newFilePath) throws DukeException {"},{"lineNumber":113,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":114,"author":{"gitId":"Nahoyhp"},"content":"            if (!isReadableFilePath(newFilePath)) {"},{"lineNumber":115,"author":{"gitId":"Nahoyhp"},"content":"                throw FILE_NOT_FOUND;"},{"lineNumber":116,"author":{"gitId":"Nahoyhp"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"Nahoyhp"},"content":"            ArrayList\u003cTask\u003e result \u003d loadFile(new File(newFilePath));"},{"lineNumber":118,"author":{"gitId":"Nahoyhp"},"content":"            return result;"},{"lineNumber":119,"author":{"gitId":"Nahoyhp"},"content":"        } catch (FileNotFoundException err) {"},{"lineNumber":120,"author":{"gitId":"Nahoyhp"},"content":"            throw FILE_NOT_FOUND;"},{"lineNumber":121,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":124,"author":{"gitId":"Nahoyhp"},"content":"    private void createNewFile(String filePath) {"},{"lineNumber":125,"author":{"gitId":"Nahoyhp"},"content":"        String[] fileDirectory \u003d filePath.split(\"/\");"},{"lineNumber":126,"author":{"gitId":"Nahoyhp"},"content":"        String parentDirectory \u003d \"\";"},{"lineNumber":127,"author":{"gitId":"Nahoyhp"},"content":"        for (int i \u003d 0; i \u003c fileDirectory.length - 1; i++) {"},{"lineNumber":128,"author":{"gitId":"Nahoyhp"},"content":"            parentDirectory +\u003d fileDirectory[i] + \"/\";"},{"lineNumber":129,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"Nahoyhp"},"content":"        File f \u003d new File(parentDirectory);"},{"lineNumber":131,"author":{"gitId":"Nahoyhp"},"content":"        f.mkdirs();"},{"lineNumber":132,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":134,"author":{"gitId":"Nahoyhp"},"content":"    private ArrayList\u003cTask\u003e loadFile(File currentFile) throws FileNotFoundException, DukeException {"},{"lineNumber":135,"author":{"gitId":"Nahoyhp"},"content":"        ArrayList\u003cTask\u003e loadedTask \u003d new ArrayList\u003c\u003e();"},{"lineNumber":136,"author":{"gitId":"Nahoyhp"},"content":"        Scanner scanner \u003d new Scanner(currentFile);"},{"lineNumber":137,"author":{"gitId":"Nahoyhp"},"content":"        String[] dataRead;"},{"lineNumber":138,"author":{"gitId":"Nahoyhp"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":139,"author":{"gitId":"Nahoyhp"},"content":"            dataRead \u003d readSavedLine(scanner.nextLine());"},{"lineNumber":140,"author":{"gitId":"Nahoyhp"},"content":"            Task newTask \u003d loadSavedTask(dataRead);"},{"lineNumber":141,"author":{"gitId":"Nahoyhp"},"content":"            loadedTask.add(newTask);"},{"lineNumber":142,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"Nahoyhp"},"content":"        scanner.close();"},{"lineNumber":144,"author":{"gitId":"Nahoyhp"},"content":"        return loadedTask;"},{"lineNumber":145,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":147,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"Nahoyhp"},"content":"     * Split individual saved line into a 3 parts: Command, What, When"},{"lineNumber":149,"author":{"gitId":"Nahoyhp"},"content":"     * @param inputLine A line from save file to be interpreted."},{"lineNumber":150,"author":{"gitId":"Nahoyhp"},"content":"     * @return A String array with 2 or 3 parts."},{"lineNumber":151,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"Nahoyhp"},"content":"    private String[] readSavedLine(String inputLine) {"},{"lineNumber":153,"author":{"gitId":"Nahoyhp"},"content":"        String[] parts \u003d inputLine.split(\" \\\\| \");"},{"lineNumber":154,"author":{"gitId":"Nahoyhp"},"content":"        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":155,"author":{"gitId":"Nahoyhp"},"content":"        for (String part : parts) {"},{"lineNumber":156,"author":{"gitId":"Nahoyhp"},"content":"            result.add(part.trim());"},{"lineNumber":157,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"Nahoyhp"},"content":"        return result.toArray(parts);"},{"lineNumber":159,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":161,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":162,"author":{"gitId":"Nahoyhp"},"content":"     * Create a new Task based on the input."},{"lineNumber":163,"author":{"gitId":"Nahoyhp"},"content":"     * @param args The 2 or 3 parts command (Command, What, When)."},{"lineNumber":164,"author":{"gitId":"Nahoyhp"},"content":"     * @return Task created based on the command"},{"lineNumber":165,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException If the command requires (What, When) parts but one or more parts is missing."},{"lineNumber":166,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"Nahoyhp"},"content":"    private Task loadSavedTask(String[] args) throws DukeException {"},{"lineNumber":168,"author":{"gitId":"Nahoyhp"},"content":"        Task newTask;"},{"lineNumber":169,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":170,"author":{"gitId":"Nahoyhp"},"content":"            switch(args[0]) {"},{"lineNumber":171,"author":{"gitId":"Nahoyhp"},"content":"            case \"D\":"},{"lineNumber":172,"author":{"gitId":"Nahoyhp"},"content":"                newTask \u003d new Deadline(args[2], args[3]);"},{"lineNumber":173,"author":{"gitId":"Nahoyhp"},"content":"                break;"},{"lineNumber":174,"author":{"gitId":"Nahoyhp"},"content":"            case \"T\":"},{"lineNumber":175,"author":{"gitId":"Nahoyhp"},"content":"                newTask \u003d new ToDo(args[2]);"},{"lineNumber":176,"author":{"gitId":"Nahoyhp"},"content":"                break;"},{"lineNumber":177,"author":{"gitId":"Nahoyhp"},"content":"            case \"E\":"},{"lineNumber":178,"author":{"gitId":"Nahoyhp"},"content":"                newTask \u003d new Event(args[2], args[3]);"},{"lineNumber":179,"author":{"gitId":"Nahoyhp"},"content":"                break;"},{"lineNumber":180,"author":{"gitId":"Nahoyhp"},"content":"            default:"},{"lineNumber":181,"author":{"gitId":"Nahoyhp"},"content":"                throw new DukeException(\"Error: Saved File is badly corrupted\");"},{"lineNumber":182,"author":{"gitId":"Nahoyhp"},"content":"            }"},{"lineNumber":183,"author":{"gitId":"Nahoyhp"},"content":"        } catch (Exception err) {"},{"lineNumber":184,"author":{"gitId":"Nahoyhp"},"content":"            throw new DukeException(\"Error: Saved File is badly corrupted\");"},{"lineNumber":185,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":187,"author":{"gitId":"Nahoyhp"},"content":"        if (args[1].equals(\"1\")) {"},{"lineNumber":188,"author":{"gitId":"Nahoyhp"},"content":"            newTask.setDone();"},{"lineNumber":189,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"Nahoyhp"},"content":"        return newTask;"},{"lineNumber":191,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":193,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":193}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"import duke.task.ToDo;"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":" * Represents a Manager to manage different tasks on hand."},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"public class TaskList {"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"     * Initialise with no initial task on hand."},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"    public TaskList() {"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"     * Initialise with serveral tasks on hand."},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"     * Add a new Task of type ToDo."},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"     * @param name Name of the ToDo to create."},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"     * @return The new task added."},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"    public Task addTodo(String name) {"},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"        Task newTask \u003d new ToDo(name);"},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"        tasks.add(newTask);"},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"        return newTask;"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"     * Find for Tasks that contain the keyword."},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":"     * @param keyword The keyword to search."},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"     * @return String representation of Tasks that contains the keyword"},{"lineNumber":48,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Nahoyhp"},"content":"    public String find(String keyword) {"},{"lineNumber":50,"author":{"gitId":"Nahoyhp"},"content":"        String result \u003d \"\";"},{"lineNumber":51,"author":{"gitId":"Nahoyhp"},"content":"        for (Task currentTask : tasks) {"},{"lineNumber":52,"author":{"gitId":"Nahoyhp"},"content":"            if (!currentTask.getName().contains(keyword)) {"},{"lineNumber":53,"author":{"gitId":"Nahoyhp"},"content":"                continue;"},{"lineNumber":54,"author":{"gitId":"Nahoyhp"},"content":"            } else if (result.equals(\"\")) {"},{"lineNumber":55,"author":{"gitId":"Nahoyhp"},"content":"                result +\u003d \"\\n\" + currentTask.toString();"},{"lineNumber":56,"author":{"gitId":"Nahoyhp"},"content":"                continue;"},{"lineNumber":57,"author":{"gitId":"Nahoyhp"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"Nahoyhp"},"content":"            result +\u003d \" \" + currentTask.toString();"},{"lineNumber":59,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Nahoyhp"},"content":"        return result;"},{"lineNumber":61,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":63,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"Nahoyhp"},"content":"     * Add a new Task of type Deadline."},{"lineNumber":65,"author":{"gitId":"Nahoyhp"},"content":"     * @param name Name Name of the Deadline to be created."},{"lineNumber":66,"author":{"gitId":"Nahoyhp"},"content":"     * @param time Timing of the new Deadline to be created."},{"lineNumber":67,"author":{"gitId":"Nahoyhp"},"content":"     * @return The new Task added."},{"lineNumber":68,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException If time is wrongly formatted."},{"lineNumber":69,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"Nahoyhp"},"content":"    public Task addDeadLine(String name, String time) throws DukeException {"},{"lineNumber":71,"author":{"gitId":"Nahoyhp"},"content":"        Task newTask \u003d new Deadline(name, time);"},{"lineNumber":72,"author":{"gitId":"Nahoyhp"},"content":"        tasks.add(newTask);"},{"lineNumber":73,"author":{"gitId":"Nahoyhp"},"content":"        return newTask;"},{"lineNumber":74,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":76,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"Nahoyhp"},"content":"     * Add a new Task of type Event."},{"lineNumber":78,"author":{"gitId":"Nahoyhp"},"content":"     * @param name Name Name of the Event to be created."},{"lineNumber":79,"author":{"gitId":"Nahoyhp"},"content":"     * @param time Timing of the new Event to be created."},{"lineNumber":80,"author":{"gitId":"Nahoyhp"},"content":"     * @return The new Task added."},{"lineNumber":81,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException If time is wrongly formatted."},{"lineNumber":82,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"Nahoyhp"},"content":"    public Task addEvent(String name, String time) throws DukeException {"},{"lineNumber":84,"author":{"gitId":"Nahoyhp"},"content":"        Task newTask \u003d new Event(name, time);"},{"lineNumber":85,"author":{"gitId":"Nahoyhp"},"content":"        tasks.add(newTask);"},{"lineNumber":86,"author":{"gitId":"Nahoyhp"},"content":"        return newTask;"},{"lineNumber":87,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":89,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"Nahoyhp"},"content":"     * @return The total number of tasks at hands."},{"lineNumber":91,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"Nahoyhp"},"content":"    public int getTotalTask() {"},{"lineNumber":93,"author":{"gitId":"Nahoyhp"},"content":"        return this.tasks.size();"},{"lineNumber":94,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":96,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"Nahoyhp"},"content":"     * Set the task as done. Notes, task starts counting from 1."},{"lineNumber":98,"author":{"gitId":"Nahoyhp"},"content":"     * @param index The index of task to be done."},{"lineNumber":99,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException If the task at index is already done."},{"lineNumber":100,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"Nahoyhp"},"content":"    public void doTask(int index) throws DukeException {"},{"lineNumber":102,"author":{"gitId":"Nahoyhp"},"content":"        this.tasks.get(index - 1).setDone();"},{"lineNumber":103,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":105,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"Nahoyhp"},"content":"     * Convert all tasks at hands to a format friendly for saving."},{"lineNumber":107,"author":{"gitId":"Nahoyhp"},"content":"     * @return Array of String that describes tasks at hands in saved format."},{"lineNumber":108,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"Nahoyhp"},"content":"    public String[] toSaveFormat() {"},{"lineNumber":110,"author":{"gitId":"Nahoyhp"},"content":"        String[] result \u003d new String[this.tasks.size()];"},{"lineNumber":111,"author":{"gitId":"Nahoyhp"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":112,"author":{"gitId":"Nahoyhp"},"content":"            result[i] \u003d tasks.get(i).toSaveFormat();"},{"lineNumber":113,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"Nahoyhp"},"content":"        return result;"},{"lineNumber":115,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":117,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"Nahoyhp"},"content":"     * Set the task as done. Notes, task starts counting from 1."},{"lineNumber":119,"author":{"gitId":"Nahoyhp"},"content":"     * @param index The index of task to be deleted."},{"lineNumber":120,"author":{"gitId":"Nahoyhp"},"content":"     * @return Task delted."},{"lineNumber":121,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException If the task does not exists."},{"lineNumber":122,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"Nahoyhp"},"content":"    public Task deleteTask(int index) throws DukeException {"},{"lineNumber":124,"author":{"gitId":"Nahoyhp"},"content":"        if (index - 1 \u003c 1 || index \u003e this.tasks.size()) {"},{"lineNumber":125,"author":{"gitId":"Nahoyhp"},"content":"            throw new DukeException(\"Task #\" + index + \"does not exist.\\n\""},{"lineNumber":126,"author":{"gitId":"Nahoyhp"},"content":"                    + \"To check for lists of Tasks, type \\\"list\\\"\");"},{"lineNumber":127,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"Nahoyhp"},"content":"        assert index - 1 \u003e 0 : \"Error. Delete Task don\u0027t catch index out of bound exception\";"},{"lineNumber":129,"author":{"gitId":"Nahoyhp"},"content":"        return this.tasks.remove(index - 1);"},{"lineNumber":130,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":132,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"Nahoyhp"},"content":"     * Get detail of the Task at index."},{"lineNumber":134,"author":{"gitId":"Nahoyhp"},"content":"     * @param index The index of task that is concerned."},{"lineNumber":135,"author":{"gitId":"Nahoyhp"},"content":"     * @return String representation of the task at concerned."},{"lineNumber":136,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"Nahoyhp"},"content":"    public String getTaskStatus(int index) throws DukeException {"},{"lineNumber":138,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":139,"author":{"gitId":"Nahoyhp"},"content":"            return tasks.get(index - 1).toString();"},{"lineNumber":140,"author":{"gitId":"Nahoyhp"},"content":"        } catch (IndexOutOfBoundsException err) {"},{"lineNumber":141,"author":{"gitId":"Nahoyhp"},"content":"            throw new DukeException(\"Please key in an index between 1 and \" + tasks.size());"},{"lineNumber":142,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":144,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":146,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"Nahoyhp"},"content":"     * Display all the tasks on hands."},{"lineNumber":148,"author":{"gitId":"Nahoyhp"},"content":"     * @return The String that represents all the tasks on hands in display format."},{"lineNumber":149,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":151,"author":{"gitId":"Nahoyhp"},"content":"    public String toString() {"},{"lineNumber":152,"author":{"gitId":"Nahoyhp"},"content":"        String output \u003d \"\";"},{"lineNumber":153,"author":{"gitId":"Nahoyhp"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":154,"author":{"gitId":"Nahoyhp"},"content":"            output +\u003d i + \".\" + tasks.get(i - 1).toString();"},{"lineNumber":155,"author":{"gitId":"Nahoyhp"},"content":"            if (i !\u003d tasks.size()) {"},{"lineNumber":156,"author":{"gitId":"Nahoyhp"},"content":"                output +\u003d \"\\n\"; //Add a new line only if the current task is not the last."},{"lineNumber":157,"author":{"gitId":"Nahoyhp"},"content":"            }"},{"lineNumber":158,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"Nahoyhp"},"content":"        return output;"},{"lineNumber":160,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":162,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"Nahoyhp"},"content":"     * Replace the current data with archived data."},{"lineNumber":164,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"Nahoyhp"},"content":"    public void loadArchivedTasks(ArrayList\u003cTask\u003e dataRead) {"},{"lineNumber":166,"author":{"gitId":"Nahoyhp"},"content":"        this.tasks \u003d dataRead;"},{"lineNumber":167,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":168}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":" * Responsible for customizing the Messages shown to User"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"     * Return the input according to default\u0027s style."},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"     * @param input The message to display to user."},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"    public static String show(String input) {"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"        return input;"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"     * Return Welcome Message according to default\u0027s style."},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"    public static String showWelcome() {"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"        return show(\"Duke at your service. How may I help?\");"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"     * Return the detail of the new Task and new count of tasks at hand according to default\u0027s style."},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"    public static String showTaskAdded(String taskDetail, int taskCount) {"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"        String first \u003d \"Got it. I\u0027ve added this task:\\n\";"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"        String second \u003d \"    \" + taskDetail + \"\\n\";"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"        String third \u003d String.format(\"Now you have %d tasks in the list\", taskCount);"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"        return show(first + second + third);"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"     * Return the detail of the task that is just set to done according to default\u0027s style."},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"    public static String showTaskDone(String taskDetail) {"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"        return show(\"Nice! I have marked this task as done:\\n\""},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"                + taskDetail);"},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"     * Return the tasks that the user has on hand."},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":"     * @param taskDetails String of Task Descriptions that corresponds to the tasks user have on hand."},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"    public static String showTasks(String taskDetails) {"},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":"        return show(\"Here are the tasks in your list\\n\" + taskDetails);"},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":49,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Nahoyhp"},"content":"     * Return the tasks that the user has just deleted."},{"lineNumber":51,"author":{"gitId":"Nahoyhp"},"content":"     * @param taskDetail String of Task that is just deleted."},{"lineNumber":52,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Nahoyhp"},"content":"    public static String showDeletedTasks(String taskDetail) {"},{"lineNumber":54,"author":{"gitId":"Nahoyhp"},"content":"        return show(\"Alright! I have deleted this task:\\n\" + taskDetail);"},{"lineNumber":55,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":57,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Nahoyhp"},"content":"     * String error message with different style."},{"lineNumber":59,"author":{"gitId":"Nahoyhp"},"content":"     * @param err Error Message to print out."},{"lineNumber":60,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Nahoyhp"},"content":"    public static String showError(String err) {"},{"lineNumber":62,"author":{"gitId":"Nahoyhp"},"content":"        String line \u003d \"************************************************************\";"},{"lineNumber":63,"author":{"gitId":"Nahoyhp"},"content":"        return String.format(\"%s\\n%s\\n%s\", line, err, line);"},{"lineNumber":64,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":66,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"Nahoyhp"},"content":"     * Print out the bye with different style."},{"lineNumber":68,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"Nahoyhp"},"content":"    public static String showBye() {"},{"lineNumber":70,"author":{"gitId":"Nahoyhp"},"content":"        return show(\"Bye. See you again\\n\""},{"lineNumber":71,"author":{"gitId":"Nahoyhp"},"content":"                + \"Window will close in 3 seconds\");"},{"lineNumber":72,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":73}},{"path":"src/main/java/duke/command/ArchiveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":" * Represents the Archive Command"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"public class ArchiveCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"    private String filePath;"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"    public ArchiveCommand(String filePath) {"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"     * Execute the Archive Action."},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"     * @param storage Storage to save data to."},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"     * @param tasks The tasklist to save the data to."},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"     * @param terminationFunction Function to run if this is the bye command."},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"     * @return The success message."},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException when there is problem executing the Command."},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"    public String execute(Storage storage, TaskList tasks, Runnable terminationFunction) throws DukeException {"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"        storage.saveToFile(tasks.toSaveFormat(), filePath);"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"        return Ui.show(\"You have successfully archive\\ncurrent progress to the file(s) indicated\");"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":31}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":" * Represents the Archive Command"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"public class ByeCommand implements Command {"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"     * Create instance of ByeCommand"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"    public ByeCommand() {"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"     * Execute the Bye Command."},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"     * @param storage Storage to save data to."},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"     * @param tasks The tasklist to save the data to."},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"     * @param terminationFunction Function to run if this is the bye command."},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"     * @return The Bye Message."},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException when there is error carrying out the command."},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"    public String execute(Storage storage, TaskList tasks, Runnable terminationFunction) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"        storage.saveToFile(tasks.toSaveFormat());"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"        terminationFunction.run();"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"        return Ui.showBye();"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":30}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"public interface Command {"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"     * Execute the command."},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"     * @param storage Storage to save data to."},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"     * @param tasks The tasklist to save the data to."},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"     * @param terminationFunction Function to run if this is the bye command."},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"     * @return The response of Duke to the user Input."},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException if the system fails to execute."},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"    public String execute(Storage storage, TaskList tasks, Runnable terminationFunction) throws DukeException;"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":17}},{"path":"src/main/java/duke/command/CreateDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":" * Represents the CreateDeadline Command"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"public class CreateDeadlineCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"    private String title;"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"    private String dateTime;"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"     * Return new Command that create a Deadline."},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"     * @param input Input parsed by the Parser."},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException when the format is corrupted."},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"    public CreateDeadlineCommand(String[] input) throws DukeException {"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"        if (!isValidInput(input)) {"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"            throw new DukeException(\"Error: Please key in as: \\n \""},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"                    + \"    deadline [title] /by YYYY-MM-DD HH:MM\");"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"        this.title \u003d input[1];"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"        this.dateTime \u003d input[2];"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"    private boolean isValidInput(String[] input) {"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"        if (input.length !\u003d 3) {"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"            return false;"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"        return !input[1].equals(\"\") || !input[2].equals(\"\");"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"     * Execute the command."},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"     * @param storage             Storage to save data to."},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"     * @param tasks               The tasklist to save the data to."},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"     * @param terminationFunction Function to run if this is the bye command."},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"     * @return The response of Duke to the user Input."},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException if the system fails to execute."},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"    public String execute(Storage storage, TaskList tasks, Runnable terminationFunction) throws DukeException {"},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"        Task addedDeadline \u003d tasks.addDeadLine(title, dateTime);"},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":"        return Ui.showTaskAdded(addedDeadline.toString(), tasks.getTotalTask());"},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":48}},{"path":"src/main/java/duke/command/CreateEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":" * Represents the Command to create an Event"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"public class CreateEventCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"    private String title;"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"    private String detail;"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"     * Return new Command that create an Event."},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"     * @param input Input parsed by the Parser."},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException when the format is corrupted."},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"    public CreateEventCommand(String[] input) throws DukeException {"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"        if (!isValidInput(input)) {"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"            throw new DukeException(\"Error: Please key in as: \\n \""},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"                    + \"    event [title] /by YYYY-MM-DD HH:MM HH:MM\");"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"        this.title \u003d input[1];"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"        this.detail \u003d input[2];"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"    private boolean isValidInput(String[] input) {"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"        if (input.length !\u003d 3) {"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"            return false;"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"        return !input[1].equals(\"\") || !input[2].equals(\"\");"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"     * Execute the command."},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"     * @param storage             Storage to save data to."},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"     * @param tasks               The tasklist to save the data to."},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"     * @param terminationFunction Function to run if this is the bye command."},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"     * @return The response of Duke to the user Input."},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException if the system fails to execute."},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":"    public String execute(Storage storage, TaskList tasks, Runnable terminationFunction) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"        Task addedEvent \u003d tasks.addEvent(title, detail);"},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"        return Ui.showTaskAdded(addedEvent.toString(), tasks.getTotalTask());"},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":47}},{"path":"src/main/java/duke/command/CreateTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":" * Represents the Command to create a Todo"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"public class CreateTodoCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"    private String taskTitle;"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"     * Return new Command that create an Event."},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"     * @param taskTitle title of the task to be created by this."},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException when the format is corrupted."},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"    public CreateTodoCommand(String taskTitle) throws DukeException {"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"        if (taskTitle.equals(\"\")) {"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"            throw new DukeException(\"Task Title can\u0027t be empty\");"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"        this.taskTitle \u003d taskTitle;"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"     * Execute the command."},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"     * @param storage             Storage to save data to."},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"     * @param tasks               The tasklist to save the data to."},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"     * @param terminationFunction Function to run if this is the bye command."},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"     * @return The response of Duke to the user Input."},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException if the system fails to execute."},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"    public String execute(Storage storage, TaskList tasks, Runnable terminationFunction) throws DukeException {"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"        Task addedToDo \u003d tasks.addTodo(taskTitle);"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"        return Ui.showTaskAdded(addedToDo.toString(), tasks.getTotalTask());"},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":40}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":" * Represents the Command to delete a task"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"public class DeleteCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"    private int taskIndex;"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"     * Return new Command that will delete an Event."},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"     * @param taskIndex Index of the task to be deleted."},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException when there is error creating the command"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"    public DeleteCommand(int taskIndex) throws DukeException {"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"     * Execute the command."},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"     * @param storage             Storage to save data to."},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"     * @param tasks               The tasklist to save the data to."},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"     * @param terminationFunction Function to run if this is the bye command."},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"     * @return The response of Duke to the user Input."},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException if the system fails to execute."},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"    public String execute(Storage storage, TaskList tasks, Runnable terminationFunction) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"        Task deletedTask \u003d tasks.deleteTask(taskIndex);"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"        return Ui.showDeletedTasks(deletedTask.toString());"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":37}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":"package duke.command;"},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":" * Represents the Command to mark the task as done."},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"public class DoneCommand implements Command {"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"    private int taskRank;"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"     * Return new Command that will delete an Event."},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"     * @param taskRank Index of the task to be marked done."},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException when there is error creating the command"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"    public DoneCommand(int taskRank) {"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"        this.taskRank \u003d taskRank;"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"     * {@inheritDoc}"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"    public String execute(Storage storage, TaskList tasks, Runnable terminationFunction) throws DukeException {"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"        tasks.doTask(this.taskRank);"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"        return Ui.showTaskDone(tasks.getTaskStatus(this.taskRank));"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":30}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":" * Represents the Command to find tasks with keyword."},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"public class FindCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"    private String keyword;"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"     * Return new Command that will find all tasks that contains the keyword."},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"     * @param keyword The keyword to search in the TaskList."},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException when there is error creating the command"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"     * Execute the command."},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"     * @param storage             Storage to save data to."},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"     * @param tasks               The tasklist to save the data to."},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"     * @param terminationFunction Function to run if this is the bye command."},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"     * @return The response of Duke to the user Input."},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException if the system fails to execute."},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"    public String execute(Storage storage, TaskList tasks, Runnable terminationFunction) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"        String result \u003d tasks.find(keyword);"},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"        if (result.equals(\"\")) {"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"            return Ui.show(\"No match found\");"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"        return Ui.show(\"These following tasks match the keyword you entered: \\n\" + result);"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":39}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":" * Represents the command to list all the tasks."},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"public class ListCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"    public ListCommand() {}"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"     * Execute the command."},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"     * @param storage             Storage to save data to."},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"     * @param tasks               The tasklist to save the data to."},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"     * @param terminationFunction Function to run if this is the bye command."},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"     * @return The response of Duke to the user Input."},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException if the system fails to execute."},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"    public String execute(Storage storage, TaskList tasks, Runnable terminationFunction) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"        if (tasks.getTotalTask() \u003d\u003d 0) {"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"            return Ui.show(\"Currently, you have no tasks on hand\");"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"        return Ui.showTasks(tasks.toString());"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":29}},{"path":"src/main/java/duke/command/LoadCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"public class LoadCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"    private String filePath;"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"     * Returns the command to load."},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"     * @param filePath to load the archived data."},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException when there is error executing the command."},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"    public LoadCommand(String filePath) throws DukeException {"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"        if (filePath.equals(\"\")) {"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"            throw new DukeException(\"Invalid Input. \u0027load\u0027 should be followed by the filePath\");"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"     * Execute the command."},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"     * @param storage             Storage to save data to."},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"     * @param tasks               The tasklist to save the data to."},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"     * @param terminationFunction Function to run if this is the bye command."},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"     * @return The response of Duke to the user Input."},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException if the system fails to execute."},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"    public String execute(Storage storage, TaskList tasks, Runnable terminationFunction) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"        String message \u003d \"You have successful load the data from\""},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"                + filePath"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"                + \"\\nTo overwrite current data, either enter \u0027saved\u0027 or \u0027bye\u0027\";"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"        tasks.loadArchivedTasks(storage.loadCustomFile(filePath));"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"        return Ui.show(message);"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":39}},{"path":"src/main/java/duke/command/SaveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"public class SaveCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"     * Return Command to save current progress into the default file."},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"    public SaveCommand() {"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"     * Execute the command."},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"     * @param storage             Storage to save data to."},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"     * @param tasks               The tasklist to save the data to."},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"     * @param terminationFunction Function to run if this is the bye command."},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"     * @return The response of Duke to the user Input."},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException if the system fails to execute."},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"    public String execute(Storage storage, TaskList tasks, Runnable terminationFunction) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"        storage.saveToFile(tasks.toSaveFormat());"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"        return Ui.show(\"Current Progress is saved.\\nYou can proceed with next command as per normal\");"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":29}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":" * Represents a Deadline Task."},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"public class Deadline extends Task {"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"    private LocalTime time;"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"     * Create an instance of Deadline."},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"     * @param name The name of the task."},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"     * @param taskDetail The timing of the Deadline, which has a date and [optionally] a timing."},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException If taskDetail is badly formatted."},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"    public Deadline(String name, String taskDetail) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"        super(name);"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"        String[] input \u003d taskDetail.split(\"\\\\s+\");"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"            super.setDate(LocalDate.parse(input[0]));"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"            if (input.length \u003d\u003d 2) {"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"                time \u003d LocalTime.parse(input[1]);"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"            } else {"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"                time \u003d null;"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DateTimeParseException err) {"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"            throw new DukeException(\"Error: Please key in as: \\n \""},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"                    + \"event [title] /by YYYY-MM-DD HH:MM\");"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"     * Convert Task into the saved format."},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"     * @return A String that described the Task in saved format."},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":"    public String toSaveFormat() {"},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"        return String.format(\"D%s | %s %s\", super.toSaveFormat(),"},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"                Task.SAVE_DATE_FORMATTER.format(super.date.get()), Task.TIME_FORMATTER.format(time));"},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":48,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Nahoyhp"},"content":"     * Convert Task into the display format."},{"lineNumber":50,"author":{"gitId":"Nahoyhp"},"content":"     * @return A String that described the Task in display format."},{"lineNumber":51,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"Nahoyhp"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitId":"Nahoyhp"},"content":"        String dateTime \u003d Task.DATE_FORMATTER.format(super.date.get());"},{"lineNumber":55,"author":{"gitId":"Nahoyhp"},"content":"        if (time !\u003d null) {"},{"lineNumber":56,"author":{"gitId":"Nahoyhp"},"content":"            dateTime +\u003d \" \" + Task.TIME_FORMATTER.format(this.time);"},{"lineNumber":57,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Nahoyhp"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), dateTime);"},{"lineNumber":59,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":60}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":" * Represents a Event Task."},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"public class Event extends Task {"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"    private LocalTime startTime;"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"    private LocalTime endTime;"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"     * Create an instance of Event."},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"     * @param name The name of the Event."},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"     * @param eventDetail The timing of the event."},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException If eventDetail is badly formatted."},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"    public Event(String name, String eventDetail) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"        super(name);"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"        String[] input \u003d eventDetail.split(\"\\\\s+\");"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"            super.setDate(LocalDate.parse(input[0]));"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"            startTime \u003d LocalTime.parse(input[1]);"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"            endTime \u003d LocalTime.parse(input[2]);"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"        } catch (Exception err) {"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"            throw new DukeException(\"Error: Please key in as: \\n\""},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"                    + \"event [title] /at YYYY-MM-DD [startTime] [endTime] where start and end time is in HH:MM \");"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"     * Convert Task into the saved format."},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"     * @return A String that described the Task in saved format."},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"    public String toSaveFormat() {"},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"        return String.format(\"E%s | %s %s %s\", super.toSaveFormat(), SAVE_DATE_FORMATTER.format(super.date.get()),"},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"                TIME_FORMATTER.format(startTime), TIME_FORMATTER.format(endTime));"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"     * Convert Task into the display format."},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":"     * @return A String that described the Task in display format."},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"Nahoyhp"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"Nahoyhp"},"content":"        String dateTime \u003d DATE_FORMATTER.format(super.date.get());"},{"lineNumber":51,"author":{"gitId":"Nahoyhp"},"content":"        dateTime +\u003d \" \" + TIME_FORMATTER.format(startTime);"},{"lineNumber":52,"author":{"gitId":"Nahoyhp"},"content":"        dateTime +\u003d \" - \" + TIME_FORMATTER.format(endTime);"},{"lineNumber":53,"author":{"gitId":"Nahoyhp"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(), dateTime);"},{"lineNumber":54,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":55}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":" * Represents Task that the user wants duke.Duke to remember"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"public abstract class Task {"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"    protected static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"    protected static final DateTimeFormatter SAVE_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"    protected static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"    protected Optional\u003cLocalDate\u003e date;"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"    protected final String taskName;"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"    protected boolean isDone;"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"    protected Task(String name) {"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"        this.taskName \u003d name;"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"        this.isDone \u003d false;"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"        this.date \u003d Optional.empty();"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"    /*"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"     * Return the Name of the Task."},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"     * @return String representing the name of Task."},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"    public String getName() {"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"        return taskName;"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"     * Assign a date to Task."},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"     * @param date Date for the Task is set to."},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":"    public void setDate(LocalDate date) {"},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"        this.date \u003d Optional.of(date);"},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Nahoyhp"},"content":"     * Return the task\u0027s date."},{"lineNumber":49,"author":{"gitId":"Nahoyhp"},"content":"     * @return the date if date is set. Else, return Optional.empty."},{"lineNumber":50,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"Nahoyhp"},"content":"    public Optional\u003cLocalDate\u003e getDate() {"},{"lineNumber":52,"author":{"gitId":"Nahoyhp"},"content":"        return this.date;"},{"lineNumber":53,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":55,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Nahoyhp"},"content":"     * Set the Task as done."},{"lineNumber":57,"author":{"gitId":"Nahoyhp"},"content":"     * @throws DukeException If a done-task is set done again."},{"lineNumber":58,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"Nahoyhp"},"content":"    public void setDone() throws DukeException {"},{"lineNumber":60,"author":{"gitId":"Nahoyhp"},"content":"        if (isDone) {"},{"lineNumber":61,"author":{"gitId":"Nahoyhp"},"content":"            throw new DukeException(\"Task is already done\");"},{"lineNumber":62,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"Nahoyhp"},"content":"        this.isDone \u003d true;"},{"lineNumber":64,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":66,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"Nahoyhp"},"content":"     * Convert Task into the saved format."},{"lineNumber":68,"author":{"gitId":"Nahoyhp"},"content":"     * @return A String that described the Task in saved format."},{"lineNumber":69,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"Nahoyhp"},"content":"    public String toSaveFormat() {"},{"lineNumber":71,"author":{"gitId":"Nahoyhp"},"content":"        String status \u003d isDone ? \"1\" : \"0\";"},{"lineNumber":72,"author":{"gitId":"Nahoyhp"},"content":"        return \" | \" + status + \" | \" + taskName;"},{"lineNumber":73,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":75,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"Nahoyhp"},"content":"     * Convert Task into the display format."},{"lineNumber":77,"author":{"gitId":"Nahoyhp"},"content":"     * @return A String that described the Task in display format."},{"lineNumber":78,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"Nahoyhp"},"content":"    public String toString() {"},{"lineNumber":81,"author":{"gitId":"Nahoyhp"},"content":"        //String icon \u003d isDone ? \"\\u2713\" : \"\\u2718\";"},{"lineNumber":82,"author":{"gitId":"Nahoyhp"},"content":"        String icon \u003d isDone ? \"X\" : \" \";"},{"lineNumber":83,"author":{"gitId":"Nahoyhp"},"content":"        return \"[\" + icon + \"] \" + taskName;"},{"lineNumber":84,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":85}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":" * Represents a ToDo Task."},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"public class ToDo extends Task {"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"    public ToDo(String name) {"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"        super(name);"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"     * Convert Task into the saved format."},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"     * @return A String that described the Task in saved format."},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"    public String toSaveFormat() {"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"        return \"T\" + super.toSaveFormat();"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"     * Convert Task into the display format."},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"     * @return A String that described the Task in display format."},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":30}},{"path":"src/main/java/graphic_interface/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":"package graphic_interface;"},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"import javafx.geometry.Pos;"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.Node;"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":" * An example of a custom control using FXML."},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":" * containing text from the speaker."},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"public class DialogBox extends HBox {"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"    private Label dialog;"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"    private Circle displayPicture;"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"            fxmlLoader.load();"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"            this.setFillHeight(false);"},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"        } catch (IOException e) {"},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"            e.printStackTrace();"},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":"        dialog.setText(text);"},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"        dialog.setMinHeight(Region.USE_PREF_SIZE);"},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"        dialog.setMinWidth(Region.USE_PREF_SIZE);"},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":"        displayPicture.setStroke(Color.AQUAMARINE);"},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"        displayPicture.setFill(new ImagePattern(img));"},{"lineNumber":48,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":50,"author":{"gitId":"Nahoyhp"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Nahoyhp"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":52,"author":{"gitId":"Nahoyhp"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Nahoyhp"},"content":"    private void flip() {"},{"lineNumber":54,"author":{"gitId":"Nahoyhp"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":55,"author":{"gitId":"Nahoyhp"},"content":"        Collections.reverse(tmp);"},{"lineNumber":56,"author":{"gitId":"Nahoyhp"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":57,"author":{"gitId":"Nahoyhp"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":58,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":60,"author":{"gitId":"Nahoyhp"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":61,"author":{"gitId":"Nahoyhp"},"content":"        return new DialogBox(text, img);"},{"lineNumber":62,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":64,"author":{"gitId":"Nahoyhp"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":65,"author":{"gitId":"Nahoyhp"},"content":"        DialogBox db \u003d new DialogBox(text, img);"},{"lineNumber":66,"author":{"gitId":"Nahoyhp"},"content":"        db.setStyle(\"-fx-background-color: #AEF0A8\");"},{"lineNumber":67,"author":{"gitId":"Nahoyhp"},"content":"        db.flip();"},{"lineNumber":68,"author":{"gitId":"Nahoyhp"},"content":"        return db;"},{"lineNumber":69,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":71,"author":{"gitId":"Nahoyhp"},"content":"    public static DialogBox getDukeWarning(String text, Image img) {"},{"lineNumber":72,"author":{"gitId":"Nahoyhp"},"content":"        DialogBox db \u003d new DialogBox(text, img);"},{"lineNumber":73,"author":{"gitId":"Nahoyhp"},"content":"        db.displayPicture.setStroke(Color.RED);"},{"lineNumber":74,"author":{"gitId":"Nahoyhp"},"content":"        db.setStyle(\"-fx-background-color: #eb3434\");"},{"lineNumber":75,"author":{"gitId":"Nahoyhp"},"content":"        db.flip();"},{"lineNumber":76,"author":{"gitId":"Nahoyhp"},"content":"        return db;"},{"lineNumber":77,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":78}},{"path":"src/main/java/graphic_interface/Gui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":"package graphic_interface;"},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.Duke;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import javafx.application.Application;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":" * A GUI for duke.Duke using FXML."},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"public class Gui extends Application {"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"            Duke duke \u003d new Duke(\"data/duke.txt\");"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"            stage.setScene(scene);"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setTerminateFunction(() -\u003e {"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"                stage.close();"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"            });"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().welcomeMessage();"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"            stage.getIcons().add(new Image(\"/images/Duke.png\"));"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"            stage.show();"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":39}},{"path":"src/main/java/graphic_interface/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":"package graphic_interface;"},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.Duke;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.control.Button;"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"import javafx.util.Duration;"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":" * Controller for graphicInterface.MainWindow. Provides the layout for the other controls."},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"    private VBox dialogContainer;"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"    private TextField userInput;"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"    private Button sendButton;"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"    private boolean isFinished;"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"    private Duke duke;"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.jpg\"));"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"    private Image angerImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Anger.jpg\"));"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"    private Runnable closeWindowFunction;"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"    public void initialize() {"},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"        duke \u003d d;"},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":48,"author":{"gitId":"Nahoyhp"},"content":"    public void welcomeMessage() {"},{"lineNumber":49,"author":{"gitId":"Nahoyhp"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.getWelcome(), dukeImage));"},{"lineNumber":50,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":52,"author":{"gitId":"Nahoyhp"},"content":"    public void setTerminateFunction(Runnable function) {"},{"lineNumber":53,"author":{"gitId":"Nahoyhp"},"content":"        this.closeWindowFunction \u003d function;"},{"lineNumber":54,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":56,"author":{"gitId":"Nahoyhp"},"content":"    private void setFinished() {"},{"lineNumber":57,"author":{"gitId":"Nahoyhp"},"content":"        this.isFinished \u003d true;"},{"lineNumber":58,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":60,"author":{"gitId":"Nahoyhp"},"content":"    private void countDown(int secondsLeft) {"},{"lineNumber":61,"author":{"gitId":"Nahoyhp"},"content":"        assert (secondsLeft \u003e 0) : \"Negative seconds left in MainWindow.countDown()\";"},{"lineNumber":62,"author":{"gitId":"Nahoyhp"},"content":"        if (secondsLeft \u003d\u003d 0) {"},{"lineNumber":63,"author":{"gitId":"Nahoyhp"},"content":"            this.closeWindowFunction.run();"},{"lineNumber":64,"author":{"gitId":"Nahoyhp"},"content":"            return;"},{"lineNumber":65,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"Nahoyhp"},"content":"        String countDownMessage \u003d \".....\" + secondsLeft + \".....\";"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        //@@author John_D"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        //Slight Modification from his solution on"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        //https://stackoverflow.com/questions/27334455/how-to-close-a-stage-after-a-certain-amount-of-time-javafx."},{"lineNumber":70,"author":{"gitId":"-"},"content":"        PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(countDownMessage, dukeImage));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        delay.setOnFinished(event -\u003e this.countDown(secondsLeft - 1));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        delay.play();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void showErrorMessage() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"Unexpected Error Occurred\";"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeWarning(errorMessage, angerImage));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void echoUserInput(String input) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        dialogContainer.getChildren().add(DialogBox.getUserDialog(input, userImage));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * appends them to the dialog container. Clears the user input after processing."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private void handleUserInput() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        this.echoUserInput(input);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            String response \u003d duke.processInput(input, () -\u003e this.setFinished());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":98,"author":{"gitId":"-"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            );"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        } catch (DukeException err) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            dialogContainer.getChildren().add(DialogBox.getDukeWarning(Ui.showError(err.getMessage()), angerImage));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        } finally {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            userInput.clear();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            if (this.isFinished) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                this.countDown(3);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Nahoyhp":66,"-":43}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"        \u003cCircle fx:id\u003d\"displayPicture\" pickOnBounds\u003d\"true\" radius\u003d\"27.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Nahoyhp":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"596.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\" fx:controller\u003d\"graphic_interface.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"550.0\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"319.0\" AnchorPane.bottomAnchor\u003d\"4.666666666666629\"/\u003e"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"550.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"550.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"554.0\" prefWidth\u003d\"388.0\"/\u003e"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Nahoyhp":19}},{"path":"test/main/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package main.java.duke;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import duke.Parser;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"class ParserTest {"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"    public void interpretInput_valid_success() {"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"        String test1 \u003d Arrays.toString(parser.splitIntoComponents(\"todo homework\"));"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"        assertEquals(test1,\"[todo, homework]\");"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"        String test2 \u003d Arrays.toString(parser.splitIntoComponents(\"event test2 /at 2020-09-08 18:00 20:00\"));"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"        assertEquals(test2,\"[event, test2 , 2020-09-08 18:00 20:00]\");"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"        String test3 \u003d Arrays.toString(parser.splitIntoComponents(\"deadline assignment 3 /by 2020-08-25 23:59\"));"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"        assertEquals(test3,\"[deadline, assignment 3 , 2020-08-25 23:59]\");"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":21}},{"path":"test/main/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package main.java.duke;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"class StorageTest {"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"    void saveFile_fileNotFound_fail() {"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"            Storage storage \u003d new Storage(\"test/main/java/duke/badFormatFile.txt\");"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"            String[] data \u003d {\"Hello World\"};"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"            storage.saveFile(data);"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(err.getMessage(), \"File Path is a directory -OR- Can\u0027t create file at location\");"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"    void loadFile_success() {"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"            Storage storage \u003d new Storage(\"data/duke.txt\");"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"            storage.loadFile();"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"            System.out.println(err.getMessage());"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"            fail();"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"    void loadFile_corruptedFile_fail() {"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"            Storage storage \u003d new Storage(\"test/main/java/duke/badFormatFile.txt\");"},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"            storage.loadFile();"},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(err.getMessage(), \"Error: Saved File is badly corrupted\");"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":44}},{"path":"test/main/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package main.java.duke;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"class TaskListTest {"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"    void addTask_success() {"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"            TaskList tk \u003d new TaskList();"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"            tk.addDeadLine(\"Assignment 1\", \"2020-09-08 06:00\");"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"            tk.addEvent(\"Assignment 1\", \"2020-09-08 06:00 08:00\");"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"            tk.addTodo(\"Assignment 1\");"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"            String expectedAnswer \u003d \"1.[D][ ] Assignment 1 (by: Sep 08 2020 06:00)\\n\" +"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"                    \"2.[E][ ] Assignment 1 (at: Sep 08 2020 06:00 - 08:00)\\n\" +"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"                    \"3.[T][ ] Assignment 1\";"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(tk.toString(), expectedAnswer);"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"            fail();"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"    void addTask_invalidArgument() {"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"            TaskList tk \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"            tk.addDeadLine(\"Assignment 1\", \"2020-09-08 06:00\");"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(err.getMessage(), \"Error: Please key in as: \\n \" +"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"                    \"event [title] /by YYYY-MM-DD HH:MM\");"},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"    void doTask_success() {"},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"            TaskList tk \u003d new TaskList();"},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"            tk.addDeadLine(\"Assignment 1\", \"2020-09-08 06:00\");"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"            tk.addEvent(\"Assignment 1\", \"2020-09-08 06:00 08:00\");"},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":"            tk.addTodo(\"Assignment 1\");"},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"            tk.doTask(1);"},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"            tk.doTask(3);"},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":"            String expectedAnswer \u003d \"1.[D][X] Assignment 1 (by: Sep 08 2020 06:00)\\n\" +"},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"                    \"2.[E][ ] Assignment 1 (at: Sep 08 2020 06:00 - 08:00)\\n\" +"},{"lineNumber":48,"author":{"gitId":"Nahoyhp"},"content":"                    \"3.[T][X] Assignment 1\";"},{"lineNumber":49,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(tk.toString(), expectedAnswer);"},{"lineNumber":50,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":51,"author":{"gitId":"Nahoyhp"},"content":"            fail();"},{"lineNumber":52,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":55,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"Nahoyhp"},"content":"    void doTask_setDoneTaskDone_fail() {"},{"lineNumber":57,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"Nahoyhp"},"content":"            TaskList tk \u003d new TaskList();"},{"lineNumber":59,"author":{"gitId":"Nahoyhp"},"content":"            tk.addDeadLine(\"Assignment 1\", \"2020-09-08 06:00\");"},{"lineNumber":60,"author":{"gitId":"Nahoyhp"},"content":"            tk.doTask(1);"},{"lineNumber":61,"author":{"gitId":"Nahoyhp"},"content":"            tk.doTask(1);"},{"lineNumber":62,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":63,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(err.getMessage(), \"Task is already done\");"},{"lineNumber":64,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":67,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"Nahoyhp"},"content":"    void toSaveFormat() {"},{"lineNumber":69,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"Nahoyhp"},"content":"            TaskList tk \u003d new TaskList();"},{"lineNumber":71,"author":{"gitId":"Nahoyhp"},"content":"            tk.addDeadLine(\"return book\", \"2020-06-06 23:59\");"},{"lineNumber":72,"author":{"gitId":"Nahoyhp"},"content":"            tk.addEvent(\"project meeting\", \"2020-08-06 14:00 16:00\");"},{"lineNumber":73,"author":{"gitId":"Nahoyhp"},"content":"            tk.addTodo(\"read book\");"},{"lineNumber":74,"author":{"gitId":"Nahoyhp"},"content":"            tk.doTask(1);"},{"lineNumber":75,"author":{"gitId":"Nahoyhp"},"content":"            tk.doTask(3);"},{"lineNumber":76,"author":{"gitId":"Nahoyhp"},"content":"            String expectedAnswer \u003d \"D | 1 | return book | 2020-06-06 23:59\\n\" +"},{"lineNumber":77,"author":{"gitId":"Nahoyhp"},"content":"                    \"E | 0 | project meeting | 2020-08-06 14:00 16:00\\n\" +"},{"lineNumber":78,"author":{"gitId":"Nahoyhp"},"content":"                    \"T | 1 | read book\\n\";"},{"lineNumber":79,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(tk.toSaveFormat(), expectedAnswer);"},{"lineNumber":80,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":81,"author":{"gitId":"Nahoyhp"},"content":"            fail();"},{"lineNumber":82,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":85,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"Nahoyhp"},"content":"    void deleteTask() {"},{"lineNumber":87,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":88,"author":{"gitId":"Nahoyhp"},"content":"            TaskList tk \u003d new TaskList();"},{"lineNumber":89,"author":{"gitId":"Nahoyhp"},"content":"            tk.addDeadLine(\"Assignment 1\", \"2020-09-08 06:00\");"},{"lineNumber":90,"author":{"gitId":"Nahoyhp"},"content":"            tk.addEvent(\"Assignment 2\", \"2020-09-08 06:00 08:00\");"},{"lineNumber":91,"author":{"gitId":"Nahoyhp"},"content":"            tk.addTodo(\"Assignment 1\");"},{"lineNumber":92,"author":{"gitId":"Nahoyhp"},"content":"            tk.doTask(1);"},{"lineNumber":93,"author":{"gitId":"Nahoyhp"},"content":"            tk.doTask(3);"},{"lineNumber":94,"author":{"gitId":"Nahoyhp"},"content":"            tk.deleteTask(3);"},{"lineNumber":95,"author":{"gitId":"Nahoyhp"},"content":"            System.out.println(tk.toString());"},{"lineNumber":96,"author":{"gitId":"Nahoyhp"},"content":"            String expectedAnswer \u003d \"1.[D][X] Assignment 1 (by: Sep 08 2020 06:00)\\n\" +"},{"lineNumber":97,"author":{"gitId":"Nahoyhp"},"content":"                    \"2.[E][ ] Assignment 2 (at: Sep 08 2020 06:00 - 08:00)\";"},{"lineNumber":98,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(tk.toString(), expectedAnswer);"},{"lineNumber":99,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":100,"author":{"gitId":"Nahoyhp"},"content":"            fail();"},{"lineNumber":101,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":103}},{"path":"test/main/java/duke/badFormatFile.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"Hello World"}],"authorContributionMap":{"Nahoyhp":1}},{"path":"test/main/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package main.java.duke.task;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"class DeadlineTest {"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"    public void constructor_invalidInput_fail() {"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"            new Deadline(\"Assignment 1\",\"2020-09-08 0600\");"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(err.getMessage(), \"Error: Please key in as: \\n \" +"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"                    \"event [title] /by YYYY-MM-DD HH:MM\");"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"    public void toString_newlyCreated_success() {"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"            //test 1"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(new Deadline(\"Assignment 1\", \"2020-09-08 06:00\").toString(),"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"                    \"[D][ ] Assignment 1 (by: Sep 08 2020 06:00)\");"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"            //test 2"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(new Deadline(\"CS2101 OP1\", \"2020-08-25 14:35\").toString(),"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"                    \"[D][ ] CS2101 OP1 (by: Aug 25 2020 14:35)\");"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"            fail();"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"    public void toString_markDone_success() {"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"            Deadline test1 \u003d new Deadline(\"Assignment 1\", \"2020-09-08 06:00\");"},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"            Deadline test2 \u003d new Deadline(\"CS2101 OP1\", \"2020-08-25 14:35\");"},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"            Deadline test3 \u003d new Deadline(\"NOC Application\", \"2020-08-28 23:59\");"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"            test1.setDone();"},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":"            test2.setDone();"},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"            test3.setDone();"},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test1.toString(), \"[D][X] Assignment 1 (by: Sep 08 2020 06:00)\");"},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test2.toString(), \"[D][X] CS2101 OP1 (by: Aug 25 2020 14:35)\");"},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test3.toString(), \"[D][X] NOC Application (by: Aug 28 2020 23:59)\");"},{"lineNumber":48,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":49,"author":{"gitId":"Nahoyhp"},"content":"            fail();"},{"lineNumber":50,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":53,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"Nahoyhp"},"content":"    public void setDone_doubleSetDone_fail() {"},{"lineNumber":55,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"Nahoyhp"},"content":"            Deadline test1 \u003d new Deadline(\"Assignment 1\", \"2020-09-08 06:00\");"},{"lineNumber":57,"author":{"gitId":"Nahoyhp"},"content":"            test1.setDone();"},{"lineNumber":58,"author":{"gitId":"Nahoyhp"},"content":"            test1.setDone();"},{"lineNumber":59,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":60,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(err.getMessage(), \"Task is already done\");"},{"lineNumber":61,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":64,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"Nahoyhp"},"content":"    public void toSaveFormat() {"},{"lineNumber":66,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"Nahoyhp"},"content":"            Deadline test1 \u003d new Deadline(\"Assignment 1\", \"2020-09-08 06:00\");"},{"lineNumber":68,"author":{"gitId":"Nahoyhp"},"content":"            Deadline test2 \u003d new Deadline(\"CS2101 OP1\", \"2020-08-25 14:35\");"},{"lineNumber":69,"author":{"gitId":"Nahoyhp"},"content":"            Deadline test3 \u003d new Deadline(\"NOC Application\", \"2020-08-28 23:59\");"},{"lineNumber":70,"author":{"gitId":"Nahoyhp"},"content":"            test1.setDone();"},{"lineNumber":71,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test1.toSaveFormat(), \"D | 1 | Assignment 1 | 2020-09-08 06:00\");"},{"lineNumber":72,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test2.toSaveFormat(), \"D | 0 | CS2101 OP1 | 2020-08-25 14:35\");"},{"lineNumber":73,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test3.toSaveFormat(), \"D | 0 | NOC Application | 2020-08-28 23:59\");"},{"lineNumber":74,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":75,"author":{"gitId":"Nahoyhp"},"content":"            fail();"},{"lineNumber":76,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":79,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":79}},{"path":"test/main/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package main.java.duke.task;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"class EventTest {"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"    public void constructor_invalidInput_fail() {"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"            new Event(\"Assignment 1\",\"2020-09-08 0600 08:00\");"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(err.getMessage(), \"Error: Please key in as: \\n\" +"},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"                    \"event [title] /at YYYY-MM-DD [startTime] [endTime] where start and end time is in HH:MM \");"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"    public void toString_newlyCreated_success() {"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"            //test 1"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(new Event(\"Assignment 1\", \"2020-09-08 06:00 08:00\").toString(),"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"                    \"[E][ ] Assignment 1 (at: Sep 08 2020 06:00 - 08:00)\");"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"            //test 2"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(new Event(\"CS2101 OP1\", \"2020-08-25 14:35 16:35\").toString(),"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"                    \"[E][ ] CS2101 OP1 (at: Aug 25 2020 14:35 - 16:35)\");"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"            fail();"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"    public void toString_markDone_success() {"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"            Event test1 \u003d new Event(\"Assignment 1\", \"2020-09-08 06:00 08:00\");"},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"            Event test2 \u003d new Event(\"CS2101 OP1\", \"2020-08-25 14:35 16:35\");"},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"            Event test3 \u003d new Event(\"NOC Briefing\", \"2020-08-28 16:00 17:00\");"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"            test1.setDone();"},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":"            test2.setDone();"},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":"            test3.setDone();"},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test1.toString(), \"[E][X] Assignment 1 (at: Sep 08 2020 06:00 - 08:00)\");"},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test2.toString(), \"[E][X] CS2101 OP1 (at: Aug 25 2020 14:35 - 16:35)\");"},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test3.toString(), \"[E][X] NOC Briefing (at: Aug 28 2020 16:00 - 17:00)\");"},{"lineNumber":48,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":49,"author":{"gitId":"Nahoyhp"},"content":"            fail();"},{"lineNumber":50,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":53,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"Nahoyhp"},"content":"    public void setDone_doubleSetDone_fail() {"},{"lineNumber":55,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"Nahoyhp"},"content":"            Event test1 \u003d new Event(\"Assignment 1\", \"2020-09-08 06:00 08:00\");"},{"lineNumber":57,"author":{"gitId":"Nahoyhp"},"content":"            test1.setDone();"},{"lineNumber":58,"author":{"gitId":"Nahoyhp"},"content":"            test1.setDone();"},{"lineNumber":59,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":60,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(err.getMessage(), \"Task is already done\");"},{"lineNumber":61,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":64,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"Nahoyhp"},"content":"    public void toSaveFormat() {"},{"lineNumber":66,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"Nahoyhp"},"content":"            Event test1 \u003d new Event(\"Assignment 1\", \"2020-09-08 06:00 08:00\");"},{"lineNumber":68,"author":{"gitId":"Nahoyhp"},"content":"            Event test2 \u003d new Event(\"CS2101 OP1\", \"2020-08-25 14:35 16:35\");"},{"lineNumber":69,"author":{"gitId":"Nahoyhp"},"content":"            Event test3 \u003d new Event(\"NOC Briefing\", \"2020-08-28 16:00 17:00\");"},{"lineNumber":70,"author":{"gitId":"Nahoyhp"},"content":"            test1.setDone();"},{"lineNumber":71,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test1.toSaveFormat(), \"E | 1 | Assignment 1 | 2020-09-08 06:00 08:00\");"},{"lineNumber":72,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test2.toSaveFormat(), \"E | 0 | CS2101 OP1 | 2020-08-25 14:35 16:35\");"},{"lineNumber":73,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test3.toSaveFormat(), \"E | 0 | NOC Briefing | 2020-08-28 16:00 17:00\");"},{"lineNumber":74,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":75,"author":{"gitId":"Nahoyhp"},"content":"            fail();"},{"lineNumber":76,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":79,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":79}},{"path":"test/main/java/duke/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nahoyhp"},"content":"package main.java.duke.task;"},{"lineNumber":2,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":3,"author":{"gitId":"Nahoyhp"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"Nahoyhp"},"content":"import duke.task.ToDo;"},{"lineNumber":5,"author":{"gitId":"Nahoyhp"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Nahoyhp"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"Nahoyhp"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":8,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":9,"author":{"gitId":"Nahoyhp"},"content":"class ToDoTest {"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Nahoyhp"},"content":"    public void toString_newlyCreated_success() {"},{"lineNumber":12,"author":{"gitId":"Nahoyhp"},"content":"        assertEquals(new ToDo(\"Assignment 1\").toString(), \"[T][ ] Assignment 1\");"},{"lineNumber":13,"author":{"gitId":"Nahoyhp"},"content":"        assertEquals(new ToDo(\"CS2101 OP1\").toString(), \"[T][ ] CS2101 OP1\");"},{"lineNumber":14,"author":{"gitId":"Nahoyhp"},"content":"        assertEquals(new ToDo(\"Get a CCA\").toString(), \"[T][ ] Get a CCA\");"},{"lineNumber":15,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":17,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"    public void toString_markDone_success() {"},{"lineNumber":19,"author":{"gitId":"Nahoyhp"},"content":"        ToDo test1 \u003d new ToDo(\"Assignment 1\");"},{"lineNumber":20,"author":{"gitId":"Nahoyhp"},"content":"        ToDo test2 \u003d new ToDo(\"CS2101 OP1\");"},{"lineNumber":21,"author":{"gitId":"Nahoyhp"},"content":"        ToDo test3 \u003d new ToDo(\"Get a CCA\");"},{"lineNumber":22,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"Nahoyhp"},"content":"            test1.setDone();"},{"lineNumber":24,"author":{"gitId":"Nahoyhp"},"content":"            test2.setDone();"},{"lineNumber":25,"author":{"gitId":"Nahoyhp"},"content":"            test3.setDone();"},{"lineNumber":26,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test1.toString(), \"[T][X] Assignment 1\");"},{"lineNumber":27,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test2.toString(), \"[T][X] CS2101 OP1\");"},{"lineNumber":28,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test3.toString(), \"[T][X] Get a CCA\");"},{"lineNumber":29,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":30,"author":{"gitId":"Nahoyhp"},"content":"            fail();"},{"lineNumber":31,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":34,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"Nahoyhp"},"content":"    public void setDone_doubleSetDone_fail() {"},{"lineNumber":36,"author":{"gitId":"Nahoyhp"},"content":"        ToDo test1 \u003d new ToDo(\"Assignment 1\");"},{"lineNumber":37,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"Nahoyhp"},"content":"            test1.setDone();"},{"lineNumber":39,"author":{"gitId":"Nahoyhp"},"content":"            test1.setDone();"},{"lineNumber":40,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":41,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(err.getMessage(), \"Task is already done\");"},{"lineNumber":42,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Nahoyhp"},"content":""},{"lineNumber":45,"author":{"gitId":"Nahoyhp"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"Nahoyhp"},"content":"    public void toSaveFormat() {"},{"lineNumber":47,"author":{"gitId":"Nahoyhp"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"Nahoyhp"},"content":"            ToDo test1 \u003d new ToDo(\"Assignment 1\");"},{"lineNumber":49,"author":{"gitId":"Nahoyhp"},"content":"            ToDo test2 \u003d new ToDo(\"CS2101 OP1\");"},{"lineNumber":50,"author":{"gitId":"Nahoyhp"},"content":"            ToDo test3 \u003d new ToDo(\"Get a CCA\");"},{"lineNumber":51,"author":{"gitId":"Nahoyhp"},"content":"            test1.setDone();"},{"lineNumber":52,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test1.toSaveFormat(), \"T | 1 | Assignment 1\");"},{"lineNumber":53,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test2.toSaveFormat(), \"T | 0 | CS2101 OP1\");"},{"lineNumber":54,"author":{"gitId":"Nahoyhp"},"content":"            assertEquals(test3.toSaveFormat(), \"T | 0 | Get a CCA\");"},{"lineNumber":55,"author":{"gitId":"Nahoyhp"},"content":"        } catch (DukeException err) {"},{"lineNumber":56,"author":{"gitId":"Nahoyhp"},"content":"            fail();"},{"lineNumber":57,"author":{"gitId":"Nahoyhp"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Nahoyhp"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Nahoyhp"},"content":"}"}],"authorContributionMap":{"Nahoyhp":59}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"Nahoyhp"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\duke.Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"Nahoyhp"},"content":"java -classpath ..\\bin duke\\duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"Nahoyhp":2,"-":19}}]
