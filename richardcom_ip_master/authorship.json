[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "## User Guide"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "[User Guide](http://richardcom.github.io/ip/)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "richardcom": 5,
      "-": 27
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "richardcom": 37,
      "-": 42
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "# Table of Contents"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "1. [Features](#Features)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "2. [Usage](#Usage)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "## Features \u003ca name\u003d\"Features\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Feature 1 Add To Do tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Add a todo task into the task manager."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Feature 2 Add Event tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Add a event task with a starting date and time into the task manager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Feature 3 Add Deadline tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Add a deadline task with a deadline date and time into the task manager."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Feature 4 Mark a task as Done"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Finish a task and change the status icon to a check."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Feature 5 Delete a task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Delete a certain task from the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Feature 6 Check tasks by time"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Find the tasks that matches the date and time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Feature 7 Find tasks by keyword"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Find the tasks that match the input keyword."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Feature 8 Update task information"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Update the details of a specific task according to index."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### Feature 9 Exit the program"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Exit the application and save the changes into the task list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "## Usage \u003ca name\u003d\"Usage\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### `todo` - Add to do tasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Add a todo task into the task manager. "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`todo read books`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`[T][✘] read books`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### `event` - Add event tasks"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Add a event task with a starting date and time into the task manager."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`event work hard /at 2020-12-12 1221`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`[E][✘] work hard (at: 12 12 2020 12 : 21)`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### `deadline` - Add deadline tasks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Add a deadline task with a starting date and time into the task manager."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`deadline work hard /by 2020-12-12 1221`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`[D][✘] work hard (by: 12 12 2020 12 : 21)`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### `done` - Mark tasks as done"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Mark tasks as done."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "` Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         [T][✓] read books`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### `delete` - Delete tasks from the list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Mark tasks as done."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`delete 1`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "` Nice! I\u0027ve removed this task:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "         [T][✓] read books"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  Now you have 2 tasks in the list.`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "  "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### `check` - find tasks that match the date and time"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Find the tasks that matches the date and time."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": " Example of usage: "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": " `check 2020-12-12 1221`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`[E][✘] work hard (at: 12 12 2020 12 : 21)`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### `find` - find tasks that match the keyword"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Find the tasks that matches the keyword."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": " Example of usage: "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "richardcom"
        },
        "content": " `find work hard`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "richardcom"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`[E][✘] work hard (at: 12 12 2020 12 : 21)`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### `update` - find tasks that match the keyword"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Find the tasks that matches the keyword."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": " Example of usage: "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "richardcom"
        },
        "content": " `update 2 todo work hard`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "richardcom"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`[T][✘] work hard`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "richardcom"
        },
        "content": "   "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "richardcom"
        },
        "content": "### `bye` - find tasks that match the keyword"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "richardcom"
        },
        "content": "Exit the application and save the changes into the task list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "richardcom"
        },
        "content": " Example of usage: "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "richardcom"
        },
        "content": " `bye`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "richardcom"
        },
        "content": " Expected outcome:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "richardcom"
        },
        "content": " "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "richardcom"
        },
        "content": "`Bye. Hope to see you again soon!`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "richardcom": 142,
      "-": 18
    }
  },
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "T | 1 | read books"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "D | 0 | review for exam | 2020-12-09T11:59"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "E | 0 | exam | 2020-02-10T15:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "T | 0 | cycling"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "T | 0 | return books"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "T | 0 | read books"
      }
    ],
    "authorContributionMap": {
      "richardcom": 6
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.commands.CommandExecution;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.commands.EnumCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents the Duke application which contains the main method in the class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static final String filePath \u003d \"duke.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private TaskList results;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets up the user interface and load list from file storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param filePath the path of the file storage of list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            results \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            results \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            List\u003cTask\u003e taskList \u003d storage.readFromFile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            taskList.stream().forEach(task -\u003e results.add(task));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            results \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs a Duke object without taking in arguments."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The main method of the application."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param args the arguments of the main method."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        new Duke(filePath).run();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Scans the user input and responds to command inputs."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        ui.greetings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            String instruction \u003d sc.nextLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                EnumCommand enumCommand \u003d Parser.parseCommand(instruction);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String commandResult \u003d CommandExecution.executeCommand(enumCommand, instruction, results);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                storage.storeToFile(results);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a string representing the response by the program after user input."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param input a string of input by the user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representing the response by the program after user input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            EnumCommand enumCommand \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            String commandResult \u003d CommandExecution.executeCommand(enumCommand, input, results);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            storage.storeToFile(results);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return ui.showError(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 94,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * The main method to launch the GUI."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param args arguments for the main method."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 18
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Duke duke \u003d new Duke(\"duke.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Starts the GUI of Duke project."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param stage the stage that sets the scene."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            stage.setTitle(\"Richard Duke 700\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 38
    }
  },
  {
    "path": "src/main/java/duke/commands/CheckCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static duke.parser.Parser.parseDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents Check command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class CheckCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Executes the Check command from user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param instruction the string of user input instruction."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tasks the tasklist that stores all the tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a task list representing the tasks found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException when the instruction format is incorrect."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static TaskList executeCommand(String instruction, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (instruction.substring(5).strip().equals(\"\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The \\\"check\\\" command is not entered correctly\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String dateTimeToCheck \u003d instruction.substring(5).strip();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        LocalDate dateToCheck \u003d parseDate(dateTimeToCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        TaskList occurings \u003d searchTasksByTime(dateToCheck, tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return occurings;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a TaskList of tasks that meet the input date requirement."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param localDate the date from input that of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tasks the TaskList of all tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the TaskList of tasks that meet the input date requirement."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static TaskList searchTasksByTime(LocalDate localDate, TaskList tasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        TaskList occurrings \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            boolean isMatch \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Task temp \u003d tasks.get(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (temp instanceof Deadline) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                Deadline deadline \u003d (Deadline) temp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (deadline.getDate().equals(localDate)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    isMatch \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (temp instanceof Event) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                Event deadline \u003d (Event) temp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (deadline.getDate().equals(localDate)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    isMatch \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (isMatch) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                occurrings.add(temp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return occurrings;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 70
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandExecution.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class representing command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class CommandExecution {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Executes the commands from the input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param enumCommand the enumeration type of the input command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param instruction the string of input command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tasks       the TaskList storing the list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representing the command output."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException if the description or the datetime format of the task is illegal."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String executeCommand(EnumCommand enumCommand, String instruction, TaskList tasks)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        switch (enumCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            ToDoCommand.executeCommand(instruction, tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return ui.addTaskAlert(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            DeadLineCommand.executeCommand(instruction, tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return ui.addTaskAlert(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            EventCommand.executeCommand(instruction, tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return ui.addTaskAlert(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return ui.farewell();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Task tempDone \u003d DoneCommand.executeCommand(instruction, tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return ui.doneAlert(tempDone);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Task tempDelete \u003d DeleteCommand.executeCommand(instruction, tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return ui.deleteTaskAlert(tempDelete, tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return ui.showList(tasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case CHECK:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            TaskList occurings \u003d CheckCommand.executeCommand(instruction, tasks);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return ui.showList(occurings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            TaskList matches \u003d FindCommand.executeCommand(instruction, tasks);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return ui.findTaskAlert(matches);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        case UPDATE:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Task tempUpdate \u003d UpdateCommand.executeCommand(instruction, tasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return ui.updateTaskAlert(tempUpdate, tasks);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 73
    }
  },
  {
    "path": "src/main/java/duke/commands/DeadLineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static duke.parser.Parser.parseDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents DeadLine command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DeadLineCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Executes the DeadLine command from user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param instruction the string of user input instruction."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tasks the tasklist that stores all the tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException when the instruction format is incorrect."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static void executeCommand(String instruction, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (instruction.substring(8).strip().equals(\"\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String[] tempDeadline \u003d instruction.substring(8).strip().split(\"/by\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (tempDeadline.length \u003c 2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The date and time of the deadline cannot be empty.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String deadlineDescription \u003d tempDeadline[0].strip();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String deadlineDateTime \u003d tempDeadline[1].strip();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        LocalDateTime deadlineDate \u003d parseDateTime(deadlineDateTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        tasks.add(new Deadline(deadlineDescription, deadlineDate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 42
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents Delete command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DeleteCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Executes the delete command from user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param instruction the string of user input instruction."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tasks the tasklist that stores all the tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a task object representing the task to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException when the instruction format is incorrect."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static Task executeCommand(String instruction, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (instruction.substring(6).strip().equals(\"\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The description of a delete message cannot be empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Integer indexDelete \u003d Integer.valueOf(instruction.substring(7).strip()) - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (indexDelete + 1 \u003e tasks.getSize()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The index of the task to be deleted is out of range.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Task tempDelete \u003d tasks.get(indexDelete);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        tasks.remove((int) indexDelete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return tempDelete;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 33
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents Done command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DoneCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Executes the done command from user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param instruction the string of user input instruction."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tasks the tasklist that stores all the tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a task object representing the task to be done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException when the instruction format is incorrect."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static Task executeCommand(String instruction, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (instruction.substring(4).strip().equals(\"\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The description of a done message cannot be empty.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Integer indexDone \u003d Integer.valueOf(instruction.substring(5).strip()) - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (indexDone + 1 \u003e tasks.getSize()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The index of the task to be done is out of range.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Task tempDone \u003d tasks.get(indexDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        tempDone.markAsDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        tasks.set(indexDone, tempDone);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return tempDone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 34
    }
  },
  {
    "path": "src/main/java/duke/commands/EnumCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents enumeration of commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public enum EnumCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    DEADLINE, EVENT, TODO, BYE, DONE, DELETE, LIST, CHECK, FIND, UPDATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 8
    }
  },
  {
    "path": "src/main/java/duke/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static duke.parser.Parser.parseDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents Event command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class EventCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Executes the Event command from user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param instruction the string of user input instruction."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tasks the tasklist that stores all the tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException when the instruction format is incorrect."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static void executeCommand(String instruction, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (instruction.substring(5).strip().equals(\"\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String[] tempEventSplits \u003d instruction.substring(5).strip().split(\"/at\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (tempEventSplits.length \u003c 2) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The date and time of the event cannot be empty.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String eventDescription \u003d tempEventSplits[0].strip(); // clear the white spaces at the front and at the back"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String eventDateTime \u003d tempEventSplits[1].strip(); // clear the white spaces at the front and at the back"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        LocalDateTime eventDate \u003d parseDateTime(eventDateTime);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        tasks.add(new Event(eventDescription, eventDate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 38
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents find command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class FindCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Executes the find command from user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param instruction the string of user input instruction."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tasks the tasklist that stores all the tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a task list representing the tasks found."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException when the instruction format is incorrect."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static TaskList executeCommand(String instruction, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (instruction.substring(4).strip().equals(\"\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The \\\"find\\\" command is not entered correctly\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String keyword \u003d instruction.substring(4).strip();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        TaskList matches \u003d findTaskByKeyword(keyword, tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return matches;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Finds the list of tasks that match the keyword."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param keyword the string of keyword that the user wants to search for."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tasks the current list of tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the tasklist of tasks that matches the keyword in the input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static TaskList findTaskByKeyword(String keyword, TaskList tasks) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        TaskList matches \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            boolean isMatch \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Task temp \u003d tasks.get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (temp.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                isMatch \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (isMatch) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                matches.add(temp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return matches;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 54
    }
  },
  {
    "path": "src/main/java/duke/commands/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents ToDo command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class ToDoCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Executes the ToDo command from user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param instruction the string of user input instruction."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tasks the tasklist that stores all the tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException when the instruction format is incorrect."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static void executeCommand(String instruction, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (instruction.substring(4).strip().equals(\"\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        tasks.add(new ToDo(instruction.substring(4).strip()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 25
    }
  },
  {
    "path": "src/main/java/duke/commands/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static duke.parser.Parser.parseDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents Update command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class UpdateCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Executes the Update command from user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param instruction the string of user input instruction."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tasks the tasklist that stores all the tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a task object representing the task to be Updated."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException when the instruction format is incorrect."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static Task executeCommand(String instruction, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (instruction.substring(6).strip().equals(\"\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The description of a changing information cannot be empty.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Integer indexDelete \u003d Integer.valueOf(instruction.substring(7, 8).strip()) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (indexDelete + 1 \u003e tasks.getSize()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The index of the task to be deleted is out of range.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Task tempDelete \u003d tasks.get(indexDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String newDateTime \u003d instruction.substring(9).strip();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        LocalDateTime deadlineDate \u003d parseDateTime(newDateTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (tempDelete instanceof Deadline) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Deadline tempTask \u003d (Deadline) tempDelete;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            tempTask.setBy(deadlineDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            tasks.set(indexDelete, tempTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (tempDelete instanceof Event) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Event tempTask \u003d (Event) tempDelete;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            tempTask.setStartTime(deadlineDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            tasks.set(indexDelete, tempTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"Not the correct type of task to change new date.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return tempDelete;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 52
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * An exception to be thrown in the Duke application when illegal commands or exceptions are met."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs the DukeException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param message The error message to be ."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Represents the exception message in the personalized format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string that represents the exception message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return \"☹ OOPS!!! \" + this.getMessage() + \"\\n\" + \"\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 25
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.commands.EnumCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents a parser which parses commands and dateTime"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs a parser that takes in no parameter."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Converts user input to command enumerations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param instruction the string that represents user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return enumeration of commands that matches the input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException if the input format is illegal"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static EnumCommand parseCommand(String instruction) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Integer indexOfSplit \u003d instruction.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        EnumCommand enumCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (indexOfSplit \u003d\u003d -1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            command \u003d instruction;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            command \u003d instruction.substring(0, indexOfSplit);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assert command.length() \u003e 0 : \"The parsing command should not be empty\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.BYE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.DONE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.DELETE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.LIST;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.TODO;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.DEADLINE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.EVENT;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"check\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.CHECK;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"find\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.FIND;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (command.equals(\"update\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            enumCommand \u003d EnumCommand.UPDATE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means, there is a typo  :-(\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return enumCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Converts the user input of date to the correct date format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param date the input date string from user."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return LocalDate Object that matches the user input date."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException if the user input format is illegal."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DateTimeException if the date is an illegal date."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static LocalDate parseDate(String date) throws DukeException, DateTimeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Boolean isFormatValid;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Boolean isYearValid;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Boolean isMonthValid;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Boolean isDayValid;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String[] dateSplit \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        isFormatValid \u003d dateSplit.length \u003d\u003d 3;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        isYearValid \u003d dateSplit[0].strip().length() \u003d\u003d 4;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        isMonthValid \u003d dateSplit[1].strip().length() \u003d\u003d 2;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        isDayValid \u003d dateSplit[2].strip().length() \u003d\u003d 2;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (!isFormatValid || !isYearValid || !isMonthValid || !isDayValid) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The input date format is incorrect\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Converts the user input of dateTime to the correct dateTime format."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param dateTime the input dateTime string from user."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a LocalDateTime object that matches the input string."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException if the user input format is illegal."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DateTimeException if the date is an illegal date."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTime) throws DukeException, DateTimeException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String[] dateTimeSplit \u003d dateTime.strip().split(\" \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (dateTimeSplit.length !\u003d 2) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The format of the input date and time is incorrect\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String date \u003d dateTimeSplit[0].strip();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        LocalDate localDate \u003d parseDate(date);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String time \u003d dateTimeSplit[1].strip();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (time.length() !\u003d 4) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"The input time format is incorrect\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        LocalTime localTime \u003d LocalTime.of(Integer.parseInt(time.substring(0, 2)),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                Integer.parseInt(time.substring(2, 4)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.of(localDate, localTime);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 127
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents the file storage of list of task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs the file Storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param filePath the file path to store the Task List."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a list of tasks that is read from the file storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a list of tasks that is read from the file storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException if the file is not read correctly."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public List\u003cTask\u003e readFromFile() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String[] instructions \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String type \u003d instructions[0].strip();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                tasks.addAll(processDataIntoList(type, instructions));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assert tasks.size() \u003e\u003d 0 : \"The size of tasks should be greater or equal to 0\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Stores the TaskList to the file storage system."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tasks the TaskList of tasks from the application to be stored in the file storage."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException when the file is not written correctly."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void storeToFile(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            String breaker \u003d \" | \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                Task taskToStore \u003d tasks.get(i);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String state \u003d \"0\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (taskToStore.isDone()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    state \u003d \"1\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                if (taskToStore instanceof ToDo) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    fileWriter.write(\"T\" + breaker + state + breaker + taskToStore.getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                } else if (taskToStore instanceof Deadline) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Deadline deadline \u003d (Deadline) taskToStore;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    fileWriter.write(\"D\" + breaker + state + breaker + deadline.getDescription()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                            + breaker + deadline.getBy() + \"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                } else if (taskToStore instanceof Event) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    Event event \u003d (Event) taskToStore;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                    fileWriter.write(\"E\" + breaker + state + breaker + event.getDescription()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                            + breaker + event.getStartTime() + \"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Processes the data read from file into correct objects and stores into a list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param type the type of the task read"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param instructions the string array of instruction splits"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a list of tasks that is read from the file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @throws DukeException when the data is not processed correctly from the file"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public List\u003cTask\u003e processDataIntoList(String type, String[] instructions) throws DukeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Task taskToRead;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        int num \u003d instructions.length;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (num !\u003d 3) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new DukeException(\"The data format of the file is incorrect\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            taskToRead \u003d new ToDo(instructions[2].strip());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (num !\u003d 4) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new DukeException(\"The data format of the file is incorrect\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            LocalDateTime deadlineDateTime \u003d LocalDateTime.parse(instructions[3].strip());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            taskToRead \u003d new Deadline(instructions[2].strip(), deadlineDateTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            if (num !\u003d 4) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                throw new DukeException(\"The data format of the file is incorrect\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            LocalDateTime eventDateTime \u003d LocalDateTime.parse(instructions[3].strip());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            taskToRead \u003d new Event(instructions[2].strip(), eventDateTime);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            throw new DukeException(\"Data is not recognized while reading from file.\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (instructions[1].strip().equals(\"1\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            taskToRead.markAsDone();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        tasks.add(taskToRead);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "richardcom": 139
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents the a task that has a deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs the deadline class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param description the string of description of the deadline task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param cutTime the LocalDateTime object that represents the deadline of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Deadline(String description, LocalDateTime cutTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.by \u003d cutTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the deadline datetime of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the LocalDateTime object of deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public LocalDateTime getBy() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the deadline date of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the localDate object of the task deadline."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return by.toLocalDate();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the deadline date of the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param by the localDate object of the task deadline."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setBy(LocalDateTime by) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the string representation of the deadline task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the string representation of deadline task, including status icon, description,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *         and description."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MM d yyyy HH : mm\")) + \")\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 62
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents the a task that has a start date time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs the events class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param description the string of description of the events task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param startTime the LocalDateTime object that represents the events of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Event(String description, LocalDateTime startTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the start time of the event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param startTime the LocalDateTime object that represents the events of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setStartTime(LocalDateTime startTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the start datetime of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the LocalDateTime object of start dateTime."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the event date of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the localDate object of the task start time."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return startTime.toLocalDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the string representation of the event task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the string representation of event task, including status icon, description,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *         and description."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                + this.startTime.format(DateTimeFormatter.ofPattern(\"MM d yyyy HH : mm\")) + \")\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 61
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents a task with a description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs the task class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param description the string of description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the string representation of the status icon."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representation of the status icon, a tick if it is done, a cross otherwise."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a string of the task description."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string description of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a boolean value of whether the task is done or not."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return true if task is done, false otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the isDone to be true if task is done, false otherwise."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the string representation of the task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representation of the task, including status icon and description."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 64
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents a list to store the tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs a TaskList object by passing in a list of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param list a list of tasks that needs to be stored."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.tasks \u003d list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs a TaskList object by passing in no parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Adds a task to the taskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param task the task object that needs to be added to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets the task at an index of the TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param index the index in the list that needs to be set."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param task the task object that needs to be set at the spot."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void set(Integer index, Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        tasks.set(index, task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a task object at an index."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param index the index in the list that needs to be retrieved."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a task object at the index in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public Task get(Integer index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the size of the TaskList."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return an int value representing the size of the TaskList."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Deletes the task object at the index."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param index the index in the list that needs to be deleted."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 74
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that represents the a task that needs to be done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs the toDo class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param description the string of description of the toDo task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the string representation of the toDo task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return the string representation of toDo task, including status icon,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *         and description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 26
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.layout.BackgroundImage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.layout.BackgroundPosition;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.layout.BackgroundRepeat;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.layout.BackgroundSize;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static Image userBoxImage \u003d new Image(MainWindow.class.getResourceAsStream(\"/images/UserBoxImage.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static Image dukeBoxImage \u003d new Image(MainWindow.class.getResourceAsStream(\"/images/DukeBoxImage.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private DialogBox(String text, Image img, Color color) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        dialog.setTextFill(color);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the user dialog box."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param text a string text message from user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param img a image of the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a DialogBox Object of user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        DialogBox userDialog \u003d new DialogBox(text, img, Color.BLUE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        BackgroundImage backgroundImage \u003d new BackgroundImage(userBoxImage,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                BackgroundRepeat.REPEAT, BackgroundRepeat.NO_REPEAT, BackgroundPosition.DEFAULT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                BackgroundSize.DEFAULT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Background background \u003d new Background(backgroundImage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        userDialog.setBackground(background);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return userDialog;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the duke dialog box."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param text a string text message from duke."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param img a image of the duke."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a DialogBox Object of duke."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        var db \u003d new DialogBox(text, img, Color.RED);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        BackgroundImage backgroundImage \u003d new BackgroundImage(dukeBoxImage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                BackgroundRepeat.REPEAT, BackgroundRepeat.NO_REPEAT, BackgroundPosition.DEFAULT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                BackgroundSize.DEFAULT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        Background background \u003d new Background(backgroundImage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        db.setBackground(background);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 100
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * Controller for duke.ui.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Constructs a MainWindow object without taking in arguments."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public MainWindow() {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Initializes the main window."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        sendButton.setOnAction((event -\u003e handleUserInput()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Sets up the duke and prints out greetings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param d duke object to be passed in."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                DialogBox.getDukeDialog(new Ui().greetings(), dukeImage)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * the dialog container. Clears the user input after processing. Exits the program after 3.3 seconds."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (response.equals(new Ui().farewell())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            userInput.setDisable(true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(3.3));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 82
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import duke.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": " * A class that handles user interface interactions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static String greetings \u003d \"Hello! I\u0027m Mr. Duke, your personal assistant\\n     What can I do for you? : )\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static String farewell \u003d \"Bye. Hope to see you again soon! This will automatically close in 3.3 seconds\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static String doneAlert \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static String addTaskFrontAlert \u003d \"Got it. I\u0027ve added this task for you:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static String addTaskTailAlert \u003d \"Now you have %d tasks in the list.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static String deleteTaskFrondAlert \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static String findTaskFrontAlert \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    private static String updateTaskFrontAlert \u003d \"Noted. I have updated the task.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns greetings at the beginning."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representing greetings at the beginning."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String greetings() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return printAnswer(\"\", greetings, \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns reminders when adding a task to the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param result the TaskList of all tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representing reminders when adding a task to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String addTaskAlert(TaskList result) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return printAnswer(addTaskFrontAlert, \"   \" + result.get(result.getSize() - 1).toString(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String.format(addTaskTailAlert, result.getSize()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the reminders when done with a task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tempDone the task object that has been done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representing the reminders when done with a task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String doneAlert(Task tempDone) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return printAnswer(doneAlert, \"   \" + tempDone.toString(), \"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a reminder when a task has been deleted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tempDelete the task object that has been deleted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param result the TaskList of all the tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representing a reminder when a task has been deleted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String deleteTaskAlert(Task tempDelete, TaskList result) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return printAnswer(deleteTaskFrondAlert, \"   \" + tempDelete.toString(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String.format(addTaskTailAlert, result.getSize()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a reminder when a task has been udpated."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tempUpdate the task object that has been deleted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param result the TaskList of all the tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representing a reminder when a task has been deleted."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String updateTaskAlert(Task tempUpdate, TaskList result) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return printAnswer(updateTaskFrontAlert, \"   \" + tempUpdate.toString(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                String.format(addTaskTailAlert, result.getSize()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a list of tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param result the TaskList of task to be printed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representing a list of tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String showList(TaskList result) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return printList(\":) Here are all the tasks in your list:\", result, \"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a farewell message when exiting the application."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representing a farewell message when exiting the application."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String farewell() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return printAnswer(\"\", farewell, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a list of tasks when finding by keywords."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param result the list of tasks that are found by a keyword."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representing a list of tasks when finding by keywords."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String findTaskAlert(TaskList result) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return printList(findTaskFrontAlert, result, \"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Prints out answers according to commands with front reminder, and tail reminder."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param answers a vararg string parameter representing strings to be printed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representing answers according to commands with front reminder, and tail reminder."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String printAnswer(String... answers) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (int i \u003d 0; i \u003c answers.length; i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            result +\u003d answers[i] + \"\\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns a list according to commands with front reminder, and tail reminder."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param frontGuidance a string representing reminders at the front."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param result a TaskList to be printed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param tailGuidance a string representing reminders at the tail."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representing a list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public static String printList(String frontGuidance, TaskList result, String tailGuidance) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        String resultString \u003d \"\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (frontGuidance.length() !\u003d 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            resultString +\u003d frontGuidance + \"\\n\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        for (int i \u003d 0; i \u003c result.getSize(); i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            resultString +\u003d (i + 1) + \". \" + result.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        if (tailGuidance.length() !\u003d 0) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            resultString +\u003d tailGuidance + \"\\n\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return resultString;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * Returns the error message when encountering exceptions."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @param e the exception occurred."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     * @return a string representing the error message when encountering exceptions."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "richardcom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public String showError(Exception e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        return e.toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 154
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "richardcom": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "richardcom": 19
    }
  },
  {
    "path": "src/test/java/duke/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(\"[E][✘] work hard (at: 12 12 2020 12 : 21)\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new Event(\"work hard\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        LocalDateTime.of(2020, 12, 12, 12, 21)).toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void testGetStart() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(LocalDateTime.of(2020, 11, 11, 11, 11),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new Event(\"study\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        LocalDateTime.of(2020, 11, 11, 11, 11)).getStartTime());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(LocalDateTime.of(1999, 8, 11, 01, 11),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                new Event(\"study\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "                        LocalDateTime.of(1999, 8, 11, 01, 11)).getStartTime());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 29
    }
  },
  {
    "path": "src/test/java/duke/tasks/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "        assertEquals(\"[T][✘] join sports club\", new ToDo(\"join sports club\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "richardcom": 13
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "richardcom"
        },
        "content": "todo readbook"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "richardcom"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "richardcom"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "richardcom"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "richardcom"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "richardcom"
        },
        "content": "done 8"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "done3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "richardcom"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline      return home /by today"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": " deadline go home /by tomorrow"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline homework /by"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event meeting"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "eventproject meeting/ at Mon"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event exam /at"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "richardcom"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "richardcom"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "richardcom"
        },
        "content": "delete2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "richardcom"
        },
        "content": "delete"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return book /by 1111-11-111212"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event project meeting /at 0909-09-09 09"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return books /by 0808-0808 0808"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return book again /by1111-11-11 1212"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event project meeting again /at 090-09-09 0909"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return books again /by 0808-08-0 0808"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return book /by 1111-11-11 1212"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline study hard /by      1111-11-11 0001"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "richardcom"
        },
        "content": "      event project meeting /at 0909-09-09 0909"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "richardcom"
        },
        "content": "deadline return books /by 0808-08-08 0808"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "richardcom"
        },
        "content": "check 1111-11-11"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "richardcom"
        },
        "content": "event work hard /at2020-12-12 1221"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "richardcom"
        },
        "content": "find book"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "richardcom"
        },
        "content": "find"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "richardcom"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "richardcom": 41
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "richardcom"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "richardcom"
        },
        "content": "javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "richardcom"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "richardcom": 4,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "richardcom"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "richardcom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "richardcom"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "richardcom"
        },
        "content": "# run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "richardcom": 4,
      "-": 36
    }
  }
]
