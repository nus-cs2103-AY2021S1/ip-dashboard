[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // TODO: 20/8/20 Improve runtime: keep an internal counter of task (for done.*)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Ui.initialMessage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                String echo \u003d sc.nextLine();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                // Command Handling"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                // Exit"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                if (echo.equals(\"bye\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    storage.save(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    Ui.exitMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                } else if (echo.matches(\"(?i)list\\\\s*\")) { // Querying items"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    Ui.printList(tasks.printTodoList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                } else if (echo.matches(\"(?i)find\\\\s+\\\\S+\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    TaskList res \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    String toSearch \u003d echo.replaceFirst(\"find\\\\s+\", \"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    for (Task task : tasks.thingsToDo) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        if (task.description.matches(\".*?\" + toSearch + \".*\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                            res.add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    System.out.println(res);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                } else if (echo.matches(\"(?i)done.*\")) {  // Checks if it matches done and an integer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    int index \u003d parser.parseDone(echo, tasks.length());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    Ui.printDone(tasks.markAsDone(index));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                } else if (echo.matches(\"(?i)delete.*\")) { // Checks if it matches delete and an integer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    int index \u003d parser.parseDelete(echo, tasks.length());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    Ui.printDelete(tasks.delete(index));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                } else { // Add items"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    Task task \u003d parser.parseAdd(echo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    Ui.printAdd(tasks.add(task));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            } catch (DukeException | IOException | ParseException | DateTimeParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 50,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    LocalDateTime timeBy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public Deadline(String desc, String timeBy) throws DateTimeParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.timeBy \u003d LocalDateTime.parse(timeBy, format);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String sign \u003d done ? \"✓\" : \"✗\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return \"[D][\" + sign + \"] \" + description + \" (by:\" + timeBy + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 22
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 11
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public LocalDateTime timeAt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    // TODO: 17/8/20 make a toString "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public Event(String desc, String timeAt) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.timeAt \u003d LocalDateTime.parse(timeAt, format);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String sign \u003d done ? \"✓\" : \"✗\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return \"[E][\" + sign + \"] \" + description + \" (at:\" + timeAt + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 24
    }
  },
  {
    "path": "src/main/java/duke/Pair.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class Pair\u003cT, U\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private T t;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    private U u;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public Pair(T t, U u) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.t \u003d t;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.u \u003d u;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public T getT() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public U getU() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return u;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 19
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public Parser(){}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    // TODO: 20/8/20 CHANGE ALL MATCHES TO matcher.find"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Parses the adding commands"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Parse the adding commands (todo, deadline, and event) and builds the task specified."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @param echo the command inputted by user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @return a Task as parsed by the method"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @throws DukeException Wrong command inputted"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @throws ParseException Failed to parse date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public Task parseAdd(String echo) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (echo.matches(\"(?i)^todo.*\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            if (echo.matches(\"(?i)^todo\\\\s+\\\\S+.*\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                String text \u003d echo.replaceFirst(\"(?i)^todo\\\\s*\", \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                return new ToDo(text);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            } else if (echo.matches(\"(?i)^todo\\\\s*\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                throw new DukeException(\"Please put a description to your task.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                throw new DukeException(\"Please put a space between the command and description.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        } else if (echo.matches(\"(?i)^deadline.*\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            if (echo.matches(\"(?i)^deadline\\\\s+\\\\S+.*\\\\s+\\\\/by\\\\s+\\\\S+.*\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                String[] res \u003d echo.replaceFirst(\"(?i)deadline\\\\s+\", \"\").strip().split(\"(?i)/by\\\\s*\", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                return new Deadline(res[0], res[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                String[] badText \u003d echo.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                if (badText.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    throw new DukeException(\"bruh you don\u0027t have spaces\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                String badCommand \u003d badText[1];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                if (badCommand.matches(\".*\\\\/by.*\")) { // The command contains by."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    throw new DukeException(\"Did you miss the description or date? Remember to put spaces.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    throw new DukeException(\"Please put /by followed by the date.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            // TODO: 20/8/20 errors: no by, no space inbetween, no desc, no date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        } else if (echo.matches(\"(?i)^event.*\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            if (echo.matches(\"(?i)^event\\\\s+\\\\S+.*\\\\s+\\\\/at\\\\s+\\\\S+.*\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                String[] res \u003d echo.replaceFirst(\"(?i)event\\\\s+\", \"\").strip().split(\"(?i)/at\\\\s*\", 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                return new Event(res[0], res[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                String[] badText \u003d echo.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                if (badText.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    throw new DukeException(\"bruh you don\u0027t have spaces\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                String badCommand \u003d badText[1];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                if (badCommand.matches(\"(?i).*\\\\/at.*\")) { // The command contains by."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    throw new DukeException(\"Did you miss the description or date? Remember to put spaces.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    throw new DukeException(\"Please put /at followed by the date.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        throw new DukeException(\"Invalid command.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public int parseDone(String echo, int listLength) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (echo.matches(\"(?i)done\\\\s+[0-9]+\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            res \u003d echo.replaceFirst(\"done\\\\s+\", \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new DukeException(\"Done must be followed by a space and an integer!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        int toBeRemoved \u003d Integer.parseInt(res); // No error: regex above guarantees that."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (toBeRemoved \u003e listLength || toBeRemoved \u003c\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new DukeException(\"The task does not exist! (Index out of bounds)\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return toBeRemoved;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public int parseDelete(String echo, int listLength) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (echo.matches(\"(?i)delete\\\\s+[0-9]+\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            res \u003d echo.replaceFirst(\"(?i)delete\\\\s+\", \"\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new DukeException(\"Delete must be followed by a space and an integer!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        int toBeRemoved \u003d Integer.parseInt(res); // No error: regex above guarantees that."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (toBeRemoved \u003e listLength || toBeRemoved \u003c\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            throw new DukeException(\"The task does not exist! (Index out of bounds)\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return toBeRemoved;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 100
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * Saves task list onto a prescribed file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @param tasks the tasklist to be saved"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     * @throws IOException if file not successfully made (e.g. permission error)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public void save(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // Save file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Path dirPath \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Path filePath \u003d Paths.get(\"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // Possible error: directory doesn\u0027t exist"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        if (!dirPath.toFile().exists()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            File data \u003d new File(dirPath.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            data.mkdir();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // Write to file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String toWrite \u003d tasks.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        BufferedWriter wr \u003d new BufferedWriter(new FileWriter(filePath.toString()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        wr.write(toWrite);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        wr.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public TaskList load() throws FileNotFoundException, IOException, DukeException, ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Path filePath \u003d Paths.get(\"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new FileReader(filePath.toString()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String nextLine \u003d reader.readLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        while (nextLine !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            Task res \u003d parser.parseAdd(nextLine);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            // TODO: 26/8/20 Not working yet; add tasks to the list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 51
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    boolean done;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 10
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public ArrayList\u003cTask\u003e thingsToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.thingsToDo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    // TODO: 17/8/20 print type, done"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public Pair\u003cString, Integer\u003e add(Task detail) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.thingsToDo.add(detail);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return new Pair\u003c\u003e(detail.toString() + \"\\n\", thingsToDo.size());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        // TODO: 26/8/20   change this to length"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public String printTodoList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        for (int i \u003d 0; i \u003c thingsToDo.size(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            String sign \u003d thingsToDo.get(i).done ? \"✓\" : \"✗\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            message \u003d message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    + \"     \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    + (i + 1)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    + \".\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    + thingsToDo.get(i).toString()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    + \"\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public String markAsDone(int i) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.thingsToDo.get(i - 1).done \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String message \u003d \"       \" + this.thingsToDo.get(i - 1).toString() + \"\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public int length() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return thingsToDo.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public Pair\u003cString, Integer\u003e delete(int i) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String desc \u003d this.thingsToDo.get(i - 1).toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        this.thingsToDo.remove(i - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return new Pair\u003c\u003e(desc + \"\\n\", thingsToDo.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return \"Task{\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \"thingsToDo\u003d\" + thingsToDo +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                \u0027}\u0027;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 56
    }
  },
  {
    "path": "src/main/java/duke/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    NONE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 9
    }
  },
  {
    "path": "src/main/java/duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public ToDo(String desc) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String sign \u003d done ? \"✓\" : \"✗\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        return \"[T][\" + sign + \"] \" + description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 13
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public Ui() { }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static void printMessage(String msg) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        System.out.print(msg);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static void initialMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String toPrint \u003d \"    Hello! I\u0027m Duke the Bad Dragon.\\n\" + \"    What can I do for you?\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        printMessage(toPrint);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static void exitMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        printMessage(\"     Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static void printDone(String msg) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String toPrint \u003d \"     Nice! I\u0027ve marked this task as done:\" + \"\\n\" + msg;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        printMessage(toPrint);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static void printList(String msg) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String toPrint \u003d \"     Here are the tasks in your list:\\n\" + msg;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        printMessage(toPrint);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static void printAdd(Pair\u003cString, Integer\u003e msg) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String toPrint \u003d \"     Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + \"       \" + msg.getT()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + \"     Now you have \" + msg.getU() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        printMessage(toPrint);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    public static void printDelete(Pair\u003cString, Integer\u003e msg) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String toPrint \u003d \"     Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + \"       \" + msg.getT()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                + \"     Now you have \" + msg.getU() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        printMessage(toPrint);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 44
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void newEvent() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            Event event \u003d new Event(\"desc\", \"02-02-2020 1820\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            assertEquals(event.description, \"desc\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            assertEquals(event.timeAt,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "                    LocalDateTime.parse(\"02-02-2020 1820\", DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 21
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    void parseAdd() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        String in \u003d \"todo asdf\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Task todo \u003d new ToDo(\"asdf\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        Task res \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            res \u003d parser.parseAdd(in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "        assertEquals(todo.toString(), res.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 24
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "deadline/by"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "deadline /at"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "deadline      /by"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "deadline      s     /by      asdf"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "deadline correct /by asdfg"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "deadline      asdfasdfasdf /by asdfasdfas"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "todo a"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "todo b"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "todoc"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "todo         d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "todo e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "todo     f"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "todo deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "todo event deadline"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "event deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "deadline event /by asdf /at asd"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "done a"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "asdf"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "lists"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "liststst"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "liststststs"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 32
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theodoreleebrant"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "theodoreleebrant": 1,
      "-": 37
    }
  }
]
