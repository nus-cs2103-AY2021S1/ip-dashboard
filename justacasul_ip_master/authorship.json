[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    static class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        private boolean completion;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        private Type type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        enum Type {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            TODO(\"todo\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            EVENT(\"event\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            private String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Type(String name) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                return name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Task(String type, String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            int dateLocation \u003d containsDate(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (dateLocation \u003e\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    this.date \u003d LocalDate.parse(name.substring(dateLocation));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    if (!dateStorage.containsKey(date)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        dateStorage.put(date, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    dateStorage.get(date).add(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    // can\u0027t be parsed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    System.out.println(\"Date could not be parsed, task added without date.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                this.name \u003d name.substring(0, dateLocation - 5);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.completion \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.type \u003d Type.valueOf(type.toUpperCase());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Task(String type, String name, Boolean completed, String date) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this(type, name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            this.completion \u003d completed;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (date !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                this.date \u003d LocalDate.parse(date, dateFormat);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                if (!dateStorage.containsKey(this.date)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    dateStorage.put(this.date, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                dateStorage.get(this.date).add(this);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        void complete() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            completion \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public String getName() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public String getCompletion() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (completion) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                return \"[✓]\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                return \"[✗]\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public String getType() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                return \"[T]\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                return \"[E]\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                return \"[D]\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                // this should not happen?"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                return \"something went wrong\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public String getDate() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return date.format(dateFormat);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (date !\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                return getType() + getCompletion() + \" \" + getName() + \"  @  \" + getDate();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                return getType() + getCompletion() + \" \" + getName();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    static class DukeException extends Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        public DukeException(String message) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        static DukeException empty(String type) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            String message \u003d \"The description of \" + type + \" cannot be empty.\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new DukeException(message);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        static DukeException invalid(String order) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            String message \u003d \"Sorry, \u0027\" + order + \"\u0027 is not a recognised order.\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new DukeException(message);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        static DukeException outOfBounds(int index) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            String message \u003d \"There is no task number \" + index + \" , there are only \" + storage.size() + \" task(s).\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new DukeException(message);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        static DukeException fileError() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            String message \u003d \"Line in save file has invalid format\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            return new DukeException(message);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Task storage"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static ArrayList\u003cTask\u003e storage \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // Date storage"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    private static HashMap\u003cLocalDate, ArrayList\u003cTask\u003e\u003e dateStorage \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    // border line"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void line() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Pads a given String with 2 lines, top and bottom"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param output the String to pad"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void echo(String output) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Adds a task to the task storage"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param type the type of task to be added"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param name the name of the task"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void store(String type, String name) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Task taskToAdd \u003d new Task(type, name);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        storage.add(taskToAdd);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        taskAdded(taskToAdd);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        save(storage);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Overloaded store that reads from save file"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param wholeLine each line in the save file"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void store(String wholeLine) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        boolean completionStatus;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String name;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String date \u003d null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Scanner currentLine \u003d new Scanner(wholeLine);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            // something like [T][✓]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (currentLine.hasNext()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                String typeCompletion \u003d currentLine.next();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                switch (typeCompletion.charAt(1)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case (\u0027T\u0027):"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    type \u003d \"todo\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case (\u0027E\u0027):"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    type \u003d \"event\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case (\u0027D\u0027):"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    type \u003d \"deadline\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    // this shouldn\u0027t happen"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    type \u003d null;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                completionStatus \u003d typeCompletion.charAt(4) \u003d\u003d \u0027✓\u0027;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                throw DukeException.fileError();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (currentLine.hasNext()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                name \u003d currentLine.nextLine().trim();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                throw DukeException.fileError();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            assert type !\u003d null;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            int dateLocation \u003d containsDate(name);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (dateLocation \u003e\u003d 0) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                date \u003d name.substring(dateLocation);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                name \u003d name.substring(0, dateLocation - 5);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Task taskToAdd \u003d new Task(type, name, completionStatus, date);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            storage.add(taskToAdd);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            taskAdded(taskToAdd);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            echo(e.getMessage());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Prints a message after adding a task"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param task the task added"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void taskAdded(Task task) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String toEcho \u003d \"Task added: \\n\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                + task + \"\\n\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                + \"You now have \" + storage.size() + \" task(s).\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        echo(toEcho);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Prints the list of tasks in storage"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void listOut() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(\"Here\u0027s your tasks\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        for (int i \u003d 0; i \u003c storage.size(); i++) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            // list starts from 1"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Task currentTask \u003d storage.get(i);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            System.out.println((i + 1) + \". \" + currentTask);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Marks a certain task as complete"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param taskNumber the index number of the task"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void markComplete(int taskNumber) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Task currentTask \u003d storage.get(taskNumber);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        currentTask.complete();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(\"Marked task \" + (taskNumber + 1) + \" as complete.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(currentTask);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        save(storage);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Deletes a certain task"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param taskNumber the index number of the task"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void delete(int taskNumber) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Task currentTask \u003d storage.get(taskNumber);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(\"Deleted task:\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(currentTask);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        storage.remove(taskNumber);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        System.out.println(\"There are now \" + storage.size() + \" task(s) remaining.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        line();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        save(storage);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * saves stored tasks to a local file"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param storage the place tasks are stored"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void save(ArrayList\u003cTask\u003e storage) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            FileWriter writer \u003d new FileWriter(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            for (Task task : storage) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                writer.write(task.toString());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                writer.write(\"\\n\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            File folder \u003d new File(\"./data\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (folder.mkdir()) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                save(storage);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                System.out.println(\"folder does not exist, while making folder failed\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * Loads contents of storage text file into storage array"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static void load() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            File data \u003d new File(\"./data/duke.txt\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            Scanner dataScan \u003d new Scanner(data);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            while (dataScan.hasNextLine()) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                store(dataScan.nextLine());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            System.out.println(\"save file does not exist, nothing loaded\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * finds /by or /at if the string contains them"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param s the string to be searched"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @return the index of the date after /by or /at"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    public static int containsDate(String s) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        int eitherIndex \u003d Math.max(s.indexOf(\" /by \"), s.indexOf(\" /at \"));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        int anyIndex \u003d Math.max(eitherIndex, s.indexOf(\"  @  \"));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        return anyIndex \u003d\u003d -1 ? -1 : anyIndex + 5;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "justacasul"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * It\u0027s psvm, what do you want?"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     * @param args Please it\u0027s just psvm"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "justacasul"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        String logo \u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                          \" ____             _     \\n\""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        + \"|  _ \\\\           | |    \\n\""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        + \"| |_) |_ __ _   _| |__\\n\""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        + \"|  _ \u003c| \u0027__| | | | \u0027_ \\\\ \\n\""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        + \"| |_) | |  | |_| | | | |\\n\""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        + \"|____/|_|   \\\\__,_|_| |_|\\n\";"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        echo(logo + \"What\u0027s up?\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        echo(\"Loading started\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        load();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        echo(\"Loading ended\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            String output \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            // special 1 word cases"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            // bye exits while"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            if (output.equals(\"bye\")) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                echo(\"Ciao!\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            } else if (output.equals(\"list\")) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                listOut();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                Scanner multiWord \u003d new Scanner(output);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                // can\u0027t use enums here, firstWord can be literally anything"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                String firstWord \u003d multiWord.next();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                // wow intelliJ is a better programmer than i\u0027ll ever be"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                switch (firstWord) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case \"done\": {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    String index \u003d \"0\";"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        if (multiWord.hasNext()) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            index \u003d multiWord.next();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            throw DukeException.empty(\"done\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    } catch (DukeException e) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        echo(e.getMessage());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    int intIndex \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        if (intIndex \u003c\u003d storage.size() \u0026\u0026 intIndex \u003e 0) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            markComplete(intIndex - 1);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            throw DukeException.outOfBounds(intIndex);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    } catch (DukeException e) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        echo(e.getMessage());"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "justacasul"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case \"delete\": {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    String index \u003d multiWord.next();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    int intIndex \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        if (intIndex \u003c\u003d storage.size() \u0026\u0026 intIndex \u003e 0) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            delete(intIndex - 1);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            throw DukeException.outOfBounds(intIndex);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    } catch (DukeException e) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        echo(e.getMessage());"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case \"due\": {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        LocalDate dueDate \u003d LocalDate.parse(multiWord.nextLine().trim());"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        line();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        System.out.println(\"These tasks are due:\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        for (Task task: dateStorage.get(dueDate)) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            System.out.println(task);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        line();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        // time can\u0027t be parsed"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        echo(e.getMessage());"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                // it\u0027s a task"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        // whitespace in front of nextLine"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        if (multiWord.hasNextLine()) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            String remainingWords \u003d multiWord.nextLine().trim();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            store(firstWord, remainingWords);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                            throw DukeException.empty(firstWord);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    } catch (DukeException e) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                        echo(e.getMessage());"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                // invalid order"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    // skip the try catch block"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                    echo(DukeException.invalid(output).getMessage());"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "justacasul"
        },
        "content": "                }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "justacasul"
        },
        "content": "            }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "justacasul"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "justacasul": 430,
      "-": 4
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "justacasul"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "justacasul"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "justacasul"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "justacasul"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "justacasul"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "justacasul"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "justacasul"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "justacasul"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "justacasul"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "justacasul"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "justacasul"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "justacasul": 11
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "justacasul"
        },
        "content": "java -classpath ..\\bin Duke \u003c .\\input.txt \u003e .\\ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "justacasul": 1,
      "-": 20
    }
  }
]
