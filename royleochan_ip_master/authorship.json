[
  {
    "path": "src/main/java/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public DeadlineTask(String description, boolean isDone, String deadline) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String[] splitDeadline \u003d deadline.split(\" \");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String inputDeadline \u003d splitDeadline[0] + \"T\" + splitDeadline[1].substring(0, 2) + \":\" + splitDeadline[1].substring(2, 4);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(inputDeadline);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + deadline.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mma\")) + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 18
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    // all valid commands"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private enum Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        BYE,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        LIST,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        EVENT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        DONE,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        DELETE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    // dir where tasks are saved"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static final String FILE \u003d \"data/serina.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static final String FILE_PATH \u003d \"data\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    // validate command format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static void validateCommandDesc(String desc, Command type) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // trim whitespaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String result \u003d desc.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (result.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new DukeException(\"Command description cannot be empty.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (type \u003d\u003d Command.DEADLINE) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            if (!result.contains(\"/by\") || result.split(\"/by\").length \u003c\u003d 1 || result.split(\"/by\")[0].isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                throw new DukeException(\"Be sure to include a task description and date in the correct format.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (type \u003d\u003d Command.EVENT) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            if (!result.contains(\"/at\") || result.split(\"/at\").length \u003c\u003d 1 || result.split(\"/at\")[0].isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                throw new DukeException(\"Be sure to include a task description and date in the correct format.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    // validate command format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static void validateCommandDesc(int taskNum, Command type, List\u003cTask\u003e lst) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (taskNum \u003e lst.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            throw new DukeException(\"You have no such task. Please check your task number.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    // helper function to check if task is done"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static boolean isTaskDone(String number) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        int num \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return num \u003d\u003d 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    // helper function to display tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static void printTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(\"----- Here are your current tasks: \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            int num \u003d i + 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            System.out.println(num + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    // read file and add tasks to list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static void readFile(String file, List\u003cTask\u003e lst) throws FileNotFoundException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        File f \u003d new File(file);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String inputLine \u003d s.nextLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String[] splitInput \u003d inputLine.split(\" \\\\| \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            Command command \u003d Command.valueOf(splitInput[0]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            switch (command){ "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    lst.add(new ToDoTask(splitInput[2], isTaskDone(splitInput[1])));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    lst.add(new DeadlineTask(splitInput[2], isTaskDone(splitInput[1]), splitInput[3]));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    lst.add(new EventTask(splitInput[2], isTaskDone(splitInput[1]), splitInput[3]));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    // create new file if no existing file, otherwise add tasks to existing file"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static void writeToFile(String task) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        File f \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        File file \u003d new File(FILE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (!f.isDirectory()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            f.mkdir();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        FileWriter fw \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        fw.write(task+\"\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    // modify file (marking task as done or deleting task)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private static void modifyFile(Command command, int taskNum) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Path path \u003d Paths.get(FILE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        List\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(path, StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                fileContent.remove(taskNum);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                String task \u003d fileContent.get(taskNum);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                String modifiedTask \u003d task.replaceFirst(\"0\" , \"1\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                fileContent.set(taskNum, modifiedTask);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Files.write(path, fileContent, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // initialize scanner and tasks list"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // display welcome message"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String welcomeMessage \u003d \"----- Serina here, let me know if you need any assistance\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        System.out.println(welcomeMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        // read the tasks file if and process the tasks, printing them if there is a file "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "royleochan"
        },
        "content": "           readFile(FILE, tasks);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "royleochan"
        },
        "content": "           printTasks(tasks);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            System.out.println(\"----- You have no tasks saved as of yet. Feel free to add tasks and I will track them for you\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String userInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            String[] splitInput \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                Command command \u003d Command.valueOf(splitInput[0].toUpperCase());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                String value;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                value \u003d splitInput.length \u003e 1 ? splitInput[1] : \"\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                // exit the application"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                if (command \u003d\u003d Command.BYE) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    System.out.print(\"----- Goodbye, call me when you need me.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                switch (command) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    // list task"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    case LIST:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        printTasks(tasks);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    // mark task as done and print it"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    case DONE:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        validateCommandDesc(Integer.parseInt(value), Command.DONE, tasks);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        int taskNum \u003d Integer.parseInt(value) - 1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        modifyFile(Command.DONE, taskNum);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        System.out.println(tasks.get(taskNum).markAsDone());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    // add toDoTask"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    case TODO:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        Duke.validateCommandDesc(value, Command.TODO);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        tasks.add(new ToDoTask(value, false));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        writeToFile(\"TODO | 0 | \" + value);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        System.out.println(\"----- Received, added the following task:\\n\" + tasks.get(tasks.size() - 1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        System.out.println(\"You now have \" + tasks.size() + \" pending tasks.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    // add deadlineTask"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    // add eventTask"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    case DEADLINE:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    case EVENT:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        String[] splitValue;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        if (command \u003d\u003d Command.DEADLINE) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                            Duke.validateCommandDesc(value, Command.DEADLINE);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                            splitValue \u003d value.split(\"/by \");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                            writeToFile(\"DEADLINE | 0 | \" + splitValue[0] + \"| \" + splitValue[1]);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                            tasks.add(new DeadlineTask(splitValue[0], false, splitValue[1]));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                            Duke.validateCommandDesc(value, Command.EVENT);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                            splitValue \u003d value.split(\"/at \");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                            writeToFile(\"EVENT | 0 | \" + splitValue[0] + \"| \" + splitValue[1]);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                            tasks.add(new EventTask(splitValue[0], false, splitValue[1]));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        System.out.println(\"----- Received, added the following task:\\n\" + tasks.get(tasks.size() - 1));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        System.out.println(\"You now have \" + tasks.size() + \" pending tasks.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    // delete task"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                    case DELETE:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        validateCommandDesc(Integer.parseInt(value), Command.DELETE, tasks);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        int taskIndex \u003d Integer.parseInt(value) - 1;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        Task removedTask \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        modifyFile(Command.DELETE, taskIndex);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        System.out.println(\"----- Received, deleted the following task:\\n\" + removedTask);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                        System.out.println(\"You now have \" + tasks.size() + \" pending tasks.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            // catch error when command is invalid"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                System.out.println(\"----- I can\u0027t help you with that request, try something else.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            // catch invalid command description errors"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            catch (DukeException ex) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                String result \u003d \"----- You entered a valid command but I can\u0027t carry it out. \" + ex.getMessage();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                System.out.println(result);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            catch (IOException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "royleochan"
        },
        "content": "                System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "royleochan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "royleochan": 217
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 5
    }
  },
  {
    "path": "src/main/java/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    private LocalDateTime eventTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public EventTask(String description, boolean isDone, String eventTime) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String[] splitEventTime\u003d eventTime.split(\" \");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        String inputEventTime \u003d splitEventTime[0] + \"T\" + splitEventTime[1].substring(0,2) + \":\" + splitEventTime[1].substring(2,4);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.eventTime \u003d LocalDateTime.parse(inputEventTime);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + eventTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mma\")) + \")\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 18
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String markAsDone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"----- Alright, marked the following task as done: \\n\" + this.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"]\" + \" \" + this.description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 23
    }
  },
  {
    "path": "src/main/java/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public ToDoTask(String description, boolean isDone) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "royleochan": 10
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "todo buy keyboard"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "deadline buy birthday gift for friend /by Saturday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "event family dinner with uncle /at Sun 6-8pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "royleochan"
        },
        "content": "todo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "royleochan"
        },
        "content": "blah"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "royleochan"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "royleochan"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "royleochan": 10
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "royleochan"
        },
        "content": "if"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "royleochan"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "royleochan"
        },
        "content": "  )"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "royleochan": 6
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/ToDoTask.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/EventTask.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/DeadlineTask.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/Task.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/Duke.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "royleochan"
        },
        "content": "../src/main/java/DukeException.java"
      }
    ],
    "authorContributionMap": {
      "royleochan": 6
    }
  }
]
