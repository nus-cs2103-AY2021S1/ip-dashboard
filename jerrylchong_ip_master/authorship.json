[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Deadline(String s, String time) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"[D][✓] \" + text + \" (by: \" + time + \")\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"[D][✗] \" + text + \" (by: \" + time + \")\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 15
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static void say(String s) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        System.out.println(\"______________________________\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        System.out.println(\"______________________________\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static void printList() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (list.size() \u003e 0) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            System.out.println(\"______________________________\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            System.out.println(\"Here is your list:\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                System.out.println(i + \".\" + list.get(i - 1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            System.out.println(\"______________________________\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw(DukeException.emptyList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static void printDone(String input) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String pattern \u003d \"(done\\\\s)(.+)\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (input.trim().matches(pattern)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String number \u003d input.substring(5);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                int index \u003d parseInt(number) - 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                list.get(index).setDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                say(\"Marked this task as done:\\n\" + list.get(index));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw(DukeException.emptyDesc(\"done\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw(DukeException.typeMismatch(\"done\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw(DukeException.outOfBounds());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static void handleToDo(String input) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern \u003d \"(todo\\\\s)(.+)\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (input.trim().matches(pattern)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String task \u003d input.replaceAll(pattern, \"$2\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Task next \u003d new ToDo(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            list.add(next);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String text \u003d \"Added ToDo \u0027\" + task + \"\u0027 to your list!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            say(text);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw(DukeException.emptyDesc(\"todo\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static void handleDeadline(String input) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern1 \u003d \"(deadline\\\\s)(.+)\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern2 \u003d \"(deadline\\\\s)(.+)\\\\s(/by\\\\s)(.+)\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern3 \u003d \"(deadline\\\\s)(/by)((\\\\s(.*))*)\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (input.trim().matches(pattern1)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (input.trim().matches(pattern2)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String task \u003d input.replaceAll(pattern2, \"$2\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String time \u003d input.replaceAll(pattern2, \"$4\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Task next \u003d new Deadline(task, time);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                list.add(next);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String text \u003d \"Added Deadline \u0027\" + task + \"\u0027 to your list!\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                say(text);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else if (input.trim().matches(pattern3)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw(DukeException.missingTask());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw(DukeException.missingTime(\"by\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw(DukeException.emptyDesc(\"deadline\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static void handleEvent(String input) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern1 \u003d \"(event\\\\s)(.+)\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern2 \u003d \"(event\\\\s)(.+)\\\\s(/at\\\\s)(.+)\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern3 \u003d \"(event\\\\s)(/at)((\\\\s(.*))*)\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (input.trim().matches(pattern1)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (input.trim().matches(pattern2)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String task \u003d input.replaceAll(pattern2, \"$2\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String time \u003d input.replaceAll(pattern2, \"$4\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Task next \u003d new Event(task, time);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                list.add(next);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String text \u003d \"Added Event \u0027\" + task + \"\u0027 to your list!\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                say(text);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else if (input.trim().matches(pattern3)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw(DukeException.missingTask());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw(DukeException.missingTime(\"at\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw(DukeException.emptyDesc(\"event\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static void handleOthers() throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        throw(DukeException.unknownCommand());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static void delete(String input) throws DukeException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String pattern \u003d \"(delete\\\\s)(.+)\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (input.trim().matches(pattern)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String number \u003d input.substring(7);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                int index \u003d parseInt(number) - 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Task task \u003d list.get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                list.remove(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                say(\"Deleted this task:\\n\" + task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw(DukeException.emptyDesc(\"delete\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw(DukeException.typeMismatch(\"delete\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw(DukeException.outOfBounds());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String logo \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"█████████████████████████████████████████████████████████████\\n\" +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"█░░░░░░░░░░░░░░███░░░░░░░░░░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░███\\n\" +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"█░░▄▀▄▀▄▀▄▀▄▀░░███░░▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄░░█░░▄▀▄▀▄▀▄▀▄▀░░███\\n\" +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"█░░▄▀░░░░░░▄▀░░███░░▄▀░░░░░░░░░░░░░░░░░▄▀░░█░░▄▀░░░░░░▄▀░░███\\n\" +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"█░░▄▀░░██░░▄▀░░███░░▄▀░░█████████████░░▄▀░░█░░▄▀░░██░░▄▀░░███\\n\" +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"█░░▄▀░░░░░░▄▀░░░░█░░▄▀░░█████████████░░▄▀░░█░░▄▀░░░░░░▄▀░░░░█\\n\" +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"█░░▄▀▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░█░░█░███░█░░█░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░█\\n\" +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"█░░▄▀░░░░░░░░▄▀░░█░░▄▀░░█████░░░█████░░▄▀░░█░░▄▀░░░░░░░░▄▀░░█\\n\" +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"█░░▄▀░░████░░▄▀░░█░░▄▀░░█████████████░░▄▀░░█░░▄▀░░████░░▄▀░░█\\n\" +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"█░░▄▀░░░░░░░░▄▀░░█░░▄▀░░░░░░░░░░░░░░░░░▄▀░░█░░▄▀░░░░░░░░▄▀░░█\\n\" +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"█░░▄▀▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░█\\n\" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"█░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░░░█\\n\" +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                \"█████████████████████████████████████████████████████████████\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String welcome \u003d \"Hello I am\\n\" + logo +\"\\nPlease say something.\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        say(welcome);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                if (input.trim().equals(\"list\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    printList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                } else if (input.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    printDone(input);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                } else if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    handleToDo(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                } else if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    handleDeadline(input);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    handleEvent(input);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                } else if (input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    delete(input);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    handleOthers();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                say(e.getMessage());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        say(\"Goodbye!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 166,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private DukeException(String msg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static DukeException emptyList() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new DukeException(\"Your list is empty.\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static DukeException typeMismatch(String command) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new DukeException(\"Error! Integer should follow \u0027\" + command + \"\u0027 command.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static DukeException outOfBounds() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new DukeException(\"Error! Enter a valid task number.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static DukeException emptyDesc(String taskType) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new DukeException(\"Error! \u0027\" + taskType + \"\u0027 description cannot be empty.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static DukeException unknownCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new DukeException(\"Sorry, I don\u0027t understand what you just said.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static DukeException missingTask() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new DukeException(\"Error! No task description provided.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static DukeException missingTime(String byOrAt) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new DukeException(\"Error! \u0027/\" + byOrAt + \"\u0027 date not found.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 33
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Event(String s, String time) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"[E][✓] \" + text + \" (at: \" + time + \")\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"[E][✗] \" + text + \" (at: \" + time + \")\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 15
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    protected final String text;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    protected boolean done \u003d false;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Task(String text) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"[✓] \" + text"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"[✗] \" + text;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 19
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public ToDo(String s) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"[T][✓] \" + text"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"[T][✗] \" + text;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 13
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "test"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "todo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "todo finish work"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline /by Aug 20th 2359"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline cs2103 ip"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline cs2103 ip /by Aug 20th 2359"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event /at always"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event rest"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event rest /at always"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 18
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java ..\\src\\main\\java\\Task.java ..\\src\\main\\java\\ToDo.java ..\\src\\main\\java\\Deadline.java ..\\src\\main\\java\\Event.java ..\\src\\main\\java\\DukeException.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 1,
      "-": 20
    }
  }
]
