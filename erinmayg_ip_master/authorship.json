[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":24,"erinmayg":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"    String javaFxVersion \u003d \u002711.0.1\u0027"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"    mainClassName \u003d \"duke.gui.Launcher\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":59,"author":{"gitId":"erinmayg"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":63,"author":{"gitId":"erinmayg"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":65,"author":{"gitId":"erinmayg"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"},{"lineNumber":67,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":68,"author":{"gitId":"erinmayg"},"content":"compileJava.options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":69,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":70,"author":{"gitId":"erinmayg"},"content":"tasks.withType(JavaCompile) {"},{"lineNumber":71,"author":{"gitId":"erinmayg"},"content":"    options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":45,"erinmayg":27}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":"This is a greenfield Java project based on the generic project called "},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"[***Project Duke***](https://nus-cs2103-ay2021s1.github.io/website/se-book-adapted/projectDuke/index.html). "},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"\u003cbr\u003e"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"The result of this project is a personal assistant chat-bot named *Cipher*"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"capable of keeping track of tasks given by the user."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"* [Quick start](#quick-start)"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"* [Features](#features)"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"  * [Help](#help-help)"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"  * [Adding tasks](#adding-tasks)"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"    * [Adding a ToDo](#adding-a-todo-todo)"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"    * [Adding an Event](#adding-an-event-event)"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    * [Adding a Deadline](#adding-a-deadline-deadline)"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"  * [Marking tasks as done](#marking-tasks-as-done-done)"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"  * [Deleting tasks](#deleting-tasks-delete)"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"  * [Listing tasks](#listing-tasks-list)"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"  * [Finding tasks](#finding-tasks-find)"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"  * [Exiting the program](#exiting-the-program-bye)"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"  * [Saving the data](#saving-the-data)"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"* [Command summary](#command-summary)"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"  "},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"## Quick start"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"1. Ensure you have `Java 11` or above installed in your Computer."},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"2. Download the latest `duke.jar` from [here](https://github.com/erinmayg/ip/releases)."},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"3. Copy the file to the folder you want to use as the *home folder* for *Cipher*."},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds."},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"\u003cp align\u003d\"center\"\u003e\u003cimg src\u003d\"Ui-start.png\" height\u003d\"500px\"\u003e\u003c/p\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"### Help: `help`"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"Displays a list of commands"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"\u003chr\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"### Adding tasks"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"*Cipher* provides three types of tasks: ToDo, Event, and Deadline."},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"For Events and Deadlines, *Cipher* accepts the following date time format:"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"* `YYYY-MM-DD`T`HH:MM:SS`"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"* `YYYY-MM-DD`T`HH:MM`"},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"* `YYYY-MM-DD`"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"* `HH:MM:SS`"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"* `HH:MM`"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"\u003chr\u003e"},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"#### Adding a ToDo: `todo`"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"Adds a ToDo task to the task list."},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":"Format: `todo TASK_DESCRIPTION`"},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":"Example: `todo study for test`"},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":"Expected outcome:"},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":58,"author":{"gitId":"erinmayg"},"content":"`Got it. I\u0027ve added this task:`\u003cbr\u003e"},{"lineNumber":59,"author":{"gitId":"erinmayg"},"content":"`[T][✗] study for test`\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"erinmayg"},"content":"`You have 1 task on your list.`"},{"lineNumber":61,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":62,"author":{"gitId":"erinmayg"},"content":"\u003chr\u003e"},{"lineNumber":63,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":64,"author":{"gitId":"erinmayg"},"content":"#### Adding an Event: `event`"},{"lineNumber":65,"author":{"gitId":"erinmayg"},"content":"Adds an Event to the task list."},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"erinmayg"},"content":"Format: `event TASK_DESCRIPTION /at DATE_TIME_FORMAT`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"erinmayg"},"content":"Example: `event mom\u0027s bday /at 2020-11-27`"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"erinmayg"},"content":"Expected outcome:"},{"lineNumber":72,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":73,"author":{"gitId":"erinmayg"},"content":"`Got it. I\u0027ve added this task:`\u003cbr\u003e"},{"lineNumber":74,"author":{"gitId":"erinmayg"},"content":"`[E][✗] mom\u0027s bday (27 Nov 2020)`\u003cbr\u003e"},{"lineNumber":75,"author":{"gitId":"erinmayg"},"content":"`You have 2 tasks on your list.`"},{"lineNumber":76,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":77,"author":{"gitId":"erinmayg"},"content":"\u003chr\u003e"},{"lineNumber":78,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":79,"author":{"gitId":"erinmayg"},"content":"#### Adding a Deadline: `deadline`"},{"lineNumber":80,"author":{"gitId":"erinmayg"},"content":"Adds a Deadline to the task list."},{"lineNumber":81,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":82,"author":{"gitId":"erinmayg"},"content":"Format: `deadline TASK_DESCRIPTION /by DATE_TIME_FORMAT`"},{"lineNumber":83,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":84,"author":{"gitId":"erinmayg"},"content":"Example: `deadline cs2103 project /by 2020-09-18T23:59`"},{"lineNumber":85,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":86,"author":{"gitId":"erinmayg"},"content":"Expected outcome:"},{"lineNumber":87,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":88,"author":{"gitId":"erinmayg"},"content":"`Got it. I\u0027ve added this task:`\u003cbr\u003e"},{"lineNumber":89,"author":{"gitId":"erinmayg"},"content":"`[D][✗] cs2103 project (18 Sep 2020, 11:59 pm)`\u003cbr\u003e"},{"lineNumber":90,"author":{"gitId":"erinmayg"},"content":"`You have 3 tasks on your list.`"},{"lineNumber":91,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":92,"author":{"gitId":"erinmayg"},"content":"\u003chr\u003e"},{"lineNumber":93,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":94,"author":{"gitId":"erinmayg"},"content":"### Marking tasks as done: `done`"},{"lineNumber":95,"author":{"gitId":"erinmayg"},"content":"Marks tasks with the given index as done."},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"erinmayg"},"content":"Format: `done INDEX...`"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"erinmayg"},"content":"Example: `done 1 3`"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"erinmayg"},"content":"`Nice! I\u0027ve marked these tasks as done:`\u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"erinmayg"},"content":"`[T][✓] study for test`\u003cbr\u003e"},{"lineNumber":105,"author":{"gitId":"erinmayg"},"content":"`[D][✓] cs2103 project (18 Sep 2020, 11:59 pm)`"},{"lineNumber":106,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":107,"author":{"gitId":"erinmayg"},"content":"\u003chr\u003e"},{"lineNumber":108,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":109,"author":{"gitId":"erinmayg"},"content":"### Deleting tasks: `delete`"},{"lineNumber":110,"author":{"gitId":"erinmayg"},"content":"Deletes tasks with the given index."},{"lineNumber":111,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":112,"author":{"gitId":"erinmayg"},"content":"Format: `delete INDEX...`"},{"lineNumber":113,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":114,"author":{"gitId":"erinmayg"},"content":"Example: `delete 1 3`"},{"lineNumber":115,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":116,"author":{"gitId":"erinmayg"},"content":"Expected outcome:"},{"lineNumber":117,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":118,"author":{"gitId":"erinmayg"},"content":"`Noted. I\u0027ve removed these tasks:`\u003cbr\u003e"},{"lineNumber":119,"author":{"gitId":"erinmayg"},"content":"`[T][✓] study for test`"},{"lineNumber":120,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":121,"author":{"gitId":"erinmayg"},"content":"\u003chr\u003e"},{"lineNumber":122,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":123,"author":{"gitId":"erinmayg"},"content":"### Listing tasks: `list`"},{"lineNumber":124,"author":{"gitId":"erinmayg"},"content":"List the tasks on the task list."},{"lineNumber":125,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":126,"author":{"gitId":"erinmayg"},"content":"Format: `list [DATE_FORMAT]`"},{"lineNumber":127,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":128,"author":{"gitId":"erinmayg"},"content":"Example: `list`"},{"lineNumber":129,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":130,"author":{"gitId":"erinmayg"},"content":"Expected outcome:"},{"lineNumber":131,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":132,"author":{"gitId":"erinmayg"},"content":"`1. [E][✗] mom\u0027s bday (27 Nov 2020)`\u003cbr\u003e"},{"lineNumber":133,"author":{"gitId":"erinmayg"},"content":"`2. [D][✓] cs2103 project (18 Sep 2020, 11:59 pm)`"},{"lineNumber":134,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":135,"author":{"gitId":"erinmayg"},"content":"Example: `list 2020-11-27`"},{"lineNumber":136,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":137,"author":{"gitId":"erinmayg"},"content":"Expected outcome:"},{"lineNumber":138,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":139,"author":{"gitId":"erinmayg"},"content":"`Here\u0027s your list on 27 Nov 2020:`\u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"erinmayg"},"content":"`1. [E][✗] mom\u0027s bday (27 Nov 2020)`"},{"lineNumber":141,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":142,"author":{"gitId":"erinmayg"},"content":"\u003chr\u003e"},{"lineNumber":143,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":144,"author":{"gitId":"erinmayg"},"content":"### Finding tasks: `find`"},{"lineNumber":145,"author":{"gitId":"erinmayg"},"content":"Find tasks with the givnen keyword(s)."},{"lineNumber":146,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":147,"author":{"gitId":"erinmayg"},"content":"Format: `find KEYWORD...`"},{"lineNumber":148,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":149,"author":{"gitId":"erinmayg"},"content":"Example: `find die hard`"},{"lineNumber":150,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":151,"author":{"gitId":"erinmayg"},"content":"Expected outcome:"},{"lineNumber":152,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":153,"author":{"gitId":"erinmayg"},"content":"`Here are the tasks with the given keyword:`\u003cbr\u003e"},{"lineNumber":154,"author":{"gitId":"erinmayg"},"content":"`1. [T][✗] die`\u003cbr\u003e"},{"lineNumber":155,"author":{"gitId":"erinmayg"},"content":"`2. [T][✗] die young`\u003cbr\u003e"},{"lineNumber":156,"author":{"gitId":"erinmayg"},"content":"`3. [T][✗] cry hard`"},{"lineNumber":157,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":158,"author":{"gitId":"erinmayg"},"content":"\u003chr\u003e"},{"lineNumber":159,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":160,"author":{"gitId":"erinmayg"},"content":"### Exiting the program: `bye`"},{"lineNumber":161,"author":{"gitId":"erinmayg"},"content":"Exits the program."},{"lineNumber":162,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":163,"author":{"gitId":"erinmayg"},"content":"\u003chr\u003e"},{"lineNumber":164,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":165,"author":{"gitId":"erinmayg"},"content":"### Saving the data"},{"lineNumber":166,"author":{"gitId":"erinmayg"},"content":"*Cipher*\u0027s data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":167,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":168,"author":{"gitId":"erinmayg"},"content":"## Command summary"},{"lineNumber":169,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":170,"author":{"gitId":"erinmayg"},"content":"Action | Format | Examples"},{"lineNumber":171,"author":{"gitId":"erinmayg"},"content":"------------ | ------------- | -------------"},{"lineNumber":172,"author":{"gitId":"erinmayg"},"content":"Add a **ToDo** | `todo TASK_DESCRIPTION` | `todo study`"},{"lineNumber":173,"author":{"gitId":"erinmayg"},"content":"Add an **Event** | `event TASK_DESCRIPTION /at DATE_TIME_FORMAT` | `event bday /at 2020-12-31`"},{"lineNumber":174,"author":{"gitId":"erinmayg"},"content":"Add a **Deadline** | `deadline TASK_DESCRIPTION /by DATE_TIME_FORMAT` | `deadline project /by 2020-09-18T23:59`"},{"lineNumber":175,"author":{"gitId":"erinmayg"},"content":"Mark as **Done** | `done INDEX...` | `done 1`, `done 1 2 3`"},{"lineNumber":176,"author":{"gitId":"erinmayg"},"content":"**Delete** | `delete INDEX...` | `delete 1`, `delete 1 2 3`"},{"lineNumber":177,"author":{"gitId":"erinmayg"},"content":"**List** | `list [DATE_FORMAT]` | `list`, `list 2020-12-31`"},{"lineNumber":178,"author":{"gitId":"erinmayg"},"content":"**Find** | `find KEYWORD...` | `find die`, `find die cry`"},{"lineNumber":179,"author":{"gitId":"erinmayg"},"content":"**Help** | `help`"},{"lineNumber":180,"author":{"gitId":"erinmayg"},"content":"**Exit** | `bye`"}],"authorContributionMap":{"-":17,"erinmayg":163}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"import duke.gui.Message;"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"/** The duke bot that stores your tasks. */"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"    /** Deals with interaction with the user. */"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"    private final Ui ui;"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"    /** Deals with saving and loading the tasks from the file. */"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"    private final Storage storage;"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    /** Contains the task list and add/delete operations for the task list. */"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"    private TaskList tasks;"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"     * Constructs a Duke bot."},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"     * @param filePath The filepath to store the data in."},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"    public Duke(String filePath) {"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"        ui \u003d new Ui();"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"        } catch (DukeException e) {"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"            ui.showLoadingError();"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"    /** Constructs a Duke bot with the default save location (data/duke.txt). */"},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"    public Duke() {"},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"        this(\"data\");"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"    /** Runs the bot, accepts tasks and saves them into the file. */"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"    public void run() {"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"        ui.showWelcome();"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"        boolean isExit \u003d false;"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"        while (!isExit) {"},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"            try {"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"                ui.showLine(); // show the divider line (\"_______\")"},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"                ui.printMessage(c.execute(tasks, ui, storage));"},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"            } catch (DukeException e) {"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"            } finally {"},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":"                ui.showLine();"},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":"    /** Runs the program. */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":59,"author":{"gitId":"erinmayg"},"content":"        Duke bot \u003d new Duke(\"data\");"},{"lineNumber":60,"author":{"gitId":"erinmayg"},"content":"        bot.run();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":63,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"erinmayg"},"content":"     * Obtains the Duke bot\u0027s response to the user\u0027s input."},{"lineNumber":65,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"erinmayg"},"content":"     * @param input The user\u0027s input"},{"lineNumber":67,"author":{"gitId":"erinmayg"},"content":"     * @return The Duke bot\u0027s response"},{"lineNumber":68,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"erinmayg"},"content":"    public Message getResponse(String input) {"},{"lineNumber":70,"author":{"gitId":"erinmayg"},"content":"        assert input !\u003d null;"},{"lineNumber":71,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":72,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"erinmayg"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":74,"author":{"gitId":"erinmayg"},"content":"            return new Message(c.execute(tasks, ui, storage));"},{"lineNumber":75,"author":{"gitId":"erinmayg"},"content":"        } catch (DukeException e) {"},{"lineNumber":76,"author":{"gitId":"erinmayg"},"content":"            return new Message(e.getMessage(), true);"},{"lineNumber":77,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":3,"erinmayg":76}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"import duke.command.Command;"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"import duke.command.DoneCommand;"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"import duke.command.EventCommand;"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"import duke.command.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"import duke.command.FindCommand;"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"import duke.command.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"import duke.command.ListCommand;"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"import duke.command.ToDoCommand;"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"import duke.exception.EmptyTaskException;"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"import duke.exception.InvalidDateException;"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"import duke.exception.NoIndexException;"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"import duke.exception.NoKeywordException;"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"import duke.exception.UnrecognizedTaskException;"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"/** Deals with making sense of user inputs. */"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"public class Parser {"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"     * Makes sense of user inputs."},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"     * @param fullCommand The user input."},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"     * @return A Command for the bot to do."},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"     * @throws UnrecognizedTaskException If the first word is not a recognized command."},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"     * @throws NoIndexException          If the command is delete or done and the index is \u003c 0"},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"     *                                   or larger than the size of the task list."},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"     * @throws EmptyTaskException        If the command is an add task command such as todo,"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"     *                                   event, or deadline and is followed by no description."},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"    public static Command parse(String fullCommand)"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"        throws UnrecognizedTaskException, NoIndexException, EmptyTaskException, NoKeywordException {"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"        assert fullCommand !\u003d null;"},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"        // Removes unnecessary whitespace"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"        fullCommand \u003d fullCommand.trim();"},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"        // Determines the case for each command"},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":"        String firstWord \u003d getFirstWord(fullCommand);"},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"        switch (firstWord) {"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"        case \"help\":"},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"            return new HelpCommand();"},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":"            // Fallthrough"},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":"        case \"todo\":"},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":"            return new ToDoCommand(getTask(fullCommand, firstWord));"},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":"            // Fallthrough"},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":"        case \"event\":"},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":"            return new EventCommand(getTask(fullCommand, firstWord));"},{"lineNumber":58,"author":{"gitId":"erinmayg"},"content":"            // Fallthrough"},{"lineNumber":59,"author":{"gitId":"erinmayg"},"content":"        case \"deadline\":"},{"lineNumber":60,"author":{"gitId":"erinmayg"},"content":"            return new DeadlineCommand(getTask(fullCommand, firstWord));"},{"lineNumber":61,"author":{"gitId":"erinmayg"},"content":"            // Fallthrough"},{"lineNumber":62,"author":{"gitId":"erinmayg"},"content":"        case \"list\":"},{"lineNumber":63,"author":{"gitId":"erinmayg"},"content":"            return new ListCommand(fullCommand);"},{"lineNumber":64,"author":{"gitId":"erinmayg"},"content":"            // Fallthrough"},{"lineNumber":65,"author":{"gitId":"erinmayg"},"content":"        case \"find\":"},{"lineNumber":66,"author":{"gitId":"erinmayg"},"content":"            return new FindCommand(getKeywords(fullCommand));"},{"lineNumber":67,"author":{"gitId":"erinmayg"},"content":"            // Fallthrough"},{"lineNumber":68,"author":{"gitId":"erinmayg"},"content":"        case \"done\":"},{"lineNumber":69,"author":{"gitId":"erinmayg"},"content":"            return new DoneCommand(getTaskNumbers(fullCommand, firstWord));"},{"lineNumber":70,"author":{"gitId":"erinmayg"},"content":"            // Fallthrough"},{"lineNumber":71,"author":{"gitId":"erinmayg"},"content":"        case \"delete\":"},{"lineNumber":72,"author":{"gitId":"erinmayg"},"content":"            return new DeleteCommand(getTaskNumbers(fullCommand, firstWord));"},{"lineNumber":73,"author":{"gitId":"erinmayg"},"content":"            // Fallthrough"},{"lineNumber":74,"author":{"gitId":"erinmayg"},"content":"        case \"bye\":"},{"lineNumber":75,"author":{"gitId":"erinmayg"},"content":"            return new ExitCommand();"},{"lineNumber":76,"author":{"gitId":"erinmayg"},"content":"            // Fallthrough"},{"lineNumber":77,"author":{"gitId":"erinmayg"},"content":"        default:"},{"lineNumber":78,"author":{"gitId":"erinmayg"},"content":"            throw new UnrecognizedTaskException();"},{"lineNumber":79,"author":{"gitId":"erinmayg"},"content":"            // Fallthrough"},{"lineNumber":80,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":83,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"erinmayg"},"content":"     * Returns the description of a task."},{"lineNumber":85,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"erinmayg"},"content":"     * @param fullCommand   The input given by the user."},{"lineNumber":87,"author":{"gitId":"erinmayg"},"content":"     * @param firstWord     The command."},{"lineNumber":88,"author":{"gitId":"erinmayg"},"content":"     * @return The task description."},{"lineNumber":89,"author":{"gitId":"erinmayg"},"content":"     * @throws EmptyTaskException If the input is an empty string, or contains only whitespaces."},{"lineNumber":90,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"erinmayg"},"content":"    private static String getTask(String fullCommand, String firstWord) throws EmptyTaskException {"},{"lineNumber":92,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":93,"author":{"gitId":"erinmayg"},"content":"            return fullCommand.substring((firstWord + \" \").length()).trim();"},{"lineNumber":94,"author":{"gitId":"erinmayg"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":95,"author":{"gitId":"erinmayg"},"content":"            throw new EmptyTaskException();"},{"lineNumber":96,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":99,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"erinmayg"},"content":"     * Makes sense of a string that represents date time in ISO format."},{"lineNumber":101,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"erinmayg"},"content":"     * @param dateTimeString A String that represents the date time."},{"lineNumber":103,"author":{"gitId":"erinmayg"},"content":"     * @return The date time in LocalDateTime."},{"lineNumber":104,"author":{"gitId":"erinmayg"},"content":"     * @throws InvalidDateException If the dateTimeString is not in a valid date time format."},{"lineNumber":105,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"erinmayg"},"content":"    public static LocalDateTime getDateTime(String dateTimeString) throws InvalidDateException {"},{"lineNumber":107,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":108,"author":{"gitId":"erinmayg"},"content":"        assert dateTimeString !\u003d null;"},{"lineNumber":109,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":110,"author":{"gitId":"erinmayg"},"content":"        // Remove unnecessary whitespace"},{"lineNumber":111,"author":{"gitId":"erinmayg"},"content":"        dateTimeString \u003d dateTimeString.trim();"},{"lineNumber":112,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":113,"author":{"gitId":"erinmayg"},"content":"        // Determine the dateTime format"},{"lineNumber":114,"author":{"gitId":"erinmayg"},"content":"        String isoFormat \u003d \"yyyy-mm-ddThh:mm:ss\";"},{"lineNumber":115,"author":{"gitId":"erinmayg"},"content":"        String isoFormatShort \u003d \"yyyy-mm-ddThh:mm\";"},{"lineNumber":116,"author":{"gitId":"erinmayg"},"content":"        boolean isIsoFormat \u003d dateTimeString.length() \u003d\u003d isoFormat.length()"},{"lineNumber":117,"author":{"gitId":"erinmayg"},"content":"            || dateTimeString.length() \u003d\u003d isoFormatShort.length();"},{"lineNumber":118,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":119,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":120,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":121,"author":{"gitId":"erinmayg"},"content":"            if (isIsoFormat) {"},{"lineNumber":122,"author":{"gitId":"erinmayg"},"content":"                return LocalDateTime.parse(dateTimeString);"},{"lineNumber":123,"author":{"gitId":"erinmayg"},"content":"            } else if (dateTimeString.contains(\"-\")) {"},{"lineNumber":124,"author":{"gitId":"erinmayg"},"content":"                return LocalDateTime.of(LocalDate.parse(dateTimeString), LocalTime.parse(\"23:59\"));"},{"lineNumber":125,"author":{"gitId":"erinmayg"},"content":"            } else if (dateTimeString.contains(\":\")) {"},{"lineNumber":126,"author":{"gitId":"erinmayg"},"content":"                return LocalDateTime.of(LocalDate.now(), LocalTime.parse(dateTimeString));"},{"lineNumber":127,"author":{"gitId":"erinmayg"},"content":"            } else {"},{"lineNumber":128,"author":{"gitId":"erinmayg"},"content":"                throw new InvalidDateException();"},{"lineNumber":129,"author":{"gitId":"erinmayg"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":131,"author":{"gitId":"erinmayg"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":132,"author":{"gitId":"erinmayg"},"content":"            throw new InvalidDateException();"},{"lineNumber":133,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":136,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"erinmayg"},"content":"     * Parses the taskNumbers given."},{"lineNumber":138,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":139,"author":{"gitId":"erinmayg"},"content":"     * @param fullCommand   The full command given by the user."},{"lineNumber":140,"author":{"gitId":"erinmayg"},"content":"     * @param firstWord     The first word (command) given by the user."},{"lineNumber":141,"author":{"gitId":"erinmayg"},"content":"     * @return The array of task numbers."},{"lineNumber":142,"author":{"gitId":"erinmayg"},"content":"     * @throws NoIndexException If there are no integers following the command."},{"lineNumber":143,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"erinmayg"},"content":"    public static Integer[] getTaskNumbers(String fullCommand, String firstWord) throws NoIndexException {"},{"lineNumber":145,"author":{"gitId":"erinmayg"},"content":"        if (fullCommand.equalsIgnoreCase(firstWord)) {"},{"lineNumber":146,"author":{"gitId":"erinmayg"},"content":"            throw new NoIndexException(firstWord);"},{"lineNumber":147,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":149,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":150,"author":{"gitId":"erinmayg"},"content":"            String[] taskNumbers \u003d fullCommand.substring(firstWord.length()).trim().split(\" \");"},{"lineNumber":151,"author":{"gitId":"erinmayg"},"content":"            return Stream.of(taskNumbers).map(Integer::valueOf).toArray(Integer[]::new);"},{"lineNumber":152,"author":{"gitId":"erinmayg"},"content":"        } catch (NumberFormatException numError) {"},{"lineNumber":153,"author":{"gitId":"erinmayg"},"content":"            throw new NoIndexException(firstWord);"},{"lineNumber":154,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":157,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"erinmayg"},"content":"     * Parses the keywords given (separated by whitespace)."},{"lineNumber":159,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":160,"author":{"gitId":"erinmayg"},"content":"     * @param fullCommand The full command given by the user."},{"lineNumber":161,"author":{"gitId":"erinmayg"},"content":"     * @return An array of keywords."},{"lineNumber":162,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"erinmayg"},"content":"    public static String[] getKeywords(String fullCommand) {"},{"lineNumber":164,"author":{"gitId":"erinmayg"},"content":"        return fullCommand.substring(\"find \".length()).trim().split(\" \");"},{"lineNumber":165,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":167,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"erinmayg"},"content":"     * Obtains the command (first word) given by the user."},{"lineNumber":169,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":170,"author":{"gitId":"erinmayg"},"content":"     * @param fullCommand The full command given by the user."},{"lineNumber":171,"author":{"gitId":"erinmayg"},"content":"     * @return The command (first word)."},{"lineNumber":172,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"erinmayg"},"content":"    public static String getFirstWord(String fullCommand) {"},{"lineNumber":174,"author":{"gitId":"erinmayg"},"content":"        return fullCommand.contains(\" \")"},{"lineNumber":175,"author":{"gitId":"erinmayg"},"content":"            ? fullCommand.substring(0, fullCommand.indexOf(\" \")).toLowerCase()"},{"lineNumber":176,"author":{"gitId":"erinmayg"},"content":"            : fullCommand.toLowerCase();"},{"lineNumber":177,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":178}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"import duke.exception.FileLoadError;"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"import duke.task.Deadline;"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"import duke.task.Event;"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"import duke.task.Task;"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"import duke.task.ToDo;"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"/** Deals with saving and loading the data into a file. */"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"public class Storage {"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"    /** The filepath to store the data. */"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"    private final String filePath;"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"    /** The path to an existing saved file. */"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"    private Path dukeFile;"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"     * Constructs a Storage."},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"     * @param filePath The filepath to store the data in."},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"    public Storage(String filePath) {"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"        createFile();"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"    /** Creates a file to save the data if it has not existed. */"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"    private void createFile() {"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"            if (Files.notExists(Paths.get(filePath))) {"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"                Files.createDirectory(Paths.get(filePath));"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"            if (Files.notExists(Paths.get(filePath + \"/duke.txt\"))) {"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"                dukeFile \u003d Files.createFile(Paths.get(filePath + \"/duke.txt\"));"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"            } else {"},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"                dukeFile \u003d Paths.get(filePath + \"/duke.txt\");"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"        } catch (IOException ioException) {"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"            ioException.printStackTrace();"},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":"     * Saves the task list into a file."},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":"     * @param tasks The task list to be saved."},{"lineNumber":58,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"erinmayg"},"content":"    public void saveTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":60,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":61,"author":{"gitId":"erinmayg"},"content":"        StringBuilder taskString \u003d new StringBuilder();"},{"lineNumber":62,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":63,"author":{"gitId":"erinmayg"},"content":"        for (Task task : tasks) {"},{"lineNumber":64,"author":{"gitId":"erinmayg"},"content":"            taskString.append(task.saveFormat());"},{"lineNumber":65,"author":{"gitId":"erinmayg"},"content":"            taskString.append(\"\\n\");"},{"lineNumber":66,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":68,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"erinmayg"},"content":"            Files.writeString(dukeFile, taskString);"},{"lineNumber":70,"author":{"gitId":"erinmayg"},"content":"        } catch (IOException ioException) {"},{"lineNumber":71,"author":{"gitId":"erinmayg"},"content":"            ioException.printStackTrace();"},{"lineNumber":72,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":75,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"erinmayg"},"content":"     * Loads the task list from the saved file."},{"lineNumber":77,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"erinmayg"},"content":"     * @return The task list."},{"lineNumber":79,"author":{"gitId":"erinmayg"},"content":"     * @throws FileLoadError If there is an error in reading or obtaining the file."},{"lineNumber":80,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"erinmayg"},"content":"    public ArrayList\u003cTask\u003e load() throws FileLoadError {"},{"lineNumber":82,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":83,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":84,"author":{"gitId":"erinmayg"},"content":"            ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":85,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":86,"author":{"gitId":"erinmayg"},"content":"            for (String task : Files.readAllLines(dukeFile)) {"},{"lineNumber":87,"author":{"gitId":"erinmayg"},"content":"                Task t \u003d readTask(task);"},{"lineNumber":88,"author":{"gitId":"erinmayg"},"content":"                assert t !\u003d null : \"File read error.\";"},{"lineNumber":89,"author":{"gitId":"erinmayg"},"content":"                taskList.add(readTask(task));"},{"lineNumber":90,"author":{"gitId":"erinmayg"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":92,"author":{"gitId":"erinmayg"},"content":"            return taskList;"},{"lineNumber":93,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":94,"author":{"gitId":"erinmayg"},"content":"        } catch (IOException ioException) {"},{"lineNumber":95,"author":{"gitId":"erinmayg"},"content":"            ioException.printStackTrace();"},{"lineNumber":96,"author":{"gitId":"erinmayg"},"content":"            throw new FileLoadError();"},{"lineNumber":97,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":100,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"erinmayg"},"content":"     * Reads the saved tasks in the file."},{"lineNumber":102,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"erinmayg"},"content":"     * @param task The task to be read"},{"lineNumber":104,"author":{"gitId":"erinmayg"},"content":"     * @return The task in the proper format, such as ToDo, Event, or Deadline"},{"lineNumber":105,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"erinmayg"},"content":"    private Task readTask(String task) {"},{"lineNumber":107,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":108,"author":{"gitId":"erinmayg"},"content":"        // Save format \u003d {T}{1} {task description} {date}"},{"lineNumber":109,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":110,"author":{"gitId":"erinmayg"},"content":"        String isoFormat \u003d \"yyyy-mm-ddThh:mm:ss\";"},{"lineNumber":111,"author":{"gitId":"erinmayg"},"content":"        String eventDateFormat \u003d isoFormat + \" to \" + isoFormat;"},{"lineNumber":112,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":113,"author":{"gitId":"erinmayg"},"content":"        char taskCode \u003d task.charAt(0);"},{"lineNumber":114,"author":{"gitId":"erinmayg"},"content":"        boolean isDone \u003d task.charAt(1) \u003d\u003d \u00271\u0027;"},{"lineNumber":115,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":116,"author":{"gitId":"erinmayg"},"content":"        switch (taskCode) {"},{"lineNumber":117,"author":{"gitId":"erinmayg"},"content":"        case \u0027T\u0027:"},{"lineNumber":118,"author":{"gitId":"erinmayg"},"content":"            ToDo toDo \u003d new ToDo(task.substring(3).trim());"},{"lineNumber":119,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":120,"author":{"gitId":"erinmayg"},"content":"            if (isDone) {"},{"lineNumber":121,"author":{"gitId":"erinmayg"},"content":"                toDo \u003d toDo.markDone();"},{"lineNumber":122,"author":{"gitId":"erinmayg"},"content":"            }"},{"lineNumber":123,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":124,"author":{"gitId":"erinmayg"},"content":"            return toDo;"},{"lineNumber":125,"author":{"gitId":"erinmayg"},"content":"            // Fallthrough"},{"lineNumber":126,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":127,"author":{"gitId":"erinmayg"},"content":"        case \u0027D\u0027:"},{"lineNumber":128,"author":{"gitId":"erinmayg"},"content":"            String endDateString \u003d task.substring(task.length() - isoFormat.length());"},{"lineNumber":129,"author":{"gitId":"erinmayg"},"content":"            Deadline deadline \u003d new Deadline(task.substring(3, task.length() - isoFormat.length()).trim(),"},{"lineNumber":130,"author":{"gitId":"erinmayg"},"content":"                LocalDateTime.parse(endDateString));"},{"lineNumber":131,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":132,"author":{"gitId":"erinmayg"},"content":"            if (isDone) {"},{"lineNumber":133,"author":{"gitId":"erinmayg"},"content":"                deadline \u003d deadline.markDone();"},{"lineNumber":134,"author":{"gitId":"erinmayg"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":136,"author":{"gitId":"erinmayg"},"content":"            return deadline;"},{"lineNumber":137,"author":{"gitId":"erinmayg"},"content":"            // Fallthrough"},{"lineNumber":138,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":139,"author":{"gitId":"erinmayg"},"content":"        case \u0027E\u0027:"},{"lineNumber":140,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":141,"author":{"gitId":"erinmayg"},"content":"            String taskText \u003d task.substring(3,"},{"lineNumber":142,"author":{"gitId":"erinmayg"},"content":"                task.length() - (eventDateFormat + \" \").length()).trim();"},{"lineNumber":143,"author":{"gitId":"erinmayg"},"content":"            String startDateString \u003d task.substring("},{"lineNumber":144,"author":{"gitId":"erinmayg"},"content":"                task.length() - eventDateFormat.length(),"},{"lineNumber":145,"author":{"gitId":"erinmayg"},"content":"                task.length() - (isoFormat + \" to \").length());"},{"lineNumber":146,"author":{"gitId":"erinmayg"},"content":"            endDateString \u003d task.substring(task.length() - isoFormat.length());"},{"lineNumber":147,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":148,"author":{"gitId":"erinmayg"},"content":"            boolean hasEndDate \u003d !endDateString.equals(Event.EMPTY_END_DATE);"},{"lineNumber":149,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":150,"author":{"gitId":"erinmayg"},"content":"            Event event \u003d new Event(taskText, LocalDateTime.parse(startDateString),"},{"lineNumber":151,"author":{"gitId":"erinmayg"},"content":"                hasEndDate"},{"lineNumber":152,"author":{"gitId":"erinmayg"},"content":"                    ? LocalDateTime.parse(endDateString)"},{"lineNumber":153,"author":{"gitId":"erinmayg"},"content":"                    : null);"},{"lineNumber":154,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":155,"author":{"gitId":"erinmayg"},"content":"            if (isDone) {"},{"lineNumber":156,"author":{"gitId":"erinmayg"},"content":"                event \u003d event.markDone();"},{"lineNumber":157,"author":{"gitId":"erinmayg"},"content":"            }"},{"lineNumber":158,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":159,"author":{"gitId":"erinmayg"},"content":"            return event;"},{"lineNumber":160,"author":{"gitId":"erinmayg"},"content":"            // Fallthrough"},{"lineNumber":161,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":162,"author":{"gitId":"erinmayg"},"content":"        default:"},{"lineNumber":163,"author":{"gitId":"erinmayg"},"content":"            return null;"},{"lineNumber":164,"author":{"gitId":"erinmayg"},"content":"            // Fallthrough"},{"lineNumber":165,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":167}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"import java.util.stream.IntStream;"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"import duke.exception.DeadlineInvalidDate;"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"import duke.exception.DuplicateTaskException;"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"import duke.exception.EventInvalidDate;"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"import duke.exception.InvalidDateException;"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"import duke.exception.InvalidEndDate;"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"import duke.exception.InvalidIndexException;"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"import duke.task.Deadline;"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"import duke.task.Event;"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"import duke.task.Task;"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"import duke.task.ToDo;"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"/** Contains the task list. */"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"public class TaskList {"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"    /** The task list. */"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"     * Constructs a TaskList."},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"     * @param taskList The task list containing saved tasks."},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"        this.tasks \u003d taskList;"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"    /** Constructs a TaskList. */"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"    public TaskList() {"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"     * Compares two objects."},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"     * @param o The object to compare."},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":"     * @return True if the objects the same, in other words if the object is a TaskList"},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"     * with a list containing the same tasks."},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":"    public boolean equals(Object o) {"},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":"            return true;"},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":"        } else if (o instanceof TaskList) {"},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":"            TaskList t \u003d (TaskList) o;"},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":"            return tasks.equals(t.tasks);"},{"lineNumber":58,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"erinmayg"},"content":"        return false;"},{"lineNumber":60,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":62,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"erinmayg"},"content":"     * Processes the list command."},{"lineNumber":64,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"erinmayg"},"content":"     * @param fullCommand The full command given by the user."},{"lineNumber":66,"author":{"gitId":"erinmayg"},"content":"     * @throws InvalidDateException If the command is of the format list [description]"},{"lineNumber":67,"author":{"gitId":"erinmayg"},"content":"     *                              but the [description] is in not in a valid date format."},{"lineNumber":68,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"erinmayg"},"content":"    public String processList(String fullCommand) throws InvalidDateException {"},{"lineNumber":70,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":71,"author":{"gitId":"erinmayg"},"content":"        assert fullCommand !\u003d null;"},{"lineNumber":72,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":73,"author":{"gitId":"erinmayg"},"content":"        if (fullCommand.trim().equalsIgnoreCase(\"list\")) {"},{"lineNumber":74,"author":{"gitId":"erinmayg"},"content":"            return printList();"},{"lineNumber":75,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":77,"author":{"gitId":"erinmayg"},"content":"        LocalDate date \u003d Parser.getDateTime(fullCommand.substring("},{"lineNumber":78,"author":{"gitId":"erinmayg"},"content":"            \"list\".length()).trim()).toLocalDate();"},{"lineNumber":79,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":80,"author":{"gitId":"erinmayg"},"content":"        return printList(date);"},{"lineNumber":81,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":83,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"erinmayg"},"content":"     * Prints the tasks in the given task list."},{"lineNumber":85,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"erinmayg"},"content":"     * @param tasks The task list to be printed."},{"lineNumber":87,"author":{"gitId":"erinmayg"},"content":"     * @return A String representation of the list of tasks."},{"lineNumber":88,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"erinmayg"},"content":"    private String printList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":90,"author":{"gitId":"erinmayg"},"content":"        StringBuilder str \u003d new StringBuilder();"},{"lineNumber":91,"author":{"gitId":"erinmayg"},"content":"        IntStream.range(0, tasks.size())"},{"lineNumber":92,"author":{"gitId":"erinmayg"},"content":"            .forEach(i -\u003e str.append(String.format(\"%d. %s\\n\", i + 1, tasks.get(i))));"},{"lineNumber":93,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":94,"author":{"gitId":"erinmayg"},"content":"        return str.toString().trim();"},{"lineNumber":95,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":97,"author":{"gitId":"erinmayg"},"content":"    /** Prints the tasks in the list. */"},{"lineNumber":98,"author":{"gitId":"erinmayg"},"content":"    private String printList() {"},{"lineNumber":99,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":100,"author":{"gitId":"erinmayg"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":101,"author":{"gitId":"erinmayg"},"content":"            return \"You have nothing on your list!\";"},{"lineNumber":102,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":104,"author":{"gitId":"erinmayg"},"content":"        return printList(tasks);"},{"lineNumber":105,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":107,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"erinmayg"},"content":"     * An overload of the list command."},{"lineNumber":109,"author":{"gitId":"erinmayg"},"content":"     * Prints the tasks occurring on the same date in the list."},{"lineNumber":110,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"erinmayg"},"content":"     * @param date The date given by the user."},{"lineNumber":112,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"erinmayg"},"content":"    private String printList(LocalDate date) {"},{"lineNumber":114,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":115,"author":{"gitId":"erinmayg"},"content":"        assert date !\u003d null;"},{"lineNumber":116,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":117,"author":{"gitId":"erinmayg"},"content":"        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM y\");"},{"lineNumber":118,"author":{"gitId":"erinmayg"},"content":"        StringBuilder str \u003d new StringBuilder();"},{"lineNumber":119,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":120,"author":{"gitId":"erinmayg"},"content":"        int i \u003d 1;"},{"lineNumber":121,"author":{"gitId":"erinmayg"},"content":"        for (Task task: tasks) {"},{"lineNumber":122,"author":{"gitId":"erinmayg"},"content":"            if (task.getDate().equals(date)) {"},{"lineNumber":123,"author":{"gitId":"erinmayg"},"content":"                str.append(String.format(\"%d. %s\\n\", i + 1, task));"},{"lineNumber":124,"author":{"gitId":"erinmayg"},"content":"                i++;"},{"lineNumber":125,"author":{"gitId":"erinmayg"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":128,"author":{"gitId":"erinmayg"},"content":"        if (str.length() \u003d\u003d 0) {"},{"lineNumber":129,"author":{"gitId":"erinmayg"},"content":"            return \"You have nothing to do on \""},{"lineNumber":130,"author":{"gitId":"erinmayg"},"content":"                + date.format(dateFormat) + \".\";"},{"lineNumber":131,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":133,"author":{"gitId":"erinmayg"},"content":"        return String.format(\"Here\u0027s your list on %s:\\n\", date.format(dateFormat))"},{"lineNumber":134,"author":{"gitId":"erinmayg"},"content":"            + str.toString().trim();"},{"lineNumber":135,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":137,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"erinmayg"},"content":"     * Adds a ToDo task to the task list."},{"lineNumber":139,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":140,"author":{"gitId":"erinmayg"},"content":"     * @param task The description of the ToDo task."},{"lineNumber":141,"author":{"gitId":"erinmayg"},"content":"     * @throws DuplicateTaskException If an existing ToDo task is already on the list."},{"lineNumber":142,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"erinmayg"},"content":"    public void addToDo(String task) throws DuplicateTaskException {"},{"lineNumber":144,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":145,"author":{"gitId":"erinmayg"},"content":"        assert task !\u003d null;"},{"lineNumber":146,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":147,"author":{"gitId":"erinmayg"},"content":"        Task toDo \u003d new ToDo(task.trim());"},{"lineNumber":148,"author":{"gitId":"erinmayg"},"content":"        if (tasks.contains(toDo)) {"},{"lineNumber":149,"author":{"gitId":"erinmayg"},"content":"            throw new DuplicateTaskException();"},{"lineNumber":150,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":152,"author":{"gitId":"erinmayg"},"content":"        tasks.add(toDo);"},{"lineNumber":153,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":155,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"erinmayg"},"content":"     * Adds an Event to the task list."},{"lineNumber":157,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":158,"author":{"gitId":"erinmayg"},"content":"     * @param input The description of the Event."},{"lineNumber":159,"author":{"gitId":"erinmayg"},"content":"     * @throws DuplicateTaskException If an existing Event with the same description"},{"lineNumber":160,"author":{"gitId":"erinmayg"},"content":"     *                                and date is already on the list."},{"lineNumber":161,"author":{"gitId":"erinmayg"},"content":"     * @throws EventInvalidDate       If the date of the event given is not in a valid date time format."},{"lineNumber":162,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"erinmayg"},"content":"    public void addEvent(String input) throws DuplicateTaskException, EventInvalidDate, InvalidEndDate {"},{"lineNumber":164,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":165,"author":{"gitId":"erinmayg"},"content":"        assert input !\u003d null;"},{"lineNumber":166,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":167,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":168,"author":{"gitId":"erinmayg"},"content":"            String task \u003d input.substring(0, input.indexOf(\u0027/\u0027)).trim();"},{"lineNumber":169,"author":{"gitId":"erinmayg"},"content":"            LocalDateTime date \u003d input.contains(\"to \")"},{"lineNumber":170,"author":{"gitId":"erinmayg"},"content":"                ? Parser.getDateTime(input.substring("},{"lineNumber":171,"author":{"gitId":"erinmayg"},"content":"                    input.indexOf(\"/at\") + \"/at \".length(), input.indexOf(\"to \")))"},{"lineNumber":172,"author":{"gitId":"erinmayg"},"content":"                : Parser.getDateTime(input.substring("},{"lineNumber":173,"author":{"gitId":"erinmayg"},"content":"                    input.indexOf(\"/at\") + \"/at \".length()));"},{"lineNumber":174,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":175,"author":{"gitId":"erinmayg"},"content":"            LocalDateTime endDate \u003d null;"},{"lineNumber":176,"author":{"gitId":"erinmayg"},"content":"            if (input.contains(\"to \")) {"},{"lineNumber":177,"author":{"gitId":"erinmayg"},"content":"                String timeFormat \u003d \"hh:mm:ss\";"},{"lineNumber":178,"author":{"gitId":"erinmayg"},"content":"                String endDateString \u003d input.substring(input.indexOf(\"to \") + \"to \".length());"},{"lineNumber":179,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":180,"author":{"gitId":"erinmayg"},"content":"                if (endDateString.length() \u003c\u003d timeFormat.length()) {"},{"lineNumber":181,"author":{"gitId":"erinmayg"},"content":"                    endDate \u003d LocalDateTime.of(date.toLocalDate(), LocalTime.parse(endDateString));"},{"lineNumber":182,"author":{"gitId":"erinmayg"},"content":"                } else {"},{"lineNumber":183,"author":{"gitId":"erinmayg"},"content":"                    endDate \u003d Parser.getDateTime(endDateString);"},{"lineNumber":184,"author":{"gitId":"erinmayg"},"content":"                }"},{"lineNumber":185,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":186,"author":{"gitId":"erinmayg"},"content":"                if (endDate.isBefore(date)) {"},{"lineNumber":187,"author":{"gitId":"erinmayg"},"content":"                    throw new InvalidEndDate();"},{"lineNumber":188,"author":{"gitId":"erinmayg"},"content":"                }"},{"lineNumber":189,"author":{"gitId":"erinmayg"},"content":"            }"},{"lineNumber":190,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":191,"author":{"gitId":"erinmayg"},"content":"            Event event \u003d endDate !\u003d null"},{"lineNumber":192,"author":{"gitId":"erinmayg"},"content":"                ? new Event(task, date, endDate)"},{"lineNumber":193,"author":{"gitId":"erinmayg"},"content":"                : new Event(task, date);"},{"lineNumber":194,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":195,"author":{"gitId":"erinmayg"},"content":"            if (tasks.contains(event)) {"},{"lineNumber":196,"author":{"gitId":"erinmayg"},"content":"                throw new DuplicateTaskException();"},{"lineNumber":197,"author":{"gitId":"erinmayg"},"content":"            }"},{"lineNumber":198,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":199,"author":{"gitId":"erinmayg"},"content":"            tasks.add(event);"},{"lineNumber":200,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":201,"author":{"gitId":"erinmayg"},"content":"        } catch (StringIndexOutOfBoundsException | InvalidDateException e) {"},{"lineNumber":202,"author":{"gitId":"erinmayg"},"content":"            throw new EventInvalidDate();"},{"lineNumber":203,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":205,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":207,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"erinmayg"},"content":"     * Adds a Deadline to the task list."},{"lineNumber":209,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":210,"author":{"gitId":"erinmayg"},"content":"     * @param input The description of the deadline."},{"lineNumber":211,"author":{"gitId":"erinmayg"},"content":"     * @throws DuplicateTaskException If an existing Deadline with the same description"},{"lineNumber":212,"author":{"gitId":"erinmayg"},"content":"     *                                and date is already on the list."},{"lineNumber":213,"author":{"gitId":"erinmayg"},"content":"     * @throws DeadlineInvalidDate    If the date of the deadline given is not in a valid date time format."},{"lineNumber":214,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":215,"author":{"gitId":"erinmayg"},"content":"    public void addDeadline(String input) throws DuplicateTaskException, DeadlineInvalidDate {"},{"lineNumber":216,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":217,"author":{"gitId":"erinmayg"},"content":"        assert input !\u003d null;"},{"lineNumber":218,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":219,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":220,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":221,"author":{"gitId":"erinmayg"},"content":"            String task \u003d input.substring(0, input.indexOf(\u0027/\u0027)).trim();"},{"lineNumber":222,"author":{"gitId":"erinmayg"},"content":"            LocalDateTime date \u003d Parser.getDateTime("},{"lineNumber":223,"author":{"gitId":"erinmayg"},"content":"                input.substring(input.indexOf(\"/by\") + \"/by \".length()));"},{"lineNumber":224,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":225,"author":{"gitId":"erinmayg"},"content":"            Deadline deadline \u003d new Deadline(task, date);"},{"lineNumber":226,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":227,"author":{"gitId":"erinmayg"},"content":"            if (tasks.contains(deadline)) {"},{"lineNumber":228,"author":{"gitId":"erinmayg"},"content":"                throw new DuplicateTaskException();"},{"lineNumber":229,"author":{"gitId":"erinmayg"},"content":"            } else {"},{"lineNumber":230,"author":{"gitId":"erinmayg"},"content":"                tasks.add(deadline);"},{"lineNumber":231,"author":{"gitId":"erinmayg"},"content":"            }"},{"lineNumber":232,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":233,"author":{"gitId":"erinmayg"},"content":"        } catch (StringIndexOutOfBoundsException | InvalidDateException e) {"},{"lineNumber":234,"author":{"gitId":"erinmayg"},"content":"            throw new DeadlineInvalidDate();"},{"lineNumber":235,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":236,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":238,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":239,"author":{"gitId":"erinmayg"},"content":"     * Marks the task with the given index as done."},{"lineNumber":240,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":241,"author":{"gitId":"erinmayg"},"content":"     * @param taskNumbers The indexes of the tasks to be marked."},{"lineNumber":242,"author":{"gitId":"erinmayg"},"content":"     * @throws InvalidIndexException If the taskNumbers \u003c 0 or larger than the size of the taskList."},{"lineNumber":243,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":244,"author":{"gitId":"erinmayg"},"content":"    public String markDone(Integer... taskNumbers) throws InvalidIndexException {"},{"lineNumber":245,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":246,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":247,"author":{"gitId":"erinmayg"},"content":"            StringBuilder str \u003d new StringBuilder();"},{"lineNumber":248,"author":{"gitId":"erinmayg"},"content":"            str.append(\"Nice! I\u0027ve marked these tasks as done:\\n\");"},{"lineNumber":249,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":250,"author":{"gitId":"erinmayg"},"content":"            Stream.of(taskNumbers).forEach(taskNo -\u003e {"},{"lineNumber":251,"author":{"gitId":"erinmayg"},"content":"                tasks.set(taskNo - 1, tasks.get(taskNo - 1).markDone());"},{"lineNumber":252,"author":{"gitId":"erinmayg"},"content":"                str.append(String.format(\"%s\\n\", tasks.get(taskNo - 1)));"},{"lineNumber":253,"author":{"gitId":"erinmayg"},"content":"            });"},{"lineNumber":254,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":255,"author":{"gitId":"erinmayg"},"content":"            return str.toString().trim();"},{"lineNumber":256,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":257,"author":{"gitId":"erinmayg"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":258,"author":{"gitId":"erinmayg"},"content":"            throw new InvalidIndexException(tasks.size());"},{"lineNumber":259,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":260,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":262,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":263,"author":{"gitId":"erinmayg"},"content":"     * Deletes the task with the given index."},{"lineNumber":264,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":265,"author":{"gitId":"erinmayg"},"content":"     * @param taskNumbers The numbers of the tasks to be deleted."},{"lineNumber":266,"author":{"gitId":"erinmayg"},"content":"     * @throws InvalidIndexException If the taskNumbers \u003c 1 or larger than the size of the taskList."},{"lineNumber":267,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":268,"author":{"gitId":"erinmayg"},"content":"    public String deleteTasks(Integer... taskNumbers) throws InvalidIndexException {"},{"lineNumber":269,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":270,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":271,"author":{"gitId":"erinmayg"},"content":"            // Check if all taskNumbers within index"},{"lineNumber":272,"author":{"gitId":"erinmayg"},"content":"            boolean hasInvalidIndex \u003d Stream.of(taskNumbers).anyMatch("},{"lineNumber":273,"author":{"gitId":"erinmayg"},"content":"                taskNo -\u003e taskNo \u003c 1 || taskNo \u003e tasks.size());"},{"lineNumber":274,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":275,"author":{"gitId":"erinmayg"},"content":"            if (hasInvalidIndex) {"},{"lineNumber":276,"author":{"gitId":"erinmayg"},"content":"                throw new InvalidIndexException(tasks.size());"},{"lineNumber":277,"author":{"gitId":"erinmayg"},"content":"            }"},{"lineNumber":278,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":279,"author":{"gitId":"erinmayg"},"content":"            // Store deleted tasks (to print)"},{"lineNumber":280,"author":{"gitId":"erinmayg"},"content":"            ArrayList\u003cTask\u003e deletedTasks \u003d Stream.of(taskNumbers)"},{"lineNumber":281,"author":{"gitId":"erinmayg"},"content":"                .map(taskNo -\u003e tasks.get(taskNo - 1))"},{"lineNumber":282,"author":{"gitId":"erinmayg"},"content":"                .collect(Collectors.toCollection(ArrayList::new));"},{"lineNumber":283,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":284,"author":{"gitId":"erinmayg"},"content":"            // Delete the tasks"},{"lineNumber":285,"author":{"gitId":"erinmayg"},"content":"            Stream.of(taskNumbers).forEach(taskNo -\u003e tasks.set(taskNo - 1, null));"},{"lineNumber":286,"author":{"gitId":"erinmayg"},"content":"            tasks.removeIf(Objects::isNull);"},{"lineNumber":287,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":288,"author":{"gitId":"erinmayg"},"content":"            // List deleted tasks"},{"lineNumber":289,"author":{"gitId":"erinmayg"},"content":"            StringBuilder str \u003d new StringBuilder();"},{"lineNumber":290,"author":{"gitId":"erinmayg"},"content":"            str.append(\"Noted. I\u0027ve removed these tasks:\\n\");"},{"lineNumber":291,"author":{"gitId":"erinmayg"},"content":"            deletedTasks.forEach(deleted -\u003e str.append(String.format(\"%s\\n\", deleted)));"},{"lineNumber":292,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":293,"author":{"gitId":"erinmayg"},"content":"            return str.toString().trim();"},{"lineNumber":294,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":295,"author":{"gitId":"erinmayg"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":296,"author":{"gitId":"erinmayg"},"content":"            throw new InvalidIndexException(tasks.size());"},{"lineNumber":297,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":298,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":300,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":301,"author":{"gitId":"erinmayg"},"content":"     * Finds tasks that contains any of the given keywords."},{"lineNumber":302,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":303,"author":{"gitId":"erinmayg"},"content":"     * @param keywords The keywords to search for in tasks."},{"lineNumber":304,"author":{"gitId":"erinmayg"},"content":"     * @return A list of tasks with the given keywords."},{"lineNumber":305,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":306,"author":{"gitId":"erinmayg"},"content":"    public ArrayList\u003cTask\u003e findTasks(String... keywords) {"},{"lineNumber":307,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":308,"author":{"gitId":"erinmayg"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":309,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":310,"author":{"gitId":"erinmayg"},"content":"        boolean containsKeyword;"},{"lineNumber":311,"author":{"gitId":"erinmayg"},"content":"        for (Task task : tasks) {"},{"lineNumber":312,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":313,"author":{"gitId":"erinmayg"},"content":"            containsKeyword \u003d false;"},{"lineNumber":314,"author":{"gitId":"erinmayg"},"content":"            for (String keyword: keywords) {"},{"lineNumber":315,"author":{"gitId":"erinmayg"},"content":"                if (task.getTask().contains(keyword.trim().toLowerCase())) {"},{"lineNumber":316,"author":{"gitId":"erinmayg"},"content":"                    containsKeyword \u003d true;"},{"lineNumber":317,"author":{"gitId":"erinmayg"},"content":"                    break;"},{"lineNumber":318,"author":{"gitId":"erinmayg"},"content":"                }"},{"lineNumber":319,"author":{"gitId":"erinmayg"},"content":"            }"},{"lineNumber":320,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":321,"author":{"gitId":"erinmayg"},"content":"            if (containsKeyword) {"},{"lineNumber":322,"author":{"gitId":"erinmayg"},"content":"                foundTasks.add(task);"},{"lineNumber":323,"author":{"gitId":"erinmayg"},"content":"            }"},{"lineNumber":324,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":325,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":326,"author":{"gitId":"erinmayg"},"content":"        return foundTasks;"},{"lineNumber":327,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":328,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":329,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":330,"author":{"gitId":"erinmayg"},"content":"     * Prints the list of tasks with the given keyword(s)."},{"lineNumber":331,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":332,"author":{"gitId":"erinmayg"},"content":"     * @param keywords The keywords to search for in tasks."},{"lineNumber":333,"author":{"gitId":"erinmayg"},"content":"     * @return A String representation of the matching tasks."},{"lineNumber":334,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":335,"author":{"gitId":"erinmayg"},"content":"    public String printTasks(String... keywords) {"},{"lineNumber":336,"author":{"gitId":"erinmayg"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d findTasks(keywords);"},{"lineNumber":337,"author":{"gitId":"erinmayg"},"content":"        if (foundTasks.size() \u003d\u003d 0) {"},{"lineNumber":338,"author":{"gitId":"erinmayg"},"content":"            return \"You have nothing on your list with the given keyword.\";"},{"lineNumber":339,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":340,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":341,"author":{"gitId":"erinmayg"},"content":"        return \"Here are the tasks with the given keyword:\\n\" + printList(foundTasks);"},{"lineNumber":342,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":343,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":344,"author":{"gitId":"erinmayg"},"content":"    /** Prints the recently added task. */"},{"lineNumber":345,"author":{"gitId":"erinmayg"},"content":"    public String printNewTask() {"},{"lineNumber":346,"author":{"gitId":"erinmayg"},"content":"        return String.format(\"Got it. I\u0027ve added this task:\\n %s\\n\""},{"lineNumber":347,"author":{"gitId":"erinmayg"},"content":"            + \"You have %d %s on your list.\","},{"lineNumber":348,"author":{"gitId":"erinmayg"},"content":"            tasks.get(tasks.size() - 1), tasks.size(), tasks.size() \u003d\u003d 1 ? \"task\" : \"tasks\");"},{"lineNumber":349,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":350,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":351,"author":{"gitId":"erinmayg"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":352,"author":{"gitId":"erinmayg"},"content":"        return tasks;"},{"lineNumber":353,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":354,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":354}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"/** Deals with interaction with the user. */"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"    /** A decorative line to serve as a border. */"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    public static final String LINE \u003d \"____________________________________________________________\";"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"    /** The name of the Duke bot. */"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"    private final String botName \u003d \"Cipher\";"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    /** The logo for the Duke bot. */"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"    private final String logo \u003d \"Greetings, human. I am\\n\""},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"        + \" ,-----.,--.,------. ,--.  ,--.,------.,------.\\n\""},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"        + \"\u0027  .--./|  ||  .--. \u0027|  \u0027--\u0027  ||  .---\u0027|  .--. \u0027\\n\""},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"        + \"|  |    |  ||  \u0027--\u0027 ||  .--.  ||  `--, |  \u0027--\u0027.\u0027\\n\""},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"        + \"\u0027  \u0027--\u0027\\\\|  ||  | --\u0027 |  |  |  ||  `---.|  |\\\\  \\\\\\n\""},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"        + \" `-----\u0027`--\u0027`--\u0027     `--\u0027  `--\u0027`------\u0027`--\u0027 \u0027--\u0027\";"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"    /** The scanner used to read user inputs. */"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"    private final Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"    /** Prints the logo of the Duke bot. */"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"    private void printLogo() {"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"        System.out.println(logo);"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"    /** Greets the user. */"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"    private void greet() {"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"        System.out.println(LINE);"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"        System.out.println(\"Hello! I am \" + botName + \", your personal chat-bot companion.\");"},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"        System.out.println(\"How may I help you?\");"},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"        System.out.println(LINE);"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"    /** Prints the logo and greets the user. */"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"    public void showWelcome() {"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"        printLogo();"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"        greet();"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"     * Says goodbye to the user."},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"     * @return The goodbye string."},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"    public String bye() {"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"        sc.close();"},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"        return String.format(\"Bye! Thank you for chatting with %s!\\n\""},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":"            + \"Hope to see you again soon!\", botName);"},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":"    /** Prints the border line. */"},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":"    public void showLine() {"},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":"        System.out.println(LINE);"},{"lineNumber":58,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":60,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"erinmayg"},"content":"     * Reads the input from the user."},{"lineNumber":62,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"erinmayg"},"content":"     * @return The user input."},{"lineNumber":64,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"erinmayg"},"content":"    public String readCommand() {"},{"lineNumber":66,"author":{"gitId":"erinmayg"},"content":"        return sc.nextLine();"},{"lineNumber":67,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":69,"author":{"gitId":"erinmayg"},"content":"    /** Prints the error message. */"},{"lineNumber":70,"author":{"gitId":"erinmayg"},"content":"    public void showError(String errorMessage) {"},{"lineNumber":71,"author":{"gitId":"erinmayg"},"content":"        System.out.println(errorMessage);"},{"lineNumber":72,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":74,"author":{"gitId":"erinmayg"},"content":"    /** Prints the error message. */"},{"lineNumber":75,"author":{"gitId":"erinmayg"},"content":"    public void showLoadingError() {"},{"lineNumber":76,"author":{"gitId":"erinmayg"},"content":"        System.out.println(\"Unable to load the data. Creating new file...\");"},{"lineNumber":77,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":79,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"erinmayg"},"content":"     * Prints the message given."},{"lineNumber":81,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"erinmayg"},"content":"     * @param msg The message to be printed."},{"lineNumber":83,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"erinmayg"},"content":"    public void printMessage(String msg) {"},{"lineNumber":85,"author":{"gitId":"erinmayg"},"content":"        System.out.println(msg);"},{"lineNumber":86,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":87}},{"path":"src/main/java/duke/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"/** A command to add tasks. */"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"public abstract class AddTaskCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"    /** The description of the command. */"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"    protected String input;"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"     * Executes the command by adding a task into the taskList and saves the new taskList."},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"     * @param taskList The task list that stores and modifies the list of saved tasks."},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"     * @param ui       The UI of the bot."},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"     * @param storage  The storage system of the bot."},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"     * @throws DukeException If there is something wrong with the task input."},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"        addTask(taskList, input);"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"        storage.saveTasks(taskList.getTasks());"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"        return taskList.printNewTask();"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"     * Adds a task into the @taskList."},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"     * @param taskList The task list containing all saved tasks."},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"     * @param input    The description of the command."},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"     * @throws DukeException If the input is not in a valid format."},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"    public abstract void addTask(TaskList taskList, String input) throws DukeException;"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":37}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"/** A command for the Duke bot to execute. */"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"public abstract class Command {"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"    /** The type of command. */"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"    protected boolean isExit;"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"     * Executes the command accordingly."},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"     * @param taskList The task list that stores and modifies the list of saved tasks."},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"     * @param ui       The UI of the bot."},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"     * @param storage  The storage system of the bot."},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"     * @throws DukeException If there is something wrong with the task input."},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"    public abstract String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"     * Returns the type of command."},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"     * @return True if the command is an ExitCommand."},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"    public boolean isExit() {"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"        return isExit;"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":32}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"/** A command to add a Deadline. */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"public class DeadlineCommand extends AddTaskCommand {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"     * Constructs a DeadlineCommand."},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"     * @param input The description of the deadline."},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    public DeadlineCommand(String input) {"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"        this.input \u003d input;"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"     * Adds a deadline into the task list."},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"     * @param taskList The task list that stores and modifies the list of saved tasks."},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"     * @param input    The description of the deadline."},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"     * @throws DukeException If there is something wrong with the deadline input."},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"    public void addTask(TaskList taskList, String input) throws DukeException {"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"        taskList.addDeadline(input);"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"     * Compares with an object."},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"     * @param o The object compared."},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"     * @return True if the object is of type DeadlineCommand and has the same input."},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"    public boolean equals(Object o) {"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"        if (o \u003d\u003d this) {"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"            return true;"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"        } else if (o instanceof DeadlineCommand) {"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"            DeadlineCommand t \u003d (DeadlineCommand) o;"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"            return t.input.equals(this.input);"},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"            return false;"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":47}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"import duke.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"/** A command to delete a task. */"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"    /** The task number to be deleted. */"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    private Integer[] taskNumbers;"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"     * Constructs a DeleteCommand."},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"     * @param taskNumbers The task number to be deleted."},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"    public DeleteCommand(Integer... taskNumbers) {"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"        this.taskNumbers \u003d taskNumbers;"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"        isExit \u003d false;"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"     * Executes the command by deleting a task with the given taskNo."},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"     * @param taskList The task list that stores and modifies the list of saved tasks."},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"     * @param ui       The UI of the bot."},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"     * @param storage  The storage system of the bot."},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"     * @throws DukeException If there is something wrong with the deleting process."},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"        String deleteTasks \u003d taskList.deleteTasks(taskNumbers);"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"        storage.saveTasks(taskList.getTasks());"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"        return deleteTasks;"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"     * Compares with an object."},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"     * @param o The object compared."},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"     * @return True if the object is of type DeleteCommand and has the same taskNo."},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":"    public boolean equals(Object o) {"},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"        if (o \u003d\u003d this) {"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"            return true;"},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"        } else if (o instanceof DeleteCommand) {"},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":"            DeleteCommand t \u003d (DeleteCommand) o;"},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":"            return Arrays.equals(t.taskNumbers, this.taskNumbers);"},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":"        } else {"},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":"            return false;"},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":58}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"import duke.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"/** A command to mark a task as done. */"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"public class DoneCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"    /** The number of the task to be marked as done. */"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    private Integer[] taskNumbers;"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"     * Constructs a DoneCommand."},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"     * @param taskNumbers The number of the task to be marked as done."},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"    public DoneCommand(Integer... taskNumbers) {"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"        this.taskNumbers \u003d taskNumbers;"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"        isExit \u003d false;"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"     * Executes the command by marking the task with the given taskNo as done."},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"     * @param taskList The task list that stores and modifies the list of saved tasks."},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"     * @param ui       The UI of the bot."},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"     * @param storage  The storage system of the bot."},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"     * @throws DukeException If the taskNo is invalid."},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"        String taskDone \u003d taskList.markDone(taskNumbers);"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"        storage.saveTasks(taskList.getTasks());"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"        return taskDone;"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"     * Compares an object."},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"     * @param o The object compared."},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"     * @return True if the object is of type DoneCommand and has the same taskNo."},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":"    public boolean equals(Object o) {"},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"        if (o \u003d\u003d this) {"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"            return true;"},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"        } else if (o instanceof DoneCommand) {"},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":"            DoneCommand t \u003d (DoneCommand) o;"},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":"            return Arrays.equals(t.taskNumbers, this.taskNumbers);"},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":"        } else {"},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":"            return false;"},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":58}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"/** A command to add an @Event. */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"public class EventCommand extends AddTaskCommand {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"     * Constructs an EventCommand."},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"     * @param input The description of the Event."},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    public EventCommand(String input) {"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"        this.input \u003d input;"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"     * Adds an @Event to the task list."},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"     * @param taskList The task list containing all saved tasks."},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"     * @param input    The description of the command."},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"     * @throws DukeException If there is an error when adding the Event into the list."},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"    public void addTask(TaskList taskList, String input) throws DukeException {"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"        taskList.addEvent(input);"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"     * Compares an object."},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"     * @param o The object compared."},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"     * @return True if the object is of type EventCommand and has the same @input."},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"    public boolean equals(Object o) {"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"        if (o \u003d\u003d this) {"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"            return true;"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"        } else if (o instanceof EventCommand) {"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"            EventCommand t \u003d (EventCommand) o;"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"            return t.input.equals(this.input);"},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"            return false;"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":47}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"/** A command to exit the bot. */"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"    /** Constructs an ExitCommand. */"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"    public ExitCommand() {"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"        isExit \u003d true;"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"     * Executes the command by printing a goodbye message."},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"     * @param taskList The task list that stores and modifies the list of saved tasks."},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"     * @param ui       The UI of the bot."},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"     * @param storage  The storage system of the bot."},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"        return ui.bye();"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":26}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"import duke.exception.NoKeywordException;"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"/** A command to find tasks with a given keyword. */"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"    /** The keyword to find in tasks. */"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"    private String[] keywords;"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"     * Constructs a FindCommand."},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"     * @param keywords The input given by the user."},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"     * @throws NoKeywordException If the fullCommand has no keyword following find command."},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"    public FindCommand(String... keywords) throws NoKeywordException {"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"            this.keywords \u003d keywords;"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"            throw new NoKeywordException();"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"     * Executes the command by finding tasks with the given keyword."},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"     * @param taskList The task list that adds or deletes task in the task list."},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"     * @param ui       The UI for the bot."},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"     * @param storage  The storage for saving tasks."},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"        return taskList.printTasks(keywords);"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":39}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"/** A command to display a list of commands and what it does. */"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"public class HelpCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"    private static final String COMMAND_LIST \u003d"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"        \"List of commands:\\n\""},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"        + \"- help: displays the list of commands\\n\""},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"        + \"- todo: adds a ToDo task\\n\""},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"        + \"- event: adds an Event\\n\""},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"        + \"- deadline: adds a Deadline\\n\""},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"        + \"- find: finds tasks with the given keyword(s)\\n\""},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"        + \"- list: displays all tasks [with the given date]\\n\""},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"        + \"- done: marks the task(s) with the given index(es) as done\\n\""},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"        + \"- delete: deletes the task(s) with the given index(es)\\n\""},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"        + \"- bye: terminates the duke bot\\n\";"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"     * Executes the command by printing the list of commands."},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"     * @param taskList The task list that stores and modifies the list of saved tasks."},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"     * @param ui       The UI of the bot."},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"     * @param storage  The storage system of the bot."},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"        return COMMAND_LIST + \"\\n\";"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":33}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"/** A command to display tasks in the task list. */"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"    /** The full command given by the user. */"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"    private String fullCommand;"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"     * Constructs a ListCommand."},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"     * @param fullCommand The input given by the user."},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"    public ListCommand(String fullCommand) {"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"        this.fullCommand \u003d fullCommand;"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"     * Executes the command by listing the tasks."},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"     * @param taskList The task list that stores and modifies the list of saved tasks."},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"     * @param ui       The UI of the bot."},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"     * @param storage  The storage system of the bot."},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"     * @throws DukeException If there is something wrong with the input format given by the user."},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"        return taskList.processList(fullCommand);"},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":35}},{"path":"src/main/java/duke/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"/** A command to add a ToDo to the task list. */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"public class ToDoCommand extends AddTaskCommand {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"     * Constructs a ToDoCommand."},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"     * @param input The description of the ToDo."},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    public ToDoCommand(String input) {"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"        this.input \u003d input;"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"     * Adds a ToDo to the task list."},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"     * @param taskList The task list containing all saved tasks."},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"     * @param input    The description of the command."},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"     * @throws DukeException If the input is not in a valid format."},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"    public void addTask(TaskList taskList, String input) throws DukeException {"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"        taskList.addToDo(input);"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"     * Compares an object."},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"     * @param o The object compared."},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"     * @return True if the object is of type ToDoCommand and has the same input."},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"    public boolean equals(Object o) {"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"        if (o \u003d\u003d this) {"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"            return true;"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"        } else if (o instanceof ToDoCommand) {"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"            ToDoCommand t \u003d (ToDoCommand) o;"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"            return t.input.equals(this.input);"},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"            return false;"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":47}},{"path":"src/main/java/duke/exception/DeadlineInvalidDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"/** An exception for an invalid date for a deadline. */"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"public class DeadlineInvalidDate extends InvalidDateTimeException {"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"    /** Constructs a DeadlineInvalidDate exception. */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"    public DeadlineInvalidDate() {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"        super(\"OOPS. You need to put \\\"/by [DateTimeFormat]\\\"\\n\""},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"            + \"after a duke.task.Deadline.\");"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":11}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"/** An exception for the Duke bot. */"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"public class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"     * Constructs a DukeException with the given message."},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"     * @param msg The message to be printed."},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"    public DukeException(String msg) {"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"        super(msg);"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":14}},{"path":"src/main/java/duke/exception/DuplicateTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"/** An exception that occurs when trying to add an existing task into the list. */"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"public class DuplicateTaskException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"    /** Constructs a DuplicateTaskException. */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"    public DuplicateTaskException() {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"        super(\"OOPS. You already have this task on your list.\");"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":10}},{"path":"src/main/java/duke/exception/EmptyTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"/** An exception when the AddTaskCommand given has no description. */"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"public class EmptyTaskException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"    /** Constructs an EmptyTaskException. */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"    public EmptyTaskException() {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"        super(\"OOPS! The description of a task cannot be empty\");"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":10}},{"path":"src/main/java/duke/exception/EventInvalidDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"/** An exception that occurs when the given date time format for a deadline is invalid. */"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"public class EventInvalidDate extends InvalidDateTimeException {"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"    /** Constructs an EventInvalidDate exception. */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"    public EventInvalidDate() {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"        super(\"OOPS. You need to put \\\"/at [DateTimeFormat]\\\" or\\n\""},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"            + \"\\\"/at [DateTimeFormat] to [DateTimeFormat]\\\" after an duke.task.Event.\");"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":11}},{"path":"src/main/java/duke/exception/FileLoadError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"/** An exception that occurs when there\u0027s an error when loading a file. */"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"public class FileLoadError extends DukeException {"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"    /** Constructs a FileLoadError exception. */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"    public FileLoadError() {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"        super(\"Error in reading file. Cipher will now create a new file.\");"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":10}},{"path":"src/main/java/duke/exception/InvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"/** An exception when the date given is invalid. */"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"public class InvalidDateException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"    /** Constructs an InvalidDateException. */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"    public InvalidDateException() {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"        super(\"Invalid Date Format. Use YYYY-MM-DD\");"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"     * Constructs an InvalidDateException with the given message."},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"     * @param msg The message given."},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"    protected InvalidDateException(String msg) {"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"        super(msg);"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":19}},{"path":"src/main/java/duke/exception/InvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"/** An exception when the date time given is invalid. */"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"public class InvalidDateTimeException extends InvalidDateException {"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"    /** The valid date time format that Duke accepts. */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"    private static String dateTimeFormat \u003d \"The following DateTimeFormat is valid:\\n\""},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"        + \"{YYYY-MM-DD}T{HH:MM:SS}\\n\""},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"        + \"{YYYY-MM-DD}T{HH:MM}\\n\""},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"        + \"{YYYY-MM-DD}\\n\""},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"        + \"{HH:MM:SS}\\n\""},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"        + \"{HH:MM}\";"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"     * Constructs an InvalidDateTimeException with the given message."},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"     * @param msg The given message."},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"    protected InvalidDateTimeException(String msg) {"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"        super(msg + \"\\n\\n\" + dateTimeFormat);"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":22}},{"path":"src/main/java/duke/exception/InvalidEndDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"/** An exception that occurs when a given endDate in an event occurs before its startDate. */"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"public class InvalidEndDate extends DukeException {"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"    public InvalidEndDate() {"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"        super(\"OOPS. Your end date occurs before the start date.\");"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":8}},{"path":"src/main/java/duke/exception/InvalidIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":" * An exception that occurs when an index Duke receives is invalid"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":" * (less than 0, or larger than the task list size."},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":" */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"public class InvalidIndexException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"     * Constructs an InvalidIndexException."},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"     * @param listSize The current size of the task list."},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    public InvalidIndexException(int listSize) {"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"        super(\"Invalid index.\\n\""},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"            + \"You have \" + listSize + \" items in your list.\");"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":18}},{"path":"src/main/java/duke/exception/NoIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"/** An exception when there is no index given following the DoneCommand or DeleteCommand. */"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"public class NoIndexException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"     * Constructs a NoIndexException."},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"     * @param deleteOrDone The type of command: DeleteCommand or DoneCommand."},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"    public NoIndexException(String deleteOrDone) {"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"        super(\"Invalid format. After \\\"\" + deleteOrDone + \"\\\", you need to put \""},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"            + \"at least one positive integer separated by [space]\");"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":15}},{"path":"src/main/java/duke/exception/NoKeywordException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"/** An exception when there is no keyword following a find command. */"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"public class NoKeywordException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"    /** Constructs a NoKeywordException. */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"    public NoKeywordException() {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"        super(\"OOPS. You need to input a keyword following \\\"find\\\".\");"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":10}},{"path":"src/main/java/duke/exception/UnrecognizedTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":" * An exception when the command given is not a valid command:"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":" * list, done, delete, bye, deadline, event, or todo."},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":" */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"public class UnrecognizedTaskException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"     * Constructs an UnrecognizedTaskException."},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"    public UnrecognizedTaskException() {"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"        super(\"OOPS. Cipher does not recognize the command :( Try again.\");"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":15}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"import javafx.geometry.Insets;"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"import javafx.geometry.Pos;"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.Node;"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.shape.Polygon;"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":" * An example of a custom control using FXML."},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":" * containing text from the speaker."},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":" */"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"public class DialogBox extends HBox {"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"    private static final Color DUKE_COLOR \u003d Color.valueOf(\"#160e3c\");"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"    private static final CornerRadii DUKE_CORNER \u003d new CornerRadii(0, 10, 10, 10, false);"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"    private static final Background DUKE_BG \u003d new Background(new BackgroundFill(DUKE_COLOR, DUKE_CORNER, Insets.EMPTY));"},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"    private static final Color USER_COLOR \u003d Color.valueOf(\"#3c317c\");"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"    private static final CornerRadii USER_CORNER \u003d new CornerRadii(10, 0, 10, 10, false);"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"    private static final Background USER_BG \u003d new Background(new BackgroundFill(USER_COLOR, USER_CORNER, Insets.EMPTY));"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"    private Label dialog;"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"    private Polygon triangle;"},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"    private Circle circleMask;"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"            fxmlLoader.load();"},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":"        } catch (IOException e) {"},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":"            e.printStackTrace();"},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":"        dialog.setText(text);"},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":"        circleMask.setFill(new ImagePattern(img));"},{"lineNumber":58,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":60,"author":{"gitId":"erinmayg"},"content":"    /** Flips the dialog box such that the ImageView is on the left and text on the right. */"},{"lineNumber":61,"author":{"gitId":"erinmayg"},"content":"    private void flip() {"},{"lineNumber":62,"author":{"gitId":"erinmayg"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":63,"author":{"gitId":"erinmayg"},"content":"        Collections.reverse(tmp);"},{"lineNumber":64,"author":{"gitId":"erinmayg"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":65,"author":{"gitId":"erinmayg"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":66,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":68,"author":{"gitId":"erinmayg"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":69,"author":{"gitId":"erinmayg"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":70,"author":{"gitId":"erinmayg"},"content":"        db.dialog.setBackground(USER_BG);"},{"lineNumber":71,"author":{"gitId":"erinmayg"},"content":"        db.triangle.setFill(USER_COLOR);"},{"lineNumber":72,"author":{"gitId":"erinmayg"},"content":"        return db;"},{"lineNumber":73,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":75,"author":{"gitId":"erinmayg"},"content":"    public static DialogBox getDukeDialog(Message msg, Image img) {"},{"lineNumber":76,"author":{"gitId":"erinmayg"},"content":"        var db \u003d new DialogBox(msg.getText(), img);"},{"lineNumber":77,"author":{"gitId":"erinmayg"},"content":"        db.flip();"},{"lineNumber":78,"author":{"gitId":"erinmayg"},"content":"        db.dialog.setBackground(DUKE_BG);"},{"lineNumber":79,"author":{"gitId":"erinmayg"},"content":"        db.triangle.setFill(DUKE_COLOR);"},{"lineNumber":80,"author":{"gitId":"erinmayg"},"content":"        db.triangle.setScaleX(-1);"},{"lineNumber":81,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":82,"author":{"gitId":"erinmayg"},"content":"        if (msg.isError()) {"},{"lineNumber":83,"author":{"gitId":"erinmayg"},"content":"            db.dialog.setStyle(\"-fx-text-fill: red\");"},{"lineNumber":84,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":86,"author":{"gitId":"erinmayg"},"content":"        return db;"},{"lineNumber":87,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":88}},{"path":"src/main/java/duke/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"/** A launcher class to workaround classpath issues. */"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":10}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":" */"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"    private Image dukeIcon \u003d new Image(this.getClass().getResourceAsStream(\"/images/dukeIcon.png\"));"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"    public void start(Stage stage) {"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"            MainWindow mw \u003d new MainWindow();"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"            fxmlLoader.setRoot(mw);"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"            stage.setScene(scene);"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"            stage.setTitle(\"Cipher\");"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"            stage.getIcons().add(dukeIcon);"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"            stage.setResizable(false);"},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"            stage.show();"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":40}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.layout.BackgroundImage;"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.layout.BackgroundPosition;"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.layout.BackgroundRepeat;"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.layout.BackgroundSize;"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"/** Controller for MainWindow. Provides the layout for the other controls. */"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"    private VBox dialogContainer;"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"    private TextField userInput;"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"    private Button sendButton;"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"    private Duke duke;"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"    private Image bgImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/wallpaper.png\"));"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"    private Image sendIcon \u003d new Image(this.getClass().getResourceAsStream(\"/images/send.png\"));"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"    private ImageView view \u003d new ImageView(sendIcon);"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"    private Message intro \u003d new Message("},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"        \"Hello! I am Cipher, your personal chat-bot companion.\\n\\n\""},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"        + \"How may I help you?\");"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"    /** Initializes the new window. */"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"    public void initialize() {"},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"        // Background"},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":"        BackgroundSize bgSize \u003d new BackgroundSize(100, 100, true, true, true, false);"},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"        BackgroundImage bg \u003d new BackgroundImage(bgImage,"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"            BackgroundRepeat.NO_REPEAT, BackgroundRepeat.REPEAT,"},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"            BackgroundPosition.DEFAULT, bgSize);"},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":"        dialogContainer.setBackground(new Background(bg));"},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":"        // Scroll Pane and Scroll Bar"},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":"        scrollPane.getStylesheets().add(this.getClass().getResource(\"/view/scrollbar.css\").toString());"},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":58,"author":{"gitId":"erinmayg"},"content":"        // Button"},{"lineNumber":59,"author":{"gitId":"erinmayg"},"content":"        view.setFitHeight(25);"},{"lineNumber":60,"author":{"gitId":"erinmayg"},"content":"        view.setFitWidth(25);"},{"lineNumber":61,"author":{"gitId":"erinmayg"},"content":"        sendButton.setGraphic(view);"},{"lineNumber":62,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":63,"author":{"gitId":"erinmayg"},"content":"        // Bot Greeting"},{"lineNumber":64,"author":{"gitId":"erinmayg"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(intro, dukeImage));"},{"lineNumber":65,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":67,"author":{"gitId":"erinmayg"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":68,"author":{"gitId":"erinmayg"},"content":"        duke \u003d d;"},{"lineNumber":69,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":71,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"erinmayg"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":73,"author":{"gitId":"erinmayg"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":74,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"erinmayg"},"content":"    @FXML"},{"lineNumber":76,"author":{"gitId":"erinmayg"},"content":"    private void handleUserInput() {"},{"lineNumber":77,"author":{"gitId":"erinmayg"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":78,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":79,"author":{"gitId":"erinmayg"},"content":"        if (input.isEmpty()) {"},{"lineNumber":80,"author":{"gitId":"erinmayg"},"content":"            return;"},{"lineNumber":81,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":83,"author":{"gitId":"erinmayg"},"content":"        Message response \u003d duke.getResponse(input);"},{"lineNumber":84,"author":{"gitId":"erinmayg"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":85,"author":{"gitId":"erinmayg"},"content":"            DialogBox.getUserDialog(input, userImage),"},{"lineNumber":86,"author":{"gitId":"erinmayg"},"content":"            DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":87,"author":{"gitId":"erinmayg"},"content":"        );"},{"lineNumber":88,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":89,"author":{"gitId":"erinmayg"},"content":"        userInput.clear();"},{"lineNumber":90,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":91,"author":{"gitId":"erinmayg"},"content":"        // Terminate when \"bye\""},{"lineNumber":92,"author":{"gitId":"erinmayg"},"content":"        if (input.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":93,"author":{"gitId":"erinmayg"},"content":"            CompletableFuture.runAsync(() -\u003e {"},{"lineNumber":94,"author":{"gitId":"erinmayg"},"content":"                try {"},{"lineNumber":95,"author":{"gitId":"erinmayg"},"content":"                    Thread.sleep(500);"},{"lineNumber":96,"author":{"gitId":"erinmayg"},"content":"                    System.exit(0);"},{"lineNumber":97,"author":{"gitId":"erinmayg"},"content":"                } catch (InterruptedException e) {"},{"lineNumber":98,"author":{"gitId":"erinmayg"},"content":"                    Thread.currentThread().interrupt();"},{"lineNumber":99,"author":{"gitId":"erinmayg"},"content":"                }"},{"lineNumber":100,"author":{"gitId":"erinmayg"},"content":"            });"},{"lineNumber":101,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":103}},{"path":"src/main/java/duke/gui/Message.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"/** The Duke bot\u0027s response to the user input. */"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"public class Message {"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"    /** The duke bot\u0027s response. */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"    private String text;"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    /** Determines if the response is an error message. */"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"    private boolean isError;"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"     * Constructs a message."},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"     * @param text The content of the message."},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"     * @param isError The status of the message."},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"    public Message(String text, boolean isError) {"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"        this.text \u003d text;"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"        this.isError \u003d isError;"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"     * Constructs a regular message (not an error message)."},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"     * @param text The content of the message."},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"    public Message(String text) {"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"        this(text, false);"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"     * Obtains the message\u0027s content."},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"     * @return The content of the message."},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"    public String getText() {"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"        return text;"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"     * Obtains the message\u0027s status."},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"     * @return True if the message is an error message, otherwise it will return false."},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"    public boolean isError() {"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"        return isError;"},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":49}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"/** A task of type deadline. */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    /** The deadline of the task. */"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"    private final LocalDateTime deadline;"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"     * Constructs a Deadline."},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"     * @param task     The description of the deadline."},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"     * @param deadline The date of the deadline."},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"     * @param isDone   The status of the deadline."},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"    private Deadline(String task, LocalDateTime deadline, boolean isDone) {"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"        super(task, isDone);"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"     * Constructs an unfinished Deadline."},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"     * @param task     The description of the deadline."},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"     * @param deadline The date of the deadline."},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"    public Deadline(String task, LocalDateTime deadline) {"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"        this(task, deadline, false);"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"     * Marks the deadline as done."},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"     * @return The same deadline with a status of completed."},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"    public Deadline markDone() {"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"        return new Deadline(task, deadline, true);"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"     * Compares with another object."},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"     * @param o The object compared."},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":"     * @return True if the object compared is a Deadline with the same task and deadline."},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"    public boolean equals(Object o) {"},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":"            return true;"},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":"        } else if (o instanceof Deadline) {"},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":"            Deadline d \u003d (Deadline) o;"},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":"            return d.task.equals(this.task) \u0026\u0026 d.deadline.equals(deadline);"},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":59,"author":{"gitId":"erinmayg"},"content":"        return false;"},{"lineNumber":60,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":62,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"erinmayg"},"content":"    public LocalDate getDate() {"},{"lineNumber":64,"author":{"gitId":"erinmayg"},"content":"        return deadline.toLocalDate();"},{"lineNumber":65,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":67,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"erinmayg"},"content":"     * The format used for saving."},{"lineNumber":69,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"erinmayg"},"content":"     * @return The String format used for saving."},{"lineNumber":71,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"erinmayg"},"content":"    public String saveFormat() {"},{"lineNumber":74,"author":{"gitId":"erinmayg"},"content":"        return \"D\" + super.saveFormat() + String.format(\"%sT%s\","},{"lineNumber":75,"author":{"gitId":"erinmayg"},"content":"            deadline.format(SAVE_DATE_FORMAT),"},{"lineNumber":76,"author":{"gitId":"erinmayg"},"content":"            deadline.format(SAVE_TIME_FORMAT));"},{"lineNumber":77,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":79,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"erinmayg"},"content":"     * The format used to display on a list."},{"lineNumber":81,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"erinmayg"},"content":"     * @return The String format of a deadline."},{"lineNumber":83,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"erinmayg"},"content":"    public String toString() {"},{"lineNumber":86,"author":{"gitId":"erinmayg"},"content":"        return \"[D]\" + super.toString() + String.format(\" (by: %s)\","},{"lineNumber":87,"author":{"gitId":"erinmayg"},"content":"            deadline.format(DATE_TIME_FORMAT));"},{"lineNumber":88,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":89}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"/** A task of type Event. */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    /** Save format for empty endDate. */"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"    public static final String EMPTY_END_DATE \u003d \"XXXXXXXXXXXXXXXXXXX\";"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"    /** The starting date time of the event. */"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"    private final LocalDateTime startDate;"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"    /** The end date time of the event. */"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"    private final LocalDateTime endDate;"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"     * Constructs an Event."},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"     * @param task      The description of the event."},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"     * @param startDate The starting date of the event."},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"     * @param endDate   The end date of the event."},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"     * @param isDone    The completion status of the event."},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"    private Event(String task, LocalDateTime startDate, LocalDateTime endDate, boolean isDone) {"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"        super(task, isDone);"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"     * Constructs an uncompleted Event."},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"     * @param task      The description of the event."},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"     * @param startDate The starting date of the event."},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"     * @param endDate   The end date of the event."},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"    public Event(String task, LocalDateTime startDate, LocalDateTime endDate) {"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"        this(task, startDate, endDate, false);"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"     * Constructs an uncompleted Event."},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"     * @param task The description of the event."},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"     * @param date The date of the event."},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"    public Event(String task, LocalDateTime date) {"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"        this(task, date, null);"},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":"     * The String format of the date."},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":"     * @return The desired date time format."},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"erinmayg"},"content":"    private String dateFormat() {"},{"lineNumber":59,"author":{"gitId":"erinmayg"},"content":"        if (endDate !\u003d null) {"},{"lineNumber":60,"author":{"gitId":"erinmayg"},"content":"            return String.format(\" (at: %s to %s)\","},{"lineNumber":61,"author":{"gitId":"erinmayg"},"content":"                startDate.format(DATE_TIME_FORMAT),"},{"lineNumber":62,"author":{"gitId":"erinmayg"},"content":"                startDate.toLocalDate().equals(endDate.toLocalDate())"},{"lineNumber":63,"author":{"gitId":"erinmayg"},"content":"                    ? endDate.format(TIME_FORMAT)"},{"lineNumber":64,"author":{"gitId":"erinmayg"},"content":"                    : endDate.format(DATE_TIME_FORMAT));"},{"lineNumber":65,"author":{"gitId":"erinmayg"},"content":"        } else {"},{"lineNumber":66,"author":{"gitId":"erinmayg"},"content":"            return String.format(\" (at: %s)\","},{"lineNumber":67,"author":{"gitId":"erinmayg"},"content":"                startDate.format(DATE_TIME_FORMAT));"},{"lineNumber":68,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":71,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"erinmayg"},"content":"     * The String format of the date used for saving."},{"lineNumber":73,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"erinmayg"},"content":"     * @return The desired date time format used for saving."},{"lineNumber":75,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"erinmayg"},"content":"    private String dateSaveFormat() {"},{"lineNumber":77,"author":{"gitId":"erinmayg"},"content":"        String startDateString \u003d String.format(\"%sT%s\","},{"lineNumber":78,"author":{"gitId":"erinmayg"},"content":"            startDate.format(SAVE_DATE_FORMAT),"},{"lineNumber":79,"author":{"gitId":"erinmayg"},"content":"            startDate.format(SAVE_TIME_FORMAT));"},{"lineNumber":80,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":81,"author":{"gitId":"erinmayg"},"content":"        String endDateString \u003d endDate !\u003d null"},{"lineNumber":82,"author":{"gitId":"erinmayg"},"content":"            ? String.format(\"%sT%s\", endDate.format(SAVE_DATE_FORMAT),"},{"lineNumber":83,"author":{"gitId":"erinmayg"},"content":"            endDate.format(SAVE_TIME_FORMAT))"},{"lineNumber":84,"author":{"gitId":"erinmayg"},"content":"            : EMPTY_END_DATE;"},{"lineNumber":85,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":86,"author":{"gitId":"erinmayg"},"content":"        return startDateString + \" to \" + endDateString;"},{"lineNumber":87,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":89,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"erinmayg"},"content":"     * Marks the event as done."},{"lineNumber":91,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"erinmayg"},"content":"     * @return The same event with a status of completed."},{"lineNumber":93,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":95,"author":{"gitId":"erinmayg"},"content":"    public Event markDone() {"},{"lineNumber":96,"author":{"gitId":"erinmayg"},"content":"        return new Event(task, startDate, endDate, true);"},{"lineNumber":97,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":99,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"erinmayg"},"content":"    public LocalDate getDate() {"},{"lineNumber":101,"author":{"gitId":"erinmayg"},"content":"        return startDate.toLocalDate();"},{"lineNumber":102,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":104,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"erinmayg"},"content":"     * Compares with another object."},{"lineNumber":106,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"erinmayg"},"content":"     * @param obj The object compared."},{"lineNumber":108,"author":{"gitId":"erinmayg"},"content":"     * @return True if the object compared is a Event with the same task, start and end dates."},{"lineNumber":109,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"erinmayg"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":112,"author":{"gitId":"erinmayg"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":113,"author":{"gitId":"erinmayg"},"content":"            return true;"},{"lineNumber":114,"author":{"gitId":"erinmayg"},"content":"        } else if (obj instanceof Event) {"},{"lineNumber":115,"author":{"gitId":"erinmayg"},"content":"            Event event \u003d (Event) obj;"},{"lineNumber":116,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":117,"author":{"gitId":"erinmayg"},"content":"            boolean isSameTask \u003d event.task.equals(this.task);"},{"lineNumber":118,"author":{"gitId":"erinmayg"},"content":"            boolean isSameStartDate \u003d event.startDate.equals(startDate);"},{"lineNumber":119,"author":{"gitId":"erinmayg"},"content":"            boolean isSameEndDate \u003d event.endDate !\u003d null \u0026\u0026 endDate !\u003d null"},{"lineNumber":120,"author":{"gitId":"erinmayg"},"content":"                    ? event.endDate.equals(endDate)"},{"lineNumber":121,"author":{"gitId":"erinmayg"},"content":"                    : event.endDate \u003d\u003d null \u0026\u0026 endDate \u003d\u003d null;"},{"lineNumber":122,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":123,"author":{"gitId":"erinmayg"},"content":"            return isSameTask \u0026\u0026 isSameStartDate \u0026\u0026 isSameEndDate;"},{"lineNumber":124,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":126,"author":{"gitId":"erinmayg"},"content":"        return false;"},{"lineNumber":127,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":129,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"erinmayg"},"content":"     * The format used for saving."},{"lineNumber":131,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"erinmayg"},"content":"     * @return The String format used for saving."},{"lineNumber":133,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":135,"author":{"gitId":"erinmayg"},"content":"    public String saveFormat() {"},{"lineNumber":136,"author":{"gitId":"erinmayg"},"content":"        return \"E\" + super.saveFormat() + dateSaveFormat();"},{"lineNumber":137,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":139,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"erinmayg"},"content":"     * The format used to display on a list."},{"lineNumber":141,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":142,"author":{"gitId":"erinmayg"},"content":"     * @return The String format of a deadline."},{"lineNumber":143,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":145,"author":{"gitId":"erinmayg"},"content":"    public String toString() {"},{"lineNumber":146,"author":{"gitId":"erinmayg"},"content":"        return \"[E]\" + super.toString() + dateFormat();"},{"lineNumber":147,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":148}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"/** The task to be put on the list. */"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"public abstract class Task {"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"    /** Save Date Format. */"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"    protected static final DateTimeFormatter SAVE_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"y-MM-dd\");"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"    /** Save Time Format. */"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"    protected static final DateTimeFormatter SAVE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"HH:mm:ss\");"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"    /** Print DateTime Format. */"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"    protected static final DateTimeFormatter DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM y, h:mm a\");"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"    /** Print Time Format. */"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"    protected static final DateTimeFormatter TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"h:mm a\");"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"    /** The task description. */"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"    protected final String task;"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"    /** The completion status. */"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"    protected final boolean isDone;"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"     * Constructs a Task."},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"     * @param task   The task description."},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"     * @param isDone The task\u0027s completion status."},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"    protected Task(String task, boolean isDone) {"},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"        this.task \u003d task;"},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"     * Constructs an uncompleted Task."},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"     * @param task The task description."},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"    public Task(String task) {"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"        this.task \u003d task;"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"        this.isDone \u003d false;"},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":"    /** Marks the task as done. */"},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"    public abstract Task markDone();"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"    public String getTask() {"},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":"        return this.task;"},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":"    public abstract LocalDate getDate();"},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"erinmayg"},"content":"     * Compares with another object."},{"lineNumber":59,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"erinmayg"},"content":"     * @param o The object compared."},{"lineNumber":61,"author":{"gitId":"erinmayg"},"content":"     * @return True if the object compared is a Task with the same task description."},{"lineNumber":62,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"erinmayg"},"content":"    public boolean equals(Object o) {"},{"lineNumber":65,"author":{"gitId":"erinmayg"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":66,"author":{"gitId":"erinmayg"},"content":"            return true;"},{"lineNumber":67,"author":{"gitId":"erinmayg"},"content":"        } else if (o instanceof Task) {"},{"lineNumber":68,"author":{"gitId":"erinmayg"},"content":"            Task t \u003d (Task) o;"},{"lineNumber":69,"author":{"gitId":"erinmayg"},"content":"            return t.task.equals(this.task);"},{"lineNumber":70,"author":{"gitId":"erinmayg"},"content":"        } else {"},{"lineNumber":71,"author":{"gitId":"erinmayg"},"content":"            return false;"},{"lineNumber":72,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":75,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"erinmayg"},"content":"     * The format used to display on a list."},{"lineNumber":77,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"erinmayg"},"content":"     * @return The String format of a task."},{"lineNumber":79,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"erinmayg"},"content":"    public String toString() {"},{"lineNumber":82,"author":{"gitId":"erinmayg"},"content":"        String symbol \u003d isDone ? \"[✓] \" : \"[✗] \";"},{"lineNumber":83,"author":{"gitId":"erinmayg"},"content":"        return String.format(\"%s %s\", symbol, task);"},{"lineNumber":84,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":86,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"erinmayg"},"content":"     * The format used for saving."},{"lineNumber":88,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"erinmayg"},"content":"     * @return The String format used for saving."},{"lineNumber":90,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"erinmayg"},"content":"    public String saveFormat() {"},{"lineNumber":92,"author":{"gitId":"erinmayg"},"content":"        String isDoneString \u003d isDone ? \"1\" : \"0\";"},{"lineNumber":93,"author":{"gitId":"erinmayg"},"content":"        return String.format(\"%s %s \", isDoneString, task);"},{"lineNumber":94,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":95}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"/** A task of type ToDo. */"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"     * Constructs a ToDo."},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"     * @param task   The description of the ToDo."},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"     * @param isDone The completion status of the ToDo."},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    private ToDo(String task, boolean isDone) {"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"        super(task, isDone);"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"     * Constructs an uncompleted ToDo."},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"     * @param task The task description of the ToDo."},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"    public ToDo(String task) {"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"        super(task);"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"    /** Marks the ToDo as done. */"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"    public ToDo markDone() {"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"        return new ToDo(task, true);"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":"    public LocalDate getDate() {"},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"        return LocalDate.now();"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"     * Compares with another object."},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"     * @param o The object compared."},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"     * @return True if the object compared is a ToDo with the same task description."},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"    public boolean equals(Object o) {"},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"        return o instanceof ToDo \u0026\u0026 super.equals(o);"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"     * The format used for saving."},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":"     * @return The String format used for saving."},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":"    public String saveFormat() {"},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":"        return \"T\" + super.saveFormat();"},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":59,"author":{"gitId":"erinmayg"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"erinmayg"},"content":"     * The format used to display on a list."},{"lineNumber":61,"author":{"gitId":"erinmayg"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"erinmayg"},"content":"     * @return The String format of a ToDo."},{"lineNumber":63,"author":{"gitId":"erinmayg"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"erinmayg"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"erinmayg"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitId":"erinmayg"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":67,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":68}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"\u003c?import javafx.scene.shape.Polygon?\u003e"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"      \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"0.0\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"         \u003cfont\u003e"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"            \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"         \u003c/font\u003e"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"            \u003cInsets bottom\u003d\"4.0\" top\u003d\"4.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"         \u003c/HBox.margin\u003e"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"         \u003cpadding\u003e"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"            \u003cInsets bottom\u003d\"8.0\" left\u003d\"8.0\" right\u003d\"8.0\" top\u003d\"8.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"         \u003c/padding\u003e"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"      \u003c/Label\u003e"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"      \u003cPolygon fx:id\u003d\"triangle\" points\u003d\"88.40058898925781, -49.19998550415039, 101.80059051513672, -49.19998550415039, 88.4006118774414, -35.19998550415039\"\u003e"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"            \u003cInsets top\u003d\"4.0\" /\u003e"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"         \u003c/HBox.margin\u003e"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"      \u003c/Polygon\u003e"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"      \u003cCircle fx:id\u003d\"circleMask\" fill\u003d\"DODGERBLUE\" radius\u003d\"35.0\" stroke\u003d\"TRANSPARENT\" strokeType\u003d\"INSIDE\" /\u003e"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"    \u003c/children\u003e"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"    \u003cpadding\u003e"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"    \u003c/padding\u003e"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"erinmayg":33}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"\u003cfx:root maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #150c3d;\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"7.0\" layoutY\u003d\"565.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"32.0\" prefWidth\u003d\"340.0\" promptText\u003d\"Say something to Cipher!\" style\u003d\"-fx-background-color: #261b5c; -fx-background-radius: 10; -fx-text-fill: #907bfc; -fx-prompt-text-fill: #907bfc; -fx-prompt-text-font-style: italic;\" AnchorPane.bottomAnchor\u003d\"5.0\"\u003e"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"         \u003cfont\u003e"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"            \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"         \u003c/font\u003e\u003c/TextField\u003e"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"355.0\" layoutY\u003d\"563.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"30.0\" prefWidth\u003d\"30.0\" style\u003d\"-fx-background-color: transparent;\" textFill\u003d\"#ffffff5d\" /\u003e"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"2.0\" layoutY\u003d\"2.0\" prefHeight\u003d\"556.0\" prefWidth\u003d\"398.0\" style\u003d\"-fx-background-color: #150c3d;\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"            \u003ccontent\u003e"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"556.0\" prefWidth\u003d\"383.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"            \u003c/content\u003e"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"    \u003c/children\u003e"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"erinmayg":23}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"public class DukeTest {"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"    public void dummyTest() {"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"        assertEquals(2, 2);"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"    public void createDukeTest() {"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"            Duke duke \u003d new Duke(\"dukeTest\");"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"            assertTrue(Files.exists(Paths.get(\"dukeTest/duke.txt\")));"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"            Files.deleteIfExists(Paths.get(\"dukeTest/duke.txt\"));"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"            Files.deleteIfExists(Paths.get(\"dukeTest\"));"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":30}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"import duke.command.DoneCommand;"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"import duke.command.EventCommand;"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"import duke.command.ToDoCommand;"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"import duke.exception.DukeException;"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"import duke.exception.EmptyTaskException;"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"import duke.exception.InvalidDateException;"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"import duke.exception.NoIndexException;"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"import duke.exception.UnrecognizedTaskException;"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"public class ParserTest {"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"    public void parse_unrecognizedCommand_exceptionThrown1() {"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"        assertThrows(UnrecognizedTaskException.class, () -\u003e {"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"            Parser.parse(\"bleh\");"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"        });"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"    public void parse_unrecognizedCommand_exceptionThrown2() {"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"        assertThrows(UnrecognizedTaskException.class, () -\u003e {"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"            Parser.parse(\"bleh kdfhkdh\");"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"        });"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"    public void parse_deleteNoIndex_exceptionThrown() {"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"        assertThrows(NoIndexException.class, () -\u003e {"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"            Parser.parse(\"delete\");"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"        });"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"    public void parse_doneNoIndex_exceptionThrown() {"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"        assertThrows(NoIndexException.class, () -\u003e {"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"            Parser.parse(\"done \");"},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"        });"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"    public void parse_eventNoTaskDescription_exceptionThrown() {"},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"        assertThrows(EmptyTaskException.class, () -\u003e {"},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":"            Parser.parse(\"event \");"},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":"        });"},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":"    public void parse_deadlineNoTaskDescription_exceptionThrown() {"},{"lineNumber":58,"author":{"gitId":"erinmayg"},"content":"        assertThrows(EmptyTaskException.class, () -\u003e {"},{"lineNumber":59,"author":{"gitId":"erinmayg"},"content":"            Parser.parse(\"deadline\");"},{"lineNumber":60,"author":{"gitId":"erinmayg"},"content":"        });"},{"lineNumber":61,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":63,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"erinmayg"},"content":"    public void getDateTime_invalidDateFormat_exceptionThrown() {"},{"lineNumber":65,"author":{"gitId":"erinmayg"},"content":"        assertThrows(InvalidDateException.class, () -\u003e {"},{"lineNumber":66,"author":{"gitId":"erinmayg"},"content":"            Parser.getDateTime(\"08102020\");"},{"lineNumber":67,"author":{"gitId":"erinmayg"},"content":"        });"},{"lineNumber":68,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":70,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"erinmayg"},"content":"    public void getDateTime_invalidDateTimeFormat_exceptionThrown() {"},{"lineNumber":72,"author":{"gitId":"erinmayg"},"content":"        assertThrows(InvalidDateException.class, () -\u003e {"},{"lineNumber":73,"author":{"gitId":"erinmayg"},"content":"            Parser.getDateTime(\"2020-08-20T10.00\");"},{"lineNumber":74,"author":{"gitId":"erinmayg"},"content":"        });"},{"lineNumber":75,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":77,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"erinmayg"},"content":"    public void parse_inputToDo_returnToDoCommand() {"},{"lineNumber":79,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"erinmayg"},"content":"            assertEquals(Parser.parse(\"todo sleep\"), new ToDoCommand(\"sleep\"));"},{"lineNumber":81,"author":{"gitId":"erinmayg"},"content":"        } catch (DukeException e) {"},{"lineNumber":82,"author":{"gitId":"erinmayg"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":83,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":86,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"erinmayg"},"content":"    public void parse_inputEvent_returnEventCommand() {"},{"lineNumber":88,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"erinmayg"},"content":"            assertEquals(Parser.parse(\"event bfast /at 10:00\"),"},{"lineNumber":90,"author":{"gitId":"erinmayg"},"content":"                new EventCommand(\"bfast /at 10:00\"));"},{"lineNumber":91,"author":{"gitId":"erinmayg"},"content":"        } catch (DukeException e) {"},{"lineNumber":92,"author":{"gitId":"erinmayg"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":93,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":96,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"erinmayg"},"content":"    public void parse_inputDeadline_returnDeadlineCommand() {"},{"lineNumber":98,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"erinmayg"},"content":"            assertEquals(Parser.parse(\"deadline project /by 2020-08-27\"),"},{"lineNumber":100,"author":{"gitId":"erinmayg"},"content":"                new DeadlineCommand(\"project /by 2020-08-27\"));"},{"lineNumber":101,"author":{"gitId":"erinmayg"},"content":"        } catch (DukeException e) {"},{"lineNumber":102,"author":{"gitId":"erinmayg"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":103,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":106,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"erinmayg"},"content":"    public void parse_inputDone_returnDoneCommand() {"},{"lineNumber":108,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":109,"author":{"gitId":"erinmayg"},"content":"            assertEquals(Parser.parse(\"done 1\"), new DoneCommand(1));"},{"lineNumber":110,"author":{"gitId":"erinmayg"},"content":"        } catch (DukeException e) {"},{"lineNumber":111,"author":{"gitId":"erinmayg"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":112,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":115,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"erinmayg"},"content":"    public void parse_inputDelete_returnDeleteCommand() {"},{"lineNumber":117,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":118,"author":{"gitId":"erinmayg"},"content":"            assertEquals(Parser.parse(\"delete 1\"), new DeleteCommand(1));"},{"lineNumber":119,"author":{"gitId":"erinmayg"},"content":"        } catch (DukeException e) {"},{"lineNumber":120,"author":{"gitId":"erinmayg"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":121,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":123}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalTime;"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"import duke.exception.DukeException;"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"import duke.task.Deadline;"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"import duke.task.Event;"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"import duke.task.Task;"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"import duke.task.ToDo;"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"public class StorageTest {"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"    public void createFile_inputFilePath_fileExists() {"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"            Storage storage \u003d new Storage(\"storageTest\");"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":"            assertTrue(Files.exists(Paths.get(\"storageTest/duke.txt\")));"},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"            Files.deleteIfExists(Paths.get(\"storageTest/duke.txt\"));"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"            Files.deleteIfExists(Paths.get(\"storageTest\"));"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":"    public void saveLoadTasksTest() {"},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"        tasks.add(new ToDo(\"sleep\"));"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"        tasks.add(new Event(\"bfast\", LocalDateTime.of(LocalDate.now(),"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":"            LocalTime.parse(\"10:00\"))));"},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"        tasks.add(new Deadline(\"project\","},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"            LocalDateTime.of(LocalDate.parse(\"2020-08-27\"), LocalTime.parse(\"23:59\"))));"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":"        Storage storage \u003d new Storage(\"storageTest\");"},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"            assertEquals(tasks, storage.load());"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"        } catch (DukeException e) {"},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":54}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"import java.time.LocalTime;"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"import duke.exception.DukeException;"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"import duke.exception.DuplicateTaskException;"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"import duke.exception.InvalidIndexException;"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"import duke.task.Deadline;"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"import duke.task.Event;"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"import duke.task.Task;"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"import duke.task.ToDo;"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"public class TaskListTest {"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":24,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"erinmayg"},"content":"    public void addToDoTest() {"},{"lineNumber":26,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":28,"author":{"gitId":"erinmayg"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"erinmayg"},"content":"            taskList.addToDo(\"sleep\");"},{"lineNumber":30,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":31,"author":{"gitId":"erinmayg"},"content":"            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"erinmayg"},"content":"            list.add(new ToDo(\"sleep\"));"},{"lineNumber":33,"author":{"gitId":"erinmayg"},"content":"            TaskList taskListTemplate \u003d new TaskList(list);"},{"lineNumber":34,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":35,"author":{"gitId":"erinmayg"},"content":"            assertEquals(taskList, taskListTemplate);"},{"lineNumber":36,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":37,"author":{"gitId":"erinmayg"},"content":"        } catch (DukeException e) {"},{"lineNumber":38,"author":{"gitId":"erinmayg"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":39,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":42,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"erinmayg"},"content":"    public void addEventTest() {"},{"lineNumber":44,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":46,"author":{"gitId":"erinmayg"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":47,"author":{"gitId":"erinmayg"},"content":"            taskList.addEvent(\"bfast /at 10:00\");"},{"lineNumber":48,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":49,"author":{"gitId":"erinmayg"},"content":"            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"erinmayg"},"content":"            list.add(new Event(\"bfast\", LocalDateTime.of(LocalDate.now(),"},{"lineNumber":51,"author":{"gitId":"erinmayg"},"content":"                LocalTime.parse(\"10:00\"))));"},{"lineNumber":52,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":53,"author":{"gitId":"erinmayg"},"content":"            TaskList taskListTemplate \u003d new TaskList(list);"},{"lineNumber":54,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":55,"author":{"gitId":"erinmayg"},"content":"            assertEquals(taskList, taskListTemplate);"},{"lineNumber":56,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":57,"author":{"gitId":"erinmayg"},"content":"        } catch (DukeException e) {"},{"lineNumber":58,"author":{"gitId":"erinmayg"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":59,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":62,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"erinmayg"},"content":"    public void addDeadlineTest() {"},{"lineNumber":64,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":66,"author":{"gitId":"erinmayg"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":67,"author":{"gitId":"erinmayg"},"content":"            taskList.addDeadline(\"project /by 2020-08-27\");"},{"lineNumber":68,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":69,"author":{"gitId":"erinmayg"},"content":"            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":70,"author":{"gitId":"erinmayg"},"content":"            list.add(new Deadline(\"project\","},{"lineNumber":71,"author":{"gitId":"erinmayg"},"content":"                LocalDateTime.of(LocalDate.parse(\"2020-08-27\"), LocalTime.parse(\"23:59\"))));"},{"lineNumber":72,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":73,"author":{"gitId":"erinmayg"},"content":"            TaskList taskListTemplate \u003d new TaskList(list);"},{"lineNumber":74,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":75,"author":{"gitId":"erinmayg"},"content":"            assertEquals(taskList, taskListTemplate);"},{"lineNumber":76,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":77,"author":{"gitId":"erinmayg"},"content":"        } catch (DukeException e) {"},{"lineNumber":78,"author":{"gitId":"erinmayg"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":79,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":82,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"erinmayg"},"content":"    public void markDoneTest() {"},{"lineNumber":84,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":85,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":86,"author":{"gitId":"erinmayg"},"content":"            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitId":"erinmayg"},"content":"            list.add(new ToDo(\"sleep\"));"},{"lineNumber":88,"author":{"gitId":"erinmayg"},"content":"            list.add(new ToDo(\"die\"));"},{"lineNumber":89,"author":{"gitId":"erinmayg"},"content":"            list.add(new ToDo(\"eat\"));"},{"lineNumber":90,"author":{"gitId":"erinmayg"},"content":"            list.add(new ToDo(\"study\"));"},{"lineNumber":91,"author":{"gitId":"erinmayg"},"content":"            TaskList taskList \u003d new TaskList(list);"},{"lineNumber":92,"author":{"gitId":"erinmayg"},"content":"            taskList.markDone(0, 2, 3);"},{"lineNumber":93,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":94,"author":{"gitId":"erinmayg"},"content":"            ArrayList\u003cTask\u003e listTemplate \u003d new ArrayList\u003c\u003e();"},{"lineNumber":95,"author":{"gitId":"erinmayg"},"content":"            listTemplate.add(new ToDo(\"sleep\").markDone());"},{"lineNumber":96,"author":{"gitId":"erinmayg"},"content":"            listTemplate.add(new ToDo(\"die\"));"},{"lineNumber":97,"author":{"gitId":"erinmayg"},"content":"            listTemplate.add(new ToDo(\"eat\").markDone());"},{"lineNumber":98,"author":{"gitId":"erinmayg"},"content":"            listTemplate.add(new ToDo(\"study\").markDone());"},{"lineNumber":99,"author":{"gitId":"erinmayg"},"content":"            TaskList taskListTemplate \u003d new TaskList(listTemplate);"},{"lineNumber":100,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":101,"author":{"gitId":"erinmayg"},"content":"            assertEquals(taskList, taskListTemplate);"},{"lineNumber":102,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":103,"author":{"gitId":"erinmayg"},"content":"        } catch (DukeException e) {"},{"lineNumber":104,"author":{"gitId":"erinmayg"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":105,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":108,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"erinmayg"},"content":"    public void deleteTaskTest() {"},{"lineNumber":110,"author":{"gitId":"erinmayg"},"content":"        try {"},{"lineNumber":111,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":112,"author":{"gitId":"erinmayg"},"content":"            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":113,"author":{"gitId":"erinmayg"},"content":"            list.add(new ToDo(\"sleep\"));"},{"lineNumber":114,"author":{"gitId":"erinmayg"},"content":"            list.add(new ToDo(\"die\"));"},{"lineNumber":115,"author":{"gitId":"erinmayg"},"content":"            list.add(new ToDo(\"eat\"));"},{"lineNumber":116,"author":{"gitId":"erinmayg"},"content":"            list.add(new ToDo(\"study\"));"},{"lineNumber":117,"author":{"gitId":"erinmayg"},"content":"            TaskList taskList \u003d new TaskList(list);"},{"lineNumber":118,"author":{"gitId":"erinmayg"},"content":"            taskList.deleteTasks(0, 1, 3);"},{"lineNumber":119,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":120,"author":{"gitId":"erinmayg"},"content":"            ArrayList\u003cTask\u003e listTemplate \u003d new ArrayList\u003c\u003e();"},{"lineNumber":121,"author":{"gitId":"erinmayg"},"content":"            listTemplate.add(new ToDo(\"eat\"));"},{"lineNumber":122,"author":{"gitId":"erinmayg"},"content":"            TaskList taskListTemplate \u003d new TaskList(listTemplate);"},{"lineNumber":123,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":124,"author":{"gitId":"erinmayg"},"content":"            assertEquals(taskList, taskListTemplate);"},{"lineNumber":125,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":126,"author":{"gitId":"erinmayg"},"content":"        } catch (DukeException e) {"},{"lineNumber":127,"author":{"gitId":"erinmayg"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":128,"author":{"gitId":"erinmayg"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":131,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"erinmayg"},"content":"    public void findTest() {"},{"lineNumber":133,"author":{"gitId":"erinmayg"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":134,"author":{"gitId":"erinmayg"},"content":"        list.add(new ToDo(\"die\"));"},{"lineNumber":135,"author":{"gitId":"erinmayg"},"content":"        list.add(new ToDo(\"die hard\"));"},{"lineNumber":136,"author":{"gitId":"erinmayg"},"content":"        list.add(new ToDo(\"die young\"));"},{"lineNumber":137,"author":{"gitId":"erinmayg"},"content":"        list.add(new ToDo(\"cry\"));"},{"lineNumber":138,"author":{"gitId":"erinmayg"},"content":"        list.add(new ToDo(\"cry hard\"));"},{"lineNumber":139,"author":{"gitId":"erinmayg"},"content":"        TaskList taskList \u003d new TaskList(list);"},{"lineNumber":140,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":141,"author":{"gitId":"erinmayg"},"content":"        ArrayList\u003cTask\u003e listTemplate \u003d new ArrayList\u003c\u003e();"},{"lineNumber":142,"author":{"gitId":"erinmayg"},"content":"        listTemplate.add(new ToDo(\"die\"));"},{"lineNumber":143,"author":{"gitId":"erinmayg"},"content":"        listTemplate.add(new ToDo(\"die hard\"));"},{"lineNumber":144,"author":{"gitId":"erinmayg"},"content":"        listTemplate.add(new ToDo(\"die young\"));"},{"lineNumber":145,"author":{"gitId":"erinmayg"},"content":"        listTemplate.add(new ToDo(\"cry hard\"));"},{"lineNumber":146,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":147,"author":{"gitId":"erinmayg"},"content":"        assertEquals(taskList.findTasks(\"die\", \"hard\"),"},{"lineNumber":148,"author":{"gitId":"erinmayg"},"content":"            listTemplate);"},{"lineNumber":149,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":151,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"erinmayg"},"content":"    public void printListTest1() {"},{"lineNumber":153,"author":{"gitId":"erinmayg"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":154,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":155,"author":{"gitId":"erinmayg"},"content":"        list.add(new ToDo(\"sleep\"));"},{"lineNumber":156,"author":{"gitId":"erinmayg"},"content":"        list.add(new Event(\"bfast\", LocalDateTime.of(LocalDate.now(),"},{"lineNumber":157,"author":{"gitId":"erinmayg"},"content":"            LocalTime.parse(\"10:00\"))));"},{"lineNumber":158,"author":{"gitId":"erinmayg"},"content":"        list.add(new Deadline(\"project\","},{"lineNumber":159,"author":{"gitId":"erinmayg"},"content":"            LocalDateTime.of(LocalDate.parse(\"2020-08-27\"), LocalTime.MAX)));"},{"lineNumber":160,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":161,"author":{"gitId":"erinmayg"},"content":"        TaskList taskList \u003d new TaskList(list);"},{"lineNumber":162,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":163,"author":{"gitId":"erinmayg"},"content":"        assertDoesNotThrow(() -\u003e {"},{"lineNumber":164,"author":{"gitId":"erinmayg"},"content":"            taskList.processList(\"list\");"},{"lineNumber":165,"author":{"gitId":"erinmayg"},"content":"        });"},{"lineNumber":166,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":168,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":169,"author":{"gitId":"erinmayg"},"content":"    public void printListTest2() {"},{"lineNumber":170,"author":{"gitId":"erinmayg"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":171,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":172,"author":{"gitId":"erinmayg"},"content":"        list.add(new ToDo(\"sleep\"));"},{"lineNumber":173,"author":{"gitId":"erinmayg"},"content":"        list.add(new Event(\"bfast\", LocalDateTime.of(LocalDate.now(),"},{"lineNumber":174,"author":{"gitId":"erinmayg"},"content":"            LocalTime.parse(\"10:00\"))));"},{"lineNumber":175,"author":{"gitId":"erinmayg"},"content":"        list.add(new Deadline(\"project\","},{"lineNumber":176,"author":{"gitId":"erinmayg"},"content":"            LocalDateTime.of(LocalDate.parse(\"2020-08-27\"), LocalTime.MAX)));"},{"lineNumber":177,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":178,"author":{"gitId":"erinmayg"},"content":"        TaskList taskList \u003d new TaskList(list);"},{"lineNumber":179,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":180,"author":{"gitId":"erinmayg"},"content":"        assertDoesNotThrow(() -\u003e {"},{"lineNumber":181,"author":{"gitId":"erinmayg"},"content":"            taskList.processList(\"list 2020-08-27\");"},{"lineNumber":182,"author":{"gitId":"erinmayg"},"content":"        });"},{"lineNumber":183,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":185,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":186,"author":{"gitId":"erinmayg"},"content":"    public void duplicateTaskTest() {"},{"lineNumber":187,"author":{"gitId":"erinmayg"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":188,"author":{"gitId":"erinmayg"},"content":"        list.add(new ToDo(\"sleep\"));"},{"lineNumber":189,"author":{"gitId":"erinmayg"},"content":"        TaskList taskList \u003d new TaskList(list);"},{"lineNumber":190,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":191,"author":{"gitId":"erinmayg"},"content":"        assertThrows(DuplicateTaskException.class, () -\u003e taskList.addToDo(\"sleep\"));"},{"lineNumber":192,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":194,"author":{"gitId":"erinmayg"},"content":"    @Test"},{"lineNumber":195,"author":{"gitId":"erinmayg"},"content":"    public void invalidIndexTest() {"},{"lineNumber":196,"author":{"gitId":"erinmayg"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":197,"author":{"gitId":"erinmayg"},"content":"        list.add(new ToDo(\"sleep\"));"},{"lineNumber":198,"author":{"gitId":"erinmayg"},"content":"        TaskList taskList \u003d new TaskList(list);"},{"lineNumber":199,"author":{"gitId":"erinmayg"},"content":""},{"lineNumber":200,"author":{"gitId":"erinmayg"},"content":"        assertThrows(InvalidIndexException.class, () -\u003e taskList.deleteTasks(2));"},{"lineNumber":201,"author":{"gitId":"erinmayg"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"erinmayg"},"content":"}"}],"authorContributionMap":{"erinmayg":202}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"erinmayg"},"content":"todo sleep"},{"lineNumber":2,"author":{"gitId":"erinmayg"},"content":"list"},{"lineNumber":3,"author":{"gitId":"erinmayg"},"content":"bleh"},{"lineNumber":4,"author":{"gitId":"erinmayg"},"content":"bleh kjhfkdsh"},{"lineNumber":5,"author":{"gitId":"erinmayg"},"content":"todo"},{"lineNumber":6,"author":{"gitId":"erinmayg"},"content":"todo sleep"},{"lineNumber":7,"author":{"gitId":"erinmayg"},"content":"event"},{"lineNumber":8,"author":{"gitId":"erinmayg"},"content":"event bfast /at"},{"lineNumber":9,"author":{"gitId":"erinmayg"},"content":"event bfast /at 2020-08-24T10:00 to 12:00"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"list"},{"lineNumber":11,"author":{"gitId":"erinmayg"},"content":"deadline"},{"lineNumber":12,"author":{"gitId":"erinmayg"},"content":"deadline project"},{"lineNumber":13,"author":{"gitId":"erinmayg"},"content":"deadline project /by 2020-08-27"},{"lineNumber":14,"author":{"gitId":"erinmayg"},"content":"list 2020-08-24"},{"lineNumber":15,"author":{"gitId":"erinmayg"},"content":"list"},{"lineNumber":16,"author":{"gitId":"erinmayg"},"content":"done 2"},{"lineNumber":17,"author":{"gitId":"erinmayg"},"content":"list"},{"lineNumber":18,"author":{"gitId":"erinmayg"},"content":"done 1"},{"lineNumber":19,"author":{"gitId":"erinmayg"},"content":"list"},{"lineNumber":20,"author":{"gitId":"erinmayg"},"content":"done 4"},{"lineNumber":21,"author":{"gitId":"erinmayg"},"content":"delete 4"},{"lineNumber":22,"author":{"gitId":"erinmayg"},"content":"delete 3"},{"lineNumber":23,"author":{"gitId":"erinmayg"},"content":"bye"}],"authorContributionMap":{"erinmayg":23}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"erinmayg"},"content":"javac -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":20,"erinmayg":1}}]
