[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"compileJava.options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":"tasks.withType(JavaCompile) {"},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"    options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"}"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":55,"author":{"gitId":"pengxiangg"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":64,"author":{"gitId":"pengxiangg"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":68,"author":{"gitId":"pengxiangg"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pengxiangg":26,"-":44}},{"path":"data/archive.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"T | 1 | eat dinner"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":"T | 0 | eat lunch"},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"D | 0 | bathe | Sep 21 2019 01:00am | 1"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"E | 1 | dinner with friends | Sep 15 2020 06:00pm | 1"}],"authorContributionMap":{"pengxiangg":4}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":"Duke is a desktop app for managing tasks, optimized for use via a Command Line Interface (CLI)."},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"##### Tables of Contents"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"[Features](#features)"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"* [Adding a task](#add)"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"* [Listing all tasks](#list)"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"* [Locating task by description](#find)"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"* [Finishing a task](#done)"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":"* [Deleting a task](#delete)"},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"* [Archiving a task](#archive)"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"[FAQ](#faq) \u003cbr\u003e"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"[Command Summary](#command_summary)"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"\u003ca name\u003d\"features\"/\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"Note:"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"* Words in `UPPER_CASE` care the parameters to be supplied by the user. e.g. in `todo TASK`, `TASK` is a parameter which can be used as `todo read book`."},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"* Items in square brackets are optional. e.g. `deadline TASK /by DATE [TIME]` can be used as `deadline watch lecture /by 14/09/2020` or as `deadline watch lecture /by 14/09/2020 1600`"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":"\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"\u003ca name\u003d\"add\"/\u003e"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"### Adding a task: `todo`, `deadline`, `event` "},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"Adds a task into the list"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"Format:"},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"* `todo DESCRIPTION`"},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"* `deadline DESCRIPTION /by DATE [TIME]`"},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"* `event DESCRIPTION /at DATE [TIME]`"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"Comments: "},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"* `DATE` must be in `dd/mm/yyyy` format."},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"* `TIME` must be in `hhmm` 24 hours format."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"Examples:"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"* `todo read book`"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"* `deadline return book /by 15/09/2020`"},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"* `event watch lecture /at 16/09/2020 1600`"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"\u003cbr\u003e"},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"\u003ca name\u003d\"list\"/\u003e"},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"### Listing all tasks: `list`"},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"Shows a list of all tasks."},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"Format: `list`"},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":"\u003cbr\u003e"},{"lineNumber":52,"author":{"gitId":"pengxiangg"},"content":"\u003ca name\u003d\"find\"/\u003e"},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":"### Locating task by description: `find`"},{"lineNumber":54,"author":{"gitId":"pengxiangg"},"content":"Finds tasks whose description contain the given keyword"},{"lineNumber":55,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":56,"author":{"gitId":"pengxiangg"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":57,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":58,"author":{"gitId":"pengxiangg"},"content":"Comments:"},{"lineNumber":59,"author":{"gitId":"pengxiangg"},"content":"* The search is case-sensitive"},{"lineNumber":60,"author":{"gitId":"pengxiangg"},"content":"* The order of keywords matter"},{"lineNumber":61,"author":{"gitId":"pengxiangg"},"content":"* Only the description will be search"},{"lineNumber":62,"author":{"gitId":"pengxiangg"},"content":"* Only full words will be matched"},{"lineNumber":63,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":64,"author":{"gitId":"pengxiangg"},"content":"Examples:"},{"lineNumber":65,"author":{"gitId":"pengxiangg"},"content":"* `find book` will return `read book` and `return book`."},{"lineNumber":66,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":67,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":68,"author":{"gitId":"pengxiangg"},"content":"\u003cbr\u003e"},{"lineNumber":69,"author":{"gitId":"pengxiangg"},"content":"\u003ca name\u003d\"done\"/\u003e"},{"lineNumber":70,"author":{"gitId":"pengxiangg"},"content":"### Finishing a task: `done`"},{"lineNumber":71,"author":{"gitId":"pengxiangg"},"content":"Marks the specified task as completed."},{"lineNumber":72,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":73,"author":{"gitId":"pengxiangg"},"content":"Format: `done INDEX`"},{"lineNumber":74,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":75,"author":{"gitId":"pengxiangg"},"content":"Comments:"},{"lineNumber":76,"author":{"gitId":"pengxiangg"},"content":"* Marks the task at the specified index"},{"lineNumber":77,"author":{"gitId":"pengxiangg"},"content":"* Index refers to task number"},{"lineNumber":78,"author":{"gitId":"pengxiangg"},"content":"* The index must be a positive integer 1, 2, 3, ..."},{"lineNumber":79,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":80,"author":{"gitId":"pengxiangg"},"content":"Examples:"},{"lineNumber":81,"author":{"gitId":"pengxiangg"},"content":"* `done 1` will mark the first task as complete."},{"lineNumber":82,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":83,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":84,"author":{"gitId":"pengxiangg"},"content":"\u003cbr\u003e"},{"lineNumber":85,"author":{"gitId":"pengxiangg"},"content":"\u003ca name\u003d\"delete\"/\u003e"},{"lineNumber":86,"author":{"gitId":"pengxiangg"},"content":"### Deleting a task: `delete`"},{"lineNumber":87,"author":{"gitId":"pengxiangg"},"content":"Deletes the specified task from the list."},{"lineNumber":88,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":89,"author":{"gitId":"pengxiangg"},"content":"Format: `delete INDEX`"},{"lineNumber":90,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":91,"author":{"gitId":"pengxiangg"},"content":"Comments:"},{"lineNumber":92,"author":{"gitId":"pengxiangg"},"content":"* Deletes the task at the specified index"},{"lineNumber":93,"author":{"gitId":"pengxiangg"},"content":"* Index refers to task number"},{"lineNumber":94,"author":{"gitId":"pengxiangg"},"content":"* The index must be a positive integer 1, 2, 3, ..."},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"pengxiangg"},"content":"Examples:"},{"lineNumber":97,"author":{"gitId":"pengxiangg"},"content":"* `delete 1` deletes the first task in the list."},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"pengxiangg"},"content":"\u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"pengxiangg"},"content":"\u003ca name\u003d\"archive\"/\u003e"},{"lineNumber":102,"author":{"gitId":"pengxiangg"},"content":"### Archiving a task: `archive`"},{"lineNumber":103,"author":{"gitId":"pengxiangg"},"content":"Archives the specified task in the list."},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"pengxiangg"},"content":"Format: `archive INDEX`"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"pengxiangg"},"content":"Comments:"},{"lineNumber":108,"author":{"gitId":"pengxiangg"},"content":"* Archives the task at the specified index"},{"lineNumber":109,"author":{"gitId":"pengxiangg"},"content":"* Index refers to task number"},{"lineNumber":110,"author":{"gitId":"pengxiangg"},"content":"* The index must be a positive integer 1, 2, 3, ..."},{"lineNumber":111,"author":{"gitId":"pengxiangg"},"content":"* The task is deleted from the main list and added into a text file containing the archived tasks."},{"lineNumber":112,"author":{"gitId":"pengxiangg"},"content":"* The archive text file can be found under `/data/archive.txt`"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"pengxiangg"},"content":"\u003ca name\u003d\"faq\"/\u003e"},{"lineNumber":115,"author":{"gitId":"pengxiangg"},"content":"## FAQ"},{"lineNumber":116,"author":{"gitId":"pengxiangg"},"content":"**Q**: Do I need to save the data?  \u003cbr\u003e"},{"lineNumber":117,"author":{"gitId":"pengxiangg"},"content":"**A**: No, the tasks are saved automatically every time the list changes."},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"pengxiangg"},"content":"\u003ca name\u003d\"command_summary\"/\u003e"},{"lineNumber":120,"author":{"gitId":"pengxiangg"},"content":"## Command Summary"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"pengxiangg"},"content":"| Action | Format, Examples |"},{"lineNumber":123,"author":{"gitId":"pengxiangg"},"content":"| --- | --- |"},{"lineNumber":124,"author":{"gitId":"pengxiangg"},"content":"| Todo | `todo DESCRIPTION` \u003cbr\u003e e.g. `todo read book`|"},{"lineNumber":125,"author":{"gitId":"pengxiangg"},"content":"| Deadline | `deadline DESCRIPTION /by DATE [TIME]`\u003cbr\u003e e.g. `deadline return book /by 24/08/2020`|"},{"lineNumber":126,"author":{"gitId":"pengxiangg"},"content":"| Event | `event DESCRIPTION /at DATE [TIME]` |"},{"lineNumber":127,"author":{"gitId":"pengxiangg"},"content":"| List | `list` |"},{"lineNumber":128,"author":{"gitId":"pengxiangg"},"content":"| Find | `find KEYWORD [MORE_KEYWORDS]` |"},{"lineNumber":129,"author":{"gitId":"pengxiangg"},"content":"| Done | `done INDEX` |"},{"lineNumber":130,"author":{"gitId":"pengxiangg"},"content":"| Delete | `delete INDEX`|"},{"lineNumber":131,"author":{"gitId":"pengxiangg"},"content":"| Archive | `archive INDEX`|"}],"authorContributionMap":{"pengxiangg":112,"-":19}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":"import javafx.geometry.Insets;"},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"import javafx.geometry.Pos;"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"import javafx.scene.Node;"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":" * DialogBox containing the String produced by the Ui from Duke, and an ImageView to represent"},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":" * the profiles of Duke and the User."},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"        dialog.setPadding(new Insets(10, 10, 10, 10));"},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":52,"author":{"gitId":"pengxiangg"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":56,"author":{"gitId":"pengxiangg"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"pengxiangg"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"pengxiangg"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"pengxiangg"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"    private Ui ui;"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"    private Storage storage;"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":"    private TaskList taskList;"},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"    private TaskList archiveList;"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"     * Creates a Duke object containing a Ui object, Storage object, and TaskList Object."},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"     * @param filepath filepath where the text file containing the list is stored."},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"    public Duke(String filepath, String archivePath) {"},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"        ui \u003d new Ui();"},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"        storage \u003d new Storage(filepath, archivePath);"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"        taskList \u003d new TaskList(storage.readMain());"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"        archiveList \u003d new TaskList(storage.readArchive());"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"     * Runs the main functions of the Duke object."},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"    public void run() {"},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"        ui.printGreeting();"},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"        boolean isExit \u003d false;"},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"        while (!isExit) {"},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"            try {"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"                String userInput \u003d ui.readInput();"},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"                Command c \u003d new Parser().parse(userInput);"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"                c.execute(taskList, archiveList, ui, storage);"},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"            } catch (DukeException e) {"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"                ui.printString(e.getMessage());"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"     * Runs the main method which makes use of the run method."},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"     * @param args"},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":"        Duke duke \u003d new Duke(\"/data/duke.txt\", \"/data/archive.txt\");"},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":"        duke.run();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":54,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":55,"author":{"gitId":"pengxiangg"},"content":"    public String getResponse(String input) {"},{"lineNumber":56,"author":{"gitId":"pengxiangg"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"pengxiangg"},"content":"            Command c \u003d new Parser().parse(input);"},{"lineNumber":58,"author":{"gitId":"pengxiangg"},"content":"            String output \u003d c.getExecuteString(taskList, archiveList, ui, storage);"},{"lineNumber":59,"author":{"gitId":"pengxiangg"},"content":"            return output;"},{"lineNumber":60,"author":{"gitId":"pengxiangg"},"content":"        } catch (DukeException e) {"},{"lineNumber":61,"author":{"gitId":"pengxiangg"},"content":"            return e.getMessage();"},{"lineNumber":62,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":65,"author":{"gitId":"pengxiangg"},"content":"    public TaskList getTaskList() {"},{"lineNumber":66,"author":{"gitId":"pengxiangg"},"content":"        return taskList;"},{"lineNumber":67,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":69,"author":{"gitId":"pengxiangg"},"content":"    public String getGreeting() {"},{"lineNumber":70,"author":{"gitId":"pengxiangg"},"content":"        return ui.getGreeting();"},{"lineNumber":71,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pengxiangg":68,"-":4}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":" * Represents exceptions thrown by Duke and other classes used by Duke."},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"     * Creates a DukeException object that displays a message."},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":"     * @param message Message to be displayed."},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"    public DukeException(String message) {"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"     * Returns the message of the DukeException."},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"     * @return String containing message of the DukeException."},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"        return getMessage();"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":25}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":9}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"public class Main extends Application {"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"    private Duke duke \u003d new Duke(\"/data/duke.txt\", \"/data/archive.txt\");"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"    public void start(Stage stage) {"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"            stage.setScene(scene);"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":"            stage.show();"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"        } catch (IOException e) {"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"            e.printStackTrace();"},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":29}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"    @FXML"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"    private VBox dialogContainer;"},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"    private TextField userInput;"},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"    private Button sendButton;"},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"    private Duke duke;"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DukeMascot.png\"));"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"    public void initialize() {"},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"        duke \u003d d;"},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"                DialogBox.getDukeDialog(d.getGreeting(), dukeImage)"},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"        );"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"    private void handleUserInput() {"},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":"        );"},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":"        userInput.clear();"},{"lineNumber":52,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":53}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import java.util.Date;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"import duke.command.AddCommand;"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"import duke.command.ArchiveCommand;"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"import duke.command.Command;"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"import duke.command.DoneCommand;"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"import duke.command.ExitCommand;"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"import duke.command.FindCommand;"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"import duke.command.ListCommand;"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"import duke.task.Deadline;"},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"import duke.task.Event;"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"import duke.task.ToDo;"},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":" * Provides a class to interprets user inputs and converts them into Commands"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":" * to be executed."},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"public class Parser {"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"     * Represents date and time."},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"    private static final SimpleDateFormat DATE_TIME_FORMAT \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"     * Represents date."},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"    private static final SimpleDateFormat DATE_FORMAT \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"    private static final String SPACE_SPLIT \u003d \" \";"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"    private static final String EVENT_SPLIT \u003d \" /at \";"},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"    private static final String DEADLINE_SPLIT \u003d \" /by \";"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"     * Returns different Commands depending on the keywords that the user inputs."},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"     * These keywords include \"bye\", \"list\", \"done\", \"delete\", \"todo\","},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"     * \"event\", \"deadline\". Words that are not recognised will not be read"},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"     * and the function will ask the user to input a valid keyword."},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"     * @param userInput Input that the user typed in."},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"     * @return Commands depending on which keyword the user used."},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException If user entered an invalid input."},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":"    public Command parse(String userInput) throws DukeException {"},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":"        String[] userInputArr \u003d userInput.split(SPACE_SPLIT);"},{"lineNumber":52,"author":{"gitId":"pengxiangg"},"content":"        String userKeyword \u003d userInputArr[0];"},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"pengxiangg"},"content":"            switch (userKeyword) {"},{"lineNumber":55,"author":{"gitId":"pengxiangg"},"content":"            case \"bye\":"},{"lineNumber":56,"author":{"gitId":"pengxiangg"},"content":"                return new ExitCommand();"},{"lineNumber":57,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":58,"author":{"gitId":"pengxiangg"},"content":"            case \"list\":"},{"lineNumber":59,"author":{"gitId":"pengxiangg"},"content":"                return new ListCommand();"},{"lineNumber":60,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":61,"author":{"gitId":"pengxiangg"},"content":"            case \"find\":"},{"lineNumber":62,"author":{"gitId":"pengxiangg"},"content":"                return parseFind(userInputArr, userInput);"},{"lineNumber":63,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":64,"author":{"gitId":"pengxiangg"},"content":"            case \"done\":"},{"lineNumber":65,"author":{"gitId":"pengxiangg"},"content":"            case \"delete\":"},{"lineNumber":66,"author":{"gitId":"pengxiangg"},"content":"                return parseDoneOrDelete(userInputArr, userKeyword);"},{"lineNumber":67,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":68,"author":{"gitId":"pengxiangg"},"content":"            case \"todo\":"},{"lineNumber":69,"author":{"gitId":"pengxiangg"},"content":"                return parseTodo(userInputArr, userInput);"},{"lineNumber":70,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":71,"author":{"gitId":"pengxiangg"},"content":"            case \"deadline\":"},{"lineNumber":72,"author":{"gitId":"pengxiangg"},"content":"                return parseDeadline(userInputArr, userInput);"},{"lineNumber":73,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":74,"author":{"gitId":"pengxiangg"},"content":"            case \"event\":"},{"lineNumber":75,"author":{"gitId":"pengxiangg"},"content":"                return parseEvent(userInputArr, userInput);"},{"lineNumber":76,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":77,"author":{"gitId":"pengxiangg"},"content":"            case \"archive\":"},{"lineNumber":78,"author":{"gitId":"pengxiangg"},"content":"                return archiveEvent(userInputArr);"},{"lineNumber":79,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":80,"author":{"gitId":"pengxiangg"},"content":"            default:"},{"lineNumber":81,"author":{"gitId":"pengxiangg"},"content":"                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\");"},{"lineNumber":82,"author":{"gitId":"pengxiangg"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"pengxiangg"},"content":"        } catch (ParseException e) {"},{"lineNumber":84,"author":{"gitId":"pengxiangg"},"content":"            throw new DukeException(\"Please enter a date and time in the format of \\n\""},{"lineNumber":85,"author":{"gitId":"pengxiangg"},"content":"                    + \"dd/MM/yyyy HHmm (e.g. 02/12/2020 1530) \""},{"lineNumber":86,"author":{"gitId":"pengxiangg"},"content":"                    + \"or dd/MM/yyyy (e.g. 15/02/2020)\\n\");"},{"lineNumber":87,"author":{"gitId":"pengxiangg"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":88,"author":{"gitId":"pengxiangg"},"content":"            throw new DukeException(\"Please enter a task number in numeric format\\n\");"},{"lineNumber":89,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":92,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":93,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":94,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"pengxiangg"},"content":"     * Parses user input into the Find Command."},{"lineNumber":96,"author":{"gitId":"pengxiangg"},"content":"     * @param userInputArr User input as array."},{"lineNumber":97,"author":{"gitId":"pengxiangg"},"content":"     * @param userInput User input."},{"lineNumber":98,"author":{"gitId":"pengxiangg"},"content":"     * @return Find Command."},{"lineNumber":99,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException if invalid input."},{"lineNumber":100,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"pengxiangg"},"content":"    private Command parseFind(String[] userInputArr, String userInput) throws DukeException {"},{"lineNumber":102,"author":{"gitId":"pengxiangg"},"content":"        if (userInputArr.length \u003c 2) {"},{"lineNumber":103,"author":{"gitId":"pengxiangg"},"content":"            throw new DukeException(\"Please enter a keyword to find\\n\");"},{"lineNumber":104,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"pengxiangg"},"content":"        String keyword \u003d userInput.substring(5);"},{"lineNumber":106,"author":{"gitId":"pengxiangg"},"content":"        return new FindCommand(keyword);"},{"lineNumber":107,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":109,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"pengxiangg"},"content":"     * Parses user input into Done or Delete Command."},{"lineNumber":111,"author":{"gitId":"pengxiangg"},"content":"     * @param userInputArr User input as array."},{"lineNumber":112,"author":{"gitId":"pengxiangg"},"content":"     * @param userKeyword Keyword as done or delete."},{"lineNumber":113,"author":{"gitId":"pengxiangg"},"content":"     * @return Done or Delete Command."},{"lineNumber":114,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException if invalid input."},{"lineNumber":115,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"pengxiangg"},"content":"    private Command parseDoneOrDelete(String[] userInputArr, String userKeyword)"},{"lineNumber":117,"author":{"gitId":"pengxiangg"},"content":"            throws DukeException {"},{"lineNumber":118,"author":{"gitId":"pengxiangg"},"content":"        if (userInputArr.length \u003c 2) {"},{"lineNumber":119,"author":{"gitId":"pengxiangg"},"content":"            throw new DukeException(\"Please enter a task number to be selected\\n\");"},{"lineNumber":120,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"pengxiangg"},"content":"        String taskNumber \u003d userInputArr[1];"},{"lineNumber":122,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":123,"author":{"gitId":"pengxiangg"},"content":"        int taskNumberInt \u003d Integer.parseInt(taskNumber) - 1;"},{"lineNumber":124,"author":{"gitId":"pengxiangg"},"content":"        if (userKeyword.equals(\"done\")) {"},{"lineNumber":125,"author":{"gitId":"pengxiangg"},"content":"            return new DoneCommand(taskNumberInt);"},{"lineNumber":126,"author":{"gitId":"pengxiangg"},"content":"        } else {"},{"lineNumber":127,"author":{"gitId":"pengxiangg"},"content":"            return new DeleteCommand(taskNumberInt);"},{"lineNumber":128,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":131,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"pengxiangg"},"content":"     * Parses user input into Todo Command."},{"lineNumber":133,"author":{"gitId":"pengxiangg"},"content":"     * @param userInputArr User input as array."},{"lineNumber":134,"author":{"gitId":"pengxiangg"},"content":"     * @param userInput User input."},{"lineNumber":135,"author":{"gitId":"pengxiangg"},"content":"     * @return Todo Command."},{"lineNumber":136,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException if invalid input."},{"lineNumber":137,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"pengxiangg"},"content":"    private Command parseTodo(String[] userInputArr, String userInput) throws DukeException {"},{"lineNumber":139,"author":{"gitId":"pengxiangg"},"content":"        if (userInputArr.length \u003c 2) {"},{"lineNumber":140,"author":{"gitId":"pengxiangg"},"content":"            throw new DukeException(\"☹ OOPS!!! \""},{"lineNumber":141,"author":{"gitId":"pengxiangg"},"content":"                    + \"The description of a todo cannot be empty.\\n\");"},{"lineNumber":142,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"pengxiangg"},"content":"        String todoName \u003d userInput.substring(5);"},{"lineNumber":144,"author":{"gitId":"pengxiangg"},"content":"        ToDo todo \u003d new ToDo(todoName);"},{"lineNumber":145,"author":{"gitId":"pengxiangg"},"content":"        return new AddCommand(todo);"},{"lineNumber":146,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":148,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"pengxiangg"},"content":"     * Parses user input into Deadline Command,"},{"lineNumber":150,"author":{"gitId":"pengxiangg"},"content":"     * @param userInputArr User input as array."},{"lineNumber":151,"author":{"gitId":"pengxiangg"},"content":"     * @param userInput User input."},{"lineNumber":152,"author":{"gitId":"pengxiangg"},"content":"     * @return Deadline Command."},{"lineNumber":153,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException if invalid input."},{"lineNumber":154,"author":{"gitId":"pengxiangg"},"content":"     * @throws ParseException if invalid date."},{"lineNumber":155,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"pengxiangg"},"content":"    private Command parseDeadline(String[] userInputArr, String userInput)"},{"lineNumber":157,"author":{"gitId":"pengxiangg"},"content":"            throws DukeException, ParseException {"},{"lineNumber":158,"author":{"gitId":"pengxiangg"},"content":"        if (userInputArr.length \u003c 2) {"},{"lineNumber":159,"author":{"gitId":"pengxiangg"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\\n\");"},{"lineNumber":160,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"pengxiangg"},"content":"        String deadlineString \u003d userInput.substring(9);"},{"lineNumber":162,"author":{"gitId":"pengxiangg"},"content":"        String[] deadlineArr \u003d deadlineString.split(DEADLINE_SPLIT);"},{"lineNumber":163,"author":{"gitId":"pengxiangg"},"content":"        if (deadlineArr.length \u003c 2) {"},{"lineNumber":164,"author":{"gitId":"pengxiangg"},"content":"            throw new DukeException(\"☹ OOPS!!! The date of a deadline cannot be empty.\\n\");"},{"lineNumber":165,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":167,"author":{"gitId":"pengxiangg"},"content":"        Date date \u003d parseDate(deadlineArr);"},{"lineNumber":168,"author":{"gitId":"pengxiangg"},"content":"        boolean isTime \u003d checkIsTime(deadlineArr);"},{"lineNumber":169,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":170,"author":{"gitId":"pengxiangg"},"content":"        Deadline deadline \u003d new Deadline(deadlineArr[0], date, isTime);"},{"lineNumber":171,"author":{"gitId":"pengxiangg"},"content":"        return new AddCommand(deadline);"},{"lineNumber":172,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":174,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"pengxiangg"},"content":"     * Parses user input into Event Command."},{"lineNumber":176,"author":{"gitId":"pengxiangg"},"content":"     * @param userInputArr User input as array."},{"lineNumber":177,"author":{"gitId":"pengxiangg"},"content":"     * @param userInput User input."},{"lineNumber":178,"author":{"gitId":"pengxiangg"},"content":"     * @return Event Command."},{"lineNumber":179,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException if invalid input."},{"lineNumber":180,"author":{"gitId":"pengxiangg"},"content":"     * @throws ParseException if invalid date."},{"lineNumber":181,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":182,"author":{"gitId":"pengxiangg"},"content":"    private Command parseEvent(String[] userInputArr, String userInput)"},{"lineNumber":183,"author":{"gitId":"pengxiangg"},"content":"            throws DukeException, ParseException {"},{"lineNumber":184,"author":{"gitId":"pengxiangg"},"content":"        if (userInputArr.length \u003c 2) {"},{"lineNumber":185,"author":{"gitId":"pengxiangg"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a event cannot be empty.\\n\");"},{"lineNumber":186,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"pengxiangg"},"content":"        String eventString \u003d userInput.substring(6);"},{"lineNumber":188,"author":{"gitId":"pengxiangg"},"content":"        String[] eventArr \u003d eventString.split(EVENT_SPLIT);"},{"lineNumber":189,"author":{"gitId":"pengxiangg"},"content":"        if (eventArr.length \u003c 2) {"},{"lineNumber":190,"author":{"gitId":"pengxiangg"},"content":"            throw new DukeException(\"☹ OOPS!!! The date of an event cannot be empty.\\n\");"},{"lineNumber":191,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":193,"author":{"gitId":"pengxiangg"},"content":"        Date dateEvent \u003d parseDate(eventArr);"},{"lineNumber":194,"author":{"gitId":"pengxiangg"},"content":"        boolean isTimeEvent \u003d checkIsTime(eventArr);"},{"lineNumber":195,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":196,"author":{"gitId":"pengxiangg"},"content":"        Event event \u003d new Event(eventArr[0], dateEvent, isTimeEvent);"},{"lineNumber":197,"author":{"gitId":"pengxiangg"},"content":"        return new AddCommand(event);"},{"lineNumber":198,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":200,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"pengxiangg"},"content":"     * Parses user input into Archive Command."},{"lineNumber":202,"author":{"gitId":"pengxiangg"},"content":"     * @param userInputArr User input as array."},{"lineNumber":203,"author":{"gitId":"pengxiangg"},"content":"     * @return Archive Command to archive task."},{"lineNumber":204,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException if invalid user input."},{"lineNumber":205,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":206,"author":{"gitId":"pengxiangg"},"content":"    private Command archiveEvent(String[] userInputArr) throws DukeException {"},{"lineNumber":207,"author":{"gitId":"pengxiangg"},"content":"        if (userInputArr.length \u003c 2) {"},{"lineNumber":208,"author":{"gitId":"pengxiangg"},"content":"            throw new DukeException(\"Please enter a task number to be archived\\n\");"},{"lineNumber":209,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"pengxiangg"},"content":"        String taskNumber \u003d userInputArr[1];"},{"lineNumber":211,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":212,"author":{"gitId":"pengxiangg"},"content":"        int taskNumberInt \u003d Integer.parseInt(taskNumber) - 1;"},{"lineNumber":213,"author":{"gitId":"pengxiangg"},"content":"        return new ArchiveCommand(taskNumberInt);"},{"lineNumber":214,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":215,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":217,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":218,"author":{"gitId":"pengxiangg"},"content":"     * Check if the array contains a time element."},{"lineNumber":219,"author":{"gitId":"pengxiangg"},"content":"     * @param arr input that has been partially parsed."},{"lineNumber":220,"author":{"gitId":"pengxiangg"},"content":"     * @return boolean if array contains time element."},{"lineNumber":221,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":222,"author":{"gitId":"pengxiangg"},"content":"    private boolean checkIsTime(String[] arr) {"},{"lineNumber":223,"author":{"gitId":"pengxiangg"},"content":"        return arr[1].split(SPACE_SPLIT).length !\u003d 1;"},{"lineNumber":224,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":226,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":227,"author":{"gitId":"pengxiangg"},"content":"     * Parses Date depending on what format of date the user inputs."},{"lineNumber":228,"author":{"gitId":"pengxiangg"},"content":"     * @param arr input that has been partially parsed."},{"lineNumber":229,"author":{"gitId":"pengxiangg"},"content":"     * @return Date."},{"lineNumber":230,"author":{"gitId":"pengxiangg"},"content":"     * @throws ParseException if incorrect format."},{"lineNumber":231,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":232,"author":{"gitId":"pengxiangg"},"content":"    private Date parseDate(String[] arr) throws ParseException {"},{"lineNumber":233,"author":{"gitId":"pengxiangg"},"content":"        if (arr[1].split(SPACE_SPLIT).length \u003d\u003d 1) {"},{"lineNumber":234,"author":{"gitId":"pengxiangg"},"content":"            return DATE_FORMAT.parse(arr[1]);"},{"lineNumber":235,"author":{"gitId":"pengxiangg"},"content":"        } else {"},{"lineNumber":236,"author":{"gitId":"pengxiangg"},"content":"            return DATE_TIME_FORMAT.parse(arr[1]);"},{"lineNumber":237,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":239}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":"import java.text.ParseException;"},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"import java.util.Scanner;"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"import duke.task.Deadline;"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"import duke.task.Event;"},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"import duke.task.Task;"},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"import duke.task.ToDo;"},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":" * Represents a class to manage the storing of the TaskList into a text file,"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":" * and reading a text file to create a TaskList."},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"public class Storage {"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"     * Represents time and date."},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"    private static final SimpleDateFormat DATE_TIME_CONVERTER_FORMAT \u003d new SimpleDateFormat(\"MMM dd yyyy hh:mma\");"},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"     * Represents date."},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"    private static final SimpleDateFormat DATE_CONVERTER_FORMAT \u003d new SimpleDateFormat(\"MMM dd yyyy\");"},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"     * File path where the text file is stored."},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"    private Path filepath;"},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"     * File path where the archive file is stored"},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"    private Path archivePath;"},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"     * Initialises Storage with filepath where text file is stored."},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":"     * @param filepath    Filepath where the text file is stored."},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":"     * @param archivePath Filepath where the archive file is stored."},{"lineNumber":52,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":"    public Storage(String filepath, String archivePath) {"},{"lineNumber":54,"author":{"gitId":"pengxiangg"},"content":"        this.filepath \u003d Paths.get(System.getProperty(\"user.dir\") + filepath);"},{"lineNumber":55,"author":{"gitId":"pengxiangg"},"content":"        this.archivePath \u003d Paths.get(System.getProperty(\"user.dir\") + archivePath);"},{"lineNumber":56,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":58,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"pengxiangg"},"content":"     * Read the main text file and convert into ArrayList of Tasks."},{"lineNumber":60,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"pengxiangg"},"content":"     * @return ArrayList of Tasks"},{"lineNumber":62,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"pengxiangg"},"content":"    public ArrayList\u003cTask\u003e readMain() {"},{"lineNumber":64,"author":{"gitId":"pengxiangg"},"content":"        return readFile(filepath);"},{"lineNumber":65,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":67,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"pengxiangg"},"content":"     * Read the archive text file and convert into ArrayList of Archived Tasks."},{"lineNumber":69,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"pengxiangg"},"content":"     * @return ArrayList of Archived Tasks"},{"lineNumber":71,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"pengxiangg"},"content":"    public ArrayList\u003cTask\u003e readArchive() {"},{"lineNumber":73,"author":{"gitId":"pengxiangg"},"content":"        return readFile(archivePath);"},{"lineNumber":74,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":76,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"pengxiangg"},"content":"     * Reads text file and converts the text into tasks to be placed"},{"lineNumber":78,"author":{"gitId":"pengxiangg"},"content":"     * into an ArrayList. If the text file does not exists, it is created."},{"lineNumber":79,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"pengxiangg"},"content":"     * @param path file path where text file is stored"},{"lineNumber":81,"author":{"gitId":"pengxiangg"},"content":"     * @return an ArrayList containing the tasks from the text file."},{"lineNumber":82,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"pengxiangg"},"content":"    private ArrayList\u003cTask\u003e readFile(Path path) {"},{"lineNumber":84,"author":{"gitId":"pengxiangg"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":85,"author":{"gitId":"pengxiangg"},"content":"        //From https://www.sghill.net/how-do-i-make-cross-platform-file-paths-in-java.html"},{"lineNumber":86,"author":{"gitId":"pengxiangg"},"content":"        if (!Files.isRegularFile(path)) {"},{"lineNumber":87,"author":{"gitId":"pengxiangg"},"content":"            createFile(path);"},{"lineNumber":88,"author":{"gitId":"pengxiangg"},"content":"        } else {"},{"lineNumber":89,"author":{"gitId":"pengxiangg"},"content":"            File f \u003d new File(path.toString());"},{"lineNumber":90,"author":{"gitId":"pengxiangg"},"content":"            try {"},{"lineNumber":91,"author":{"gitId":"pengxiangg"},"content":"                Scanner s \u003d new Scanner(f);"},{"lineNumber":92,"author":{"gitId":"pengxiangg"},"content":"                while (s.hasNext()) {"},{"lineNumber":93,"author":{"gitId":"pengxiangg"},"content":"                    String string \u003d s.nextLine();"},{"lineNumber":94,"author":{"gitId":"pengxiangg"},"content":"                    String[] arr \u003d string.split(\" \\\\| \");"},{"lineNumber":95,"author":{"gitId":"pengxiangg"},"content":"                    parseArrayString(arr, tasks);"},{"lineNumber":96,"author":{"gitId":"pengxiangg"},"content":"                }"},{"lineNumber":97,"author":{"gitId":"pengxiangg"},"content":"            } catch (FileNotFoundException e) {"},{"lineNumber":98,"author":{"gitId":"pengxiangg"},"content":"                System.out.println(\"Unable to find file :(\");"},{"lineNumber":99,"author":{"gitId":"pengxiangg"},"content":"                createFile(path);"},{"lineNumber":100,"author":{"gitId":"pengxiangg"},"content":"            } catch (ParseException e) {"},{"lineNumber":101,"author":{"gitId":"pengxiangg"},"content":"                System.out.println(\"Unable to parse date :(\");"},{"lineNumber":102,"author":{"gitId":"pengxiangg"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"pengxiangg"},"content":"        return tasks;"},{"lineNumber":105,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":107,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"pengxiangg"},"content":"     * @param arr   A line from the text file split into an array."},{"lineNumber":109,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks ArrayList of tasks."},{"lineNumber":110,"author":{"gitId":"pengxiangg"},"content":"     * @throws ParseException if incorrect date format."},{"lineNumber":111,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"pengxiangg"},"content":"    private void parseArrayString(String[] arr, ArrayList\u003cTask\u003e tasks) throws ParseException {"},{"lineNumber":113,"author":{"gitId":"pengxiangg"},"content":"        boolean isDone \u003d arr[1].equals(\"1\");"},{"lineNumber":114,"author":{"gitId":"pengxiangg"},"content":"        boolean isTime;"},{"lineNumber":115,"author":{"gitId":"pengxiangg"},"content":"        Date date;"},{"lineNumber":116,"author":{"gitId":"pengxiangg"},"content":"        try {"},{"lineNumber":117,"author":{"gitId":"pengxiangg"},"content":"            assert arr[0].equals(\"T\") || arr[0].equals(\"D\") || arr[0].equals(\"E\");"},{"lineNumber":118,"author":{"gitId":"pengxiangg"},"content":"            switch (arr[0]) {"},{"lineNumber":119,"author":{"gitId":"pengxiangg"},"content":"            case \"T\":"},{"lineNumber":120,"author":{"gitId":"pengxiangg"},"content":"                tasks.add(new ToDo(arr[2], isDone));"},{"lineNumber":121,"author":{"gitId":"pengxiangg"},"content":"                break;"},{"lineNumber":122,"author":{"gitId":"pengxiangg"},"content":"            case \"D\":"},{"lineNumber":123,"author":{"gitId":"pengxiangg"},"content":"                isTime \u003d arr[4].equals(\"1\");"},{"lineNumber":124,"author":{"gitId":"pengxiangg"},"content":"                date \u003d (isTime) ? DATE_TIME_CONVERTER_FORMAT.parse(arr[3])"},{"lineNumber":125,"author":{"gitId":"pengxiangg"},"content":"                        : DATE_CONVERTER_FORMAT.parse(arr[3]);"},{"lineNumber":126,"author":{"gitId":"pengxiangg"},"content":"                tasks.add(new Deadline(arr[2], date, isTime, isDone));"},{"lineNumber":127,"author":{"gitId":"pengxiangg"},"content":"                break;"},{"lineNumber":128,"author":{"gitId":"pengxiangg"},"content":"            case \"E\":"},{"lineNumber":129,"author":{"gitId":"pengxiangg"},"content":"                isTime \u003d arr[4].equals(\"1\");"},{"lineNumber":130,"author":{"gitId":"pengxiangg"},"content":"                date \u003d (isTime) ? DATE_TIME_CONVERTER_FORMAT.parse(arr[3])"},{"lineNumber":131,"author":{"gitId":"pengxiangg"},"content":"                        : DATE_CONVERTER_FORMAT.parse(arr[3]);"},{"lineNumber":132,"author":{"gitId":"pengxiangg"},"content":"                tasks.add(new Event(arr[2], date, isTime, isDone));"},{"lineNumber":133,"author":{"gitId":"pengxiangg"},"content":"                break;"},{"lineNumber":134,"author":{"gitId":"pengxiangg"},"content":"            default:"},{"lineNumber":135,"author":{"gitId":"pengxiangg"},"content":"                assert false;"},{"lineNumber":136,"author":{"gitId":"pengxiangg"},"content":"            }"},{"lineNumber":137,"author":{"gitId":"pengxiangg"},"content":"        } catch (ParseException e) {"},{"lineNumber":138,"author":{"gitId":"pengxiangg"},"content":"            throw e;"},{"lineNumber":139,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":142,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"pengxiangg"},"content":"     * Creates the text file to contain the tasks at the filepath where"},{"lineNumber":144,"author":{"gitId":"pengxiangg"},"content":"     * it is supposed to be."},{"lineNumber":145,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":146,"author":{"gitId":"pengxiangg"},"content":"     * @param path path of text file."},{"lineNumber":147,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"pengxiangg"},"content":"    private void createFile(Path path) {"},{"lineNumber":149,"author":{"gitId":"pengxiangg"},"content":"        if (!Files.isDirectory(path.getParent())) {"},{"lineNumber":150,"author":{"gitId":"pengxiangg"},"content":"            try {"},{"lineNumber":151,"author":{"gitId":"pengxiangg"},"content":"                Files.createDirectory(path.getParent());"},{"lineNumber":152,"author":{"gitId":"pengxiangg"},"content":"            } catch (IOException e) {"},{"lineNumber":153,"author":{"gitId":"pengxiangg"},"content":"                System.out.println(\"Failed to create directory\");"},{"lineNumber":154,"author":{"gitId":"pengxiangg"},"content":"            }"},{"lineNumber":155,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":157,"author":{"gitId":"pengxiangg"},"content":"        try {"},{"lineNumber":158,"author":{"gitId":"pengxiangg"},"content":"            Files.createFile(path);"},{"lineNumber":159,"author":{"gitId":"pengxiangg"},"content":"        } catch (IOException e) {"},{"lineNumber":160,"author":{"gitId":"pengxiangg"},"content":"            System.out.println(\"Failed to create file\");"},{"lineNumber":161,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":164,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"pengxiangg"},"content":"     * Converts the tasks into String to be stored into the text file."},{"lineNumber":166,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":167,"author":{"gitId":"pengxiangg"},"content":"     * @param arrayList ArrayList containing the tasks."},{"lineNumber":168,"author":{"gitId":"pengxiangg"},"content":"     * @param path path of file."},{"lineNumber":169,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"pengxiangg"},"content":"    private void writeToFile(ArrayList\u003cTask\u003e arrayList, Path path) {"},{"lineNumber":171,"author":{"gitId":"pengxiangg"},"content":"        try {"},{"lineNumber":172,"author":{"gitId":"pengxiangg"},"content":"            FileWriter fw \u003d new FileWriter(path.toString());"},{"lineNumber":173,"author":{"gitId":"pengxiangg"},"content":"            for (Task task : arrayList) {"},{"lineNumber":174,"author":{"gitId":"pengxiangg"},"content":"                fw.write(task.toStoredTextString() + \"\\n\");"},{"lineNumber":175,"author":{"gitId":"pengxiangg"},"content":"            }"},{"lineNumber":176,"author":{"gitId":"pengxiangg"},"content":"            fw.close();"},{"lineNumber":177,"author":{"gitId":"pengxiangg"},"content":"        } catch (IOException e) {"},{"lineNumber":178,"author":{"gitId":"pengxiangg"},"content":"            System.out.println(\"Unable to write to file\");"},{"lineNumber":179,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":182,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"pengxiangg"},"content":"     * Write into the Main file contained at filepath."},{"lineNumber":184,"author":{"gitId":"pengxiangg"},"content":"     * @param arrayList ArrayList of Tasks that the text file is being written to."},{"lineNumber":185,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"pengxiangg"},"content":"    public void writeToMain(ArrayList\u003cTask\u003e arrayList) {"},{"lineNumber":187,"author":{"gitId":"pengxiangg"},"content":"        writeToFile(arrayList, filepath);"},{"lineNumber":188,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":190,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":191,"author":{"gitId":"pengxiangg"},"content":"     * Write into the Main file contained at archivePath."},{"lineNumber":192,"author":{"gitId":"pengxiangg"},"content":"     * @param arrayList ArrayList of Tasks that the text file is being written to."},{"lineNumber":193,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"pengxiangg"},"content":"    public void writeToArchive(ArrayList\u003cTask\u003e arrayList) {"},{"lineNumber":195,"author":{"gitId":"pengxiangg"},"content":"        writeToFile(arrayList, archivePath);"},{"lineNumber":196,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":198,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":199,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":199}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":" * Represent a list for containing tasks."},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"     * ArrayList that stores the tasks"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"     * Creates a TaskList that contains tasks."},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks ArrayList that will be placed inside the TaskList."},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"     * Creates an empty TaskList."},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"    public TaskList() {"},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"     * Returns the ArrayList that is inside the TaskList."},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"     * @return ArrayList inside the TaskList."},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"        return tasks;"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"     * Marks a task as done."},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"     * @param taskNumber Represents the task to be marked as done, in array index form."},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"     * @return Task that is marked as done."},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException if the task number is not within the range of the TaskList."},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"    public Task markTaskDoneInList(int taskNumber) throws DukeException {"},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"        if (taskNumber \u003c 0 || taskNumber \u003e\u003d tasks.size()) {"},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":"            throw new DukeException(\"Please enter a valid task number\\n\");"},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":"        } else {"},{"lineNumber":52,"author":{"gitId":"pengxiangg"},"content":"            Task task \u003d tasks.get(taskNumber);"},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":"            task.markDone();"},{"lineNumber":54,"author":{"gitId":"pengxiangg"},"content":"            return task;"},{"lineNumber":55,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":58,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"pengxiangg"},"content":"     * Deletes task from TaskList."},{"lineNumber":60,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"pengxiangg"},"content":"     * @param taskNumber Represents the task to be deleted, in array index form."},{"lineNumber":62,"author":{"gitId":"pengxiangg"},"content":"     * @return Task that is deleted"},{"lineNumber":63,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException if the task number is not within the range of the TaskList."},{"lineNumber":64,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"pengxiangg"},"content":"    public Task deleteTaskFromList(int taskNumber) throws DukeException {"},{"lineNumber":66,"author":{"gitId":"pengxiangg"},"content":"        if (taskNumber \u003c 0 || taskNumber \u003e\u003d tasks.size()) {"},{"lineNumber":67,"author":{"gitId":"pengxiangg"},"content":"            throw new DukeException(\"Please enter a valid task number\\n\");"},{"lineNumber":68,"author":{"gitId":"pengxiangg"},"content":"        } else {"},{"lineNumber":69,"author":{"gitId":"pengxiangg"},"content":"            Task task \u003d tasks.get(taskNumber);"},{"lineNumber":70,"author":{"gitId":"pengxiangg"},"content":"            tasks.remove(task);"},{"lineNumber":71,"author":{"gitId":"pengxiangg"},"content":"            return task;"},{"lineNumber":72,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":75,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"pengxiangg"},"content":"     * Returns the size of the TaskList."},{"lineNumber":77,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"pengxiangg"},"content":"     * @return size of TaskList."},{"lineNumber":79,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"pengxiangg"},"content":"    public int size() {"},{"lineNumber":81,"author":{"gitId":"pengxiangg"},"content":"        return tasks.size();"},{"lineNumber":82,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":84,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"pengxiangg"},"content":"     * Adds task into TaskList."},{"lineNumber":86,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"pengxiangg"},"content":"     * @param task Task to be added into the TaskList."},{"lineNumber":88,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"pengxiangg"},"content":"    public void addTask(Task task) {"},{"lineNumber":90,"author":{"gitId":"pengxiangg"},"content":"        tasks.add(task);"},{"lineNumber":91,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":93,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"pengxiangg"},"content":"     * Finds tasks using keyword."},{"lineNumber":95,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"pengxiangg"},"content":"     * @param keyword Keyword that is used to find tasks."},{"lineNumber":97,"author":{"gitId":"pengxiangg"},"content":"     * @return ArrayList of tasks containing tasks that match the keyword."},{"lineNumber":98,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"pengxiangg"},"content":"    public ArrayList\u003cTask\u003e findTasks(String keyword) {"},{"lineNumber":100,"author":{"gitId":"pengxiangg"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":101,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":102,"author":{"gitId":"pengxiangg"},"content":"        for (Task task : tasks) {"},{"lineNumber":103,"author":{"gitId":"pengxiangg"},"content":"            boolean hasKeyword \u003d task.getDescription().contains(keyword);"},{"lineNumber":104,"author":{"gitId":"pengxiangg"},"content":"            if (hasKeyword) {"},{"lineNumber":105,"author":{"gitId":"pengxiangg"},"content":"                foundTasks.add(task);"},{"lineNumber":106,"author":{"gitId":"pengxiangg"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":109,"author":{"gitId":"pengxiangg"},"content":"        return foundTasks;"},{"lineNumber":110,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":111}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":" * Handles interactions with the user."},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"public class Ui {"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"     * Scanner to read user inputs."},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"    private Scanner scanner;"},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"     * Creates a new Ui object."},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"    public Ui() {"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"        scanner \u003d new Scanner(System.in);"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"     * Prints greeting message."},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"    public String getGreeting() {"},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"        String intro1 \u003d \"Hello! I\u0027m Duke, your tasks manager.\\n\";"},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"        String intro2 \u003d \"What can I do for you? \\n\";"},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"        String info \u003d \"Here\u0027s a list of commands to help you get started: \\n\""},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"                + \"1. todo DESCRIPTION \\n2. deadline DESCRIPTION /by DATE [TIME] \\n\""},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"                + \"3. event DESCRIPTION /at DATE [TIME] \\n4. delete INDEX \\n\""},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"                + \"5. done INDEX \\n6. list \\n7. archive INDEX \\n8. find KEYWORD \\n\""},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"                + \"9. bye \\nFor more info, visit the user guide at: https://pengxiangg.github.io/ip/ \\n \";"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"        String greeting \u003d intro1 + intro2 + info;"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"        return greeting;"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"    public void printGreeting() {"},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"        System.out.println(formatString(getGreeting()));"},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"     * Adds dividers to the message."},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"     * @param s Message to add dividers to."},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":"     * @return Message with dividers."},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"pengxiangg"},"content":"    private String addDividers(String s) {"},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":"        String divider \u003d \"____________________________________________________________________\\n\";"},{"lineNumber":54,"author":{"gitId":"pengxiangg"},"content":"        String dividerFormatted \u003d String.format(\"%\" + (5 + divider.length()) + \"s\", divider);"},{"lineNumber":55,"author":{"gitId":"pengxiangg"},"content":"        return dividerFormatted + s + dividerFormatted;"},{"lineNumber":56,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":58,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"pengxiangg"},"content":"     * Formats string to follow indent alignment."},{"lineNumber":60,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"pengxiangg"},"content":"     * @param s String to be indented."},{"lineNumber":62,"author":{"gitId":"pengxiangg"},"content":"     * @return Indented string."},{"lineNumber":63,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"pengxiangg"},"content":"    public String formatString(String s) {"},{"lineNumber":65,"author":{"gitId":"pengxiangg"},"content":"        String output \u003d \"\";"},{"lineNumber":66,"author":{"gitId":"pengxiangg"},"content":"        Scanner scanner \u003d new Scanner(s);"},{"lineNumber":67,"author":{"gitId":"pengxiangg"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":68,"author":{"gitId":"pengxiangg"},"content":"            String line \u003d scanner.nextLine();"},{"lineNumber":69,"author":{"gitId":"pengxiangg"},"content":"            String formattedLine \u003d String.format(\"%\" + (6 + line.length()) + \"s\", line);"},{"lineNumber":70,"author":{"gitId":"pengxiangg"},"content":"            output \u003d output + formattedLine + \"\\n\";"},{"lineNumber":71,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"pengxiangg"},"content":"        return addDividers(output);"},{"lineNumber":73,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":75,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"pengxiangg"},"content":"     * Formats string and then prints the formmatted string."},{"lineNumber":77,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"pengxiangg"},"content":"     * @param s String to be printed."},{"lineNumber":79,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"pengxiangg"},"content":"    public void printString(String s) {"},{"lineNumber":81,"author":{"gitId":"pengxiangg"},"content":"        System.out.println(formatString(s));"},{"lineNumber":82,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":84,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"pengxiangg"},"content":"     * Returns message that task was added to TaskList."},{"lineNumber":86,"author":{"gitId":"pengxiangg"},"content":"     * @param task Task that was added."},{"lineNumber":87,"author":{"gitId":"pengxiangg"},"content":"     * @param size Size of TaskList."},{"lineNumber":88,"author":{"gitId":"pengxiangg"},"content":"     * @return String of message."},{"lineNumber":89,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"pengxiangg"},"content":"    public String getAddTaskString(Task task, int size) {"},{"lineNumber":91,"author":{"gitId":"pengxiangg"},"content":"        String s \u003d \"Got it. I\u0027ve added this task: \\n\""},{"lineNumber":92,"author":{"gitId":"pengxiangg"},"content":"                + task.toString() + \u0027\\n\u0027"},{"lineNumber":93,"author":{"gitId":"pengxiangg"},"content":"                + \"Now you have \" + size + \" tasks in the list. \\n\";"},{"lineNumber":94,"author":{"gitId":"pengxiangg"},"content":"        return s;"},{"lineNumber":95,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":97,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"pengxiangg"},"content":"     * Prints goodbye message."},{"lineNumber":99,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"pengxiangg"},"content":"    public void printGoodbye() {"},{"lineNumber":101,"author":{"gitId":"pengxiangg"},"content":"        String goodbye \u003d getGoodbyeString();"},{"lineNumber":102,"author":{"gitId":"pengxiangg"},"content":"        System.out.println(formatString(goodbye));"},{"lineNumber":103,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":105,"author":{"gitId":"pengxiangg"},"content":"    public String getGoodbyeString() {"},{"lineNumber":106,"author":{"gitId":"pengxiangg"},"content":"        return \"Bye. Hope to see you again soon! \\n\";"},{"lineNumber":107,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":109,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"pengxiangg"},"content":"     * Returns message that task has been deleted from TaskList."},{"lineNumber":111,"author":{"gitId":"pengxiangg"},"content":"     * @param task Task that was deleted from TaskList."},{"lineNumber":112,"author":{"gitId":"pengxiangg"},"content":"     * @param size Size of TaskList."},{"lineNumber":113,"author":{"gitId":"pengxiangg"},"content":"     * @return String of message."},{"lineNumber":114,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"pengxiangg"},"content":"    public String getDeletedTaskString(Task task, int size) {"},{"lineNumber":116,"author":{"gitId":"pengxiangg"},"content":"        String success \u003d \"Noted. I\u0027ve removed this task: \\n\""},{"lineNumber":117,"author":{"gitId":"pengxiangg"},"content":"                + task.toString() + \"\\n\""},{"lineNumber":118,"author":{"gitId":"pengxiangg"},"content":"                + \"Now you have \" + size + \" tasks in the list. \\n\";"},{"lineNumber":119,"author":{"gitId":"pengxiangg"},"content":"        return success;"},{"lineNumber":120,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":122,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"pengxiangg"},"content":"     * Returns message that task has been marked as done."},{"lineNumber":124,"author":{"gitId":"pengxiangg"},"content":"     * @param task Task that is marked as done."},{"lineNumber":125,"author":{"gitId":"pengxiangg"},"content":"     * @return String of message."},{"lineNumber":126,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"pengxiangg"},"content":"    public String getMarkedTaskString(Task task) {"},{"lineNumber":128,"author":{"gitId":"pengxiangg"},"content":"        return \"Nice! I\u0027ve marked this task as done: \\n\""},{"lineNumber":129,"author":{"gitId":"pengxiangg"},"content":"                + task + \"\\n\";"},{"lineNumber":130,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":132,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"pengxiangg"},"content":"     * Prints TaskList."},{"lineNumber":134,"author":{"gitId":"pengxiangg"},"content":"     * @param list TaskList to be printed."},{"lineNumber":135,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"pengxiangg"},"content":"    public void printList(List\u003cTask\u003e list) {"},{"lineNumber":137,"author":{"gitId":"pengxiangg"},"content":"        String printedList \u003d getListString(list);"},{"lineNumber":138,"author":{"gitId":"pengxiangg"},"content":"        System.out.println(formatString(printedList));"},{"lineNumber":139,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":141,"author":{"gitId":"pengxiangg"},"content":"    public String getListString(List\u003cTask\u003e list) {"},{"lineNumber":142,"author":{"gitId":"pengxiangg"},"content":"        String printedList \u003d \"\";"},{"lineNumber":143,"author":{"gitId":"pengxiangg"},"content":"        if (list.size() \u003e 0) {"},{"lineNumber":144,"author":{"gitId":"pengxiangg"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":145,"author":{"gitId":"pengxiangg"},"content":"                String lineItem \u003d (i + 1) + \". \" + list.get(i) + \"\\n\";"},{"lineNumber":146,"author":{"gitId":"pengxiangg"},"content":"                printedList \u003d printedList + lineItem;"},{"lineNumber":147,"author":{"gitId":"pengxiangg"},"content":"            }"},{"lineNumber":148,"author":{"gitId":"pengxiangg"},"content":"        } else {"},{"lineNumber":149,"author":{"gitId":"pengxiangg"},"content":"            printedList \u003d \"List is empty \\n\";"},{"lineNumber":150,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"pengxiangg"},"content":"        return printedList;"},{"lineNumber":152,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":154,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"pengxiangg"},"content":"     * Reads in user input."},{"lineNumber":156,"author":{"gitId":"pengxiangg"},"content":"     *"},{"lineNumber":157,"author":{"gitId":"pengxiangg"},"content":"     * @return User input as String."},{"lineNumber":158,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"pengxiangg"},"content":"    public String readInput() {"},{"lineNumber":160,"author":{"gitId":"pengxiangg"},"content":"        return scanner.nextLine();"},{"lineNumber":161,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":163,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":164,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"pengxiangg"},"content":"     * Returns message of tasks that have been found."},{"lineNumber":166,"author":{"gitId":"pengxiangg"},"content":"     * @param foundTasks ArrayList of found tasks."},{"lineNumber":167,"author":{"gitId":"pengxiangg"},"content":"     * @return String of message."},{"lineNumber":168,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"pengxiangg"},"content":"    public String getFoundTasksString(ArrayList\u003cTask\u003e foundTasks) {"},{"lineNumber":170,"author":{"gitId":"pengxiangg"},"content":"        String printedList \u003d \"\";"},{"lineNumber":171,"author":{"gitId":"pengxiangg"},"content":"        if (foundTasks.size() \u003e 0) {"},{"lineNumber":172,"author":{"gitId":"pengxiangg"},"content":"            printedList \u003d \"Here are the matching tasks in your list: \\n\";"},{"lineNumber":173,"author":{"gitId":"pengxiangg"},"content":"            for (int i \u003d 0; i \u003c foundTasks.size(); i++) {"},{"lineNumber":174,"author":{"gitId":"pengxiangg"},"content":"                String lineItem \u003d (i + 1) + \". \" + foundTasks.get(i) + \"\\n\";"},{"lineNumber":175,"author":{"gitId":"pengxiangg"},"content":"                printedList \u003d printedList + lineItem;"},{"lineNumber":176,"author":{"gitId":"pengxiangg"},"content":"            }"},{"lineNumber":177,"author":{"gitId":"pengxiangg"},"content":"        } else {"},{"lineNumber":178,"author":{"gitId":"pengxiangg"},"content":"            printedList \u003d \"No such keyword exists in the tasks in your list.\\n\";"},{"lineNumber":179,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"pengxiangg"},"content":"        return printedList;"},{"lineNumber":181,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":183,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":184,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":185,"author":{"gitId":"pengxiangg"},"content":"     * Returns message of that the task is archived."},{"lineNumber":186,"author":{"gitId":"pengxiangg"},"content":"     * @param task Task to be archived."},{"lineNumber":187,"author":{"gitId":"pengxiangg"},"content":"     * @return String of message."},{"lineNumber":188,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"pengxiangg"},"content":"    public String getArchivedTaskString(Task task) {"},{"lineNumber":190,"author":{"gitId":"pengxiangg"},"content":"        return \"Nice! I\u0027ve removed this task from the main list, \""},{"lineNumber":191,"author":{"gitId":"pengxiangg"},"content":"                + \"and added this task to the archive: \\n\""},{"lineNumber":192,"author":{"gitId":"pengxiangg"},"content":"                + task + \"\\n\";"},{"lineNumber":193,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":194}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":" * Command that adds new tasks into the TaskList."},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"public class AddCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"    /** Task to be added. */"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"    private Task task;"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"     * Creates a command to add task into TaskList."},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"     * @param task Task to be added."},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"    public AddCommand(Task task) {"},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"        this.task \u003d task;"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"     * Prints String returned by getExecuteString method."},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that is being executed on."},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"    public void execute(TaskList tasks, TaskList archives, Ui ui, Storage storage) {"},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"        ui.printString(getExecuteString(tasks, archives, ui, storage));"},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"     * Adds task into the TaskList, and prints results, after which the task"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"     * is added into the text file through Storage. Returns String produced by Ui."},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that the task is being added to."},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"     * @return String of message of the command executed"},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"    public String getExecuteString(TaskList tasks, TaskList archives, Ui ui, Storage storage) {"},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"        tasks.addTask(task);"},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"        storage.writeToMain(tasks.getTasks());"},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"        return ui.getAddTaskString(task, tasks.size());"},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":49}},{"path":"src/main/java/duke/command/ArchiveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"public class ArchiveCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":"    /** Task to be archived */"},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"    private int taskNumber;"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"    public ArchiveCommand(int taskNumber) {"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"        this.taskNumber \u003d taskNumber;"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"     * Prints task that is being archived."},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that is being executed on."},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"     * @param archives Tasklist that archived tasks is placed in."},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"    public void execute(TaskList tasks, TaskList archives, Ui ui, Storage storage)"},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"            throws DukeException {"},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"        ui.printString(getExecuteString(tasks, archives, ui, storage));"},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"     * Archives task. Task is first deleted from the main list, and then added"},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"     * into an archived list. The text files of the main task list and archived list"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"     * is updated."},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that is being executed on."},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"     * @param archives TaskList that contains the archived tasks."},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"     * @return String of archived task."},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException"},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"    public String getExecuteString(TaskList tasks, TaskList archives, Ui ui, Storage storage)"},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"            throws DukeException {"},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"            Task task \u003d tasks.deleteTaskFromList(taskNumber);"},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"            archives.addTask(task);"},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"            storage.writeToMain(tasks.getTasks());"},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":"            storage.writeToArchive(archives.getTasks());"},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":"            return ui.getArchivedTaskString(task);"},{"lineNumber":52,"author":{"gitId":"pengxiangg"},"content":"        } catch (DukeException e) {"},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":"            throw e;"},{"lineNumber":54,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":56}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":" * Command class to execute commands."},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"     * Executes commands, depending on child classes."},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that is being executed on."},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException If there is an error."},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"    public abstract void execute(TaskList tasks, TaskList archives,"},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"                                 Ui ui, Storage storage)"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"            throws DukeException;"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"     * Returns executed message, depending on child classes."},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that is being executed on."},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"     * @param archives TaskList that contains archived tasks."},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"     * @return String of executed message"},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException If there is an error."},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"    public abstract String getExecuteString(TaskList tasks, TaskList archives,"},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"                                            Ui ui, Storage storage) throws DukeException;"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"     * Checks if it is the exit command."},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"     * @return Returns true if it is the exit command, false otherwise."},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"    public boolean isExit() {"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"        return false;"},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":43}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":" * Command that deletes task from TaskList."},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"    /** Task number of Task to be deleted from TaskList. */"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"    private int taskNumber;"},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"     * Creates a delete command."},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"     * @param taskNumber Task number of Task."},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"    public DeleteCommand(int taskNumber) {"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"        this.taskNumber \u003d taskNumber;"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"     * Prints String returned by getExecuteString method."},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that is being executed on."},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException"},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"    public void execute(TaskList tasks, TaskList archives,"},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"                        Ui ui, Storage storage) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"        ui.printString(getExecuteString(tasks, archives, ui, storage));"},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"     * Deletes task from TaskList, and updates user through Ui, after which"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"     * the task is removed from the text file through Storage. Returns String"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"     * of message from Ui."},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that the task is being deleted from."},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"     * @return String of message."},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException if task number does not exist."},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"    public String getExecuteString(TaskList tasks, TaskList archives,"},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":"                                   Ui ui, Storage storage) throws DukeException {"},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"pengxiangg"},"content":"            Task task \u003d tasks.deleteTaskFromList(taskNumber);"},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":"            storage.writeToMain(tasks.getTasks());"},{"lineNumber":54,"author":{"gitId":"pengxiangg"},"content":"            return ui.getDeletedTaskString(task, tasks.size());"},{"lineNumber":55,"author":{"gitId":"pengxiangg"},"content":"        } catch (DukeException e) {"},{"lineNumber":56,"author":{"gitId":"pengxiangg"},"content":"            throw e;"},{"lineNumber":57,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":60,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"pengxiangg"},"content":"     * Returns taskNumber of the DeleteCommand."},{"lineNumber":62,"author":{"gitId":"pengxiangg"},"content":"     * @return taskNumber."},{"lineNumber":63,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"pengxiangg"},"content":"    public int getTaskNumber() {"},{"lineNumber":65,"author":{"gitId":"pengxiangg"},"content":"        return taskNumber;"},{"lineNumber":66,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":67}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":" * Command that marks task as done."},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"    /** Task number of task to be marked as done. */"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"    private int taskNumber;"},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"     * Creates a done command."},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"     * @param taskNumber task number of task."},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"    public DoneCommand(int taskNumber) {"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"        this.taskNumber \u003d taskNumber;"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"     * Prints message given by getExecuteString method."},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that is being executed on."},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException if task number does not exist."},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"    public void execute(TaskList tasks, TaskList archives,"},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"                        Ui ui, Storage storage) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"        ui.printString(getExecuteString(tasks, archives, ui, storage));"},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"     * Marks Task as done, updates the user through the Ui, and then"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"     * updates the text file through Storage. Returns the string"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"     * given by Ui."},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that is being executed on."},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"     * @return String of message."},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException"},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"    public String getExecuteString(TaskList tasks, TaskList archives,"},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":"                                   Ui ui, Storage storage) throws DukeException {"},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"pengxiangg"},"content":"            Task task \u003d tasks.markTaskDoneInList(taskNumber);"},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":"            storage.writeToMain(tasks.getTasks());"},{"lineNumber":54,"author":{"gitId":"pengxiangg"},"content":"            return ui.getMarkedTaskString(task);"},{"lineNumber":55,"author":{"gitId":"pengxiangg"},"content":"        } catch (DukeException e) {"},{"lineNumber":56,"author":{"gitId":"pengxiangg"},"content":"            throw e;"},{"lineNumber":57,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":59}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"import javafx.util.Duration;"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":" * Command that exits the Duke program."},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"public class ExitCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"     * Prints goodbye message."},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that is being executed on."},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":"    public void execute(TaskList tasks, TaskList archives, Ui ui, Storage storage) {"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"        ui.printGoodbye();"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"     * Returns goodbye message"},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that is being executed on."},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"     * @return String of goodbye message."},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"    public String getExecuteString(TaskList tasks, TaskList archives,"},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"                                   Ui ui, Storage storage) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"        PauseTransition delay \u003d new PauseTransition(Duration.seconds(0.5));"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"        delay.setOnFinished(event -\u003e Platform.exit());"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"        delay.play();"},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"        return ui.getGoodbyeString();"},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"     * Returns true to exit program."},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"     * @return True to exit program."},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":"    public boolean isExit() {"},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":"        return true;"},{"lineNumber":52,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":53}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"import duke.Ui;"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":" * Command that searches tasks for keywords."},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"public class FindCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"    /** Keyword to search for. */"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"    private String keyword;"},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"     * Creates a Find Command."},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"     * @param keyword Keyword to search for."},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"     * Prints string produced by getExecuteString method."},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that is being executed on."},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException"},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"    public void execute(TaskList tasks, TaskList archives,"},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"                        Ui ui, Storage storage) throws DukeException {"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"        ui.printString(getExecuteString(tasks, archives, ui, storage));"},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"     * Searches for TaskList using keyword, and the Ui will display any tasks found."},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"     * Returns String given by Ui."},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that is being executed on."},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"     * @return String of message."},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"     * @throws DukeException"},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":"    public String getExecuteString(TaskList tasks, TaskList archives,"},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":"                                   Ui ui, Storage storage) throws DukeException {"},{"lineNumber":52,"author":{"gitId":"pengxiangg"},"content":"        ArrayList\u003cTask\u003e foundTasks \u003d tasks.findTasks(keyword);"},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":"        return ui.getFoundTasksString(foundTasks);"},{"lineNumber":54,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":55}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":" * Command that lists out the taskList"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"     * Creates a list command"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"    public ListCommand(){}"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"     * Prints out the tasks inside TaskList."},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that is being executed on."},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"    public void execute(TaskList tasks, TaskList archives,"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"                        Ui ui, Storage storage) {"},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"        ui.printList(tasks.getTasks());"},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"     * Returns string returned by Ui, containing the tasks inside TaskList."},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"     * @param tasks TaskList that is being executed on."},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"     * @param ui Ui to update the user."},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"     * @param storage Storage to update the text file."},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"     * @return String of message."},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"    public String getExecuteString(TaskList tasks, TaskList archives,"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"                                   Ui ui, Storage storage) throws DukeException {"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"        return ui.getListString(tasks.getTasks());"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":42}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":" * Represents a deadline item that inherits from Task."},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"    /** Date of when the deadline is due. */"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"    protected Date date;"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"    /** Boolean that represents if the date contains a time. */"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"    protected boolean isTime;"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"     * Creates a deadline with a default not done."},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"     * @param description Description of deadline."},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"     * @param date Date of deadline."},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"     * @param isTime Indicates if date has a time."},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"    public Deadline(String description, Date date, boolean isTime) {"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"        super(description);"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":"        this.date \u003d date;"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"        this.isTime \u003d isTime;"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"     * Creates a deadline."},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"     * @param description Description of deadline."},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"     * @param date Date of deadline."},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"     * @param isTime Indicates if date has a time."},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"     * @param isDone Indicates if deadline is done."},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"    public Deadline(String description, Date date, boolean isTime, boolean isDone) {"},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"        super(description, isDone);"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"        this.date \u003d date;"},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"        this.isTime \u003d isTime;"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"     * {@inheritDoc}"},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"     * @return Deadline as a String."},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"        String s \u003d isTime ? \"MMM dd yyyy hh:mma\" : \"MMM dd yyyy\";"},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + new SimpleDateFormat(s).format(date) + \")\";"},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"pengxiangg"},"content":"     * {@inheritDoc}"},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":"     * @return Deadline as a String."},{"lineNumber":54,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"pengxiangg"},"content":"    public String toStoredTextString() {"},{"lineNumber":57,"author":{"gitId":"pengxiangg"},"content":"        String s \u003d isTime ? \"MMM dd yyyy hh:mma\" : \"MMM dd yyyy\";"},{"lineNumber":58,"author":{"gitId":"pengxiangg"},"content":"        return \"D | \" + super.toStoredTextString() + \" | \""},{"lineNumber":59,"author":{"gitId":"pengxiangg"},"content":"                + new SimpleDateFormat(s).format(date) + \" | \""},{"lineNumber":60,"author":{"gitId":"pengxiangg"},"content":"                + (isTime ? \"1\" : \"0\");"},{"lineNumber":61,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":62}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":" * Represents a event item that inherits from Task."},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"    /** Date of when the event is occurring. */"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"    protected Date date;"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"    /** Boolean that represents if the date contains a time. */"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"    protected boolean isTime;"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"     * Creates an event with a default not done."},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"     * @param description Description of event."},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"     * @param date Date of event."},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"     * @param isTime Indicates if date has a time."},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"    public Event(String description, Date date, boolean isTime) {"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"        super(description);"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":"        this.date \u003d date;"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"        this.isTime \u003d isTime;"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"     * Creates an event."},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"     * @param description Description of event."},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"     * @param date Date of event."},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"     * @param isTime Indicates if date has a time."},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"     * @param isDone Indicates if event is done."},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"    public Event(String description, Date date, boolean isTime, boolean isDone) {"},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"        super(description, isDone);"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"        this.date \u003d date;"},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"        this.isTime \u003d isTime;"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"     * {@inheritDoc}"},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"     * @return Event as a String."},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"        String s \u003d isTime ? \"MMM dd yyyy hh:mma\" : \"MMM dd yyyy\";"},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + new SimpleDateFormat(s).format(date) + \")\";"},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":52,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":"     * {@inheritDoc}"},{"lineNumber":54,"author":{"gitId":"pengxiangg"},"content":"     * @return Event as a String."},{"lineNumber":55,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"pengxiangg"},"content":"    public String toStoredTextString() {"},{"lineNumber":58,"author":{"gitId":"pengxiangg"},"content":"        String s \u003d isTime ? \"MMM dd yyyy hh:mma\" : \"MMM dd yyyy\";"},{"lineNumber":59,"author":{"gitId":"pengxiangg"},"content":"        return \"E | \" + super.toStoredTextString() + \" | \""},{"lineNumber":60,"author":{"gitId":"pengxiangg"},"content":"                + new SimpleDateFormat(s).format(date) + \" | \""},{"lineNumber":61,"author":{"gitId":"pengxiangg"},"content":"                + (isTime ? \"1\" : \"0\");"},{"lineNumber":62,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":63}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"//@@author CS2103T-week2-project-task3"},{"lineNumber":4,"author":{"gitId":"-"},"content":"//Reused from https://nus-cs2103-ay2021s1.github.io/website/schedule/week2/project.html"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents Task that has a description that can be marked as done."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Task {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Represents task as done or not done. */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    protected boolean isDone;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /** Description of the task. */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private String description;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Creates a new Task object with a default not done."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @param description Description of the task."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public Task(String description) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.description \u003d description;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        this.isDone \u003d false;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a new Task object."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param description Description of the task."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param isDone Indicates if task is done or not done."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.description \u003d description;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Converts isDone boolean into a tick or a cross."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @return A tick or a cross depending on isDone."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public String getStatusIcon() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return (isDone ? \"\\u2714\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //@@author"},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"     * Converts task into String to be displayed to user"},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"     * @return task as a String"},{"lineNumber":47,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"pengxiangg"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"pengxiangg"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":51,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":53,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"pengxiangg"},"content":"     * Marks a task as done."},{"lineNumber":55,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"pengxiangg"},"content":"    public void markDone() {"},{"lineNumber":57,"author":{"gitId":"pengxiangg"},"content":"        this.isDone \u003d true;"},{"lineNumber":58,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":60,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"pengxiangg"},"content":"     * Converts task into String to be stored in the text file."},{"lineNumber":62,"author":{"gitId":"pengxiangg"},"content":"     * @return task as a String."},{"lineNumber":63,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"pengxiangg"},"content":"    public String toStoredTextString() {"},{"lineNumber":65,"author":{"gitId":"pengxiangg"},"content":"        String done \u003d (isDone) ? \"1\" : \"0\";"},{"lineNumber":66,"author":{"gitId":"pengxiangg"},"content":"        return done + \" | \" + description;"},{"lineNumber":67,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":69,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"pengxiangg"},"content":"     * Returns the description of the task."},{"lineNumber":71,"author":{"gitId":"pengxiangg"},"content":"     * @return Description of task."},{"lineNumber":72,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"pengxiangg"},"content":"    public String getDescription() {"},{"lineNumber":74,"author":{"gitId":"pengxiangg"},"content":"        return description;"},{"lineNumber":75,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":36,"-":40}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":" * Represents a to-do item that inherits from Task"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":" */"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"     * Creates a ToDo object with description."},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":"     * @param description description of ToDo."},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"    public ToDo(String description) {"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"     * Creates a ToDo object with description and isDone."},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"     * @param description Description of ToDo."},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"     * @param isDone Boolean to set if ToDo is completed or not."},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"    public ToDo(String description, boolean isDone) {"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"        super(description, isDone);"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"     * {@inheritDoc}"},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"     * @return Todo as String"},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"     * {@inheritDoc}"},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"     * @return Todo as String"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"    public String toStoredTextString() {"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"        return \"T | \" + super.toStoredTextString();"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":42}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"102.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"pengxiangg":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"76.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"43.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" fitToWidth\u003d\"true\"\u003e"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"/\u003e"},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"pengxiangg":19}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"import duke.Parser;"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"public class ParserTest {"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"    public void delete_exceptionThrown() {"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"        String s1 \u003d \"delete\";"},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"            assertEquals(\"\", new Parser().parse(s1));"},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"            fail();"},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"        } catch (Exception e) {"},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"            assertEquals(\"Please enter a task number to be selected\\n\","},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"                    e.getMessage());"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"        String s2 \u003d \"delete a\";"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"            assertEquals(\"\", new Parser().parse(s2));"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"            fail();"},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"        } catch (Exception e) {"},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"            assertEquals(\"Please enter a task number in numeric format\\n\","},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"                    e.getMessage());"},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":"    public void testDelete() {"},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"            String s \u003d \"delete 2\";"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"            DeleteCommand dc \u003d (DeleteCommand) new Parser().parse(s);"},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"            assertEquals(new DeleteCommand(1).getTaskNumber(),"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"                    dc.getTaskNumber());"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"        } catch (Exception e) {"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"            //Do nothing"},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":45}},{"path":"src/test/java/duke/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"import duke.Storage;"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":"import duke.TaskList;"},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"import duke.Ui;"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"import duke.task.Task;"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"import duke.task.ToDo;"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"public class AddCommandTest {"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"    class StorageStub extends Storage {"},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"        public StorageStub(String filepath) {"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"            super(filepath, \"\");"},{"lineNumber":23,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"        @Override"},{"lineNumber":26,"author":{"gitId":"pengxiangg"},"content":"        public void writeToMain(ArrayList\u003cTask\u003e arrayList) {"},{"lineNumber":27,"author":{"gitId":"pengxiangg"},"content":"            //Do nothing"},{"lineNumber":28,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":31,"author":{"gitId":"pengxiangg"},"content":"    class UiStub extends Ui {"},{"lineNumber":32,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":33,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":35,"author":{"gitId":"pengxiangg"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"pengxiangg"},"content":"    public void testAddCommand() {"},{"lineNumber":37,"author":{"gitId":"pengxiangg"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":38,"author":{"gitId":"pengxiangg"},"content":"        TaskList archives \u003d new TaskList();"},{"lineNumber":39,"author":{"gitId":"pengxiangg"},"content":"        AddCommand c \u003d new AddCommand(new ToDo(\"Read book\"));"},{"lineNumber":40,"author":{"gitId":"pengxiangg"},"content":"        c.execute(tasks, archives, new UiStub(), new StorageStub(\"\"));"},{"lineNumber":41,"author":{"gitId":"pengxiangg"},"content":"        assertEquals(new ToDo(\"Read book\").toString(),"},{"lineNumber":42,"author":{"gitId":"pengxiangg"},"content":"                tasks.getTasks().get(0).toString());"},{"lineNumber":43,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":44,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":46,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":46}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"public class EventTest {"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"    public void testEvent() {"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"        try {"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"            Event e \u003d new Event(\"project meeting\","},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":"                    new SimpleDateFormat(\"dd/MM/yyyy HHmm\")"},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":"                            .parse(\"05/12/2020 1600\"), true, false);"},{"lineNumber":17,"author":{"gitId":"pengxiangg"},"content":"            assertEquals(\"[E][✘] project meeting (at: Dec 05 2020 04:00PM)\", e.toString());"},{"lineNumber":18,"author":{"gitId":"pengxiangg"},"content":"        } catch (Exception e) {"},{"lineNumber":19,"author":{"gitId":"pengxiangg"},"content":"            //Do nothing"},{"lineNumber":20,"author":{"gitId":"pengxiangg"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"pengxiangg"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"pengxiangg"},"content":"}"}],"authorContributionMap":{"pengxiangg":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":"deadline return book /by 02/12/2020"},{"lineNumber":3,"author":{"gitId":"pengxiangg"},"content":"event project meeting /at 05/12/2020 1600"},{"lineNumber":4,"author":{"gitId":"pengxiangg"},"content":"list"},{"lineNumber":5,"author":{"gitId":"pengxiangg"},"content":"done"},{"lineNumber":6,"author":{"gitId":"pengxiangg"},"content":"done a"},{"lineNumber":7,"author":{"gitId":"pengxiangg"},"content":"done 5"},{"lineNumber":8,"author":{"gitId":"pengxiangg"},"content":"done 3"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"delete"},{"lineNumber":10,"author":{"gitId":"pengxiangg"},"content":"delete a"},{"lineNumber":11,"author":{"gitId":"pengxiangg"},"content":"delete 5"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":"delete 2"},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":"list"},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"bye"}],"authorContributionMap":{"pengxiangg":14}},{"path":"text-ui-test/input2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pengxiangg"},"content":"list"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":"bye"}],"authorContributionMap":{"pengxiangg":2}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"pengxiangg"},"content":"set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":5,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":8,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":9,"author":{"gitId":"pengxiangg"},"content":"del data\\duke.txt"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":12,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":13,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":14,"author":{"gitId":"pengxiangg"},"content":"javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":15,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":16,"author":{"gitId":"pengxiangg"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":")"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":25,"author":{"gitId":"pengxiangg"},"content":"java -classpath ..\\bin Duke \u003c input2.txt \u003e\u003e ACTUAL.TXT"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":28,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"pengxiangg":8,"-":20}}]
