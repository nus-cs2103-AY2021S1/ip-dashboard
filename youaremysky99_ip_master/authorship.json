[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * This file was generated by the Gradle \u0027init\u0027 task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * This generated file contains a sample Java project to get you started."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * User Manual available at https://docs.gradle.org/6.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    // Apply the java plugin to add support for Java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    // Apply the application plugin to add support for building a CLI application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    // Use jcenter for resolving dependencies."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    // You can declare any Maven/Ivy/file repository here."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    jcenter()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    // This dependency is used by the application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    implementation \u0027com.google.guava:guava:28.1-jre\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    // Use JUnit Jupiter API for testing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.5.2\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    // Use JUnit Jupiter Engine for testing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.5.2\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    // Define the main class for the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    mainClassName \u003d \u0027Duke\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "run{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027Duke\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "test {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    // Use junit platform for unit tests"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 52
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * This file was generated by the Gradle \u0027init\u0027 task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * The settings file is used to specify which projects to include in your build."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Detailed information about configuring a multi-project build in Gradle can be found"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * in the user manual at https://docs.gradle.org/6.1/userguide/multi_project_builds.html"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "rootProject.name \u003d \u0027ip\u0027"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 10
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import commands.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import parser.CommandParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import parser.TaskParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final static String SEPARATOR \u003d \"___________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final static String STORAGE \u003d \"./data/duke.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static void printMessage(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        DukeService service \u003d new DukeService();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ///register commands"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        parser.registerCommand(AddCommand::new, AddCommand.commandWord);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        parser.registerCommand(ByeCommand::new, ByeCommand.commandWord);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        parser.registerCommand(ListCommand::new, ListCommand.commandWord);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        parser.registerCommand(DoneCommand::new, DoneCommand.commandWord);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        parser.registerCommand(DeleteCommand::new, DeleteCommand.commandWord);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        parser.registerCommand(FindCommand::new, FindCommand.commandWord);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ///register tasks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        TaskParser taskParser \u003d new TaskParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        taskParser.registerTask(TodoTask::new, TodoTask.taskWord);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        taskParser.registerTask(DeadlineTask::new, DeadlineTask.taskWord);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        taskParser.registerTask(EventTask::new, EventTask.taskWord);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ///set task parser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AddCommand.setTaskParser(taskParser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ///initialize storage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Storage storage \u003d new Storage(STORAGE, taskParser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            storage.readFromFile(service);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            System.out.println(\"Sorry I cannot load data from file\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        ///start execution"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            String command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                Command newCommand \u003d parser.parse(command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                newCommand.parse();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                DukeResponse response \u003d newCommand.execute(service);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                printMessage(response.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                 printMessage(e.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            storage.writeToFile(service);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } catch (DukeException ignored) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 69,
      "-": 10
    }
  },
  {
    "path": "src/main/java/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import parser.TaskParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DukeResponse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DukeService;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import utils.TokenUtils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * This class represents AddCommand, which adds task into the system."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Syntax: add + task_type + decs + tags..."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String commandWord \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static TaskParser taskParser \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Task toAdd;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param parser: a task parser that has registered all tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static void setTaskParser(TaskParser parser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        AddCommand.taskParser \u003d parser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param raw: raw command input by users"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public AddCommand(String raw) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super(raw);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Overriden method, to execute the command given the service"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param service: duke service"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a duke response"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws Exception if execution fails"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DukeResponse execute(DukeService service) throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!super.isParse) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new Exception(\"Command has not been parsed\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return service.addTask(this.toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Overriden method, to parse the command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws InvalidCommandException when syntax is wrong, and report to users."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void parse() throws InvalidCommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (taskParser \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new InvalidCommandException(\"Haven\u0027t set task parser\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String[] tokens \u003d super.raw.split(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (tokens.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new InvalidCommandException(\"Not enough arguments\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String[] taskTokens \u003d TokenUtils.dropFirst(tokens);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.toAdd \u003d taskParser.parse(taskTokens);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.toAdd.parse();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super.isParse \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 70
    }
  },
  {
    "path": "src/main/java/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DukeResponse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DukeService;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * This class represents ByeCommand"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Syntax: bye"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String commandWord \u003d \"bye\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static final String BYE_STATEMENT \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param raw: raw command input by users"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public ByeCommand(String raw) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super(raw);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DukeResponse execute(DukeService service) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new DukeResponse(BYE_STATEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Overriden method, to parse the command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws InvalidCommandException when syntax is wrong, and report to users."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void parse() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 35
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DukeResponse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DukeService;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    protected String raw;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    protected boolean isParse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public Command(String raw) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.raw \u003d raw;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.isParse \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public abstract DukeResponse execute(DukeService service) throws Exception;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public abstract void parse() throws Exception;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 17
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DukeResponse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DukeService;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * This class represents Delete, which deletes task into the system."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Syntax: delete + task_index"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String commandWord \u003d \"delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param raw: raw command input by users"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DeleteCommand(String raw) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super((raw));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Overriden method, to execute the command given the service"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param service: duke service"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a duke response"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws Exception if execution fails"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DukeResponse execute(DukeService service) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!super.isParse) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new DukeException(\"Command has not been parsed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return service.deleteTask(this.position);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Overriden method, to parse the command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws InvalidCommandException when syntax is wrong, and report to users."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void parse() throws InvalidCommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String[] tokens \u003d super.raw.split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (tokens.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new InvalidCommandException(\"Not enough arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (tokens.length \u003e 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new InvalidCommandException(\"I can just delete one task :(\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            this.position \u003d Integer.parseInt(tokens[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            super.isParse \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new InvalidCommandException(\"Please input an integer :(\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 62
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DukeResponse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DukeService;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * This class represents DoneCommand which marks tasks as done"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Syntax: done + task_id."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String commandWord \u003d \"done\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private int position;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param raw: raw command input by users"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DoneCommand(String raw) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super(raw);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Overriden method, to execute the command given the service"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param service: duke service"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a duke response"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws Exception if execution fails"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DukeResponse execute(DukeService service) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!super.isParse) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "             throw new Exception(\"Command has not been parsed\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return service.markAsDone(position);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Overriden method, to parse the command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws InvalidCommandException when syntax is wrong, and report to users."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void parse() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String[] tokens \u003d raw.split(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (tokens.length \u003e 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new Exception(\"Done command invalid: number of tokens should less than 3\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            this.position \u003d Integer.parseInt(tokens[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            super.isParse \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new Exception(\"Done command invalid: input should be an integer\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 55
    }
  },
  {
    "path": "src/main/java/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.ServiceException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DukeResponse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DukeService;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import utils.TokenUtils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String commandWord \u003d \"find\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Predicate\u003cTask\u003e predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public FindCommand(String raw) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super(raw);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DukeResponse execute(DukeService service) throws ServiceException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!super.isParse) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new ServiceException(\"This command has not been parsed\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return service.findTasks(this.predicate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void parse() throws InvalidCommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String[] tokens \u003d super.raw.split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (tokens.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new InvalidCommandException(\"Find command need more arguments!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String[] finalTokens \u003d TokenUtils.dropFirst(tokens);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.predicate \u003d S -\u003e TokenUtils.isSubsequence(TokenUtils.tokensToString(finalTokens), S.getDescription());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super.isParse \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 40
    }
  },
  {
    "path": "src/main/java/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DukeResponse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DukeService;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * This class represents ListCommand, which lists all tasks in the system."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Syntax: list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String commandWord \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param raw: raw command input by users"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public ListCommand(String raw) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super(raw);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Overriden method, to execute the command given the service"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param service: duke service"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a duke response"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws Exception if execution fails"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DukeResponse execute(DukeService service) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return service.getAllJobs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void parse() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 35
    }
  },
  {
    "path": "src/main/java/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Customized exceptions class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param message; the message to send to users"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 21
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * An exception results from invalid syntax"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return \"Oh no:(, your command is not valid with message: \" + super.message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 15
    }
  },
  {
    "path": "src/main/java/exceptions/ServiceException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * An exception results from service failure"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class ServiceException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public ServiceException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return \"Error when handling: \" + super.message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 15
    }
  },
  {
    "path": "src/main/java/parser/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * A parser that parses raw commands to real commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    ///helper class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static class CommandInstance {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        private Function\u003cString, Command\u003e constructor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        private String commandWord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public CommandInstance(Function\u003cString, Command\u003e constructor, String commandWord) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            this.constructor \u003d constructor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    ArrayList\u003cCommandInstance\u003e allCommandInstances;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public CommandParser() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        allCommandInstances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Registers a command to the parser, receive constructor provider and the command word."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * It makes creating a new command easier, less error prone."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param constructor: constructor provider"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param commandWord: command words: add, delete, done, ..."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void registerCommand(Function\u003cString, Command\u003e constructor, String commandWord) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        allCommandInstances.add(new CommandInstance(constructor, commandWord));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Explicitly parse the command from raw strings to Command objeccts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param raw: raw command as a strinjg"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a new Command object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws InvalidCommandException when systax fail. It is helpful to return errors to users;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public Command parse(String raw) throws InvalidCommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String[] tokens \u003d raw.split(\" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (tokens.length \u003c\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new InvalidCommandException(\"Command not valid\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String word \u003d tokens[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (CommandInstance instance: allCommandInstances) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (word.equals(instance.commandWord)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                return instance.constructor.apply(raw);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        throw new InvalidCommandException(\"Command not found\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 61
    }
  },
  {
    "path": "src/main/java/parser/Flag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import utils.TokenUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Enum flags: flags that can be parsed by task parser."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public enum Flag {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    BY(\"/by\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    AT(\"/at\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    NONFLAG(\"\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    ENDFLAG(\"/end\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param value return a flag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    Flag(String value) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Check whether a string has a form of a flag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param s the input string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return boolean answer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static boolean hasFormOfFlag(String s) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return s.length() \u003e 0 \u0026\u0026 s.charAt(0) \u003d\u003d \u0027/\u0027;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * From a token, get the flag corresponding to the token"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param token: raw token"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return optional of flag. If cannot find any token matched, return Optional.empty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static Optional\u003cFlag\u003e getFlags(String token) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (token.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return  Optional.empty();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (Flag flag: Flag.values()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (token.equals(flag.value )) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                return Optional.of(flag);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Parse a list of tokens to a list of pair\u003cflag, value\u003e: \u003c\"/by\", \"2020-06-06\"\u003e, ...."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param tokens a list of tokens"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a map of pair(flag, value)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws InvalidCommandException when that command is invalid"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static Map\u003cFlag, String\u003e parseFlags(String[] tokens) throws InvalidCommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Flag currentFlag \u003d NONFLAG;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Map\u003cFlag, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (String token : tokens) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (hasFormOfFlag(token)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                Optional\u003cFlag\u003e flag \u003d getFlags(token);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                if (flag.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    throw new InvalidCommandException(\"Invalid flag\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                if (sb.length() \u003e 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                    result.put(currentFlag, sb.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                currentFlag \u003d flag.get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                if (sb.length() \u003e 0) sb.append(\" \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                sb.append(token);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (sb.length() \u003e 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            result.put(currentFlag, sb.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 86
    }
  },
  {
    "path": "src/main/java/parser/TaskParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import utils.TokenUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class TaskParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    ///helper class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private static class TaskInstance {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        private Function\u003cString[], Task\u003e constructor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        private String taskWord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        public TaskInstance(Function\u003cString[], Task\u003e constructor, String taskWord) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            this.constructor \u003d constructor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            this.taskWord \u003d taskWord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    ArrayList\u003cTaskInstance\u003e allTaskInstances;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public TaskParser() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        allTaskInstances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void registerTask(Function\u003cString[], Task\u003e constructor, String taskWord) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        allTaskInstances.add(new TaskInstance(constructor, taskWord));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public Task parse(String[] tokens) throws InvalidCommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (tokens.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new InvalidCommandException(\"Should contain more tokens\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String word \u003d tokens[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String[] tailedTokens \u003d TokenUtils.dropFirst(tokens);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (TaskInstance instance: allTaskInstances) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (word.equals(instance.taskWord)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                return instance.constructor.apply(tailedTokens);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        throw new InvalidCommandException(\"Task type not found\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 44
    }
  },
  {
    "path": "src/main/java/service/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import parser.Flag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * A class represents a Deadline task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String taskWord \u003d \"deadline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param tokens: an array of tokens starting with task name: todo meet Chau"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DeadlineTask(String[] tokens) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super(tokens, taskWord);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Overriden method, to explicitly parse the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws InvalidCommandException when its synax has problems, and to report to users"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void parse() throws InvalidCommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Map\u003cFlag, String\u003e flags \u003d Flag.parseFlags(tokens);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!flags.containsKey(Flag.BY)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new InvalidCommandException(\"Flag /by not found\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!flags.containsKey(Flag.NONFLAG)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new InvalidCommandException(\"Need description\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.description \u003d flags.get(Flag.NONFLAG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.time \u003d flags.get(Flag.BY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.date \u003d LocalDate.parse(this.time);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Get the description of the task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a string denoting the description"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.description + \" (by \" + this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return \"[D]\" + this.getStatusIcon() + \" \" + this.getDescription();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 63
    }
  },
  {
    "path": "src/main/java/service/DukeResponse.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DukeResponse {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DukeResponse(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 14
    }
  },
  {
    "path": "src/main/java/service/DukeService.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.ServiceException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Core of Duke"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DukeService {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DukeService() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private String numberOfElementsAnnouncement() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "         return String.format(\"You have %d elements in the list\", tasks.size());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Adds a new task to taskList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param toAdd; the new task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return: a dedicated message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DukeResponse addTask(Task toAdd) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        tasks.add(toAdd);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new DukeResponse(\"Added: \" + toAdd + \"\\n\" + numberOfElementsAnnouncement() + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Initializes all tasks from text file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param otherTasks all the tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void addInitializedTasks(ArrayList\u003cTask\u003e otherTasks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.tasks.addAll(otherTasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Parse tasks to string to write to files"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param parser: parser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a list of strings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String[] getParsedTasks(Function\u003cTask, String\u003e parser) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String[] results \u003d new String[this.tasks.size()];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            results[i] \u003d parser.apply(tasks.get(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Deletes a tasks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param position: position to be deleted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a dedicated message"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws ServiceException if position is invalid"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DukeResponse deleteTask(int position) throws ServiceException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        position--;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (position \u003c 0 || position \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new ServiceException(\"Position to delete is not valid :(\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Task toRemove \u003d tasks.get(position);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        tasks.remove(position);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        sb.append(\"A task has been deleted: \\n\").append(toRemove).append(\"\\n\").append(numberOfElementsAnnouncement());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new DukeResponse(sb.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Find all tasks that satisfy a given prediate"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param predicate: the given preidate"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return dedicated message that contains all matched tasks."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DukeResponse findTasks(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (tasks.stream().noneMatch(predicate)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new DukeResponse(\"Sorry there is no match: (\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        sb.append(\"Here are your matches\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (predicate.test(tasks.get(i))) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                sb.append(i + 1).append(\". \").append(tasks.get(i));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new DukeResponse(sb.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Get all the jobs to be printed"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a dedicated message."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DukeResponse getAllJobs() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            sb.append(i + 1).append(\". \").append(tasks.get(i));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new DukeResponse(sb.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Marks a job as done"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param position: position of the job in the list"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a dedicated message"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public DukeResponse markAsDone(int position) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        position--;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (position \u003c 0 || position \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return new DukeResponse(\"Invalid number\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        tasks.get(position).markAsDone();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return new DukeResponse(\"Good job, you have finished this task!: \\n\" + tasks.get(position) + \"\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 120
    }
  },
  {
    "path": "src/main/java/service/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import parser.Flag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * A class represents a Event task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String taskWord \u003d \"event\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public EventTask(String[] tokens) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super(tokens, taskWord);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Overriden method, to explicitly parse the task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws InvalidCommandException when its synax has problems, and to report to users"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void parse() throws InvalidCommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Map\u003cFlag, String\u003e flags \u003d Flag.parseFlags(tokens);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!flags.containsKey(Flag.AT)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new InvalidCommandException(\"Flag \\\\at not found\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (!flags.containsKey(Flag.NONFLAG)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new InvalidCommandException(\"Need description\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.description \u003d flags.get(Flag.NONFLAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.time \u003d flags.get(Flag.AT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Get the description of the task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a string denoting the description"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.description + \" (at\" + this.time + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return \"[E]\" + this.getStatusIcon() + \" \" + this.getDescription();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 54
    }
  },
  {
    "path": "src/main/java/service/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Mold of tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String[] tokens;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String taskWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param tokens list of tokens"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param taskWord: either todo, event or deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public Task(String[] tokens, String taskWord) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.tokens \u003d tokens;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.taskWord \u003d taskWord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Mark this task as done"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Explicitly parse the task from tokens"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws InvalidCommandException if the tokens are invalid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    ///this should calculate description"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public abstract void parse() throws InvalidCommandException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Get task descripton"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return description"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public abstract String getDescription();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Either done or undone"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a cute string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 51
    }
  },
  {
    "path": "src/main/java/service/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * A class represents a Todo task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static final String taskWord \u003d \"todo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param tokens an array of tokens"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public TodoTask(String[] tokens) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        super(tokens, taskWord);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Overriden method, to explicitly parse the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws InvalidCommandException when its synax has problems, and to report to users"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void parse() throws InvalidCommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Optional\u003cString\u003e optDesc \u003d java.util.Arrays.stream(super.tokens, 0, super.tokens.length)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                                    .reduce((a, b) -\u003e a + \" \" + b);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (optDesc.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            throw new InvalidCommandException(\"Description must not be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            this.description \u003d optDesc.get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Get the description of the task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a string denoting the description"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return \"[T]\" + this.getStatusIcon() + \" \" + this.getDescription();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 51
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import parser.TaskParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DukeService;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import utils.TokenUtils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Storage reads and writes data to a text file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private String fileDirectory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private TaskParser parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Constructor"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param fileDirectory: relative directory"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param parser: task parser, a helper to parse tasks to strings vice and versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public Storage(String fileDirectory, TaskParser parser) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.fileDirectory \u003d fileDirectory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private String taskToString(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        sb.append(task.isDone ? \"1\" : \"0\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "          .append(\" | \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "          .append(task.taskWord)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "          .append(\" | \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "          .append(TokenUtils.tokensToString(task.tokens));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    private Task stringToTask(String raw) throws InvalidCommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String[] tokens \u003d raw.split(\" \\\\| \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        boolean isDone \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (tokens[0].equals(\"1\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        tokens \u003d TokenUtils.dropFirst(tokens);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Task newTask \u003d this.parser.parse(tokens);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        newTask.parse();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            newTask.markAsDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param service: DukeService to get all tasks"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws DukeException throws exception if reading error happens"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void readFromFile(DukeService service) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            File file \u003d new File(fileDirectory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            File directory \u003d new File(file.getParentFile().getAbsolutePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            directory.mkdirs();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            Scanner reader \u003d new Scanner(file);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            while (reader.hasNextLine()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                String data \u003d reader.nextLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                this.tasks.add(stringToTask(data));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            service.addInitializedTasks(tasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            System.out.println(\"An error occurred.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param service: DukeService to put all tasks"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @throws DukeException: throws exception"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void writeToFile(DukeService service) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String[] parsedStrings \u003d service.getParsedTasks(this::taskToString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            File file \u003d new File(fileDirectory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            File directory \u003d new File(file.getParentFile().getAbsolutePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            directory.mkdirs();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            FileWriter writer \u003d new FileWriter(fileDirectory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            for (String parsedString : parsedStrings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                writer.write(parsedString);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                writer.write(\"\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } catch (IOException ignored) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 103
    }
  },
  {
    "path": "src/main/java/utils/TokenUtils.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " * Some utils which are repeatedly used"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class TokenUtils {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Drop the first element of the token array"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param tokens array"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return new array without the first element"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static String[] dropFirst(String[] tokens) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        if (tokens.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            return tokens;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String[] result \u003d new String[tokens.length - 1];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        System.arraycopy(tokens, 1, result, 0, tokens.length - 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * A list of tokens to string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param tokens: array of tokens"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static String tokensToString(String[] tokens) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        Stream\u003cString\u003e stream \u003d Stream.of(tokens);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return stream.reduce((a, b) -\u003e a + \" \" + b).orElseGet(() -\u003e \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * A string to list of tokens"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param s a string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return a list of tokens"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static String[] stringToTokens(String s) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return s.split(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Helper to help debug"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static void printTokens(String[] tokens) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        System.out.println(\"Token here\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (String token: tokens) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            System.out.print(token + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * Test whether a string S is a subsequence of String t"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param s the String s"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @param t the String t"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     * @return answer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public static boolean isSubsequence(String s, String t) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        int j \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        for (int i \u003d 0; i \u003c s.length(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            while (j + 1 \u003c t.length() \u0026\u0026 t.charAt(j) !\u003d s.charAt(i)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                j++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            if (j \u003d\u003d t.length()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 71
    }
  },
  {
    "path": "src/test/java/parser/TaskParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.DeadlineTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import service.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class TaskParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void ParseFailedTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        TaskParser parser \u003d new TaskParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        parser.registerTask(DeadlineTask::new, DeadlineTask.taskWord);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String rawTask \u003d \"event meet Chau \\\\at 2020-09-09\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            Task newTask \u003d parser.parse(rawTask.split(\" \"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            fail(\"Should parse failed\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            ///okay"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void NotRegistered() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        TaskParser parser \u003d new TaskParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        String rawTask \u003d \"todo meet Chau\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            Task newTask \u003d parser.parse(rawTask.split(\" \"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            fail(\"not registered\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            //okay"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 37
    }
  },
  {
    "path": "src/test/java/service/DukeServiceTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "package service;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "public class DukeServiceTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    public void ParseFailedTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        DukeService service \u003d new DukeService();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            service.markAsDone(-1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "            fail(\"Shoud not okay\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "             //okay"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 19
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "add todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 3
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "find \"../src/main/\" . -name \"*.java\" \u003e sources.txt"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 4,
      "-": 37
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/utils/TokenUtils.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/parser/CommandParser.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/parser/Flag.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/parser/TaskParser.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/commands/ByeCommand.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/commands/ListCommand.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/commands/Command.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/commands/AddCommand.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/commands/DoneCommand.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/service/TodoTask.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/service/EventTask.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/service/DukeResponse.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/service/DukeService.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/service/DeadlineTask.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "youaremysky99"
        },
        "content": "../src/main//java/service/Task.java"
      }
    ],
    "authorContributionMap": {
      "youaremysky99": 16
    }
  }
]
