[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final String DELIMITER \u003d \" /by \";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Deadline(String itemString) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(Task.getTaskString(itemString, Deadline.DELIMITER));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.date \u003d Task.getDateString(itemString, Deadline.DELIMITER);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    // private static"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        char stateSymbol \u003d this.isDone ? DONE : NOT_DONE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", stateSymbol, this.itemString, this.date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 22
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final DukeList list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.list \u003d new DukeList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Prints a given message within line separators."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param msg Message to be printed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static void printMessage(String msg) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Duke.printSeparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Duke.printSeparator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Prints the start message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static void printStartMsg() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Duke.printSeparator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // System.out.println(Duke.LOGO);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Duke.printSeparator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Prints a line separator."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static void printSeparator() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Determine if programme should quit given the input message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param msgInput Message input from user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return if programme should quit."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static Boolean shouldQuit(String msgInput) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        final String QUIT_STRING \u003d \"bye\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return msgInput.equals(QUIT_STRING);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Marks an item as done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param inputTextArr String array of the input text, split by \" \"."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return statusMSg to be printed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws IndexOutOfBoundsException Invalid index given or input text array is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private String markAsDone(String[] inputTextArr) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            int index \u003d Integer.parseInt(inputTextArr[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            String statusMsg \u003d this.list.markAsDone(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return statusMsg;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // exception thrown from DukeList.markAsDone()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // index given in input text is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new IndexOutOfBoundsException(\"Invalid index given.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // forwards ArrayIndexOutOfBoundsException from Integer.parseInt()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // inputTextArr is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException(\"Invalid inputTextArr.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Deletes an item from the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param inputTextArr String array of the input text, split by \" \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return statusMsg to be printed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws IndexOutOfBoundsException Invalid index given or input text array is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private String delete(String[] inputTextArr) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            int index \u003d Integer.parseInt(inputTextArr[1]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            String statusMsg \u003d this.list.delete(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return statusMsg;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // exception thrown from DukeList.delete()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // index given in input text is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new IndexOutOfBoundsException(\"Invalid index given.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // forwards ArrayIndexOutOfBoundsException from Integer.parseInt()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            // inputTextArr is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException(\"Invalid inputTextArr.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Logic framework of Duke."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param sc Scanner object."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private void dukeLogic(Scanner sc) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String msgInput \u003d \"\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        while (!shouldQuit(msgInput) \u0026\u0026 sc.hasNextLine()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            msgInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            if (!shouldQuit(msgInput)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                String[] msgArr \u003d msgInput.split(\" \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                String keyword \u003d msgArr[0];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                switch (keyword) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    case (\"list\"):"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        String listString \u003d this.list.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        Duke.printMessage(listString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    case (\"done\"):"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            String statusMsg \u003d this.markAsDone(msgArr);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            Duke.printMessage(statusMsg);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            Duke.printMessage(\"OOPS!!! The index of `done` cannot be empty.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            Duke.printMessage(\"OOPS!!! The index given is invalid.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    case (\"delete\"):"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            String statusMsg \u003d this.delete(msgArr);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            Duke.printMessage(statusMsg);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            Duke.printMessage(\"OOPS!!! The index of `delete` cannot be empty.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            Duke.printMessage(\"OOPS!!! The index given is invalid.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            String statusString \u003d this.list.add(msgInput);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            Duke.printMessage(statusString);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        } catch (DukeException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            Duke.printMessage(e.getMessage());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Method to start the Duke programme."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Duke.printStartMsg();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.dukeLogic(sc);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Duke.printMessage(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        new Duke().start();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 195,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeException(String errMsg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 12
    }
  },
  {
    "path": "src/main/java/DukeInvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class DukeInvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeInvalidCommandException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeInvalidCommandException(String errorMsg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 12
    }
  },
  {
    "path": "src/main/java/DukeInvalidDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class DukeInvalidDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeInvalidDescriptionException() {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeInvalidDescriptionException(String errMsg) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 10
    }
  },
  {
    "path": "src/main/java/DukeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.lang.StringBuilder;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class DukeList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final int CAPACITY \u003d 100;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(CAPACITY);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Removes the type keyword at the start of the string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param strArr Array of strings (originally split by spaces)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return Substring with the keyword removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static String getItemSubstring(String[] strArr) throws DukeInvalidDescriptionException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        if (strArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new DukeNoDescriptionException(\"String array of unexpected length: expected length \u003e 1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return String.join(\" \", Arrays.copyOfRange(strArr, 1, strArr.length));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Adds a new item to the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param itemString String to be added."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return Status string to be printed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String add(String itemString) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        // this.list.add(new Task(itemString));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String[] strArr \u003d itemString.split(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String keyword \u003d strArr[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        String formattedItemString;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            case (\"todo\"):"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    formattedItemString \u003d DukeList.getItemSubstring(strArr);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    newTask \u003d new Todo(formattedItemString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                } catch (DukeInvalidDescriptionException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    throw new DukeInvalidDescriptionException(String.format(\"OOPS!!! The description of a `%s` cannot be empty.\", keyword));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            case (\"deadline\"):"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    formattedItemString \u003d DukeList.getItemSubstring(strArr);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    newTask \u003d new Deadline(formattedItemString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                } catch (DukeNoDescriptionException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    throw new DukeInvalidDescriptionException(String.format(\"OOPS!!! The description of a `%s` cannot be empty.\", keyword));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                } catch (DukeNoDateException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    throw new DukeInvalidDescriptionException(String.format(\"OOPS!!! The date of `%s` cannot be empty.\", keyword));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            case (\"event\"):"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    formattedItemString \u003d DukeList.getItemSubstring(strArr);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    newTask \u003d new Event(formattedItemString);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                } catch (DukeNoDescriptionException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    throw new DukeInvalidDescriptionException(String.format(\"OOPS!!! The description of a `%s` cannot be empty.\", keyword));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                } catch (DukeNoDateException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    throw new DukeInvalidDescriptionException(String.format(\"OOPS!!! The date of `%s` cannot be empty.\", keyword));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                throw new DukeInvalidCommandException(String.format(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what `%s` means :-(\", keyword));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.list.add(newTask);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                String.format(\"\\t%s\\n\", newTask.toString()) +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                String.format(\"%s\", this.getListStats());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Mark an item as done."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param index Index of item to be marked as done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *              !This index is the printed index, not the actual index in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return Status string to be printed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws NullPointerException invalid index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String markAsDone(int index) throws NullPointerException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Task targetTask \u003d this.list.get(index - 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        targetTask.markAsDone();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return String.format(\"Nice! I\u0027ve marked this task as done:\\n\\t%s\", targetTask.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Deletes an item from the list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param index Index of ite to be deleted."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *              ! This index is the printed index, not the actual index in the list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return Status string to be printed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @throws NullPointerException invalid index."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String delete(int index) throws NullPointerException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        Task removedTask \u003d this.list.remove(index - 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                String.format(\"\\t%s\\n\", removedTask.toString())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                + String.format(\"%s\", this.getListStats());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Gets the string to display the stats of the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return stats string."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private String getListStats() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return String.format(\"Now you have %d tasks in the list.\", this.list.size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        if (this.list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return \"List is currently empty!\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            StringBuilder outputString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            outputString.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            for (int i \u003d 0; i \u003c this.list.size(); i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                String currTaskStr \u003d String.format(\"%d: %s\", i + 1, this.list.get(i).toString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                outputString.append(currTaskStr);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                // add new line and tab only if not at the end of the list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                if (i \u003c list.size() - 1) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                    outputString.append(\"\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return outputString.toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 155
    }
  },
  {
    "path": "src/main/java/DukeNoDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class DukeNoDateException extends DukeInvalidDescriptionException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeNoDateException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeNoDateException(String errMsg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 12
    }
  },
  {
    "path": "src/main/java/DukeNoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class DukeNoDescriptionException extends DukeInvalidDescriptionException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeNoDescriptionException() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public DukeNoDescriptionException(String errMsg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(errMsg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 12
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private static final String DELIMITER \u003d \" /at \";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Event(String itemString) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(Task.getTaskString(itemString, Event.DELIMITER));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.date \u003d Task.getDateString(itemString, Event.DELIMITER);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        char stateSymbol \u003d this.isDone ? DONE : NOT_DONE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return String.format(\"[D][%s] %s (at: %s)\", stateSymbol, this.itemString, this.date);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 20
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    static final char DONE \u003d \u0027\\u2713\u0027;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    static final char NOT_DONE \u003d \u0027\\u2717\u0027;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    final String itemString;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Task(String itemString) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.itemString \u003d itemString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Splits the itemString by the delimiter and returns the task portion."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param taskString Item String."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param delimiter  Delimiter used."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return Task portion of the string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    static String getTaskString(String taskString, String delimiter) throws DukeInvalidDescriptionException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return taskString.split(delimiter)[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new DukeNoDescriptionException(\"Description text not given.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Splits the taskString by the delimiter and returns the Date portion."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param taskString Item String."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @param delimiter  Delimiter used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * @return Date portion of the string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    static String getDateString(String taskString, String delimiter) throws DukeInvalidDescriptionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            return taskString.split(delimiter)[1];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "            throw new DukeNoDateException(\"Date not given in description text.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     * Mark this item as done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        char stateSymbol \u003d this.isDone ? DONE : NOT_DONE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return String.format(\"[%s] %s\", stateSymbol, this.itemString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 62
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public Todo(String itemString) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        super(itemString);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        char stateSymbol \u003d this.isDone ? DONE : NOT_DONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "        return String.format(\"[T][%s] %s\", stateSymbol, this.itemString);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 14
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 8
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "REM !THIS FILE IS IGNORED AS IM USING MACOS"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 2,
      "-": 21
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "#!/usr/bin/env zsh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "# force shell to use UTF-8 format for output"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "export LC_ALL\u003den_US.UTF-8"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "howtoosee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "howtoosee"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "howtoosee": 5,
      "-": 36
    }
  }
]
