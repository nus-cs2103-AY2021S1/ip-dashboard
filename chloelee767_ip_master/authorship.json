[
  {
    "path": "src/main/java/duke/Bot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * Interface which defines how a Function can control the bot"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public interface Bot {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void stop();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void sayLine(String string);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 10
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.storage.TaskListStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "// TODO: setup code style check"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "// TODO: consider whether Commands should throw Exceptions, or stay as they are now"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class Duke implements Bot {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private boolean isStopped;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private StringBuilder message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Duke() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        isStopped \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String logo \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            \" ____        _        \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        sayLine(logo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        TaskList list \u003d new TaskListStorage(\"data/tasks.txt\").load(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        sayLine(\"Hello, I\u0027m Duke. What can I do for you?\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        flushMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        while (!isStopped) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Parser.parse(input).execute(this, list);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            flushMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        isStopped \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void sayLine(String string) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (message.length() !\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            message.append(\"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        message.append(string);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private void flushMessage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        ui.say(message.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "chloelee767": 59
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.Bot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Bot bot, TaskList list) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        bot.sayLine(\"Got it, I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        bot.sayLine(\"  \" + task.displayString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        bot.sayLine(\"Now you have \" + list.size() + \" item(s) in your list.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 21
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.Bot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Bot bot, TaskList list) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        bot.sayLine(\"Bye! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        bot.stop();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 12
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.Bot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Bot bot, TaskList list);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 8
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.Bot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Bot bot, TaskList list) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(\"Nothing to delete, your list is empty.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else if (index \u003c 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(\"That\u0027s not a valid number, please give a number from 1 to \" + list.size() + \".\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else if (index \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(String.format(\"That\u0027s not a valid number, you only have %d item(s) in your list.\", list.size()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Task t \u003d list.delete(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(\"  \" + t.displayString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(\"Now you have \" + list.size() + \" item(s) in your list.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 29
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.Bot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "       this.index \u003d index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Bot bot, TaskList list) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(\"Your list is empty.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else if (index \u003c 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(\"That\u0027s not a valid number, please give a number from 1 to \" + list.size() + \".\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else if (index \u003e\u003d list.size()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(String.format(\"That\u0027s not a valid number, you only have %d item(s) in your list.\", list.size()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Task t \u003d list.get(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (t.isDone()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                bot.sayLine(\"You\u0027ve already completed this task:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                list.markAsDone(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                bot.sayLine(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(\"  \" + t.displayString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 33
    }
  },
  {
    "path": "src/main/java/duke/command/ErrorCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.Bot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class ErrorCommand implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public ErrorCommand(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Bot bot, TaskList list) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        bot.sayLine(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 17
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.Bot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void execute(Bot bot, TaskList list) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(\"There are no items in your list.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                bot.sayLine((i + 1) + \". \" + list.get(i).displayString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 18
    }
  },
  {
    "path": "src/main/java/duke/parser/DukeParsingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " * This exception is handled within the route function in the Duke class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class DukeParsingException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    DukeParsingException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 10
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.ErrorCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        input \u003d input.strip();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String[] split \u003d input.split(\"\\\\s+\", 2); // guranteed to contain at least \"\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String command \u003d split[0];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String args \u003d split.length \u003d\u003d 2 ? split[1] : \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                ensureNoArgs(args, command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                ensureNoArgs(args, command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                int index \u003d parseTaskNumber(args, \"you have completed\", \"done 1\") - 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new DoneCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                int index \u003d parseTaskNumber(args, \"you want to remove\", \"delete 1\") - 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                if (args.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    return new ErrorCommand("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                            \"Couldn\u0027t add todo! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new AddCommand(new Task(args));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new AddCommand(parseDeadline(args));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (command.equals(\"event\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new AddCommand(parseEvent(args));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else if (input.isBlank()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new ErrorCommand(\"You need to tell me what you want me to do!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                return new ErrorCommand(\"Sorry, I don\u0027t understand that!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (DukeParsingException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return new ErrorCommand(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    // helpers for parse function"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static void ensureNoArgs(String args, String commandName) throws DukeParsingException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (!args.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    String.format(\"I don\u0027t understand that. Did you mean %s?\", commandName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static int parseTaskNumber(String args, String taskDescription, String example)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throws DukeParsingException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return Integer.parseInt(args);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    String.format(\"You need to tell me the number of the task %s. Eg. %s\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                            taskDescription, example));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static Event parseEvent(String args) throws DukeParsingException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String[] argsSplit;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String[] dateStrings;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            argsSplit \u003d splitAround(args, \"\\\\s+/at\\\\s+\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            description \u003d argsSplit[0];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            dateStrings \u003d splitAround(argsSplit[1], \"\\\\s*-\\\\s*\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (DukeParsingException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException(\"Couldn\u0027t add event! To add an event, talk to me using \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    + \"the format event \u003cdescription\u003e /at \u003cstart\u003e-\u003cend\u003e!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Date start \u003d parseDate(dateStrings[0]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Date end \u003d parseDate(dateStrings[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (start.after(end)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException(\"Start date is after end date!\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return new Event(description, start, end);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static Deadline parseDeadline(String args) throws DukeParsingException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String[] argsSplit;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            argsSplit \u003d splitAround(args, \"\\\\s+/by\\\\s+\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            description \u003d argsSplit[0];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (DukeParsingException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    \"Couldn\u0027t add deadline! To add a deadline, talk to me using \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                            + \"the format deadline \u003cdescription\u003e /by \u003cdate\u003e!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Date date \u003d parseDate(argsSplit[1]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return new Deadline(description, date);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Splits a string into 2 around the first occurence of a regex pattern. An exception is thrown"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * if the pattern does not exist, or if either of the tokens are blank."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static String[] splitAround(String string, String pattern) throws DukeParsingException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        int n \u003d 2;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String[] argSplit \u003d string.split(pattern, n);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (argSplit.length !\u003d n) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException(\"\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        for (String s : argSplit) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (s.isBlank()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                throw new DukeParsingException(\"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return argSplit;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private static Date parseDate(String dateString) throws DukeParsingException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        final DateFormat dateOnly \u003d new SimpleDateFormat(\"d/M/y\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        final DateFormat withTime \u003d new SimpleDateFormat(\"d/M/y H:m\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return withTime.parse(dateString);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (ParseException e) {}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return dateOnly.parse(dateString);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DukeParsingException("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    \"Invalid date format! I only understand dates in the format day/month/year time \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                            + \"or day/month/year. Eg. 15/01/2020 17:00 for 15th January 5pm\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 150
    }
  },
  {
    "path": "src/main/java/duke/storage/Deserializer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "interface Deserializer\u003cT\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "   T deserialize(String string) throws DeserializingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 5
    }
  },
  {
    "path": "src/main/java/duke/storage/DeserializingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class DeserializingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 5
    }
  },
  {
    "path": "src/main/java/duke/storage/FileMissingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class FileMissingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 5
    }
  },
  {
    "path": "src/main/java/duke/storage/FileReadingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class FileReadingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    FileReadingException(Exception e) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 7
    }
  },
  {
    "path": "src/main/java/duke/storage/FileWritingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class FileWritingException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    FileWritingException(Exception e) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        // TODO"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 7
    }
  },
  {
    "path": "src/main/java/duke/storage/Serializable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "interface Serializable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    String serialize();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 5
    }
  },
  {
    "path": "src/main/java/duke/storage/StorageHelper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class StorageHelper {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    static void save(Serializable object, String filepath) throws FileWritingException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (file.getParentFile() !\u003d null) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                file.getParentFile().mkdirs(); // may throw SecurityException"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            // may throw IOException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Files.writeString(file.toPath(), object.serialize(), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (IOException | SecurityException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new FileWritingException(e);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    static \u003cT\u003e T open(Deserializer\u003cT\u003e deserializer, String filepath)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throws FileMissingException, FileReadingException, DeserializingException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new FileMissingException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String s \u003d Files.readString(file.toPath(), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return deserializer.deserialize(s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new FileReadingException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 38
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskListStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.Bot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class TaskListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public TaskListStorage(String filepath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public TaskList load(Bot bot) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        final String createNewListMessage \u003d \"I\u0027ll create a new list of tasks.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        TaskList list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            list \u003d StorageHelper.open((s) -\u003e deserializeTaskList(s), filepath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(String.format( \"Loaded tasks from %s.\", filepath ));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (FileMissingException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(String.format(\"Couldn\u0027t find the file %s. %s\", filepath, createNewListMessage));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            list \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (FileReadingException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(String.format(\"Couldn\u0027t read the file %s. %s\", filepath, createNewListMessage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            list \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (DeserializingException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            bot.sayLine(String.format(\"I don\u0027t understand the data in %s. %s\", filepath,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    createNewListMessage));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            list \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        list.connectStorage((taskList) -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    StorageHelper.save(() -\u003e serializeTaskList(taskList), filepath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                } catch (FileWritingException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    bot.sayLine(String.format(\"Couldn\u0027t save task list to %s!\", filepath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private String serializeTaskList(TaskList tasklist) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return IntStream"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            .range(0, tasklist.size())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            .mapToObj(i -\u003e serializeTask(tasklist.get(i)))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private TaskList deserializeTaskList(String string) throws DeserializingException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String[] taskStrings \u003d string.split(\"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        TaskList tasklist \u003d new TaskList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        for (String taskString : taskStrings) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            tasklist.add(deserializeTask(taskString));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return tasklist;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private String serializeTask(Task task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        List\u003cString\u003e tokens \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        tokens.add(\"T\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        tokens.add(task.getDescription());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        tokens.add(task.isDone() ? \"T\" : \"F\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            tokens.set(0, \"D\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            tokens.add(serializeDate(((Deadline) task).getDate()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (task instanceof Event) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            tokens.set(0, \"E\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            tokens.add(serializeDate(event.getStart()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            tokens.add(serializeDate(event.getEnd()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return String.join(\"\\t\", tokens);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Task deserializeTask(String string) throws DeserializingException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String[] tokens \u003d string.split(\"\\t\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String description \u003d tokens[1];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String isDoneString \u003d tokens[2];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (!isDoneString.equals(\"T\") \u0026\u0026 !isDoneString.equals(\"F\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                throw new DeserializingException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            boolean isDone \u003d isDoneString.equals(\"T\") ? true : false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            switch (tokens[0]) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                task \u003d new Task(description, isDone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                Date date \u003d deserializeDate(tokens[3]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                task \u003d new Deadline(description, isDone, date);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                Date start \u003d deserializeDate(tokens[3]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                Date end \u003d deserializeDate(tokens[4]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                task \u003d new Event(description, isDone, start, end);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                throw new DeserializingException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DeserializingException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private String serializeDate(Date date) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return date.toInstant().toEpochMilli() + \"\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Date deserializeDate(String string) throws DeserializingException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return new Date(Long.parseLong(string));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            throw new DeserializingException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 127
    }
  },
  {
    "path": "src/main/java/duke/task/DateHelper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "class DateHelper {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    static String formatDate(Date date) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return String.format(\"%ta %\u003ctd %\u003ctb %\u003ctY %\u003ctH:%\u003ctM\", date);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    static String formatDateRange(Date start, Date end) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String datePattern \u003d \"%td %\u003ctb %\u003ctY\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        if (String.format(datePattern, start).equals(String.format(datePattern, end))) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return String.format(\"%ta %\u003ctd %\u003ctb %\u003ctY\", start) + \" \" + String.format(\"%tH:%\u003ctM-%tH:%\u003ctM\", start, end);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            return formatDate(start) + \" - \" + formatDate(end);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 18
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Deadline(String description, boolean isDone, Date date) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Deadline(String description, Date date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this(description, false, date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public String displayString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return super.displayString() + String.format(\" (by: %s)\", DateHelper.formatDate(date));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected String taskTypeString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 30
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Date start;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private Date end;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Event(String description, boolean isDone, Date start, Date end) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Event(String description, Date start, Date end) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this(description, false, start, end);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public String displayString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return super.displayString() + String.format(\" (at: %s)\", DateHelper.formatDateRange(start, end));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected String taskTypeString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Date getStart() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Date getEnd() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 36
    }
  },
  {
    "path": "src/main/java/duke/task/SaveFunction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public interface SaveFunction {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void save(TaskList list);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 5
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected boolean done;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        this.description \u003d sanitizeString(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        done \u003d isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected void markAsDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public String displayString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String doneString \u003d done ? \"✓\" : \"✗\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return String.format(\"[%s][%s] %s\", taskTypeString(), doneString, description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected String taskTypeString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    protected static String sanitizeString(String s) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return s.replaceAll(\"\\t\", \"    \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 40
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private SaveFunction saveFunction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        saveFunction \u003d (list) -\u003e {};"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void connectStorage(SaveFunction function) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        saveFunction \u003d function;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        saveFunction.save(this);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Task delete(int index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        Task removed \u003d list.remove(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        saveFunction.save(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return removed;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void markAsDone(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        get(index).markAsDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        saveFunction.save(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 42
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void say(String string) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        final String indent \u003d \"  \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        final int lineLength \u003d 68;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        final String separator \u003d indent + \"_\".repeat(lineLength);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        List\u003cString\u003e strings \u003d splitIntoLines(string, lineLength);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        System.out.println(separator);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            System.out.println(indent + s);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        System.out.println(separator);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * Splits a string into lines with at most lineLength number of characters. This method does not"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * account for characters of differing widths (eg. tab character, or if non-monospace fonts are"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * used)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * TODO should this method be private instead?"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param string the string to split"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @param lineLength the maximum number of characters per line"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     * @return a list of strings where each string corresponds to 1 line"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public List\u003cString\u003e splitIntoLines(String string, int lineLength) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        String[] lines \u003d string.split(\"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        StringBuilder sb;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        for (String l : lines) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String[] words \u003d l.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            for (String w : words) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                if (sb.length() \u003d\u003d 0 || sb.length() + w.length() \u003c\u003d lineLength) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    sb.append(w);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    sb.append(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    list.add(sb.toString().stripTrailing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    sb.append(w);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                    sb.append(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            if (l.equals(\"\") || sb.length() \u003e 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                list.add(sb.toString().stripTrailing());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 58
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertEquals(2,2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 12
    }
  },
  {
    "path": "src/test/java/duke/storage/StorageHelperTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class StorageHelperTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void save_currentDirectoryNoFile() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String path \u003d \"test.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String string \u003d \"test\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            StorageHelper.save(() -\u003e string, path);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String actual \u003d Files.readString(file.toPath(), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            assertEquals(string, actual);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void save_directoryExistsNoFile() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String path \u003d \"testDir/test.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String string \u003d \"test\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            StorageHelper.save(() -\u003e string, path);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String actual \u003d Files.readString(file.toPath(), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            assertEquals(string, actual);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            file.getParentFile().delete();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void save_overwriteExistingFile() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String path \u003d \"test.txt\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            Files.writeString(file.toPath(), \"old text\", StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String newText \u003d \"new text\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            StorageHelper.save(() -\u003e newText, path);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String actual \u003d Files.readString(file.toPath(), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            assertEquals(newText, actual);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void save_noDirectory_createDirectory() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String path \u003d \"testDir/test.txt\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            File file \u003d new File(path);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String string \u003d \"test\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            StorageHelper.save(() -\u003e string, path);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String actual \u003d Files.readString(file.toPath(), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            assertEquals(string, actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            file.getParentFile().delete();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void open_fileExists() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String path \u003d \"testOpen.txt\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            String actual \u003d StorageHelper.open((String s) -\u003e s, path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "            assertEquals(\"test\", actual);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void open_missingFile_throwException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertThrows(FileMissingException.class,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "                () -\u003e StorageHelper.open((String s) -\u003e s, \"nonExistentFile.txt\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 82
    }
  },
  {
    "path": "src/test/java/duke/ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    private \u003cT\u003e void assertListEquality(List\u003cT\u003e expected, List\u003cT\u003e actual) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void splitIntoLines_exactLineLength() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        List\u003cString\u003e result \u003d new Ui().splitIntoLines(\"abc d f s\", 3);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertListEquality(Arrays.asList(\"abc\", \"d f\", \"s\"), result); // using list equality"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void splitIntoLines_overLineLength() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        List\u003cString\u003e result \u003d new Ui().splitIntoLines(\"abc def s\", 5);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertListEquality(Arrays.asList(\"abc\", \"def s\"), result);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void splitIntoLines_singleLongWord() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        List\u003cString\u003e result \u003d new Ui().splitIntoLines(\"abcdefgh s abcdefghijklmn\", 5);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertListEquality(Arrays.asList(\"abcdefgh\", \"s\", \"abcdefghijklmn\"), result);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void splitIntoLines_newlines() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        List\u003cString\u003e result \u003d new Ui().splitIntoLines(\"abc\\ndefg zd\\nxy\", 3);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        assertListEquality(Arrays.asList(\"abc\", \"defg\", \"zd\", \"xy\"), result);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    public void newSay() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "        "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 44
    }
  },
  {
    "path": "src/test/testOpen.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "test"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "todo sleep"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "deadline cs2103 ip level 6 /by Thu 20 Aug 23:59"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "event some other event /at TBD"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "yeet"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "done zz"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "deadline something"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "deadline something /by "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "deadline    /by"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "deadline    /by sometime"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chloelee767"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "chloelee767": 23
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "# if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "if ! javac ../src/main/java/duke/*/*.java ../src/main/java/duke/*.java  -Xlint:none -d ../bin"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chloelee767"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "chloelee767": 3
    }
  }
]
