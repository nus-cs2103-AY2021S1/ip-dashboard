[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 2,
      "-": 46
    }
  },
  {
    "path": "src/main/java/DateTimeConverter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class DateTimeConverter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    //public String dateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public DateTimeFormatter dtf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public DateTimeConverter(FormatStyle dateStyle, FormatStyle timeStyle) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        //this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.dtf \u003d DateTimeFormatter.ofLocalizedDateTime(dateStyle, timeStyle);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /*public DateTimeFormatter dtf \u003d DateTimeFormatter.ofLocalizedDateTime("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            FormatStyle.MEDIUM, FormatStyle.SHORT);*/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String processTime(String dateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (dateTime.length() \u003e 11) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                String[] parts \u003d dateTime.split(\" \", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                time \u003d parts[0].length() \u003d\u003d 4 ? parts[0] : parts[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                date \u003d parts[0].length() \u003d\u003d 4 ? parts[1] : parts[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                date \u003d dateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                time \u003d \"2359\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            LocalTime lt \u003d LocalTime.of("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    Integer.parseInt(time.substring(0, 2)), Integer.parseInt(time.substring(2)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            date \u003d date.replaceAll(\"\\\\D\", \"-\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String[] date_seg \u003d date.split(\"-\", 3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (date_seg[0].length() !\u003d 4) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                String temp \u003d date_seg[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                date_seg[0] \u003d date_seg[2];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                date_seg[2] \u003d temp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            LocalDate ld \u003d LocalDate.parse(date_seg[0] + \"-\" + date_seg[1] + \"-\" + date_seg[2]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            LocalDateTime ldt \u003d LocalDateTime.of(ld, lt);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return ldt.format(dtf);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            HandleException.handleException(DukeException.ExceptionType.improper_dateTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return dateTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 54
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String[] getInfo() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new String[]{this.getType(), this.isDone(), this.description, this.getBy()};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 35
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String separation_line \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String indent \u003d \"     \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String starting_line \u003d separation_line + \"\\n\" + indent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String ending_line \u003d \"\\n\" + separation_line + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static List\u003cTask\u003e task_collections \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String split_notn \u003d \"@#%#@%\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String memory_file_dir \u003d \"./data/\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String memory_file_name \u003d \"task_list.txt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static boolean exception_absent;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String taskToMemoStr(Task t) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String memoStr \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String[] info \u003d t.getInfo();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        memoStr +\u003d \"\\n\" + info[0] + split_notn + info[1] + split_notn + info[2];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (t.getType().equals(\"D\") || t.getType().equals(\"E\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            memoStr +\u003d split_notn + info[3];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return memoStr;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void write_memory(List\u003cTask\u003e task_list) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            FileWriter fw \u003d new FileWriter(memory_file_dir + memory_file_name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String textToAppend \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Iterator task_iter \u003d task_list.iterator();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            while (task_iter.hasNext()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                Task t \u003d (Task) task_iter.next();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                textToAppend +\u003d taskToMemoStr(t);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            fw.write(textToAppend);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            handleException(DukeException.ExceptionType.read_file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void appendToFile(String filePath, Task t) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath, true); // appending instead of overwriting"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            fw.write(taskToMemoStr(t));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            handleException(DukeException.ExceptionType.read_file);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static DateTimeFormatter dtf \u003d DateTimeFormatter.ofLocalizedDateTime("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            FormatStyle.MEDIUM, FormatStyle.SHORT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String processTime(String dateTime) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String time;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (dateTime.length() \u003e 11) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                String[] parts \u003d dateTime.split(\" \", 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                time \u003d parts[0].length() \u003d\u003d 4 ? parts[0] : parts[1];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                date \u003d parts[0].length() \u003d\u003d 4 ? parts[1] : parts[0];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                date \u003d dateTime;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                time \u003d \"2359\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            LocalTime lt \u003d LocalTime.of("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    Integer.parseInt(time.substring(0, 2)), Integer.parseInt(time.substring(2)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            date \u003d date.replaceAll(\"\\\\D\", \"-\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String[] date_seg \u003d date.split(\"-\", 3);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (date_seg[0].length() !\u003d 4) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                String temp \u003d date_seg[0];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                date_seg[0] \u003d date_seg[2];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                date_seg[2] \u003d temp;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            LocalDate ld \u003d LocalDate.parse(date_seg[0] + \"-\" + date_seg[1] + \"-\" + date_seg[2]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            LocalDateTime ldt \u003d LocalDateTime.of(ld, lt);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return ldt.format(dtf);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            handleException(DukeException.ExceptionType.improper_dateTime);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"Unknown Date/Time\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void handleException(DukeException.ExceptionType et) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        exception_absent \u003d false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        DukeException de \u003d new DukeException(et);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        System.out.println(de);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void readTasks() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        task_collections \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        File data_folder \u003d new File(memory_file_dir);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!data_folder.exists() \u0026\u0026 !data_folder.isDirectory()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            data_folder.mkdirs();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        File task_list_file \u003d new File(memory_file_dir + memory_file_name);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!task_list_file.exists()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                task_list_file.createNewFile();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                handleException(DukeException.ExceptionType.read_file);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Scanner sc \u003d null;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            sc \u003d new Scanner(task_list_file);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            System.out.println(\"Sorry, the memory cannot be read successfully.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String curr_task \u003d sc.nextLine();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String[] temp_type \u003d curr_task.split(split_notn, 2);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String[] temp_details;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            switch(temp_type[0]) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    temp_details \u003d temp_type[1].split(split_notn, 2);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.add("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            new Todo(temp_details[1], temp_details[0].equals(\"0\") ? false : true));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    temp_details \u003d temp_type[1].split(split_notn, 3);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.add("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            new Event(temp_details[1], temp_details[2],"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                    temp_details[0].equals(\"0\") ? false : true));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    temp_details \u003d temp_type[1].split(split_notn, 3);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.add("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            new Deadline(temp_details[1], temp_details[2],"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                    temp_details[0].equals(\"0\") ? false : true));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void editMemoFile(String action, String[] input_split_arr) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        int action_number \u003d -1;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String success_result \u003d \"\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            action_number \u003d Integer.parseInt(input_split_arr[1]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            handleException(DukeException.ExceptionType.empty_illegal);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (exception_absent) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (action.equals(\"delete\")) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    success_result \u003d task_collections.get(action_number - 1).toString();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.remove(action_number - 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.get(action_number - 1).markAsDone();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                write_memory(task_collections);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                handleException(DukeException.ExceptionType.empty_illegal);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (exception_absent) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (action.equals(\"delete\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(indent + \"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(indent + success_result);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(indent + \"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(indent + \"  [\\u2713] \" + task_collections.get(action_number - 1).toString().split(\"] \", 2)[1]);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void addMemoFile(String type, String[] input_split_arr) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Task t \u003d null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                input_split_arr \u003d input_split_arr[1].split("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        type.equals(\"event\") ? \" /at \" : \" /by \", 2);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                handleException(type.equals(\"deadline\")"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        ? DukeException.ExceptionType.deadline_empty_incomplete"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        : DukeException.ExceptionType.event_empty_incomplete);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (exception_absent) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    t \u003d new Todo(input_split_arr[1]);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    String time;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        time \u003d input_split_arr[1];"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        //time \u003d input_split_arr[1].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        time \u003d processTime(time);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        t \u003d type.equals(\"event\")"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                ? new Event(input_split_arr[0], time)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                : new Deadline(input_split_arr[0], time);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    } catch (Exception ex) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        handleException(type.equals(\"event\")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                ? DukeException.ExceptionType.event_empty_incomplete"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                : DukeException.ExceptionType.deadline_empty_incomplete);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                handleException(type.equals(\"todo\")"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    ? DukeException.ExceptionType.todo_empty"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    : type.equals(\"event\")"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        ? DukeException.ExceptionType.event_empty_incomplete"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        : DukeException.ExceptionType.deadline_empty_incomplete);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (exception_absent) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                task_collections.add(t);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                appendToFile(memory_file_dir + memory_file_name, t);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (exception_absent) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(indent + \"Got it. I\u0027ve added ths task:\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(indent + \"  \" + task_collections.get(task_collections.size() - 1));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        readTasks();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String greeting \u003d starting_line + \"Hello! This is J.A.R.V.I.S.\\n\" + indent + \"How may I help you?\" + ending_line;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        boolean exit_bye \u003d false;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        while (!exit_bye) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            exception_absent \u003d true;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(starting_line + \"Bye. Hope to see you again soon!\" +  ending_line);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                exit_bye \u003d true;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(separation_line);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    int temp \u003d 1;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(indent + \"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    Iterator task_iter \u003d task_collections.iterator();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    while (task_iter.hasNext()) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        System.out.println(indent + temp + \".\" + task_iter.next());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        temp++;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    String[] input_split_arr \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    String type \u003d input_split_arr[0];"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    if (type.equals(\"done\") || type.equals(\"delete\")) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        editMemoFile(type, input_split_arr);  //editTask(type, input_split_arr);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    else if (type.equals(\"deadline\") || type.equals(\"event\") || type.equals(\"todo\")){"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        addMemoFile(type, input_split_arr);   //addTask(type, input_split_arr);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        handleException(DukeException.ExceptionType.no_meaning);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(separation_line + \"\\n\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hjl99"
        },
        "content": "//compile when current directory is at IndividualProject/text-ui-test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hjl99"
        },
        "content": "//javac -cp ../src/ ../src/main/java/Task.java   etc. (Task, Deadline, Event, Todo, Duke)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hjl99"
        },
        "content": "//sh runtest.sh"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/*public static void editTask(String action, String[] input_split_arr) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        int action_number \u003d -1;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String success_result \u003d \"\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            action_number \u003d Integer.parseInt(input_split_arr[1]);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            handleException(DukeException.ExceptionType.empty_illegal);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (exception_absent) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (action.equals(\"delete\")) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    success_result \u003d task_collections.get(action_number - 1).toString();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.remove(action_number - 1);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.get(action_number - 1).markAsDone();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                handleException(DukeException.ExceptionType.empty_illegal);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (exception_absent) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (action.equals(\"delete\")) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(indent + \"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(indent + success_result);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(indent + \"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(indent + \"  [\\u2713] \" + task_collections.get(action_number - 1).toString().split(\"] \", 2)[1]);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void addTask(String type, String[] input_split_arr) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Task t \u003d null;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                input_split_arr \u003d input_split_arr[1].split(\" /\", 2);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                handleException(type.equals(\"deadline\")"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        ? DukeException.ExceptionType.deadline_empty_incomplete"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        : DukeException.ExceptionType.event_empty_incomplete);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (exception_absent) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    t \u003d new Todo(input_split_arr[1]);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(input_split_arr[1]);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    String time;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        time \u003d input_split_arr[1].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        t \u003d type.equals(\"event\")"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                ? new Event(input_split_arr[0], time)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                : new Deadline(input_split_arr[0], time);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    } catch (Exception ex) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        handleException(type.equals(\"event\")"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                ? DukeException.ExceptionType.event_empty_incomplete"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                : DukeException.ExceptionType.deadline_empty_incomplete);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                handleException(type.equals(\"todo\")"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        ? DukeException.ExceptionType.todo_empty"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        : type.equals(\"event\")"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            ? DukeException.ExceptionType.event_empty_incomplete"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            : DukeException.ExceptionType.deadline_empty_incomplete);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (exception_absent) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                task_collections.add(t);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (exception_absent) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(indent + \"Got it. I\u0027ve added ths task:\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(indent + \"  \" + task_collections.get(task_collections.size() - 1));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }*/"
      }
    ],
    "authorContributionMap": {
      "hjl99": 374,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected ExceptionType et;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public DukeException(ExceptionType et) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.et \u003d et;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public enum ExceptionType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        no_meaning,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        empty_illegal,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        todo_empty,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        deadline_empty_incomplete,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        event_empty_incomplete,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        read_file,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        improper_dateTime"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String full_guide \u003d \"\\n     Please follow the format:\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \"\\n     \u0027list\u0027\" + \"\\n     \u0027done TASK_NUMBER\u0027 or \u0027delete TASK_NUMBER\u0027\" + \"\\n     \u0027todo MY_TASK\u0027\" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \"\\n     \u0027deadline MY_TASK /by DATE_OR_TIME\u0027\" + \"\\n     \u0027event MY_TASK /at DATE_OR_TIME\u0027\" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \"\\n     \u0027bye\u0027\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        switch(et) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            case no_meaning:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                output \u003d \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\" + full_guide;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            case empty_illegal:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                output \u003d \"     ☹ OOPS!!! Your number input is empty or invalid.\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            \"\\n     Please follow the format: \u0027done TASK_NUMBER\u0027 or \u0027delete TASK_NUMBER\u0027\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            case todo_empty:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                output \u003d \"     ☹ OOPS!!! The description of a todo cannot be empty.\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            \"\\n     Please follow the format: \u0027todo MY_TASK\u0027\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            case deadline_empty_incomplete:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                output \u003d \"     ☹ OOPS!!! The description of a deadline cannot be empty or incomplete.\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            \"\\n     Please follow the format: \u0027deadline MY_TASK /by DATE_OR_TIME\u0027\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            case event_empty_incomplete:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                output \u003d \"     ☹ OOPS!!! The description of an event cannot be empty or incomplete.\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            \"\\n     Please follow the format: \u0027event MY_TASK /at DATE_OR_TIME\u0027\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            case read_file:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                output \u003d \"     ☹ OOPS!!! There seems to be some problem reading the memory!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            case improper_dateTime:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                output \u003d \"     ☹ OOPS!!! The time provided is in an incorrect form.\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        \"\\n     Please follow the format: \u0027YYYY-MM-DD HHMM\u0027 or \u0027YYYY-MM-DD\u0027\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                output \u003d \"     ☹ OOPS!!! Unspecified problem detected!\" + full_guide;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /*protected String type;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected String exact;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected String problem;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public DukeException(String type, String exact, String problem) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.exact \u003d exact;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.problem \u003d problem;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String msg \u003d \"     \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (type.equals(\"input\") \u0026\u0026 problem.equals(\"no_meaning\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            msg +\u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else if (type.equals(\"done\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (problem.equals(\"empty\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                msg +\u003d \"☹ OOPS!!! Please indicate which one to mark.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else if (problem.equals(\"illegal\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                msg +\u003d \"☹ OOPS!!! You did not enter a valid number.\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else if (type.equals(\"delete\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (problem.equals(\"empty\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                msg +\u003d \"☹ OOPS!!! Please indicate which one to delete.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else if (problem.equals(\"illegal\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                msg +\u003d \"☹ OOPS!!! You did not enter a valid number.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else if (type.equals(\"todo\") \u0026\u0026 problem.equals(\"empty\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            msg +\u003d \"☹ OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else if (type.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (exact.equals(\"content\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                msg +\u003d \"☹ OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else if (exact.equals(\"date\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                msg +\u003d \"☹ OOPS!!! The final date of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else if (type.equals(\"event\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (exact.equals(\"content\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                msg +\u003d \"☹ OOPS!!! The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else if (exact.equals(\"date\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                msg +\u003d \"☹ OOPS!!! The date of an event cannot be empty.\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            msg +\u003d \"Unspecified Exception Detected\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 107
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Event(String description, String at, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String[] getInfo() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new String[]{this.getType(), this.isDone(), this.description, this.getAt()};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 35
    }
  },
  {
    "path": "src/main/java/HandleException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class HandleException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public HandleException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void handleException(DukeException.ExceptionType et) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        DukeException de \u003d new DukeException(et);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        System.out.println(de);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 13
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String dateTimeParser(String dateTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        DateTimeConverter dtc \u003d new DateTimeConverter(FormatStyle.MEDIUM, FormatStyle.SHORT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return dtc.processTime(dateTime);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String[] memoTaskParser(String taskLine) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String[] temp_type \u003d taskLine.split(SpecialFormat.split_notn, 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String[] temp_details;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (temp_type[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            temp_details \u003d temp_type[1].split(SpecialFormat.split_notn, 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return new String[]{temp_type[0], temp_details[0], temp_details[1]};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            temp_details \u003d temp_type[1].split(SpecialFormat.split_notn, 3);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return new String[]{temp_type[0], temp_details[0], temp_details[1], temp_details[2]};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String[] commandParser(String input) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String COMMAND_TYPE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String[] output \u003d new String[]{};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            COMMAND_TYPE \u003d \"bye\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            output \u003d new String[]{COMMAND_TYPE};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            COMMAND_TYPE \u003d \"list\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            output \u003d new String[]{COMMAND_TYPE};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String[] input_split_arr;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            input_split_arr \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            COMMAND_TYPE \u003d input_split_arr[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String EXCEPTION_TYPE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (COMMAND_TYPE.equals(\"done\") || COMMAND_TYPE.equals(\"delete\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    String ACTION_NUMBER \u003d input_split_arr[1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    output \u003d new String[]{COMMAND_TYPE, ACTION_NUMBER};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } catch (Exception ex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    COMMAND_TYPE \u003d \"exception\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    return new String[] {COMMAND_TYPE, \"empty_illegal\"};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else if (COMMAND_TYPE.equals(\"deadline\") || COMMAND_TYPE.equals(\"event\") || COMMAND_TYPE.equals(\"todo\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                String TASK_CONTENT;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                String DATE_TIME;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                boolean exception_absent \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (!COMMAND_TYPE.equals(\"todo\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        input_split_arr \u003d input_split_arr[1].split("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                COMMAND_TYPE.equals(\"event\") ? \" /at \" : \" /by \", 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    } catch (Exception ex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        exception_absent \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        EXCEPTION_TYPE \u003d COMMAND_TYPE.equals(\"deadline\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                ? \"deadline\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                : \"event\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        COMMAND_TYPE \u003d \"exception\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        return new String[] {COMMAND_TYPE, EXCEPTION_TYPE};"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (exception_absent) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    if (COMMAND_TYPE.equals(\"todo\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            TASK_CONTENT \u003d input_split_arr[1];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            return new String[] {\"exception\", \"todo\"};"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        output \u003d new String[] {COMMAND_TYPE, TASK_CONTENT};"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            TASK_CONTENT \u003d input_split_arr[0];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            DATE_TIME \u003d input_split_arr[1];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            DATE_TIME \u003d this.dateTimeParser(DATE_TIME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            output \u003d new String[] {COMMAND_TYPE, TASK_CONTENT, DATE_TIME};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        } catch (Exception ex) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            exception_absent \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            EXCEPTION_TYPE \u003d COMMAND_TYPE.equals(\"event\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                    ? \"event\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                    : \"deadline\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            COMMAND_TYPE \u003d \"exception\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            return new String[] {COMMAND_TYPE, EXCEPTION_TYPE};"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    } catch (Exception ex) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        exception_absent \u003d false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        EXCEPTION_TYPE \u003d COMMAND_TYPE.equals(\"todo\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                ? \"todo\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                : COMMAND_TYPE.equals(\"event\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                ? \"event\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                : \"deadline\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        COMMAND_TYPE \u003d \"exception\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        return new String[] {COMMAND_TYPE, EXCEPTION_TYPE};"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                EXCEPTION_TYPE \u003d \"no_meaning\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                COMMAND_TYPE \u003d \"exception\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                return new String[] {COMMAND_TYPE, EXCEPTION_TYPE};"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 114
    }
  },
  {
    "path": "src/main/java/SpecialFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class SpecialFormat {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String separation_line \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String indent \u003d \"     \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String starting_line \u003d separation_line + \"\\n\" + indent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String ending_line \u003d \"\\n\" + separation_line + \"\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String split_notn \u003d \"@#%#@%\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String CHANGE_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public SpecialFormat() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 15
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String fileDirectory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String fileName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public File memoFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Parser parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Storage(String fileDirectory, String fileName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.fileDirectory \u003d fileDirectory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void reachFile() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        File data_folder \u003d new File(fileDirectory);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!data_folder.exists() \u0026\u0026 !data_folder.isDirectory()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            data_folder.mkdirs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        File task_list_file \u003d new File(fileDirectory + fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!task_list_file.exists()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                task_list_file.createNewFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                HandleException.handleException(DukeException.ExceptionType.read_file);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.memoFile \u003d task_list_file;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public List\u003cTask\u003e readMemoTasks() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        reachFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        List\u003cTask\u003e task_collections \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            sc \u003d new Scanner(memoFile);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            System.out.println(\"Sorry, the memory cannot be read successfully.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return task_collections;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String curr_task \u003d sc.nextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (curr_task.equals(\"\") || curr_task.isBlank()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String[] task_info \u003d this.parser.memoTaskParser(curr_task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            switch (task_info[0]) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.add("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            new Todo(task_info[2], task_info[1].equals(\"0\") ? false : true));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.add("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            new Event(task_info[2], task_info[3],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                    task_info[1].equals(\"0\") ? false : true));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.add("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            new Deadline(task_info[2], task_info[3],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                    task_info[1].equals(\"0\") ? false : true));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return task_collections;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String taskToMemoStr(Task t) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String memoStr \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String[] info \u003d t.getInfo();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        memoStr +\u003d \"\\n\" + info[0] + SpecialFormat.split_notn + info[1] + SpecialFormat.split_notn + info[2];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (t.getType().equals(\"D\") || t.getType().equals(\"E\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            memoStr +\u003d SpecialFormat.split_notn + info[3];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return memoStr;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void write_memory(List\u003cTask\u003e task_list) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            FileWriter fw \u003d new FileWriter(fileDirectory + fileName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String textToAppend \u003d \"\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Iterator task_iter \u003d task_list.iterator();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            while (task_iter.hasNext()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                Task t \u003d (Task) task_iter.next();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                textToAppend +\u003d taskToMemoStr(t);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            fw.write(textToAppend);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            HandleException.handleException(DukeException.ExceptionType.read_file);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void appendToFile(String filePath, Task t) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath, true); // appending instead of overwriting"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            fw.write(taskToMemoStr(t));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            HandleException.handleException(DukeException.ExceptionType.read_file);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /*public void editMemoFile(String action, String[] input_split_arr) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        boolean exception_absent \u003d false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        int action_number \u003d -1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String success_result \u003d \"\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            action_number \u003d Integer.parseInt(input_split_arr[1]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            HandleException.handleException(DukeException.ExceptionType.empty_illegal);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (exception_absent) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (action.equals(\"delete\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    success_result \u003d task_collections.get(action_number - 1).toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.remove(action_number - 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.get(action_number - 1).markAsDone();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                write_memory(task_collections);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                HandleException.handleException(DukeException.ExceptionType.empty_illegal);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (exception_absent) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (action.equals(\"delete\")) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(SpecialFormat.indent + \"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(SpecialFormat.indent + success_result);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(SpecialFormat.indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(SpecialFormat.indent + \"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(SpecialFormat.indent + \"  [\\u2713] \" + task_collections.get(action_number - 1).toString().split(\"] \", 2)[1]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void addMemoFile(String type, String[] input_split_arr) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Task t \u003d null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                input_split_arr \u003d input_split_arr[1].split("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        type.equals(\"event\") ? \" /at \" : \" /by \", 2);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                Ui.handleException(type.equals(\"deadline\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        ? DukeException.ExceptionType.deadline_empty_incomplete"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        : DukeException.ExceptionType.event_empty_incomplete);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (exception_absent) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    t \u003d new Todo(input_split_arr[1]);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    String time;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        time \u003d input_split_arr[1];"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        time \u003d this.parser.dateTimeParser(time);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        t \u003d type.equals(\"event\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                ? new Event(input_split_arr[0], time)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                : new Deadline(input_split_arr[0], time);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    } catch (Exception ex) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        Ui.handleException(type.equals(\"event\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                ? DukeException.ExceptionType.event_empty_incomplete"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                : DukeException.ExceptionType.deadline_empty_incomplete);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                Ui.handleException(type.equals(\"todo\")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        ? DukeException.ExceptionType.todo_empty"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        : type.equals(\"event\")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        ? DukeException.ExceptionType.event_empty_incomplete"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        : DukeException.ExceptionType.deadline_empty_incomplete);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (exception_absent) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                task_collections.add(t);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                appendToFile(this.fileDirectory + this.fileName, t);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (exception_absent) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.indent + \"Got it. I\u0027ve added ths task:\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.indent + \"  \" + task_collections.get(task_collections.size() - 1));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 199
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"General_Task\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String isDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String[] getInfo() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new String[]{this.getType(), this.isDone(), this.description, \"\"};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 45
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public List\u003cTask\u003e task_collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Parser parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    String MEMO_FILE_DIR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    String MEMO_FILE_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public TaskList(List\u003cTask\u003e task_collections, String MEMO_FILE_DIR, String MEMO_FILE_NAME) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.task_collections \u003d task_collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.MEMO_FILE_DIR \u003d MEMO_FILE_DIR;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.MEMO_FILE_NAME \u003d MEMO_FILE_NAME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.task_collections \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void editTask(String[] COMMAND_RESULT) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String TYPE \u003d COMMAND_RESULT[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String TASK_NUMBER \u003d COMMAND_RESULT[1];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        boolean exception_absent \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        int action_number \u003d -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String TASK_CONTENT \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            action_number \u003d Integer.parseInt(TASK_NUMBER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            exception_absent \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            HandleException.handleException(DukeException.ExceptionType.empty_illegal);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (exception_absent) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (TYPE.equals(\"delete\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    TASK_CONTENT \u003d this.task_collections.get(action_number - 1).toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.remove(action_number - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.get(action_number - 1).markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                new Storage(MEMO_FILE_DIR, MEMO_FILE_NAME).write_memory(task_collections);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (TYPE.equals(\"delete\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.indent + \"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.indent + TASK_CONTENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.indent + \"Now you have \" + this.task_collections.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.indent + \"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.indent + \"  [\\u2713] \" + task_collections.get(action_number - 1).toString().split(\"] \", 2)[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                exception_absent \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                HandleException.handleException(DukeException.ExceptionType.empty_illegal);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void addTask(String[] COMMAND_RESULT) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String TYPE \u003d COMMAND_RESULT[0];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String TASK_CONTENT \u003d COMMAND_RESULT[1];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (TYPE.equals(\"todo\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            t \u003d new Todo(TASK_CONTENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            t \u003d TYPE.equals(\"event\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    ? new Event(TASK_CONTENT, COMMAND_RESULT[2])"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    : new Deadline(TASK_CONTENT, COMMAND_RESULT[2]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            this.task_collections.add(t);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new Storage(MEMO_FILE_DIR, MEMO_FILE_NAME).appendToFile(MEMO_FILE_DIR + MEMO_FILE_NAME, t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            System.out.println(SpecialFormat.indent + \"Got it. I\u0027ve added ths task:\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            System.out.println(SpecialFormat.indent + \"  \" + task_collections.get(task_collections.size() - 1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            System.out.println(SpecialFormat.indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            HandleException.handleException(DukeException.ExceptionType.read_file);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /*public void editTask(String action, String[] input_split_arr) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        boolean exception_absent \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        int action_number \u003d -1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String success_result \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            action_number \u003d Integer.parseInt(input_split_arr[1]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Ui.handleException(DukeException.ExceptionType.empty_illegal);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (exception_absent) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (action.equals(\"delete\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    success_result \u003d this.task_collections.get(action_number - 1).toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.remove(action_number - 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    task_collections.get(action_number - 1).markAsDone();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                write_memory(task_collections);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                Ui.handleException(DukeException.ExceptionType.empty_illegal);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (exception_absent) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (action.equals(\"delete\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(SpecialFormat.indent + \"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(SpecialFormat.indent + success_result);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(SpecialFormat.indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(SpecialFormat.indent + \"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                System.out.println(SpecialFormat.indent + \"  [\\u2713] \" + task_collections.get(action_number - 1).toString().split(\"] \", 2)[1]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void addTask(String type, String[] input_split_arr) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Task t \u003d null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        boolean exception_absent \u003d false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                input_split_arr \u003d input_split_arr[1].split("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        type.equals(\"event\") ? \" /at \" : \" /by \", 2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                Ui.handleException(type.equals(\"deadline\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        ? DukeException.ExceptionType.deadline_empty_incomplete"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        : DukeException.ExceptionType.event_empty_incomplete);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (exception_absent) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    t \u003d new Todo(input_split_arr[1]);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    String time;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        time \u003d input_split_arr[1];"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        time \u003d parser.dateTimeParser(time);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        t \u003d type.equals(\"event\")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                ? new Event(input_split_arr[0], time)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                : new Deadline(input_split_arr[0], time);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    } catch (Exception ex) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        Ui.handleException(type.equals(\"event\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                ? DukeException.ExceptionType.event_empty_incomplete"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                : DukeException.ExceptionType.deadline_empty_incomplete);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                Ui.handleException(type.equals(\"todo\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        ? DukeException.ExceptionType.todo_empty"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        : type.equals(\"event\")"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        ? DukeException.ExceptionType.event_empty_incomplete"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        : DukeException.ExceptionType.deadline_empty_incomplete);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (exception_absent) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                task_collections.add(t);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                appendToFile(memory_file_dir + memory_file_name, t);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (exception_absent) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.indent + \"Got it. I\u0027ve added ths task:\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.indent + \"  \" + task_collections.get(task_collections.size() - 1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.indent + \"Now you have \" + task_collections.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 167
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 21
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static List\u003cTask\u003e task_collections \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected String FILE_PATH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected String FILE_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Parser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected TaskList TASK_LIST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean exception_absent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Ui(String FILE_PATH, String FILE_NAME, List\u003cTask\u003e MEMO_TASK) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.FILE_PATH \u003d FILE_PATH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.FILE_NAME \u003d FILE_NAME;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        TASK_LIST \u003d new TaskList(MEMO_TASK, FILE_PATH, FILE_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void processRequests() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String greeting \u003d SpecialFormat.starting_line + \"Hello! This is J.A.R.V.I.S.\\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                SpecialFormat.indent + \"How may I help you?\" + SpecialFormat.ending_line;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        boolean exit_bye \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        while (!exit_bye) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String[] COMMAND_RESULT \u003d parser.commandParser(input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            System.out.println(SpecialFormat.separation_line);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (COMMAND_RESULT.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                switch(COMMAND_RESULT[0]){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    case \"bye\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        System.out.println(SpecialFormat.indent + \"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        exit_bye \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    case \"list\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        int temp \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        System.out.println(SpecialFormat.indent + \"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        Iterator task_iter \u003d TASK_LIST.task_collections.iterator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        while (task_iter.hasNext()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            System.out.println(SpecialFormat.indent + temp + \".\" + task_iter.next());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            temp++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    case \"todo\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        HandleException.handleException(DukeException.ExceptionType.todo_empty);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    case \"event\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        HandleException.handleException(DukeException.ExceptionType.event_empty_incomplete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    case \"deadline\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        HandleException.handleException(DukeException.ExceptionType.deadline_empty_incomplete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else if (COMMAND_RESULT.length \u003d\u003d 2 \u0026\u0026 !COMMAND_RESULT[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (COMMAND_RESULT[0].equals(\"exception\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    switch(COMMAND_RESULT[1]){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        case \"todo\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            HandleException.handleException(DukeException.ExceptionType.todo_empty);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        case \"event\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            HandleException.handleException(DukeException.ExceptionType.event_empty_incomplete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        case \"deadline\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            HandleException.handleException(DukeException.ExceptionType.deadline_empty_incomplete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        case \"empty_illegal\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            HandleException.handleException(DukeException.ExceptionType.empty_illegal);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    TASK_LIST.editTask(COMMAND_RESULT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                TASK_LIST.addTask(COMMAND_RESULT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            System.out.println(SpecialFormat.separation_line + \"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 87
    }
  },
  {
    "path": "src/main/java/duke/DateTimeConverter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class DateTimeConverter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** DateTimeFormatter object for formatting purposes */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected DateTimeFormatter dtf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructor of DateTimeConverter class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param dateStyle  FormatStyle for LocalDate."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param timeStyle  FormatStyle for LocalTime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public DateTimeConverter(FormatStyle dateStyle, FormatStyle timeStyle) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.dtf \u003d DateTimeFormatter.ofLocalizedDateTime(dateStyle, timeStyle);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns Processed date and time from user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param dateTime  User input for date and time of events."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return Formatted date and time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String processTime(String dateTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (dateTime.length() \u003e 11) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                String[] parts \u003d dateTime.split(\" \", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                time \u003d parts[0].length() \u003d\u003d 4"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        ? parts[0]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        : parts[1];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                date \u003d (parts[0].length() \u003c\u003d 4)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        ? parts[1]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        : parts[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                date \u003d dateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                time \u003d \"2359\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (time.length() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                time +\u003d \"00\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            LocalTime lt \u003d LocalTime.of("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    Integer.parseInt(time.substring(0, 2)), Integer.parseInt(time.substring(2)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            date \u003d date.replaceAll(\"\\\\D\", \"-\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String[] dateSeg \u003d date.split(\"-\", 3);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (dateSeg[0].length() !\u003d 4) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                String temp \u003d dateSeg[0];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                dateSeg[0] \u003d dateSeg[2];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                dateSeg[2] \u003d temp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            LocalDate ld \u003d LocalDate.parse(dateSeg[0] + \"-\" + dateSeg[1] + \"-\" + dateSeg[2]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            LocalDateTime ldt \u003d LocalDateTime.of(ld, lt);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return ldt.format(dtf);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            HandleException.handleException(DukeException.ExceptionType.IMPROPER_DATETIME);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return dateTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 70
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** date and time of a Deadline object */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructor of Deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param description  Content of the Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param by  Date and time of Deadline object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Another constructor of Deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param description  Content of the Task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param by  Date and time of Deadline object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param isDone  Completion status of the Deadline object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns First letter of Deadline to represent its type."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return \"D\" to represent type of Deadline."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns Date and time of the Deadline object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return Date and time of Deadline object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns Information about the Deadline object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return Type, isDone, description, and date and time."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String[] getInfo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new String[] {this.getType(), this.isDone(), this.description, this.getBy()};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns String representation of the Deadline object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return The string the object prints out to be."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 75
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Storage object of the Duke object */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** TaskList object of the Duke object */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Ui object of the Duke object */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Directory of file to store tasks */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected static String MEMORY_FILE_DIR \u003d \"./data/\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Name of the file to store tasks */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected static String MEMORY_FILE_NAME \u003d \"task_list.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructor of Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initialize storage, tasks, ui of Duke object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param memoryFileDir  Directory of the file to store tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param memoryFileName  Name of the file to store tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Duke(String memoryFileDir, String memoryFileName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.storage \u003d new Storage(memoryFileDir, memoryFileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            this.tasks \u003d new TaskList(storage.readMemoTasks(), memoryFileDir, memoryFileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            HandleException.handleException(DukeException.ExceptionType.READ_FILE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            System.out.println(SpecialFormat.INDENT + \"Let\u0027s start first without the task records!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.ui \u003d new Ui(memoryFileDir, memoryFileName, tasks.showList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Run process by calling processRequests() method of ui object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ui.processRequests();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Create a new Duke object and call its run() method."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param args  Compulsory constitution of a main method."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        new Duke(MEMORY_FILE_DIR, MEMORY_FILE_NAME).run();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "//compile when current directory is at IndividualProject/text-ui-test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "//javac -cp ../src/ ../src/main/java/Task.java   etc. (Task, Deadline, Event, Todo, Duke)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "//sh runtest.sh"
      }
    ],
    "authorContributionMap": {
      "hjl99": 63
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class DukeException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** ExceptionType object of DukeException */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected ExceptionType et;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructor of DukeException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initialize ExceptionType object of DukeException object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param et  ExceptionType passsed in to initialize class variable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public DukeException(ExceptionType et) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.et \u003d et;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Enum class of ExceptionType within DukeException class */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public enum ExceptionType {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        NO_MEANING,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        EMPTY_ILLEGAL,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        TODO_INCOMPLETE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        FIND_INCOMPLETE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        DEADLINE_INCOMPLETE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        EVENT_INCOMPLETE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        READ_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        IMPROPER_DATETIME"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return String representation of DukeException object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String full_guide \u003d \"\\n     Please follow the format:\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                + \"\\n     \u0027list\u0027\" + \"\\n     \u0027done TASK_NUMBER\u0027 or \u0027delete TASK_NUMBER\u0027\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                + \"\\n     \u0027todo MY_TASK\u0027\" + \"\\n     \u0027deadline MY_TASK /by DATE_OR_TIME\u0027\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                + \"\\n     \u0027event MY_TASK /at DATE_OR_TIME\u0027\" + \"\\n     \u0027bye\u0027 + \u0027\\n     NOTE: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                + \"\\n     Recommended Form of DATE_OR_TIME: \u0027YYYY-MM-DD HHMM\u0027 or \u0027YYYY-MM-DD\u0027\u0027\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        switch(et) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        case NO_MEANING:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            output \u003d \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\" + full_guide;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        case EMPTY_ILLEGAL:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            output \u003d \"     ☹ OOPS!!! Your number input is empty or invalid.\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    + \"\\n     Please foxllow the format: \u0027done TASK_NUMBER\u0027 or \u0027delete TASK_NUMBER\u0027\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        case TODO_INCOMPLETE:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            output \u003d \"     ☹ OOPS!!! The description of a todo cannot be empty.\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    + \"\\n     Please follow the format: \u0027todo MY_TASK\u0027\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        case FIND_INCOMPLETE:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            output \u003d \"     ☹ OOPS!!! The keyword of a search cannot be empty.\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    + \"\\n     Please follow the format: \u0027find KEYWORD\u0027\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        case DEADLINE_INCOMPLETE:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            output \u003d \"     ☹ OOPS!!! The description of a deadline cannot be empty or incomplete.\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    + \"\\n     Please follow the format: \u0027deadline MY_TASK /by DATE_OR_TIME\u0027\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    + \"\\n     (Recommended DATE/TIME format: \u0027YYYY-MM-DD HHMM\u0027 or \u0027YYYY-MM-DD\u0027)\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        case EVENT_INCOMPLETE:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            output \u003d \"     ☹ OOPS!!! The description of an event cannot be empty or incomplete.\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    + \"\\n     Please follow the format: \u0027event MY_TASK /at DATE_OR_TIME\u0027\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    + \"\\n     (Recommended DATE/TIME format: \u0027YYYY-MM-DD HHMM\u0027 or \u0027YYYY-MM-DD\u0027)\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        case READ_FILE:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            output \u003d \"     ☹ OOPS!!! There seems to be some problem accessing the memory file!\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        case IMPROPER_DATETIME:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            output \u003d SpecialFormat.STARTING_LINE +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    \"☹ OOPS!!! We are unable to understand the Time provided.\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    + \"\\n     However, we will still add this task. No worries!\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    + \"\\n     Next time, you can consider the format \u0027YYYY-MM-DD HHMM\u0027 or \u0027YYYY-MM-DD\u0027!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            output \u003d \"     ☹ OOPS!!! Unspecified problem detected!\" + full_guide;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 89
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Date and time of the Event object */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructor of Event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initialize content, datetime, and completion status of Event object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param description  Task content of the Event object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param at  Date and time of the Event object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Another Constructor of Event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initialize content, datetime, and completion status of Event object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param description  Task content of the Event object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param at  Date and time of the Event object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param isDone  Completion status of Event object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Event(String description, String at, boolean isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return String \"E\" to represent type of object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return \"E\" to represent the type of object (which is an Event)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return Date and Time of Event object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return datetime of Event object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return Information of Event object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return An array of Strings containing type, status, content, and datetime of Event object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String[] getInfo() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new String[] {this.getType(), this.isDone(), this.description, this.getAt()};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return String representation of Event object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return String representation of Event object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 78
    }
  },
  {
    "path": "src/main/java/duke/HandleException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class HandleException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructor of HandleException."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public HandleException() {}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Handle Exceptions when running the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param et  ExceptionType object to initialize DukeException object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void handleException(DukeException.ExceptionType et) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        DukeException de \u003d new DukeException(et);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        System.out.println(de);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 21
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructor of Parser."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Parser() {}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return Formatted datetime of a task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param dateTime  User input of date and time of a Task object (specifically Deadline/Event)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @returns  Processed datetime of a Deadline or Event object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String dateTimeParser(String dateTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        DateTimeConverter dtc \u003d new DateTimeConverter(FormatStyle.MEDIUM, FormatStyle.SHORT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return dtc.processTime(dateTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return Specific information of a Task object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param taskLine  Single line of information of a Task object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @returns  Specific information of a Task contained in an array of Strings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String[] memoTaskParser(String taskLine) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String[] tempType \u003d taskLine.split(SpecialFormat.SPLIT_NOTN, 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String[] tempDetails;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (tempType[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            tempDetails \u003d tempType[1].split(SpecialFormat.SPLIT_NOTN, 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return new String[] {tempType[0], tempDetails[0], tempDetails[1]};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            tempDetails \u003d tempType[1].split(SpecialFormat.SPLIT_NOTN, 3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return new String[] {tempType[0], tempDetails[0], tempDetails[1], tempDetails[2]};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return Specific information of a Command in Segments."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param input  User input of command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @returns  Specific information of a Command in the form of String array."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String[] commandParser(String input) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String commandType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String[] output \u003d new String[] {};"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            commandType \u003d \"bye\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            output \u003d new String[] {commandType};"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            commandType \u003d \"list\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            output \u003d new String[] {commandType};"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String exceptionType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String[] inputSplitArr;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            inputSplitArr \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            commandType \u003d inputSplitArr[0];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (commandType.equals(\"done\") || commandType.equals(\"delete\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    String actionNumber \u003d inputSplitArr[1];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    output \u003d new String[] {commandType, actionNumber};"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } catch (Exception ex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    commandType \u003d \"exception\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    return new String[] {commandType, \"empty_illegal\"};"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else if (commandType.equals(\"find\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                String keyword;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    keyword \u003d inputSplitArr[1];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    return new String[] {\"exception\", \"find\"};"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                /*if (keyword.isBlank()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    return new String[] {\"exception\", \"find\"};"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }*/"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                output \u003d new String[] {commandType, keyword};"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else if (commandType.equals(\"deadline\") || commandType.equals(\"event\") ||"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    commandType.equals(\"todo\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                String taskContent;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                String dateTime;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                boolean exceptionAbsent \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (!commandType.equals(\"todo\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        inputSplitArr \u003d inputSplitArr[1].split("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                commandType.equals(\"event\") ? \" /at \" : \" /by \", 2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    } catch (Exception ex) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        exceptionAbsent \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        exceptionType \u003d commandType.equals(\"deadline\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                ? \"deadline\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                : \"event\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        commandType \u003d \"exception\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        return new String[] {commandType, exceptionType};"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (exceptionAbsent) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    if (commandType.equals(\"todo\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            taskContent \u003d inputSplitArr[1];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            return new String[] {\"exception\", \"todo\"};"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        output \u003d new String[] {commandType, taskContent};"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            taskContent \u003d inputSplitArr[0];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            dateTime \u003d inputSplitArr[1];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            dateTime \u003d this.dateTimeParser(dateTime);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            output \u003d new String[] {commandType, taskContent, dateTime};"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        } catch (Exception ex) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            exceptionAbsent \u003d false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            exceptionType \u003d commandType.equals(\"event\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                    ? \"event\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                    : \"deadline\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            commandType \u003d \"exception\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            return new String[] {commandType, exceptionType};"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                exceptionType \u003d \"no_meaning\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                commandType \u003d \"exception\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                return new String[] {commandType, exceptionType};"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 138
    }
  },
  {
    "path": "src/main/java/duke/SpecialFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class SpecialFormat {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Separation line */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String SEPARATION_LINE \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Indentation */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String INDENT \u003d \"     \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Starting line */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String STARTING_LINE \u003d SEPARATION_LINE + \"\\n\" + INDENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Ending line */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String ENDING_LINE \u003d \"\\n\" + SEPARATION_LINE + \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Split notation to separate information components stored in the local file */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String SPLIT_NOTN \u003d \"@#%#@%\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Change line notation */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static String CHANGE_LINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructor of SpecialFormat."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public SpecialFormat() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 29
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Directory of local file to store tasks */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String fileDirectory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Name of the local file to store tasks */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String fileName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** The File object to enable file writing and editing */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public File memoFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Parser object */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Parser parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructor of Storage class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initialize class members fileDirectory, fileName, parser."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param fileDirectory  Directory of local file to store tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param fileName  Name of local file to store tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Storage(String fileDirectory, String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.fileDirectory \u003d fileDirectory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initialize the File object to enable writing memory."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Create valid directory and file if not present."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void reachFile() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        File dataFolder \u003d new File(fileDirectory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!dataFolder.exists() \u0026\u0026 !dataFolder.isDirectory()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            dataFolder.mkdirs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        File taskListFile \u003d new File(fileDirectory + fileName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!taskListFile.exists()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                taskListFile.createNewFile();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                HandleException.handleException(DukeException.ExceptionType.READ_FILE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.memoFile \u003d taskListFile;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return List of Task objects read and processed from local memory."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return List of Task objects each time the chatbot is run."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public List\u003cTask\u003e readMemoTasks() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        reachFile();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        List\u003cTask\u003e taskCollections \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Scanner sc;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            sc \u003d new Scanner(memoFile);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            System.out.println(\"Sorry, the memory cannot be read successfully.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return taskCollections;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String currTask \u003d sc.nextLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (currTask.equals(\"\") || currTask.isBlank()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String[] taskInfo \u003d this.parser.memoTaskParser(currTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            switch (taskInfo[0]) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                taskCollections.add("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        new Todo(taskInfo[2], taskInfo[1].equals(\"0\") ? false : true));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                taskCollections.add("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        new Event(taskInfo[2], taskInfo[3],"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                taskInfo[1].equals(\"0\") ? false : true));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                taskCollections.add("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        new Deadline(taskInfo[2], taskInfo[3],"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                taskInfo[1].equals(\"0\") ? false : true));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return taskCollections;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return String of a Task object for storage in local memory."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param t  Task object for conversion."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return  Task String to be stored in memory."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String taskToMemoStr(Task t) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String memoStr \u003d \"\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String[] info \u003d t.getInfo();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        memoStr +\u003d \"\\n\" + info[0] + SpecialFormat.SPLIT_NOTN + info[1]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                + SpecialFormat.SPLIT_NOTN + info[2];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (t.getType().equals(\"D\") || t.getType().equals(\"E\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            memoStr +\u003d SpecialFormat.SPLIT_NOTN + info[3];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return memoStr;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Overwrite local memory with the current List of Task objects."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param task_list  Current List of Task objects."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void write_memory(List\u003cTask\u003e task_list) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            FileWriter fw \u003d new FileWriter(fileDirectory + fileName);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String textToAppend \u003d \"\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Iterator taskIter \u003d task_list.iterator();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            while (taskIter.hasNext()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                Task t \u003d (Task) taskIter.next();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                textToAppend +\u003d taskToMemoStr(t);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            fw.write(textToAppend);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            HandleException.handleException(DukeException.ExceptionType.READ_FILE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Write local memory with a newly added Task object (not overwriting)."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param filePath  Path of the file to be modified."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param t  Task object to be added."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void appendToFile(String filePath, Task t) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath, true); // appending instead of overwriting"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            fw.write(taskToMemoStr(t));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            HandleException.handleException(DukeException.ExceptionType.READ_FILE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 163
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Content of the Task object */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Completion status of the Task object */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructor of Task class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initialize class members description, completion status."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param description  Content of the Task object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Another Constructor of Task class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initialize class members description, completion status."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param description  Content of the Task object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param isDone  Completion Status of the Task object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return Completion status icon of Task object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return Tick or cross String to represent completion status of the Task object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Mark completion status of Task object as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return Content of Task object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return String to represent content of the Task object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return Type of Task object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return String to represent type of the Task object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"General_Task\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return Completion status of Task object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return String \"1\" or \"0\" to represent completion status of the Task object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String isDone() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return Specific information of Task object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return Type, status, content, and empty datetime of Task object in the form of an array of Strings."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String[] getInfo() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new String[]{this.getType(), this.isDone(), this.description, \"\"};"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return String representation of Task object."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return String representation of Task object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 105
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Collection of Task objects for easy modification"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected List\u003cTask\u003e taskCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Parser object to process input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Directory of the file to store tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected String memoFileDir;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Name of the file to store tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected String memoFileName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructor of TaskList class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initialize the taskCollections to be an empty ArrayList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param taskCollections List of Task objects to initialize the class variable taskCollections."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param memoFileDir     Directory of the file to store tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param memoFileName    Name of the file to store tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskCollections, String memoFileDir, String memoFileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.taskCollections \u003d taskCollections;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.memoFileDir \u003d memoFileDir;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.memoFileName \u003d memoFileName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Another Constructor of TaskList class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initialize the taskCollections to be an empty ArrayList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return Type, status, content, and empty datetime of Task object in the form of an array of Strings"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.taskCollections \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return taskCollections of the TaskList object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return Current list of Tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public List\u003cTask\u003e showList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return taskCollections;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Modify temporary tasklist and overwrite local memory."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void editTask(String[] commandArr) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String type \u003d commandArr[0];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String taskNumber \u003d commandArr[1];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        boolean exceptionAbsent \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        int actionNumber \u003d -1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String taskContent \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            actionNumber \u003d Integer.parseInt(taskNumber);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            exceptionAbsent \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            HandleException.handleException(DukeException.ExceptionType.EMPTY_ILLEGAL);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (exceptionAbsent) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (type.equals(\"delete\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    taskContent \u003d this.taskCollections.get(actionNumber - 1).toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    taskCollections.remove(actionNumber - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    taskCollections.get(actionNumber - 1).markAsDone();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                new Storage(memoFileDir, memoFileName).write_memory(taskCollections);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (type.equals(\"delete\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.INDENT + \"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.INDENT + taskContent);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.INDENT + \"Now you have \" + this.taskCollections.size() +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            \" tasks in the list.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.INDENT + \"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.INDENT + \"  [\\u2713] \" +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            taskCollections.get(actionNumber - 1).toString().split(\"] \", 2)[1]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                exceptionAbsent \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                HandleException.handleException(DukeException.ExceptionType.EMPTY_ILLEGAL);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return List of the Task objects matching the keyword."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param keyword  User input of keyword to look for."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return Matching Task objects."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public List\u003cTask\u003e searchTask(String keyword) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        List\u003cTask\u003e searchResult \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Iterator itr \u003d taskCollections.iterator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        while (itr.hasNext()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Task currTask \u003d (Task) itr.next();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (currTask.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                searchResult.add(currTask);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (currTask.getType().equals(\"D\") || currTask.getType().equals(\"E\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    if (currTask.getInfo()[3].contains(keyword)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        searchResult.add(currTask);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return searchResult;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Add new Task object to the temporary collection and local memory."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void addTask(String[] commandArr) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String type \u003d commandArr[0];"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String taskContent \u003d commandArr[1];"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            t \u003d new Todo(taskContent);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            t \u003d type.equals(\"event\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    ? new Event(taskContent, commandArr[2])"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    : new Deadline(taskContent, commandArr[2]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            this.taskCollections.add(t);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new Storage(memoFileDir, memoFileName).appendToFile(memoFileDir + memoFileName, t);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            System.out.println(SpecialFormat.INDENT + \"Got it. I\u0027ve added ths task:\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            System.out.println(SpecialFormat.INDENT + \"  \" + taskCollections.get(taskCollections.size() - 1));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            System.out.println(SpecialFormat.INDENT + \"Now you have \" +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    taskCollections.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            HandleException.handleException(DukeException.ExceptionType.READ_FILE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 160
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructor of Todo class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param description Content of the Todo object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Another Constructor of Todo class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param description Content of the Todo object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param isDone      Completion status of the Todo object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return Type representation of the Todo object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return String \"T\" as Type representation of the Todo object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Return String representation of the Todo object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return String representation."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 46
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Directory of local file to store tasks */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Name of local file to store tasks */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected String fileName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Parser object to understand requests */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Parser parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** TaskList object to store Task objects and modify the list */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructor of Ui class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initialize the filepath, filename, and list of tasks already stored in memory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param filePath  Directory of local file to read and write."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param fileName  Name of local file to read and write."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param memoTask  List of Task objects stored in memory."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Ui(String filePath, String fileName, List\u003cTask\u003e memoTask) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        taskList \u003d new TaskList(memoTask, filePath, fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Interact with users and process inputs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void processRequests() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String greeting \u003d SpecialFormat.STARTING_LINE + \"Hello! This is J.A.R.V.I.S.\\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                SpecialFormat.INDENT + \"How may I help you?\" + SpecialFormat.ENDING_LINE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        boolean exit_bye \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        while (!exit_bye) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            String[] commandTask \u003d parser.commandParser(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            System.out.println(SpecialFormat.SEPARATION_LINE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (commandTask.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                switch(commandTask[0]){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                case \"bye\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.INDENT + \"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    exit_bye \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    int temp \u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    System.out.println(SpecialFormat.INDENT + \"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    Iterator task_iter \u003d taskList.showList().iterator();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    while (task_iter.hasNext()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        System.out.println(SpecialFormat.INDENT + temp + \".\" + task_iter.next());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        temp++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    HandleException.handleException(DukeException.ExceptionType.TODO_INCOMPLETE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    HandleException.handleException(DukeException.ExceptionType.EVENT_INCOMPLETE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    HandleException.handleException(DukeException.ExceptionType.DEADLINE_INCOMPLETE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else if (commandTask.length \u003d\u003d 2 \u0026\u0026 !commandTask[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (commandTask[0].equals(\"exception\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    switch (commandTask[1]) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    case \"todo\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        HandleException.handleException(DukeException.ExceptionType.TODO_INCOMPLETE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    case \"event\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        HandleException.handleException(DukeException.ExceptionType.EVENT_INCOMPLETE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    case \"deadline\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        HandleException.handleException(DukeException.ExceptionType.DEADLINE_INCOMPLETE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    case \"empty_illegal\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        HandleException.handleException(DukeException.ExceptionType.EMPTY_ILLEGAL);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    case \"no_meaning\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        HandleException.handleException(DukeException.ExceptionType.NO_MEANING);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else if (commandTask[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    List\u003cTask\u003e matchList \u003d taskList.searchTask(commandTask[1]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    if (matchList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        System.out.println("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                SpecialFormat.INDENT + \"Sorry, there is no match for your keyword!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        int temp \u003d 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        System.out.println(SpecialFormat.INDENT +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                                \"Here are the tasks that match your keyword:\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        Iterator itr \u003d matchList.iterator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        while (itr.hasNext()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            System.out.println(SpecialFormat.INDENT + temp + \".\" + itr.next());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                            temp++;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else if (commandTask.length \u003d\u003d 2 \u0026\u0026 !commandTask[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (commandTask[0].equals(\"exception\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    switch(commandTask[1]){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    case \"todo\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        HandleException.handleException(DukeException.ExceptionType.TODO_INCOMPLETE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    case \"event\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        HandleException.handleException(DukeException.ExceptionType.EVENT_INCOMPLETE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    case \"deadline\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        HandleException.handleException(DukeException.ExceptionType.DEADLINE_INCOMPLETE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    case \"empty_illegal\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        HandleException.handleException(DukeException.ExceptionType.EMPTY_ILLEGAL);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    case \"no_meaning\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        HandleException.handleException(DukeException.ExceptionType.NO_MEANING);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    taskList.editTask(commandTask);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                taskList.addTask(commandTask);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            System.out.println(SpecialFormat.SEPARATION_LINE + \"\\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 142
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void dateTimeConverter_processTime_success(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                new DateTimeConverter(FormatStyle.MEDIUM, FormatStyle.SHORT).processTime(\"10/12/2020 1300\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \"Dec 10, 2020, 1:00 PM\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void parser_processTime_success(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String[] orig \u003d new Parser().commandParser(\"deadline finish assignments /by 2020-12-10 1500\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String[] actual \u003d new String[]{\"deadline\", \"finish assignments\", \"Dec 10, 2020, 3:00 PM\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(orig[0], actual[0]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(orig[1], actual[1]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(orig[2], actual[2]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void deadline_getInfo_success(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String[] orig \u003d new Deadline(\"read books\", \"Dec 10, 2020, 3:00 PM\").getInfo();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String[] actual \u003d new String[]{\"D\", \"0\", \"read books\", \"Dec 10, 2020, 3:00 PM\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(orig[0], actual[0]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(orig[1], actual[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(orig[2], actual[2]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(orig[3], actual[3]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 36
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hjl99": 7
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Task.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Deadline.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Event.java"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "then"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "fi"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Todo.java"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "java -classpath ../bin main.java.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "hjl99": 26,
      "-": 32
    }
  }
]
