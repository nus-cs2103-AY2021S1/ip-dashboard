[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"Criss-Wang":2,"-":24}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"compileJava {options.encoding \u003d \"UTF-8\"}"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"compileTestJava {options.encoding \u003d \"UTF-8\"}"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":50,"author":{"gitId":"Criss-Wang"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":59,"author":{"gitId":"Criss-Wang"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":64,"author":{"gitId":"Criss-Wang"},"content":"    enableAssertions \u003d true"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Criss-Wang":21,"-":44}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"T | 1 | homework"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":"D | 1 | return book | Apr 14 2020"},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"E | 0 | read book | Apr 12 2020"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"D | 0 | return book 2 | Oct 14 2020"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"E | 0 | read book 3 | Sep 4 2020"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"T | 1 | kill Obi-wan"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"T | 0 | sampleTodo"}],"authorContributionMap":{"Criss-Wang":7}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"# Duke Chat bot User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"## Introduction"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"Duke chat bot is for people _in need to manage their daily tasks via CLI_."},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"## Quick Start"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"* Ensure you have `Java 11` or above installed in your Computer."},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"* Download latest `duke.jar`."},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"* Double-click on the `duke.jar` to start the application."},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"* Exit the app by typing in _\"bye\"_.  "},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"1. Add a todo/event/deadline task"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"1. View the list of tasks"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"1. Mark certain tasks as completed"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"1. Delete a task"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"1. Find a task by keyword"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"1. Get reminder on upcoming dues  "},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"### `Todo` - Add a todo task"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"Store a todo task which does not have time constraint."},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"Format: `todo TASK_NAME`"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"* `todo sampleTask` creates the `sampleTask` in the task list.  "},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"\u003cbr /\u003e"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"![todoImage](asset/todo.png)  "},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"***"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":"### `Event` - Add an event task"},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"Store an event task which needs to be done `at` a scheduled time."},{"lineNumber":42,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":43,"author":{"gitId":"Criss-Wang"},"content":"Format: `event TASK_NAME /at SCHEDULED_TIME`"},{"lineNumber":44,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":45,"author":{"gitId":"Criss-Wang"},"content":"* `SCHEDULED_TIME` follows the format _\u0027YYYY-MM-DD\u0027_."},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"Criss-Wang"},"content":"Example of usage: "},{"lineNumber":48,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":49,"author":{"gitId":"Criss-Wang"},"content":"* `even sampleEvent /at 2020-03-12` creates the `sampleEvent` in the task list."},{"lineNumber":50,"author":{"gitId":"Criss-Wang"},"content":"* The `sampleEvent` is to be done at __March 12, 2020__.  "},{"lineNumber":51,"author":{"gitId":"Criss-Wang"},"content":"\u003cbr /\u003e"},{"lineNumber":52,"author":{"gitId":"Criss-Wang"},"content":"![eventImage](asset/event.png)  "},{"lineNumber":53,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":54,"author":{"gitId":"Criss-Wang"},"content":"***"},{"lineNumber":55,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":56,"author":{"gitId":"Criss-Wang"},"content":"### `Deadline` - Add a deadline task"},{"lineNumber":57,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":58,"author":{"gitId":"Criss-Wang"},"content":"Store a deadline task which needs to be done `before` a scheduled time."},{"lineNumber":59,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":60,"author":{"gitId":"Criss-Wang"},"content":"Format: `deadline TASK_NAME /by SCHEDULED_TIME`"},{"lineNumber":61,"author":{"gitId":"Criss-Wang"},"content":"* `SCHEDULED_TIME` follows the format _\u0027YYYY-MM-DD\u0027_."},{"lineNumber":62,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":63,"author":{"gitId":"Criss-Wang"},"content":"Example of usage: "},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"Criss-Wang"},"content":"* `deadline sampleDeadline /by 2020-11-12` creates the `sampleDeadline` in the task list."},{"lineNumber":66,"author":{"gitId":"Criss-Wang"},"content":"* The `sampleDeadline` is to be done before __Nov 12, 2020__.  "},{"lineNumber":67,"author":{"gitId":"Criss-Wang"},"content":"\u003cbr /\u003e"},{"lineNumber":68,"author":{"gitId":"Criss-Wang"},"content":"![deadlineImage](asset/deadline.png)  "},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"Criss-Wang"},"content":"***"},{"lineNumber":71,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":72,"author":{"gitId":"Criss-Wang"},"content":"### `List` - Display the list of tasks"},{"lineNumber":73,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":74,"author":{"gitId":"Criss-Wang"},"content":"Generates the entire list of tasks stored in the app."},{"lineNumber":75,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":76,"author":{"gitId":"Criss-Wang"},"content":"Format: `list`"},{"lineNumber":77,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":78,"author":{"gitId":"Criss-Wang"},"content":"* The displayed string is of the form `[TASK_TYPE][COMPLETION_INDICATOR]TASK_NAME ([TASK_SCHEDULE])`."},{"lineNumber":79,"author":{"gitId":"Criss-Wang"},"content":"* `TASK_TYPE` can be `T` (Todo) / `E` (Event) / `D` (Deadline)."},{"lineNumber":80,"author":{"gitId":"Criss-Wang"},"content":"* `COMPLETION_INDICATOR` shows whether the task has been completed, a `✓` means done, a `✘` means not done."},{"lineNumber":81,"author":{"gitId":"Criss-Wang"},"content":"* `TASK_SCHEDULE` is _optional_."},{"lineNumber":82,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":83,"author":{"gitId":"Criss-Wang"},"content":"Example of usage: "},{"lineNumber":84,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":85,"author":{"gitId":"Criss-Wang"},"content":"* `list` returns all tasks\u0027 information presented nicely.  "},{"lineNumber":86,"author":{"gitId":"Criss-Wang"},"content":"\u003cbr /\u003e"},{"lineNumber":87,"author":{"gitId":"Criss-Wang"},"content":"![listImage](asset/list.png)  "},{"lineNumber":88,"author":{"gitId":"Criss-Wang"},"content":"   "},{"lineNumber":89,"author":{"gitId":"Criss-Wang"},"content":"***"},{"lineNumber":90,"author":{"gitId":"Criss-Wang"},"content":"   "},{"lineNumber":91,"author":{"gitId":"Criss-Wang"},"content":"### `Done` - Complete a task"},{"lineNumber":92,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":93,"author":{"gitId":"Criss-Wang"},"content":"Mark a task in the list as completed."},{"lineNumber":94,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":95,"author":{"gitId":"Criss-Wang"},"content":"Format: `done TASK_INDEX`"},{"lineNumber":96,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":97,"author":{"gitId":"Criss-Wang"},"content":"* `TASK_INDEX` is an _integer_ between 1 and length of list."},{"lineNumber":98,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":99,"author":{"gitId":"Criss-Wang"},"content":"Example of usage: "},{"lineNumber":100,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":101,"author":{"gitId":"Criss-Wang"},"content":"* `done 1` updates the status of the first task as \"done\", represented as `✓`.  "},{"lineNumber":102,"author":{"gitId":"Criss-Wang"},"content":"\u003cbr /\u003e"},{"lineNumber":103,"author":{"gitId":"Criss-Wang"},"content":"![doneImage](asset/done.png)  "},{"lineNumber":104,"author":{"gitId":"Criss-Wang"},"content":"   "},{"lineNumber":105,"author":{"gitId":"Criss-Wang"},"content":"***"},{"lineNumber":106,"author":{"gitId":"Criss-Wang"},"content":"   "},{"lineNumber":107,"author":{"gitId":"Criss-Wang"},"content":"### `Delete` - Delete a task"},{"lineNumber":108,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":109,"author":{"gitId":"Criss-Wang"},"content":"Delete a task in the list by its index."},{"lineNumber":110,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":111,"author":{"gitId":"Criss-Wang"},"content":"Format: `delete TASK_INDEX`"},{"lineNumber":112,"author":{"gitId":"Criss-Wang"},"content":"* `TASK_INDEX` is an _integer_ between 1 and length of list."},{"lineNumber":113,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":114,"author":{"gitId":"Criss-Wang"},"content":"Example of usage: "},{"lineNumber":115,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":116,"author":{"gitId":"Criss-Wang"},"content":"* `delete 1` delete the first task from the list.  "},{"lineNumber":117,"author":{"gitId":"Criss-Wang"},"content":"\u003cbr /\u003e"},{"lineNumber":118,"author":{"gitId":"Criss-Wang"},"content":"![deleteImage](asset/delete.png)  "},{"lineNumber":119,"author":{"gitId":"Criss-Wang"},"content":"   "},{"lineNumber":120,"author":{"gitId":"Criss-Wang"},"content":"***"},{"lineNumber":121,"author":{"gitId":"Criss-Wang"},"content":"   "},{"lineNumber":122,"author":{"gitId":"Criss-Wang"},"content":"### `Find` - Search for relevant tasks"},{"lineNumber":123,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":124,"author":{"gitId":"Criss-Wang"},"content":"Find the tasks containing certain keywords specified by the user."},{"lineNumber":125,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":126,"author":{"gitId":"Criss-Wang"},"content":"Format: `find KEYWORD`"},{"lineNumber":127,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":128,"author":{"gitId":"Criss-Wang"},"content":"* `KEYWORD` is __limited to 1 word__."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"Criss-Wang"},"content":"* `find sample` returns all tasks whose name contain the word `\u0027sample\u0027`."},{"lineNumber":133,"author":{"gitId":"Criss-Wang"},"content":"* Here the outputs are `sampleEvent` and `sampleDeadline`.  "},{"lineNumber":134,"author":{"gitId":"Criss-Wang"},"content":"\u003cbr /\u003e"},{"lineNumber":135,"author":{"gitId":"Criss-Wang"},"content":"![findImage](asset/find.png)  "},{"lineNumber":136,"author":{"gitId":"Criss-Wang"},"content":"   "},{"lineNumber":137,"author":{"gitId":"Criss-Wang"},"content":"***"},{"lineNumber":138,"author":{"gitId":"Criss-Wang"},"content":"   "},{"lineNumber":139,"author":{"gitId":"Criss-Wang"},"content":"### `Reminder` - Get notified of upcoming due"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"Criss-Wang"},"content":"Remind the use the upcoming events/deadlines sorted by their schedule."},{"lineNumber":142,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":143,"author":{"gitId":"Criss-Wang"},"content":"Format: `remind TASK_NUMBER`"},{"lineNumber":144,"author":{"gitId":"Criss-Wang"},"content":"* `TASK_NUMBER` is amount of upcoming tasks the user wants to know."},{"lineNumber":145,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":146,"author":{"gitId":"Criss-Wang"},"content":"Example of usage: "},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"Criss-Wang"},"content":"* `remind 1` returns the earliest 1 task the user hasn\u0027t completed."},{"lineNumber":149,"author":{"gitId":"Criss-Wang"},"content":"* If the task\u0027s scheduled time has past, the returned task will also indicate it."},{"lineNumber":150,"author":{"gitId":"Criss-Wang"},"content":"* Here the earliest task is `sampleEvet`, which should be done at _March 12, 2020_. The output also shows `[Schedule past!]` to remind user this event has past and not been done.  "},{"lineNumber":151,"author":{"gitId":"Criss-Wang"},"content":"\u003cbr /\u003e"},{"lineNumber":152,"author":{"gitId":"Criss-Wang"},"content":"![remindImage](asset/remind.png)"}],"authorContributionMap":{"Criss-Wang":132,"-":20}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"-"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"-"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"-"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"-"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"-"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"-"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"-"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"-"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"-"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"-"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"-"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"-"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"-"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"-"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"-"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\" \"-Dfile.encoding\u003dUTF-8\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"-"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"-"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"-"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"-"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"-"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"-"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"-"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"-"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":":init"},{"lineNumber":68,"author":{"gitId":"-"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":":win9xME_args"},{"lineNumber":73,"author":{"gitId":"-"},"content":"@rem Slurp the command line arguments."},{"lineNumber":74,"author":{"gitId":"-"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":75,"author":{"gitId":"-"},"content":"set _SKIP\u003d2"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":":win9xME_args_slurp"},{"lineNumber":78,"author":{"gitId":"-"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":":execute"},{"lineNumber":83,"author":{"gitId":"-"},"content":"@rem Setup the command line"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"@rem Execute Gradle"},{"lineNumber":88,"author":{"gitId":"-"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":":end"},{"lineNumber":91,"author":{"gitId":"-"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":92,"author":{"gitId":"-"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":":fail"},{"lineNumber":95,"author":{"gitId":"-"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":96,"author":{"gitId":"-"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":97,"author":{"gitId":"-"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":98,"author":{"gitId":"-"},"content":"exit /b 1"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":":mainEnd"},{"lineNumber":101,"author":{"gitId":"-"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":":omega"}],"authorContributionMap":{"Criss-Wang":1,"-":102}},{"path":"src/main/java/duke/CommandAgent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"import duke.command.Command;"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"import duke.task.Deadline;"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"import duke.task.Event;"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"import duke.task.Task;"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"import duke.task.TaskList;"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"import duke.task.Todo;"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"/** An agent to process incoming command and return the feedback */"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"public class CommandAgent {"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"    private static TaskList taskList;"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"    public CommandAgent(TaskList taskList) {"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"        CommandAgent.taskList \u003d taskList;"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"    public static int getListSize() {"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"        return taskList.getSize();"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"     * Handles the command taken from user input, execute it"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"     * and save the updated task list data to hard disk."},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"     * @param c The command parsed from user input."},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"     * @param ui The user interface where response is sent to."},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"     * @param storage The data storage handler."},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"    public void handleCommand(Command c, Ui ui, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"        String response \u003d executeCommand(c);"},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"        storage.save(taskList);"},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"        ui.showResponse(response);"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"     * Overloads command handler for final product."},{"lineNumber":42,"author":{"gitId":"Criss-Wang"},"content":"     * Executes the command, stores the updated task list and"},{"lineNumber":43,"author":{"gitId":"Criss-Wang"},"content":"     * sends a response string to the dialog box."},{"lineNumber":44,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"Criss-Wang"},"content":"     * @param c The command parsed from user input."},{"lineNumber":46,"author":{"gitId":"Criss-Wang"},"content":"     * @param storage The data storage handler."},{"lineNumber":47,"author":{"gitId":"Criss-Wang"},"content":"     * @return The response string to be displayed in dialog box."},{"lineNumber":48,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Criss-Wang"},"content":"    public String handleCommand(Command c, Storage storage) {"},{"lineNumber":50,"author":{"gitId":"Criss-Wang"},"content":"        String response \u003d executeCommand(c);"},{"lineNumber":51,"author":{"gitId":"Criss-Wang"},"content":"        storage.save(taskList);"},{"lineNumber":52,"author":{"gitId":"Criss-Wang"},"content":"        return response;"},{"lineNumber":53,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":55,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Criss-Wang"},"content":"     * Takes in the command and execute it based on the request from the command."},{"lineNumber":57,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"Criss-Wang"},"content":"     * @param command The command parsed from user input."},{"lineNumber":59,"author":{"gitId":"Criss-Wang"},"content":"     * @return A String response for the user."},{"lineNumber":60,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Criss-Wang"},"content":"    public static String executeCommand(Command command) {"},{"lineNumber":62,"author":{"gitId":"Criss-Wang"},"content":"        String commandRequest \u003d command.sendRequest();"},{"lineNumber":63,"author":{"gitId":"Criss-Wang"},"content":"        List\u003cString\u003e commandContents \u003d command.getContent();"},{"lineNumber":64,"author":{"gitId":"Criss-Wang"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"Criss-Wang"},"content":"            switch (commandRequest) {"},{"lineNumber":66,"author":{"gitId":"Criss-Wang"},"content":"            case \"end\":"},{"lineNumber":67,"author":{"gitId":"Criss-Wang"},"content":"                return generateEndResponse();"},{"lineNumber":68,"author":{"gitId":"Criss-Wang"},"content":"            case \"create\":"},{"lineNumber":69,"author":{"gitId":"Criss-Wang"},"content":"                executeCreateTask(commandContents);"},{"lineNumber":70,"author":{"gitId":"Criss-Wang"},"content":"                return generateCreateResponse();"},{"lineNumber":71,"author":{"gitId":"Criss-Wang"},"content":"            case \"retrieval\":"},{"lineNumber":72,"author":{"gitId":"Criss-Wang"},"content":"                return generateRetrievalResponse();"},{"lineNumber":73,"author":{"gitId":"Criss-Wang"},"content":"            case \"update\":"},{"lineNumber":74,"author":{"gitId":"Criss-Wang"},"content":"                int taskId \u003d executeUpdateTask(commandContents);"},{"lineNumber":75,"author":{"gitId":"Criss-Wang"},"content":"                return generateUpdateResponse(taskId);"},{"lineNumber":76,"author":{"gitId":"Criss-Wang"},"content":"            case \"delete\":"},{"lineNumber":77,"author":{"gitId":"Criss-Wang"},"content":"                Task deletedTask \u003d executeDeleteTask(commandContents);"},{"lineNumber":78,"author":{"gitId":"Criss-Wang"},"content":"                return generateDeleteResponse(deletedTask);"},{"lineNumber":79,"author":{"gitId":"Criss-Wang"},"content":"            case \"search\":"},{"lineNumber":80,"author":{"gitId":"Criss-Wang"},"content":"                String matchedTasks \u003d executeSearchTask(commandContents);"},{"lineNumber":81,"author":{"gitId":"Criss-Wang"},"content":"                return generateSearchResponse(matchedTasks);"},{"lineNumber":82,"author":{"gitId":"Criss-Wang"},"content":"            case \"remind\":"},{"lineNumber":83,"author":{"gitId":"Criss-Wang"},"content":"                List\u003cString\u003e mostRecentDues \u003d executeReminderTask(commandContents);"},{"lineNumber":84,"author":{"gitId":"Criss-Wang"},"content":"                return generateReminderResponse(mostRecentDues);"},{"lineNumber":85,"author":{"gitId":"Criss-Wang"},"content":"            default:"},{"lineNumber":86,"author":{"gitId":"Criss-Wang"},"content":"                throw new DukeException(\"Something is wrong. The command you type is not processed.\");"},{"lineNumber":87,"author":{"gitId":"Criss-Wang"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"Criss-Wang"},"content":"        } catch (DateTimeParseException | DukeException e) {"},{"lineNumber":89,"author":{"gitId":"Criss-Wang"},"content":"            return e.getMessage();"},{"lineNumber":90,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":93,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"Criss-Wang"},"content":"     * Executes the command which requests the bot to create a task and store it to task list."},{"lineNumber":95,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"Criss-Wang"},"content":"     * @param commandContents a list of task information used to create a new task."},{"lineNumber":97,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DateTimeParseException thrown from createTask process."},{"lineNumber":98,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DukeException if thrown from createTask process."},{"lineNumber":99,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"Criss-Wang"},"content":"    public static void executeCreateTask(List\u003cString\u003e commandContents) throws DateTimeParseException, DukeException {"},{"lineNumber":101,"author":{"gitId":"Criss-Wang"},"content":"        Task newTask \u003d createTask(commandContents);"},{"lineNumber":102,"author":{"gitId":"Criss-Wang"},"content":"        taskList \u003d taskList.addTask(newTask);"},{"lineNumber":103,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":105,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"Criss-Wang"},"content":"     * Executes the command which requests the bot to update a task as done."},{"lineNumber":107,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"Criss-Wang"},"content":"     * @param commandContents a list of task information used to update the task."},{"lineNumber":109,"author":{"gitId":"Criss-Wang"},"content":"     * @return An integer indicating the task getting updated."},{"lineNumber":110,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DukeException if thrown from markAsDone process."},{"lineNumber":111,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"Criss-Wang"},"content":"    public static int executeUpdateTask(List\u003cString\u003e commandContents) throws DukeException {"},{"lineNumber":113,"author":{"gitId":"Criss-Wang"},"content":"        int taskId \u003d Integer.parseInt(commandContents.get(0));"},{"lineNumber":114,"author":{"gitId":"Criss-Wang"},"content":"        taskList \u003d taskList.markAsDone(taskId);"},{"lineNumber":115,"author":{"gitId":"Criss-Wang"},"content":"        return taskId;"},{"lineNumber":116,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":118,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"Criss-Wang"},"content":"     * Executes the command which requests the bot to delete a task."},{"lineNumber":120,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"Criss-Wang"},"content":"     * @param commandContents a list of task information used to delete the task."},{"lineNumber":122,"author":{"gitId":"Criss-Wang"},"content":"     * @return The task getting deleted."},{"lineNumber":123,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"Criss-Wang"},"content":"    public static Task executeDeleteTask(List\u003cString\u003e commandContents) {"},{"lineNumber":125,"author":{"gitId":"Criss-Wang"},"content":"        int taskId \u003d Integer.parseInt(commandContents.get(0));"},{"lineNumber":126,"author":{"gitId":"Criss-Wang"},"content":"        Task deletedTask \u003d taskList.getTaskById(taskId);"},{"lineNumber":127,"author":{"gitId":"Criss-Wang"},"content":"        taskList \u003d taskList.deleteTask(taskId);"},{"lineNumber":128,"author":{"gitId":"Criss-Wang"},"content":"        return deletedTask;"},{"lineNumber":129,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":131,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"Criss-Wang"},"content":"     * Executes the command which requests the bot to search for tasks related to a particular keyword."},{"lineNumber":133,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"Criss-Wang"},"content":"     * @param commandContents a list of task information used to search for the related tasks."},{"lineNumber":135,"author":{"gitId":"Criss-Wang"},"content":"     * @return The string including all the matching tasks related to the keyword."},{"lineNumber":136,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"Criss-Wang"},"content":"    public static String executeSearchTask(List\u003cString\u003e commandContents) {"},{"lineNumber":138,"author":{"gitId":"Criss-Wang"},"content":"        String keyword \u003d commandContents.get(0);"},{"lineNumber":139,"author":{"gitId":"Criss-Wang"},"content":"        return taskList.findTasksByKeyword(keyword);"},{"lineNumber":140,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":142,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"Criss-Wang"},"content":"     * Executes the command which requests the bot the get the most recent k tasks where k is specified from input."},{"lineNumber":144,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"Criss-Wang"},"content":"     * @param commandContents a list of task information used to search for the related tasks."},{"lineNumber":146,"author":{"gitId":"Criss-Wang"},"content":"     * @return The list of string including the most recent k task, including those expired ones."},{"lineNumber":147,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"Criss-Wang"},"content":"    public static List\u003cString\u003e executeReminderTask(List\u003cString\u003e commandContents) {"},{"lineNumber":149,"author":{"gitId":"Criss-Wang"},"content":"        int countLimit \u003d Integer.parseInt(commandContents.get(0));"},{"lineNumber":150,"author":{"gitId":"Criss-Wang"},"content":"        return taskList.findTasksByDueDate(countLimit);"},{"lineNumber":151,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":153,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"Criss-Wang"},"content":"     * Creates different types of tasks based on the identifier stored in the taskInfo."},{"lineNumber":155,"author":{"gitId":"Criss-Wang"},"content":"     * The Parser has ensured no erroneous keyword will be sent to agent."},{"lineNumber":156,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":157,"author":{"gitId":"Criss-Wang"},"content":"     * @param taskInfo A list of String containing all the relevant information for the task."},{"lineNumber":158,"author":{"gitId":"Criss-Wang"},"content":"     * @return A correct type of Task object."},{"lineNumber":159,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DateTimeParseException If any schedule cannot be parsed by the LocalDate formatter."},{"lineNumber":160,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DukeException If the a task with the same name is already stored in the list or"},{"lineNumber":161,"author":{"gitId":"Criss-Wang"},"content":"     * the identifier is none of \"E\", \"D\" or \"T\"."},{"lineNumber":162,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"Criss-Wang"},"content":"    public static Task createTask(List\u003cString\u003e taskInfo) throws DateTimeParseException, DukeException {"},{"lineNumber":164,"author":{"gitId":"Criss-Wang"},"content":"        assert taskInfo.size() \u003e\u003d 2 : \"the list of task information should have at least 2 parts\";"},{"lineNumber":165,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":166,"author":{"gitId":"Criss-Wang"},"content":"        String identifier \u003d taskInfo.get(0);"},{"lineNumber":167,"author":{"gitId":"Criss-Wang"},"content":"        String name \u003d taskInfo.get(1);"},{"lineNumber":168,"author":{"gitId":"Criss-Wang"},"content":"        String schedule;"},{"lineNumber":169,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":170,"author":{"gitId":"Criss-Wang"},"content":"        assert identifier.equals(\"E\") | identifier.equals(\"D\") | identifier.equals(\"T\") : \"identifier is invalid\";"},{"lineNumber":171,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":172,"author":{"gitId":"Criss-Wang"},"content":"        if (!taskList.findTasksByKeyword(name).equals(\"\")) {"},{"lineNumber":173,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! This task has already been stored in the list!\");"},{"lineNumber":174,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":176,"author":{"gitId":"Criss-Wang"},"content":"        switch (identifier) {"},{"lineNumber":177,"author":{"gitId":"Criss-Wang"},"content":"        case \"E\":"},{"lineNumber":178,"author":{"gitId":"Criss-Wang"},"content":"            schedule \u003d taskInfo.get(2);"},{"lineNumber":179,"author":{"gitId":"Criss-Wang"},"content":"            LocalDate eventTime \u003d LocalDate.parse(schedule);"},{"lineNumber":180,"author":{"gitId":"Criss-Wang"},"content":"            return new Event(name, false, eventTime);"},{"lineNumber":181,"author":{"gitId":"Criss-Wang"},"content":"        case \"D\":"},{"lineNumber":182,"author":{"gitId":"Criss-Wang"},"content":"            schedule \u003d taskInfo.get(2);"},{"lineNumber":183,"author":{"gitId":"Criss-Wang"},"content":"            LocalDate deadlineTime \u003d LocalDate.parse(schedule);"},{"lineNumber":184,"author":{"gitId":"Criss-Wang"},"content":"            return new Deadline(name, false, deadlineTime);"},{"lineNumber":185,"author":{"gitId":"Criss-Wang"},"content":"        case \"T\":"},{"lineNumber":186,"author":{"gitId":"Criss-Wang"},"content":"            return new Todo(name, false);"},{"lineNumber":187,"author":{"gitId":"Criss-Wang"},"content":"        default:"},{"lineNumber":188,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! This type of task cannot be created by me!\");"},{"lineNumber":189,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":192,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":193,"author":{"gitId":"Criss-Wang"},"content":"     * Informs the user the program is ended."},{"lineNumber":194,"author":{"gitId":"Criss-Wang"},"content":"     * @return a message telling the user his/her exit message ends the program successfully."},{"lineNumber":195,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":196,"author":{"gitId":"Criss-Wang"},"content":"    public static String generateEndResponse() {"},{"lineNumber":197,"author":{"gitId":"Criss-Wang"},"content":"        return \"Bye. May the Force be with you!\";"},{"lineNumber":198,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":200,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"Criss-Wang"},"content":"     * Generates the response for a task creation."},{"lineNumber":202,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":203,"author":{"gitId":"Criss-Wang"},"content":"     * @return A String suggesting the completion of task creation."},{"lineNumber":204,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":205,"author":{"gitId":"Criss-Wang"},"content":"    public static String generateCreateResponse() {"},{"lineNumber":206,"author":{"gitId":"Criss-Wang"},"content":"        int taskId \u003d taskList.getSize();"},{"lineNumber":207,"author":{"gitId":"Criss-Wang"},"content":"        Task currentTask \u003d taskList.getTaskById(taskId);"},{"lineNumber":208,"author":{"gitId":"Criss-Wang"},"content":"        String result \u003d \"Got it. I\u0027ve added this task:\\n  \";"},{"lineNumber":209,"author":{"gitId":"Criss-Wang"},"content":"        result +\u003d currentTask;"},{"lineNumber":210,"author":{"gitId":"Criss-Wang"},"content":"        result +\u003d String.format(\"\\nNow you have %d tasks in the list.\", taskId);"},{"lineNumber":211,"author":{"gitId":"Criss-Wang"},"content":"        return result;"},{"lineNumber":212,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":214,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"Criss-Wang"},"content":"     * Generates the response for an update of task status."},{"lineNumber":216,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":217,"author":{"gitId":"Criss-Wang"},"content":"     * @param taskId The displayed id in the taskList."},{"lineNumber":218,"author":{"gitId":"Criss-Wang"},"content":"     * @return A String suggesting the completion of task update."},{"lineNumber":219,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":220,"author":{"gitId":"Criss-Wang"},"content":"    public static String generateUpdateResponse(int taskId) {"},{"lineNumber":221,"author":{"gitId":"Criss-Wang"},"content":"        assert taskId \u003e 0 : \"task id should be greater than 0\";"},{"lineNumber":222,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":223,"author":{"gitId":"Criss-Wang"},"content":"        Task currentTask \u003d taskList.getTaskById(taskId);"},{"lineNumber":224,"author":{"gitId":"Criss-Wang"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n  \" + currentTask;"},{"lineNumber":225,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":227,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":228,"author":{"gitId":"Criss-Wang"},"content":"     * Generates the response for a retrieval of tasks information."},{"lineNumber":229,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":230,"author":{"gitId":"Criss-Wang"},"content":"     * @return A String showing all the task information."},{"lineNumber":231,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":232,"author":{"gitId":"Criss-Wang"},"content":"    public static String generateRetrievalResponse() {"},{"lineNumber":233,"author":{"gitId":"Criss-Wang"},"content":"        if (taskList.getSize() \u003d\u003d 0) {"},{"lineNumber":234,"author":{"gitId":"Criss-Wang"},"content":"            return \"Sorry, there is no task stored, please enter some.\";"},{"lineNumber":235,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":236,"author":{"gitId":"Criss-Wang"},"content":"        String result \u003d \"Here are the tasks in your list:\";"},{"lineNumber":237,"author":{"gitId":"Criss-Wang"},"content":"        result +\u003d taskList.printTasks();"},{"lineNumber":238,"author":{"gitId":"Criss-Wang"},"content":"        return result;"},{"lineNumber":239,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":241,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":242,"author":{"gitId":"Criss-Wang"},"content":"     * Generates the response for a delete of task from the task list."},{"lineNumber":243,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":244,"author":{"gitId":"Criss-Wang"},"content":"     * @param deletedTask The delete task."},{"lineNumber":245,"author":{"gitId":"Criss-Wang"},"content":"     * @return A String suggesting the task has been deleted."},{"lineNumber":246,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":247,"author":{"gitId":"Criss-Wang"},"content":"    public static String generateDeleteResponse(Task deletedTask) {"},{"lineNumber":248,"author":{"gitId":"Criss-Wang"},"content":"        String result \u003d \"Noted. I\u0027ve removed this task:\\n  \";"},{"lineNumber":249,"author":{"gitId":"Criss-Wang"},"content":"        result +\u003d deletedTask;"},{"lineNumber":250,"author":{"gitId":"Criss-Wang"},"content":"        result +\u003d String.format(\"\\nNow you have %d tasks in the list.\", getListSize());"},{"lineNumber":251,"author":{"gitId":"Criss-Wang"},"content":"        return result;"},{"lineNumber":252,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":254,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":255,"author":{"gitId":"Criss-Wang"},"content":"     * Generates the response for the searching of all the tasks containing the specified keyword."},{"lineNumber":256,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":257,"author":{"gitId":"Criss-Wang"},"content":"     * @param matchedTasks The keyword which must be present in the desired task name."},{"lineNumber":258,"author":{"gitId":"Criss-Wang"},"content":"     * @return A String showing the response to the user with all the tasks desired."},{"lineNumber":259,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":260,"author":{"gitId":"Criss-Wang"},"content":"    public static String generateSearchResponse(String matchedTasks) {"},{"lineNumber":261,"author":{"gitId":"Criss-Wang"},"content":"        if (matchedTasks.equals(\"\")) {"},{"lineNumber":262,"author":{"gitId":"Criss-Wang"},"content":"            return \"Sorry, no matching task is found, try another keyword\";"},{"lineNumber":263,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":264,"author":{"gitId":"Criss-Wang"},"content":"        String result \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":265,"author":{"gitId":"Criss-Wang"},"content":"        result +\u003d matchedTasks;"},{"lineNumber":266,"author":{"gitId":"Criss-Wang"},"content":"        return result;"},{"lineNumber":267,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":269,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":270,"author":{"gitId":"Criss-Wang"},"content":"     * Generates the response based on the most recently due tasks identified."},{"lineNumber":271,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":272,"author":{"gitId":"Criss-Wang"},"content":"     * @param mostRecentDues The list of string containing the most recent due tasks."},{"lineNumber":273,"author":{"gitId":"Criss-Wang"},"content":"     * @return A String showing the response to the user with the most recent k tasks it wants."},{"lineNumber":274,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":275,"author":{"gitId":"Criss-Wang"},"content":"    public static String generateReminderResponse(List\u003cString\u003e mostRecentDues) {"},{"lineNumber":276,"author":{"gitId":"Criss-Wang"},"content":"        if (mostRecentDues.size() \u003c 1) {"},{"lineNumber":277,"author":{"gitId":"Criss-Wang"},"content":"            return \"Well done! you have no task to be completed recently!\";"},{"lineNumber":278,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":279,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":280,"author":{"gitId":"Criss-Wang"},"content":"        StringBuilder result \u003d new StringBuilder(\"Here are your most recent \");"},{"lineNumber":281,"author":{"gitId":"Criss-Wang"},"content":"        result.append(mostRecentDues.size()).append(\" tasks that you haven\u0027t done:\");"},{"lineNumber":282,"author":{"gitId":"Criss-Wang"},"content":"        mostRecentDues.forEach(result::append);"},{"lineNumber":283,"author":{"gitId":"Criss-Wang"},"content":"        return result.toString();"},{"lineNumber":284,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":285,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":285}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":" * An example of a custom control using FXML."},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":" * containing text from the speaker."},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":" */"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"public class DialogBox extends HBox {"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"    private Label dialog;"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"    private ImageView displayPicture;"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"            fxmlLoader.load();"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":"        dialog.setText(text);"},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":"        displayPicture.setImage(img);"},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"        displayPicture.setClip(new Circle(25, 25, 50));"},{"lineNumber":42,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":44,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Criss-Wang"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":46,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Criss-Wang"},"content":"    private void flip() {"},{"lineNumber":48,"author":{"gitId":"Criss-Wang"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":49,"author":{"gitId":"Criss-Wang"},"content":"        Collections.reverse(tmp);"},{"lineNumber":50,"author":{"gitId":"Criss-Wang"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":51,"author":{"gitId":"Criss-Wang"},"content":"        setAlignment(Pos.CENTER_LEFT);"},{"lineNumber":52,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":54,"author":{"gitId":"Criss-Wang"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"Criss-Wang"},"content":"        var userDialog \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"Criss-Wang"},"content":"        String userDialogStyle \u003d \"-fx-background-color: rgba(199,84,84,0.93); -fx-padding: 11 11 11 11; \""},{"lineNumber":57,"author":{"gitId":"Criss-Wang"},"content":"                + \"-fx-background-radius: 5; -fx-text-fill: #EDEDED;\";"},{"lineNumber":58,"author":{"gitId":"Criss-Wang"},"content":"        userDialog.dialog.setStyle(userDialogStyle);"},{"lineNumber":59,"author":{"gitId":"Criss-Wang"},"content":"        userDialog.dialog.setTranslateX(-5);"},{"lineNumber":60,"author":{"gitId":"Criss-Wang"},"content":"        return userDialog;"},{"lineNumber":61,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":63,"author":{"gitId":"Criss-Wang"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":64,"author":{"gitId":"Criss-Wang"},"content":"        var dukeDialog \u003d new DialogBox(text, img);"},{"lineNumber":65,"author":{"gitId":"Criss-Wang"},"content":"        String dukeDialogStyle \u003d \"-fx-background-color: rgba(87,178,245,0.96); -fx-padding: 11 11 11 11; \""},{"lineNumber":66,"author":{"gitId":"Criss-Wang"},"content":"                + \"-fx-background-radius: 5; -fx-text-fill: #002A66;\";"},{"lineNumber":67,"author":{"gitId":"Criss-Wang"},"content":"        dukeDialog.dialog.setStyle(dukeDialogStyle);"},{"lineNumber":68,"author":{"gitId":"Criss-Wang"},"content":"        dukeDialog.dialog.setTranslateX(5);"},{"lineNumber":69,"author":{"gitId":"Criss-Wang"},"content":"        dukeDialog.flip();"},{"lineNumber":70,"author":{"gitId":"Criss-Wang"},"content":"        return dukeDialog;"},{"lineNumber":71,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":72}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"/** Driver class for duke.Duke chat bot called \"Jarvis\" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"    private static final String STORAGE_PATH \u003d \"data/duke.txt\";"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"    private final Storage storage;"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"    private final CommandAgent agent;"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"    private final Ui ui;"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"     * Constructs an instance for Duke class."},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"     * Takes in a file path to initialize storage."},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"     * Initializes a command agent and a user interface."},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"     * @param filePath The path of task list data stored in the hard disk."},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"    public Duke(String filePath) {"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"        assert filePath.contains(\".txt\") : \"The storage path must contains a valid .txt file\";"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"        ui \u003d new Ui();"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"            tasks \u003d storage.load();"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"        } catch (DukeException e) {"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"            ui.showLoadingError();"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"        agent \u003d new CommandAgent(tasks);"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"     * Runs the program by taking in the command, handling them, storing data to"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"     * hard disk, and returning to users appropriate response."},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":"    public void run() {"},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"        ui.showWelcomeMessage();"},{"lineNumber":42,"author":{"gitId":"Criss-Wang"},"content":"        runUntilExit();"},{"lineNumber":43,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":45,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Criss-Wang"},"content":"     * Runs the program until an exit command is called by the user."},{"lineNumber":47,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Criss-Wang"},"content":"    public void runUntilExit() {"},{"lineNumber":49,"author":{"gitId":"Criss-Wang"},"content":"        boolean isExit \u003d false;"},{"lineNumber":50,"author":{"gitId":"Criss-Wang"},"content":"        while (!isExit) {"},{"lineNumber":51,"author":{"gitId":"Criss-Wang"},"content":"            try {"},{"lineNumber":52,"author":{"gitId":"Criss-Wang"},"content":"                ui.showLine();"},{"lineNumber":53,"author":{"gitId":"Criss-Wang"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":54,"author":{"gitId":"Criss-Wang"},"content":"                Command c \u003d Parser.parseCommand(fullCommand);"},{"lineNumber":55,"author":{"gitId":"Criss-Wang"},"content":"                agent.handleCommand(c, ui, storage);"},{"lineNumber":56,"author":{"gitId":"Criss-Wang"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":57,"author":{"gitId":"Criss-Wang"},"content":"            } catch (DukeException e) {"},{"lineNumber":58,"author":{"gitId":"Criss-Wang"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":59,"author":{"gitId":"Criss-Wang"},"content":"            } finally {"},{"lineNumber":60,"author":{"gitId":"Criss-Wang"},"content":"                ui.showLine();"},{"lineNumber":61,"author":{"gitId":"Criss-Wang"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":65,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"Criss-Wang"},"content":"     * Executes the \"Jarvis\" bot to run by loading the task list stored in \u003ckbd\u003edata/duke.txt\u003c/kbd\u003e."},{"lineNumber":67,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"Criss-Wang"},"content":"     * @param args The main() function arguments."},{"lineNumber":69,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":71,"author":{"gitId":"Criss-Wang"},"content":"        new Duke(STORAGE_PATH).run();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":74,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Criss-Wang"},"content":"     * Get the response from the chat bot given the user input as a command."},{"lineNumber":76,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"Criss-Wang"},"content":"     * @param input The command input user types in."},{"lineNumber":78,"author":{"gitId":"Criss-Wang"},"content":"     * @return The response from duke command agent."},{"lineNumber":79,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"Criss-Wang"},"content":"    public String getResponse(String input) {"},{"lineNumber":81,"author":{"gitId":"Criss-Wang"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"Criss-Wang"},"content":"            Command c \u003d Parser.parseCommand(input);"},{"lineNumber":83,"author":{"gitId":"Criss-Wang"},"content":"            return agent.handleCommand(c, storage);"},{"lineNumber":84,"author":{"gitId":"Criss-Wang"},"content":"        } catch (DukeException e) {"},{"lineNumber":85,"author":{"gitId":"Criss-Wang"},"content":"            return e.getMessage();"},{"lineNumber":86,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Criss-Wang":84,"-":4}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"/** A exception class DukeException to handle the exceptions in chat bot */"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"public class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"    public DukeException(String message) {"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"        super(message);"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":8}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"    private final Duke duke \u003d new Duke(\"data/duke.txt\");"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"    public void start(Stage stage) {"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"            stage.setScene(scene);"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":30}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.layout.BackgroundImage;"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.layout.BackgroundPosition;"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.layout.BackgroundRepeat;"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.layout.BackgroundSize;"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"    private VBox dialogContainer;"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"    private TextField userInput;"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"    private Button sendButton;"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"    private Duke duke;"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Vadar.png\"));"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Obiwan.png\"));"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"    private final BackgroundImage backgroundImage \u003d new BackgroundImage(new Image(\"/images/background.jpg\"),"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"            BackgroundRepeat.REPEAT,"},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"            BackgroundRepeat.REPEAT,"},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"            BackgroundPosition.CENTER,"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"            BackgroundSize.DEFAULT);"},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":"    private final Background dialogContainerBackground \u003d new Background(backgroundImage);"},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Criss-Wang"},"content":"     * Binds the scroll pane to the dialogContainer so as to set up the main layout."},{"lineNumber":43,"author":{"gitId":"Criss-Wang"},"content":"     * Start the dialog with a welcome message when the application is opened."},{"lineNumber":44,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Criss-Wang"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"Criss-Wang"},"content":"    public void initialize() {"},{"lineNumber":47,"author":{"gitId":"Criss-Wang"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":48,"author":{"gitId":"Criss-Wang"},"content":"        dialogContainer.setBackground(dialogContainerBackground);"},{"lineNumber":49,"author":{"gitId":"Criss-Wang"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.showGreeting(), dukeImage));"},{"lineNumber":50,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":52,"author":{"gitId":"Criss-Wang"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":53,"author":{"gitId":"Criss-Wang"},"content":"        duke \u003d d;"},{"lineNumber":54,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":56,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"Criss-Wang"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":58,"author":{"gitId":"Criss-Wang"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":59,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Criss-Wang"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitId":"Criss-Wang"},"content":"    private void handleUserInput() {"},{"lineNumber":62,"author":{"gitId":"Criss-Wang"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":63,"author":{"gitId":"Criss-Wang"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":64,"author":{"gitId":"Criss-Wang"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":65,"author":{"gitId":"Criss-Wang"},"content":"            DialogBox.getUserDialog(input, userImage),"},{"lineNumber":66,"author":{"gitId":"Criss-Wang"},"content":"            DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":67,"author":{"gitId":"Criss-Wang"},"content":"        );"},{"lineNumber":68,"author":{"gitId":"Criss-Wang"},"content":"        userInput.clear();"},{"lineNumber":69,"author":{"gitId":"Criss-Wang"},"content":"        if (input.toLowerCase().equals(\"bye\")) {"},{"lineNumber":70,"author":{"gitId":"Criss-Wang"},"content":"            Platform.exit();"},{"lineNumber":71,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":73}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"import duke.command.Command;"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"import duke.command.DoneCommand;"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"import duke.command.EventCommand;"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"import duke.command.ExitCommand;"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"import duke.command.FindCommand;"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"import duke.command.ListCommand;"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"import duke.command.ReminderCommand;"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"import duke.command.TodoCommand;"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"import duke.task.Deadline;"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"import duke.task.Event;"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"import duke.task.Task;"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"import duke.task.Todo;"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"/** A Parser object to parse the user input */"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"public class Parser {"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"     * Reads in user input and identify the correct type of duke.command for the input."},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"     * @param userInput A String from user\u0027s input."},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"     * @return A Command to be processed by the agent."},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DukeException If the command construction involves error or the DateTime parsing involves error."},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"    public static Command parseCommand(String userInput) throws DukeException {"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"        String[] inputParts \u003d userInput.split(\" \");"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"        String commandWord \u003d inputParts[0].toLowerCase();"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"        String content \u003d Parser.generateContent(inputParts);"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"            switch (commandWord) {"},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"            case \"done\":"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"                return new DoneCommand(content);"},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":"            case \"delete\":"},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":"                return new DeleteCommand(content);"},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"            case \"list\":"},{"lineNumber":42,"author":{"gitId":"Criss-Wang"},"content":"                return new ListCommand();"},{"lineNumber":43,"author":{"gitId":"Criss-Wang"},"content":"            case \"bye\":"},{"lineNumber":44,"author":{"gitId":"Criss-Wang"},"content":"                return new ExitCommand();"},{"lineNumber":45,"author":{"gitId":"Criss-Wang"},"content":"            case \"todo\":"},{"lineNumber":46,"author":{"gitId":"Criss-Wang"},"content":"                return new TodoCommand(content);"},{"lineNumber":47,"author":{"gitId":"Criss-Wang"},"content":"            case \"deadline\":"},{"lineNumber":48,"author":{"gitId":"Criss-Wang"},"content":"                return new DeadlineCommand(content);"},{"lineNumber":49,"author":{"gitId":"Criss-Wang"},"content":"            case \"event\":"},{"lineNumber":50,"author":{"gitId":"Criss-Wang"},"content":"                return new EventCommand(content);"},{"lineNumber":51,"author":{"gitId":"Criss-Wang"},"content":"            case \"find\":"},{"lineNumber":52,"author":{"gitId":"Criss-Wang"},"content":"                return new FindCommand(content);"},{"lineNumber":53,"author":{"gitId":"Criss-Wang"},"content":"            case \"remind\":"},{"lineNumber":54,"author":{"gitId":"Criss-Wang"},"content":"                return new ReminderCommand(content);"},{"lineNumber":55,"author":{"gitId":"Criss-Wang"},"content":"            default:"},{"lineNumber":56,"author":{"gitId":"Criss-Wang"},"content":"                throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":57,"author":{"gitId":"Criss-Wang"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"Criss-Wang"},"content":"        } catch (DukeException | DateTimeParseException e) {"},{"lineNumber":59,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":60,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":63,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"Criss-Wang"},"content":"     * Generates content for the input without the command word."},{"lineNumber":65,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"Criss-Wang"},"content":"     * @param inputParts User input parsed into an array of string."},{"lineNumber":67,"author":{"gitId":"Criss-Wang"},"content":"     * @return A String representing the parts of the user input without the command word."},{"lineNumber":68,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"Criss-Wang"},"content":"    public static String generateContent(String[] inputParts) {"},{"lineNumber":70,"author":{"gitId":"Criss-Wang"},"content":"        assert inputParts.length \u003e\u003d 1 : \"Input must not be empty.\";"},{"lineNumber":71,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":72,"author":{"gitId":"Criss-Wang"},"content":"        boolean hasOnlyOneWord \u003d inputParts.length \u003d\u003d 1;"},{"lineNumber":73,"author":{"gitId":"Criss-Wang"},"content":"        if (hasOnlyOneWord) {"},{"lineNumber":74,"author":{"gitId":"Criss-Wang"},"content":"            return \"\";"},{"lineNumber":75,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":77,"author":{"gitId":"Criss-Wang"},"content":"        StringBuilder result \u003d new StringBuilder(inputParts[1]);"},{"lineNumber":78,"author":{"gitId":"Criss-Wang"},"content":"        for (int i \u003d 2; i \u003c inputParts.length; i++) {"},{"lineNumber":79,"author":{"gitId":"Criss-Wang"},"content":"            result.append(\" \").append(inputParts[i]);"},{"lineNumber":80,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":82,"author":{"gitId":"Criss-Wang"},"content":"        return result.toString();"},{"lineNumber":83,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":85,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"Criss-Wang"},"content":"     * Parse the task from file and convert them into the correct type of task with all the information."},{"lineNumber":87,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"Criss-Wang"},"content":"     * @param taskInFileFormat The string format of a task recorded in the data file."},{"lineNumber":89,"author":{"gitId":"Criss-Wang"},"content":"     * @param formatter the formatter specified in the Storage."},{"lineNumber":90,"author":{"gitId":"Criss-Wang"},"content":"     * @return the task with right type and complete information."},{"lineNumber":91,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DukeException if the type of task recorded in the string cannot be identified."},{"lineNumber":92,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"Criss-Wang"},"content":"    public static Task parseTask(String taskInFileFormat, DateTimeFormatter formatter) throws DukeException {"},{"lineNumber":94,"author":{"gitId":"Criss-Wang"},"content":"        String[] taskContentParts \u003d taskInFileFormat.split(\" [|] \");"},{"lineNumber":95,"author":{"gitId":"Criss-Wang"},"content":"        String taskSchedule;"},{"lineNumber":96,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":97,"author":{"gitId":"Criss-Wang"},"content":"        assert taskContentParts.length \u003e\u003d 3 : \"The task information parsed must has at least 3 parts\";"},{"lineNumber":98,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":99,"author":{"gitId":"Criss-Wang"},"content":"        boolean taskIsDone \u003d taskContentParts[1].equals(\"1\");"},{"lineNumber":100,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":101,"author":{"gitId":"Criss-Wang"},"content":"        // Creates the task based on the type specified, only deadline and event tasks have time constraint."},{"lineNumber":102,"author":{"gitId":"Criss-Wang"},"content":"        switch(taskContentParts[0]) {"},{"lineNumber":103,"author":{"gitId":"Criss-Wang"},"content":"        case (\"T\"):"},{"lineNumber":104,"author":{"gitId":"Criss-Wang"},"content":"            return new Todo(taskContentParts[2], taskIsDone);"},{"lineNumber":105,"author":{"gitId":"Criss-Wang"},"content":"        case (\"D\"):"},{"lineNumber":106,"author":{"gitId":"Criss-Wang"},"content":"            taskSchedule \u003d taskContentParts[3];"},{"lineNumber":107,"author":{"gitId":"Criss-Wang"},"content":"            LocalDate deadlineTime \u003d LocalDate.parse(taskSchedule, formatter);"},{"lineNumber":108,"author":{"gitId":"Criss-Wang"},"content":"            return new Deadline(taskContentParts[2], taskIsDone, deadlineTime);"},{"lineNumber":109,"author":{"gitId":"Criss-Wang"},"content":"        case (\"E\"):"},{"lineNumber":110,"author":{"gitId":"Criss-Wang"},"content":"            taskSchedule \u003d taskContentParts[3];"},{"lineNumber":111,"author":{"gitId":"Criss-Wang"},"content":"            LocalDate eventTime \u003d LocalDate.parse(taskSchedule, formatter);"},{"lineNumber":112,"author":{"gitId":"Criss-Wang"},"content":"            return new Event(taskContentParts[2], taskIsDone, eventTime);"},{"lineNumber":113,"author":{"gitId":"Criss-Wang"},"content":"        default:"},{"lineNumber":114,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"Error in parsing the task. Incorrect task format recorded in the file\");"},{"lineNumber":115,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":117}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import java.nio.charset.Charset;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"import java.util.Locale;"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"import duke.task.Task;"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"import duke.task.TaskList;"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"/** Storage class to manage the saving of TaskList into hard disk */"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"    // Reads the datetime from the string representation of tasks as \"Month day year\" such as \"Jan 10 2020\"."},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"    private static final DateTimeFormatter STORAGE_FORMATTER \u003d"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"            DateTimeFormatter.ofPattern(\"MMM d yyyy\", Locale.ENGLISH);"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"    private final Path filePath;"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"    private final Path folderPath;"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"     * Initializes an instance of Storage based the file path passed to it."},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"     * @param filePath The path of file which stores data."},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"    public Storage(String filePath) {"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"        String currentRelativePath \u003d Paths.get(\".\").toString();"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"        this.filePath \u003d Paths.get(currentRelativePath, filePath);"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"        this.folderPath \u003d Paths.get(currentRelativePath, \"data\");"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"     * Loads the TaskList that is stored in \u003ckbd\u003edata/duke.text\u003c/kbd\u003e file."},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":"     * Handles the cases where either file or folder is not created."},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"     * @return A TaskList to be used by the program."},{"lineNumber":42,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DukeException If there are I/O exceptions occurred when reading the file."},{"lineNumber":43,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Criss-Wang"},"content":"    public TaskList load() throws DukeException {"},{"lineNumber":45,"author":{"gitId":"Criss-Wang"},"content":"        TaskList taskList;"},{"lineNumber":46,"author":{"gitId":"Criss-Wang"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"Criss-Wang"},"content":"            createPath();"},{"lineNumber":48,"author":{"gitId":"Criss-Wang"},"content":"            List\u003cString\u003e tasksInFile \u003d Files.readAllLines(filePath, Charset.defaultCharset());"},{"lineNumber":49,"author":{"gitId":"Criss-Wang"},"content":"            taskList \u003d this.loadTaskList(tasksInFile);"},{"lineNumber":50,"author":{"gitId":"Criss-Wang"},"content":"        } catch (IOException e) {"},{"lineNumber":51,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! I/O Error! Check your file property\""},{"lineNumber":52,"author":{"gitId":"Criss-Wang"},"content":"                    + Arrays.toString(e.getStackTrace()));"},{"lineNumber":53,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"Criss-Wang"},"content":"        return taskList;"},{"lineNumber":55,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":57,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Criss-Wang"},"content":"     * Creates the directory and/or file if they have not been created yet."},{"lineNumber":59,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"Criss-Wang"},"content":"     * @throws IOException If folderPath or filePath are parsed wrongly."},{"lineNumber":61,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Criss-Wang"},"content":"    public void createPath() throws IOException {"},{"lineNumber":63,"author":{"gitId":"Criss-Wang"},"content":"        if (Files.notExists(folderPath)) {"},{"lineNumber":64,"author":{"gitId":"Criss-Wang"},"content":"            Files.createDirectory(folderPath);"},{"lineNumber":65,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"Criss-Wang"},"content":"        if (Files.notExists(filePath)) {"},{"lineNumber":67,"author":{"gitId":"Criss-Wang"},"content":"            Files.createFile(filePath);"},{"lineNumber":68,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":71,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"Criss-Wang"},"content":"     * Returns a loaded TaskList for program data storage from the information in the text file."},{"lineNumber":73,"author":{"gitId":"Criss-Wang"},"content":"     * An empty TaskList is return if content in file is empty."},{"lineNumber":74,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"Criss-Wang"},"content":"     * @param tasksInFile The list of tasks stored in the file."},{"lineNumber":76,"author":{"gitId":"Criss-Wang"},"content":"     * @return A TaskList based on the tasks recorded in the file."},{"lineNumber":77,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DukeException if the tasks in data file are not parsed out correctly."},{"lineNumber":78,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"Criss-Wang"},"content":"    public TaskList loadTaskList(List\u003cString\u003e tasksInFile) throws DukeException {"},{"lineNumber":80,"author":{"gitId":"Criss-Wang"},"content":"        List\u003cTask\u003e tasksLoaded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":82,"author":{"gitId":"Criss-Wang"},"content":"        for (String s : tasksInFile) {"},{"lineNumber":83,"author":{"gitId":"Criss-Wang"},"content":"            // The array of task content contains task\u0027s type + whether it is done + name (+ time)."},{"lineNumber":84,"author":{"gitId":"Criss-Wang"},"content":"            tasksLoaded.add(Parser.parseTask(s, STORAGE_FORMATTER));"},{"lineNumber":85,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"Criss-Wang"},"content":"        return new TaskList(tasksLoaded);"},{"lineNumber":87,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":89,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"Criss-Wang"},"content":"     * Stores a Task List in a predetermined filePath."},{"lineNumber":91,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"Criss-Wang"},"content":"     * @param taskList The taskList object to be saved."},{"lineNumber":93,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"Criss-Wang"},"content":"    public void save(TaskList taskList) {"},{"lineNumber":95,"author":{"gitId":"Criss-Wang"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"Criss-Wang"},"content":"            List\u003cString\u003e formattedTasks \u003d taskList.formatTaskList();"},{"lineNumber":97,"author":{"gitId":"Criss-Wang"},"content":"            Files.write(this.filePath, formattedTasks);"},{"lineNumber":98,"author":{"gitId":"Criss-Wang"},"content":"        } catch (IOException e) {"},{"lineNumber":99,"author":{"gitId":"Criss-Wang"},"content":"            e.printStackTrace();"},{"lineNumber":100,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":102}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"/** User interface of the chat bot */"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"    private final Scanner sc;"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"    public Ui() {"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"        this.sc \u003d new Scanner(System.in);"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"     * Returns a welcome message in the chat bot."},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"     * @return The greeting String."},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"    public static String showGreeting() {"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"        return \"Hello! This is Obi-wan!\\n\""},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"                + \"What can I do for you Anakin?\";"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"     * Prints welcome message in the chat bot."},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"    public void showWelcomeMessage() {"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"        System.out.println(Ui.showGreeting());"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"     * Prints a separating line."},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"    public void showLine() {"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"     * Reads in a command input from user."},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":"     * @return A string representation of the command."},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"    public String readCommand() {"},{"lineNumber":42,"author":{"gitId":"Criss-Wang"},"content":"        return sc.nextLine();"},{"lineNumber":43,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":45,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Criss-Wang"},"content":"     * Prints the error message."},{"lineNumber":47,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"Criss-Wang"},"content":"     * @param errorMessage The error message generated."},{"lineNumber":49,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"Criss-Wang"},"content":"    public void showError(String errorMessage) {"},{"lineNumber":51,"author":{"gitId":"Criss-Wang"},"content":"        System.out.println(errorMessage);"},{"lineNumber":52,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":54,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"Criss-Wang"},"content":"     * Prints the loading error."},{"lineNumber":56,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Criss-Wang"},"content":"    public void showLoadingError() {"},{"lineNumber":58,"author":{"gitId":"Criss-Wang"},"content":"        System.out.println(\"OOPS!!! I\u0027m sorry, the file is not loaded correctly, please check its location\");"},{"lineNumber":59,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":61,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Criss-Wang"},"content":"     * Returns a response to the user if no error occurs."},{"lineNumber":63,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"Criss-Wang"},"content":"     * @param response The response representing the result of the command execution."},{"lineNumber":65,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"Criss-Wang"},"content":"    public void showResponse(String response) {"},{"lineNumber":67,"author":{"gitId":"Criss-Wang"},"content":"        System.out.println(response);"},{"lineNumber":68,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":69}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"/** A subclass of Command which sends request to add task to list */"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"public class AddCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"    protected static final String ADD_REQUEST \u003d \"create\";"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"    public String sendRequest() {"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"        return ADD_REQUEST;"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":14}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"/** Represents an executable command */"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"public abstract class Command {"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"    protected String content;"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"    public Command() {"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"        this.content \u003d \"\";"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"     * Sends a request to the command agent."},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"     * @return A String representing the request content."},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"    public abstract String sendRequest();"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"     * Checks if the command is an ExitCommand by reviewing its content."},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"     * @return A boolean value, true if it is an ExitCommand, false otherwise."},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"    public boolean isExit() {"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"        return false;"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"     * Returns the content of the command; content differ for each type of command."},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"     * No content for the general Command."},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"     * @return A list of String containing relevant content from the command."},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"    public List\u003cString\u003e getContent() {"},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"        List\u003cString\u003e contentList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"        contentList.add(this.content);"},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":"        return contentList;"},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":41}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"/** A subclass of Command which adds a deadline to the taskList */"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"public class DeadlineCommand extends AddCommand {"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"    private final String name;"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"    private final String schedule;"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"     * Creates a DeadlineCommand."},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"     * @param content The task information supplied by the user."},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DukeException If the content has missing name or schedule or the format does not contain /by."},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"    public DeadlineCommand(String content) throws DukeException {"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"        if (!content.contains(\"/by\")) {"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! The information contains invalid delimiter\");"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"        // The expected content parts are task\u0027s name and schedule."},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"        String[] contentParts \u003d content.split(\" /by \");"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"        if (contentParts[0].equals(\"\") || contentParts[1].equals(\"\")) {"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! The information of a deadline cannot be empty.\");"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"        this.name \u003d contentParts[0];"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"        this.schedule \u003d contentParts[1];"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":"    public List\u003cString\u003e getContent() {"},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":"        List\u003cString\u003e contentList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"        contentList.add(\"D\");"},{"lineNumber":42,"author":{"gitId":"Criss-Wang"},"content":"        contentList.add(this.name);"},{"lineNumber":43,"author":{"gitId":"Criss-Wang"},"content":"        contentList.add(this.schedule);"},{"lineNumber":44,"author":{"gitId":"Criss-Wang"},"content":"        return contentList;"},{"lineNumber":45,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":46}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import duke.CommandAgent;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import duke.DukeException;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"/** A subclass of Command which sends request to mark a task in list as done */"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"    protected static final String DELETE_REQUEST \u003d \"delete\";"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"     * Creates a DeleteCommand."},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"     * @param content The task information supplied by the user."},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DukeException If the content has no input or improper input."},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"    public DeleteCommand(String content) throws DukeException {"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"        if (content.isEmpty()) {"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! Please enter a value, try \u0027delete + some valid index\u0027\");"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"        } else if (!(Character.isDigit(content.charAt(0)))) {"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! Please enter a numerical value\");"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"        } else if (Integer.parseInt(content) \u003e CommandAgent.getListSize() | Integer.parseInt(content) \u003c\u003d 0) {"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! Index exceeds length of the list. Please enter a valid index\");"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"        this.content \u003d content;"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"    public String sendRequest() {"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"        return DELETE_REQUEST;"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":34}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import duke.CommandAgent;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import duke.DukeException;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"/** A subclass of Command which sends request to mark a task in list as done */"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"public class DoneCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"    private static final String DONE_REQUEST \u003d \"update\";"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"     * Creates a DoneCommand."},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"     * @param content The task information supplied by the user."},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DukeException If the content has no input or improper input."},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"    public DoneCommand(String content) throws DukeException {"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"        if (content.isEmpty()) {"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! Please enter a value\");"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"        } else if (!(Character.isDigit(content.charAt(0)))) {"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! Please enter a numerical value\");"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"        } else if (Integer.parseInt(content) \u003e CommandAgent.getListSize()) {"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! Please enter a valid index\");"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"        } else if (Integer.parseInt(content) \u003c\u003d 0) {"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! Please enter a valid index\");"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"        this.content \u003d content;"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"    public String sendRequest() {"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"        return DONE_REQUEST;"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":36}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"/** A subclass of Command which adds an event to the taskList */"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"public class EventCommand extends AddCommand {"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"    private final String name;"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"    private final String schedule;"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"     * Creates a EventCommand."},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"     * @param content The task information supplied by the user."},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DukeException If the content has missing name or schedule or the format does not contain /at."},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"    public EventCommand(String content) throws DukeException {"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"        if (!content.contains(\"/at\")) {"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! The information contains invalid delimiter\");"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"        // The expected content parts are task\u0027s name and schedule."},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"        String[] contentParts \u003d content.split(\" /at \");"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"        if (contentParts[0].equals(\"\") || contentParts[1].equals(\"\")) {"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! The information of a event cannot be empty.\");"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"        this.name \u003d contentParts[0];"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"        this.schedule \u003d contentParts[1];"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":"    public List\u003cString\u003e getContent() {"},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":"        List\u003cString\u003e contentList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"        contentList.add(\"E\");"},{"lineNumber":42,"author":{"gitId":"Criss-Wang"},"content":"        contentList.add(this.name);"},{"lineNumber":43,"author":{"gitId":"Criss-Wang"},"content":"        contentList.add(this.schedule);"},{"lineNumber":44,"author":{"gitId":"Criss-Wang"},"content":"        return contentList;"},{"lineNumber":45,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":46}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"/** A subclass of Command which sends request to terminate the bot */"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"public class ExitCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"    protected static final String EXIT_REQUEST \u003d \"end\";"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"    public ExitCommand() {"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"        super();"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"    public String sendRequest() {"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"        return EXIT_REQUEST;"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"    public boolean isExit() {"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"        return true;"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":26}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"/** A subclass of Command which find a task via a keyword */"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"    protected static final String FIND_REQUEST \u003d \"search\";"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"    private static final int KEYWORD_LENGTH \u003d 1;"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"    private final String keyword;"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"     * Creates a FindCommand."},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"     * @param content The keyword supplied by the user."},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DukeException If no keyword is supplied or more than 1 keyword is supplied."},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"    public FindCommand(String content) throws DukeException {"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"        if (content.isEmpty()) {"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! Please enter some keyword for me to find\");"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"        // The expected content part is task\u0027s index in the task list."},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"        String[] contentParts \u003d content.split(\" \");"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"        if (contentParts[0].equals(\"\")) {"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! Please enter a keyword\");"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"        } else if (contentParts.length \u003e KEYWORD_LENGTH) {"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! Please enter one keyword at a time\");"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"        this.keyword \u003d contentParts[0];"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"    public String sendRequest() {"},{"lineNumber":42,"author":{"gitId":"Criss-Wang"},"content":"        return FIND_REQUEST;"},{"lineNumber":43,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":45,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":47,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"Criss-Wang"},"content":"    public List\u003cString\u003e getContent() {"},{"lineNumber":50,"author":{"gitId":"Criss-Wang"},"content":"        List\u003cString\u003e contentList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitId":"Criss-Wang"},"content":"        contentList.add(this.keyword);"},{"lineNumber":52,"author":{"gitId":"Criss-Wang"},"content":"        return contentList;"},{"lineNumber":53,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":54}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"/** A subclass of Command which sends request to show list */"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"public class ListCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"    protected static final String LIST_REQUEST \u003d \"retrieval\";"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"    public String sendRequest() {"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"        return LIST_REQUEST;"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":14}},{"path":"src/main/java/duke/command/ReminderCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import duke.CommandAgent;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import duke.DukeException;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"public class ReminderCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"    private static final String REMINDER_REQUEST \u003d \"remind\";"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"     * Creates a ReminderCommand."},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"     * @param content The task information supplied by the user."},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DukeException If the content has no input or improper input."},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"    public ReminderCommand(String content) throws DukeException {"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"        int numberOfTasks \u003d CommandAgent.getListSize();"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"        if (content.isEmpty()) {"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! Please enter a digit no more than \" + numberOfTasks);"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"        } else if (!(Character.isDigit(content.charAt(0)))) {"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! Please enter a numerical value\");"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"        } else if (Integer.parseInt(content) \u003e numberOfTasks) {"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! We don\u0027t have that may tasks yet\");"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"        } else if (Integer.parseInt(content) \u003c\u003d 0) {"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! You may want to check for at least 1 most recent task to do\");"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"        this.content \u003d content;"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"    public String sendRequest() {"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"        return REMINDER_REQUEST;"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":36}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"/** A subclass of Command which adds a todo to the taskList */"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"public class TodoCommand extends AddCommand {"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"    private final String name;"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"     * Creates a TodoCommand."},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"     * @param content The task information supplied by the user."},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DukeException If the content is missing."},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"    public TodoCommand(String content) throws DukeException {"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"        if (content.equals(\"\")) {"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! The name of a todo cannot be empty.\");"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"        this.name \u003d content;"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"    public List\u003cString\u003e getContent() {"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"        List\u003cString\u003e contentList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"        contentList.add(\"T\");"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"        contentList.add(this.name);"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"        return contentList;"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":36}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"/** Represents an deadline task */"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"     * Creates an instance of deadline object."},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"     * @param name The name of the deadline task."},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"     * @param isDone The boolean indicating if the task is done."},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"     * @param schedule The deadline of the task."},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"    public Deadline(String name, boolean isDone, LocalDate schedule) {"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"        super(name, isDone);"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"        this.schedule \u003d schedule;"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"    public Deadline complete() {"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"        return new Deadline(this.name, true, this.schedule);"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"    public String formatTask() {"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"        int isDoneSignal \u003d this.isDoneTask() ? 1 : 0;"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"        return \"D | \" + isDoneSignal + \" | \" + this.name + \" | \" + this.getSchedule();"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"        String taskString \u003d super.toString();"},{"lineNumber":42,"author":{"gitId":"Criss-Wang"},"content":"        return \"[D]\" + taskString + \" (by: \" + this.getSchedule() + \")\";"},{"lineNumber":43,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":44}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"/** Represents an event task */"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"     * Initializes an event task."},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"     * @param name The name of the event task."},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"     * @param isDone The boolean indicating if the task is done."},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"     * @param schedule The time to do the event."},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"    public Event(String name, boolean isDone, LocalDate schedule) {"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"        super(name, isDone);"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"        this.schedule \u003d schedule;"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"    public Event complete() {"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"        return new Event(this.name, true, this.schedule);"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"    public String formatTask() {"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"        int isDoneSignal \u003d this.isDoneTask() ? 1 : 0;"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"        return \"E | \" + isDoneSignal + \" | \" + this.name + \" | \" + this.getSchedule();"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"        String taskString \u003d super.toString();"},{"lineNumber":42,"author":{"gitId":"Criss-Wang"},"content":"        return \"[E]\" + taskString + \" (at: \" + this.getSchedule() + \")\";"},{"lineNumber":43,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":44}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"import java.util.Locale;"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"/** Task is a class for each task specified from the user commands */"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"    protected static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\", Locale.ENGLISH);"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"    protected final String name;"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"    protected final boolean isDone;"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"    protected LocalDate schedule;"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"     * Initializes a task by checking its name and whether it is done."},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"     * @param name The name of the task."},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"     * @param isDone The boolean indicating if the task is done."},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"    public Task(String name, boolean isDone) {"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"        this.name \u003d name;"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"        this.schedule \u003d null;"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"     * Gets the name of the task."},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"     * @return A String showing the name of the task."},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"    public String getName() {"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"        return this.name;"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"     * Gets the status of the task."},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"     * @return A boolean indicating if the task is done."},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":"    public boolean isDoneTask() {"},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"        return this.isDone;"},{"lineNumber":42,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":44,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Criss-Wang"},"content":"     * Marks the status of the task as done."},{"lineNumber":46,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"Criss-Wang"},"content":"     * @return A new Task object with the status updated to \"done\"."},{"lineNumber":48,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Criss-Wang"},"content":"    public abstract Task complete();"},{"lineNumber":50,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":51,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Criss-Wang"},"content":"     * Formats the task for data output display in the duke.txt file."},{"lineNumber":53,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"Criss-Wang"},"content":"     * @return A string to represent the task."},{"lineNumber":55,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"Criss-Wang"},"content":"    public abstract String formatTask();"},{"lineNumber":57,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":58,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Criss-Wang"},"content":"     * Check if a task is stored with some schedule information."},{"lineNumber":60,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"Criss-Wang"},"content":"     * @return True only if it is a deadline or an event."},{"lineNumber":62,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"Criss-Wang"},"content":"    public boolean isScheduled() {"},{"lineNumber":64,"author":{"gitId":"Criss-Wang"},"content":"        return this.schedule !\u003d null;"},{"lineNumber":65,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":67,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Criss-Wang"},"content":"     * Return the schedule of the task (if exists) in LocalDate format."},{"lineNumber":69,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"Criss-Wang"},"content":"     * @return The LocalDate representation of the task\u0027s schedule."},{"lineNumber":71,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"Criss-Wang"},"content":"    public LocalDate getScheduleInLocalDate() {"},{"lineNumber":73,"author":{"gitId":"Criss-Wang"},"content":"        assert this.schedule !\u003d null : \"The task without a schedule should not use getScheduleInLocalDate method\";"},{"lineNumber":74,"author":{"gitId":"Criss-Wang"},"content":"        return this.schedule;"},{"lineNumber":75,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":77,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"Criss-Wang"},"content":"     * Convert the schedule events to a string with a check on whether the scheduled date has past."},{"lineNumber":79,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"Criss-Wang"},"content":"     * @return a string with the task\u0027s name and schedule, and an indication of whether the task expires."},{"lineNumber":81,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"Criss-Wang"},"content":"    public String toStringWithExpiryCheck() {"},{"lineNumber":83,"author":{"gitId":"Criss-Wang"},"content":"        assert this.schedule !\u003d null : \"The task without a schedule should not use toStringWithExpiryCheck method\";"},{"lineNumber":84,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":85,"author":{"gitId":"Criss-Wang"},"content":"        int hasExpiredSignal \u003d this.schedule.compareTo(LocalDate.now());"},{"lineNumber":86,"author":{"gitId":"Criss-Wang"},"content":"        String expirySign \u003d hasExpiredSignal \u003c 0 ? \"[Schedule past!]\" : \"\";"},{"lineNumber":87,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":88,"author":{"gitId":"Criss-Wang"},"content":"        return this.toString() + expirySign;"},{"lineNumber":89,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":91,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"Criss-Wang"},"content":"     * Returns a string representation of the task\u0027s schedule in the pattern \"MMM d yyyy\"."},{"lineNumber":93,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"Criss-Wang"},"content":"     * @return The string representation of the schedule."},{"lineNumber":95,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"Criss-Wang"},"content":"    public String getSchedule() {"},{"lineNumber":97,"author":{"gitId":"Criss-Wang"},"content":"        assert this.schedule !\u003d null : \"The task without a schedule should not use getSchedule method\";"},{"lineNumber":98,"author":{"gitId":"Criss-Wang"},"content":"        return this.schedule.format(Task.FORMATTER);"},{"lineNumber":99,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":101,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"Criss-Wang"},"content":"     * Displays the task object as a string"},{"lineNumber":103,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"Criss-Wang"},"content":"     * @return The status of the task followed by the name"},{"lineNumber":105,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"Criss-Wang"},"content":"    public String toString() {"},{"lineNumber":108,"author":{"gitId":"Criss-Wang"},"content":"        String checkbox \u003d \"[\" + (this.isDoneTask() ? \"\\u2713\" : \"\\u2718\") + \"]\";"},{"lineNumber":109,"author":{"gitId":"Criss-Wang"},"content":"        return checkbox + \" \" + this.getName();"},{"lineNumber":110,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":111}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"import java.util.stream.IntStream;"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"import duke.DukeException;"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"/** TaskList stores a list of tasks and the corresponding operations on it */"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"    private final List\u003cTask\u003e tasks;"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"     * Gets the number of elements in the task list."},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"     * @return The number of elements in the task list."},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"    public int getSize() {"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"        return this.tasks.size();"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"     * Gets the task in the list by its id."},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"     * @param taskId The displayed id in the list."},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"     * @return The Task associated with id."},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"    public Task getTaskById(int taskId) {"},{"lineNumber":39,"author":{"gitId":"Criss-Wang"},"content":"        int index \u003d taskId - 1;"},{"lineNumber":40,"author":{"gitId":"Criss-Wang"},"content":"        return this.tasks.get(index);"},{"lineNumber":41,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":43,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Criss-Wang"},"content":"     * Adds a new task to the list of tasks."},{"lineNumber":45,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Criss-Wang"},"content":"     * @param newTask The new task to be added."},{"lineNumber":47,"author":{"gitId":"Criss-Wang"},"content":"     * @return A new TaskList containing all the old tasks and the new task."},{"lineNumber":48,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Criss-Wang"},"content":"    public TaskList addTask(Task newTask) {"},{"lineNumber":50,"author":{"gitId":"Criss-Wang"},"content":"        List\u003cTask\u003e newTaskList \u003d this.tasks;"},{"lineNumber":51,"author":{"gitId":"Criss-Wang"},"content":"        newTaskList.add(newTask);"},{"lineNumber":52,"author":{"gitId":"Criss-Wang"},"content":"        return new TaskList(newTaskList);"},{"lineNumber":53,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":55,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Criss-Wang"},"content":"     * Deletes a task in the list via its taskId."},{"lineNumber":57,"author":{"gitId":"Criss-Wang"},"content":"     * The taskId is the index of the task in the task list."},{"lineNumber":58,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"Criss-Wang"},"content":"     * @param taskId The displayed id in the list."},{"lineNumber":60,"author":{"gitId":"Criss-Wang"},"content":"     * @return A new TaskList containing all the update tasks."},{"lineNumber":61,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Criss-Wang"},"content":"    public TaskList deleteTask(int taskId) {"},{"lineNumber":63,"author":{"gitId":"Criss-Wang"},"content":"        int index \u003d taskId - 1;"},{"lineNumber":64,"author":{"gitId":"Criss-Wang"},"content":"        List\u003cTask\u003e newTaskList \u003d this.tasks;"},{"lineNumber":65,"author":{"gitId":"Criss-Wang"},"content":"        newTaskList.remove(index);"},{"lineNumber":66,"author":{"gitId":"Criss-Wang"},"content":"        return new TaskList(newTaskList);"},{"lineNumber":67,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":69,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"Criss-Wang"},"content":"     * Marks the task with the input id in the list as done."},{"lineNumber":71,"author":{"gitId":"Criss-Wang"},"content":"     * The taskId is the index of the task in the task list."},{"lineNumber":72,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"Criss-Wang"},"content":"     * @param taskId The displayed id in the list."},{"lineNumber":74,"author":{"gitId":"Criss-Wang"},"content":"     * @return A new TaskList containing all the update tasks."},{"lineNumber":75,"author":{"gitId":"Criss-Wang"},"content":"     * @throws DukeException If the task is already done."},{"lineNumber":76,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"Criss-Wang"},"content":"    public TaskList markAsDone(int taskId) throws DukeException {"},{"lineNumber":78,"author":{"gitId":"Criss-Wang"},"content":"        Task currentTask \u003d this.getTaskById(taskId);"},{"lineNumber":79,"author":{"gitId":"Criss-Wang"},"content":"        if (currentTask.isDone) {"},{"lineNumber":80,"author":{"gitId":"Criss-Wang"},"content":"            throw new DukeException(\"OOPS!!! This task is already done!\");"},{"lineNumber":81,"author":{"gitId":"Criss-Wang"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":83,"author":{"gitId":"Criss-Wang"},"content":"        int index \u003d taskId - 1;"},{"lineNumber":84,"author":{"gitId":"Criss-Wang"},"content":"        Task doneTask \u003d currentTask.complete();"},{"lineNumber":85,"author":{"gitId":"Criss-Wang"},"content":"        List\u003cTask\u003e newTaskList \u003d this.tasks;"},{"lineNumber":86,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":87,"author":{"gitId":"Criss-Wang"},"content":"        newTaskList.set(index, doneTask);"},{"lineNumber":88,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":89,"author":{"gitId":"Criss-Wang"},"content":"        return new TaskList(newTaskList);"},{"lineNumber":90,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":92,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"Criss-Wang"},"content":"     * Prints all the tasks."},{"lineNumber":94,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"Criss-Wang"},"content":"     * @return A String shows all tasks in a formatted way."},{"lineNumber":96,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Criss-Wang"},"content":"    public String printTasks() {"},{"lineNumber":98,"author":{"gitId":"Criss-Wang"},"content":"        return IntStream.range(0, this.getSize())"},{"lineNumber":99,"author":{"gitId":"Criss-Wang"},"content":"                .mapToObj((index) -\u003e String.format(\"\\n%d.%s\", index + 1, tasks.get(index)))"},{"lineNumber":100,"author":{"gitId":"Criss-Wang"},"content":"                .reduce((a, b) -\u003e a + b)"},{"lineNumber":101,"author":{"gitId":"Criss-Wang"},"content":"                .orElse(\"\");"},{"lineNumber":102,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":104,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"Criss-Wang"},"content":"     * Formats the tasks in task list to the style specified in level-7."},{"lineNumber":106,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"Criss-Wang"},"content":"     * @return A list of string, each representing a formatted task in the task list."},{"lineNumber":108,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"Criss-Wang"},"content":"    public List\u003cString\u003e formatTaskList() {"},{"lineNumber":110,"author":{"gitId":"Criss-Wang"},"content":"        List\u003cString\u003e formattedTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":111,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":112,"author":{"gitId":"Criss-Wang"},"content":"        tasks.forEach(task -\u003e formattedTaskList.add(task.formatTask()));"},{"lineNumber":113,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":114,"author":{"gitId":"Criss-Wang"},"content":"        return formattedTaskList;"},{"lineNumber":115,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":117,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"Criss-Wang"},"content":"     * Finds all the tasks containing the keyword"},{"lineNumber":119,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"Criss-Wang"},"content":"     * @param keyword The keyword which must be present in the desired task name."},{"lineNumber":121,"author":{"gitId":"Criss-Wang"},"content":"     * @return A String including all the tasks found whose name containing the keyword."},{"lineNumber":122,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"Criss-Wang"},"content":"    public String findTasksByKeyword(String keyword) {"},{"lineNumber":124,"author":{"gitId":"Criss-Wang"},"content":"        List\u003cTask\u003e tasksWithKeyword \u003d this.tasks.stream()"},{"lineNumber":125,"author":{"gitId":"Criss-Wang"},"content":"                .filter(task -\u003e task.getName().contains(keyword))"},{"lineNumber":126,"author":{"gitId":"Criss-Wang"},"content":"                .collect(Collectors.toList());"},{"lineNumber":127,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":128,"author":{"gitId":"Criss-Wang"},"content":"        return IntStream.range(0, tasksWithKeyword.size())"},{"lineNumber":129,"author":{"gitId":"Criss-Wang"},"content":"                .mapToObj((index) -\u003e String.format(\"\\n%d. %s\", index + 1, tasksWithKeyword.get(index)))"},{"lineNumber":130,"author":{"gitId":"Criss-Wang"},"content":"                .reduce((a, b) -\u003e a + b)"},{"lineNumber":131,"author":{"gitId":"Criss-Wang"},"content":"                .orElse(\"\");"},{"lineNumber":132,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":134,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"Criss-Wang"},"content":"     * Finds all the k tasks with most recent due dates where k \u003d countLimit;"},{"lineNumber":136,"author":{"gitId":"Criss-Wang"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"Criss-Wang"},"content":"     * @param countLimit the number of task the user wants to know about."},{"lineNumber":138,"author":{"gitId":"Criss-Wang"},"content":"     * @return A list of string including all the k tasks with most recent due dates."},{"lineNumber":139,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"Criss-Wang"},"content":"    public List\u003cString\u003e findTasksByDueDate(int countLimit) {"},{"lineNumber":141,"author":{"gitId":"Criss-Wang"},"content":"        List\u003cTask\u003e scheduledTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":142,"author":{"gitId":"Criss-Wang"},"content":"        tasks.forEach(task -\u003e {"},{"lineNumber":143,"author":{"gitId":"Criss-Wang"},"content":"            if (task.isScheduled() \u0026\u0026 !task.isDoneTask()) {"},{"lineNumber":144,"author":{"gitId":"Criss-Wang"},"content":"                scheduledTasks.add(task);"},{"lineNumber":145,"author":{"gitId":"Criss-Wang"},"content":"            }"},{"lineNumber":146,"author":{"gitId":"Criss-Wang"},"content":"        });"},{"lineNumber":147,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":148,"author":{"gitId":"Criss-Wang"},"content":"        scheduledTasks.sort(Comparator.comparing(Task::getScheduleInLocalDate));"},{"lineNumber":149,"author":{"gitId":"Criss-Wang"},"content":"        int k \u003d Math.min(scheduledTasks.size(), countLimit);"},{"lineNumber":150,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":151,"author":{"gitId":"Criss-Wang"},"content":"        return IntStream.range(0, k)"},{"lineNumber":152,"author":{"gitId":"Criss-Wang"},"content":"                .mapToObj((index) -\u003e"},{"lineNumber":153,"author":{"gitId":"Criss-Wang"},"content":"                        String.format(\"\\n%d. %s\", index + 1, scheduledTasks.get(index).toStringWithExpiryCheck()))"},{"lineNumber":154,"author":{"gitId":"Criss-Wang"},"content":"                .collect(Collectors.toList());"},{"lineNumber":155,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":156}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"/** Represents a todo task */"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"public class Todo extends Task {"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"    public Todo(String name, boolean isDone) {"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"        super(name, isDone);"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"    public Todo complete() {"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"        return new Todo(this.name, true);"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"    public String formatTask() {"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"        int isDoneSignal \u003d this.isDoneTask() ? 1 : 0;"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"        return \"T | \" + isDoneSignal + \" | \" + this.name;"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"     * {@inheritDoc}"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"        String taskString \u003d super.toString();"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"        return \"[T]\" + taskString;"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":34}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"\u003c?import javafx.geometry.*?\u003e"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"\u003c?import javafx.scene.image.*?\u003e"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\""},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\""},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"         xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"/\u003e"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"    \u003c/children\u003e"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"    \u003cpadding\u003e"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"20.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"    \u003c/padding\u003e"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Criss-Wang":18}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"            prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"            xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"    \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"10.0\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\""},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"                   prefHeight\u003d\"41.0\" prefWidth\u003d\"300.0\" AnchorPane.bottomAnchor\u003d\"1.0\""},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"                   style \u003d \"-fx-background-color: rgba(82,82,82,0.8);"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"                            -fx-text-fill: #EDEDED;"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"                            -fx-background-insets: 3px;"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"                            -fx-background-radius: 10;\"/\u003e"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"315.0\" layoutY\u003d\"558.0\""},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"                mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"70.0\" text\u003d\"Send\""},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"                style \u003d \"-fx-background-insets: 3px;"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"                         -fx-text-fill: #EDEDED;"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"                         -fx-font-weight: bold;"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"                         -fx-background-color: rgba(199,84,84,0.93);"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"                         -fx-background-radius: 10;\"/\u003e"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\""},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"                    prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"            \u003ccontent\u003e"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"            \u003c/content\u003e"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"    \u003c/children\u003e"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Criss-Wang":33}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"public class DeadlineTest {"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"    public void toStringTest() {"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"        Deadline deadline \u003d new Deadline(\"deadline1\", false, schedule);"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"        assertEquals(\"[D][✘] deadline1 (by: Aug 20 2020)\", deadline.toString());"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"    public void getScheduleTest() {"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"        Deadline deadline \u003d new Deadline(\"deadline1\", false, schedule);"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"        assertEquals(\"Aug 20 2020\", deadline.getSchedule());"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"    public void completeTest() {"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"        Deadline nonCompletedDeadline \u003d new Deadline(\"deadline1\", false, schedule);"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"        Deadline completedDeadline \u003d new Deadline(\"deadline1\", true, schedule);"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"        assertEquals(completedDeadline.toString(), nonCompletedDeadline.complete().toString());"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"    public void formatTest() {"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"        Deadline deadline \u003d new Deadline(\"deadline1\", false, schedule);"},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"        assertEquals(\"D | 0 | deadline1 | Aug 20 2020\", deadline.formatTask());"},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":38}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"public class EventTest {"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"    public void toStringTest() {"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"        Event event \u003d new Event(\"event1\", false, schedule);"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"        assertEquals(\"[E][✘] event1 (at: Aug 20 2020)\", event.toString());"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"    public void getScheduleTest() {"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"        Event event \u003d new Event(\"event1\", false, schedule);"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"        assertEquals(\"Aug 20 2020\", event.getSchedule());"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"    public void completeTest() {"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":"        Event nonCompletedEvent \u003d new Event(\"event1\", false, schedule);"},{"lineNumber":28,"author":{"gitId":"Criss-Wang"},"content":"        Event completedEvent \u003d new Event(\"event1\", true, schedule);"},{"lineNumber":29,"author":{"gitId":"Criss-Wang"},"content":"        assertEquals(completedEvent.toString(), nonCompletedEvent.complete().toString());"},{"lineNumber":30,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":32,"author":{"gitId":"Criss-Wang"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"Criss-Wang"},"content":"    public void formatTest() {"},{"lineNumber":34,"author":{"gitId":"Criss-Wang"},"content":"        LocalDate schedule \u003d LocalDate.parse(\"2020-08-20\");"},{"lineNumber":35,"author":{"gitId":"Criss-Wang"},"content":"        Event event \u003d new Event(\"event1\", false, schedule);"},{"lineNumber":36,"author":{"gitId":"Criss-Wang"},"content":"        assertEquals(\"E | 0 | event1 | Aug 20 2020\", event.formatTask());"},{"lineNumber":37,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Criss-Wang"},"content":"}"}],"authorContributionMap":{"Criss-Wang":38}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"public class TodoTest {"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"    public void toStringTest() {"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"        Todo todo \u003d new Todo(\"todo1\", false);"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"        assertEquals(\"[T][✘] todo1\", todo.toString());"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"    public void completeTest() {"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"        Todo nonCompletedTodo \u003d new Todo(\"todo1\", false);"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"        Todo completedTodo \u003d new Todo(\"todo1\", true);"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"        assertEquals(completedTodo.toString(), nonCompletedTodo.complete().toString());"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"    public void formatTest() {"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"        Todo todo \u003d new Todo(\"todo1\", false);"},{"lineNumber":24,"author":{"gitId":"Criss-Wang"},"content":"        assertEquals(\"T | 0 | todo1\", todo.formatTask());"},{"lineNumber":25,"author":{"gitId":"Criss-Wang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Criss-Wang"},"content":"}"},{"lineNumber":27,"author":{"gitId":"Criss-Wang"},"content":""}],"authorContributionMap":{"Criss-Wang":27}},{"path":"text-ui-test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"T | 0 | read book"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":"D | 1 | return book | Apr 12 2020"},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"E | 1 | project meeting | Jan 11 2020"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"T | 1 | borrow book"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"D | 0 | do homework | Jan 1 1998"}],"authorContributionMap":{"Criss-Wang":5}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":"deadline return book /by 2020-04-12"},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"event project meeting /at 2020-01-11"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"done 3"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"todo borrow book"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"list"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"deadline do homework /by 1998-01-01"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"done 4"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"bad call"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"find homework"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"find book"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"bye"}],"authorContributionMap":{"Criss-Wang":13}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"},{"lineNumber":14,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":15,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":17,"author":{"gitId":"-"},"content":")"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":24,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"Criss-Wang":5,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":""},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"if"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"  ! ("},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"    find ../src/main/java -name \"*.java\" \u003esources.txt"},{"lineNumber":22,"author":{"gitId":"Criss-Wang"},"content":"    javac -cp ../src -Xlint:none -d ../bin @sources.txt"},{"lineNumber":23,"author":{"gitId":"Criss-Wang"},"content":"  )"},{"lineNumber":24,"author":{"gitId":"-"},"content":"then"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":27,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":30,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":33,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":34,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":37,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":38,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":39,"author":{"gitId":"-"},"content":"then"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":42,"author":{"gitId":"-"},"content":"else"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":45,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"Criss-Wang":8,"-":37}},{"path":"text-ui-test/sources.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\CommandAgent.java"},{"lineNumber":2,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\Duke.java"},{"lineNumber":3,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\DukeException.java"},{"lineNumber":4,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\Parser.java"},{"lineNumber":5,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\Storage.java"},{"lineNumber":6,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\Ui.java"},{"lineNumber":7,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\AddCommand.java"},{"lineNumber":8,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\Command.java"},{"lineNumber":9,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\DeadlineCommand.java"},{"lineNumber":10,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\DeleteCommand.java"},{"lineNumber":11,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\DoneCommand.java"},{"lineNumber":12,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\EventCommand.java"},{"lineNumber":13,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\ExitCommand.java"},{"lineNumber":14,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\FindCommand.java"},{"lineNumber":15,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\ListCommand.java"},{"lineNumber":16,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\command\\TodoCommand.java"},{"lineNumber":17,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\task\\Deadline.java"},{"lineNumber":18,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\task\\Event.java"},{"lineNumber":19,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\task\\Task.java"},{"lineNumber":20,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\task\\TaskList.java"},{"lineNumber":21,"author":{"gitId":"Criss-Wang"},"content":"C:\\Users\\22333\\Desktop\\CS2103\\iP\\src\\main\\java\\duke\\task\\Todo.java"}],"authorContributionMap":{"Criss-Wang":21}}]
