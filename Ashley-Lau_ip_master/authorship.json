[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "# duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 24
    }
  },
  {
    "path": "src/main/java/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.InvalidDeadlineFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.InvalidToDoFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.InvalidEventFormatException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import tasks.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class AddCommand extends Command{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public AddCommand(String fullCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui, Storage storage) throws InvalidToDoFormatException,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            InvalidDeadlineFormatException, InvalidTimeException, InvalidCommandException,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            InvalidEventFormatException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String[] tempArray \u003d fullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (Parser.isToDoCommand(tempArray[0])) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (tempArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                throw new InvalidToDoFormatException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String task \u003d fullCommand.substring(5);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            ToDo newToDoTask \u003d new ToDo(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            taskList.addTask(newToDoTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            ui.taskMessage(newToDoTask.toString(), taskList.getTaskListLength());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (Parser.isEventCommand(tempArray[0])) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (tempArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                throw new InvalidEventFormatException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String eventAndDate \u003d fullCommand.substring(6);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String[] eventDateArray \u003d eventAndDate.trim().split(\" /at \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (eventDateArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                throw new InvalidEventFormatException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            Event newEventTask \u003d new Event(eventDateArray[0], Time.getFormattedTime(eventDateArray[1]));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            taskList.addTask(newEventTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            ui.taskMessage(newEventTask.toString(), taskList.getTaskListLength());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (Parser.isDeadlineCommand(tempArray[0])) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (tempArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                throw new InvalidDeadlineFormatException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String deadlineAndDate \u003d fullCommand.substring(9);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String[] deadlineDateArray \u003d deadlineAndDate.trim().split(\" /by \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (deadlineDateArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                throw new InvalidDeadlineFormatException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            Deadline newDeadlineTask \u003d new Deadline(deadlineDateArray[0], Time.getFormattedTime(deadlineDateArray[1]));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            taskList.addTask(newDeadlineTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            ui.taskMessage(newDeadlineTask.toString(), taskList.getTaskListLength());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        throw new InvalidCommandException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 75
    }
  },
  {
    "path": "src/main/java/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.InvalidByeCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ByeCommand(String fullCommand) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "       super(fullCommand);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui, Storage storage) throws InvalidByeCommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String[] tempArray \u003d fullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (tempArray.length !\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new InvalidByeCommandException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ui.byeMessage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 27
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    protected String fullCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Command(String fullCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public abstract void executeCommand(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 18
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.IncorrectDeleteInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.IncorrectDoneInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.InvalidDeleteFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public DeleteCommand(String fullCommand) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui, Storage storage) throws InvalidDeleteFormatException,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            IncorrectDoneInputException, IncorrectDeleteInputException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String[] tempArray \u003d fullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (tempArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new InvalidDeleteFormatException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        int itemIndex \u003d convertToNumber(tempArray[1], taskList.getTaskListLength()) - 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (itemIndex \u003c 0 || Integer.parseInt(tempArray[1]) \u003e taskList.getTaskListLength()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IncorrectDeleteInputException(taskList.getTaskListLength());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        Task deletedTask \u003d taskList.getSpecificTask(itemIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        taskList.deleteTask(itemIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ui.deleteMessage(deletedTask.toString(), taskList.getTaskListLength());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int convertToNumber(String number, int taskSize) throws IncorrectDoneInputException{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return Integer.parseInt(number);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch(NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IncorrectDoneInputException(taskSize);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 45
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.IncorrectDoneInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.InvalidDoneFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.TaskCompletedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public DoneCommand(String fullCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui, Storage storage) throws InvalidDoneFormatException,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            IncorrectDoneInputException, TaskCompletedException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String[] tempArray \u003d fullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (tempArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new InvalidDoneFormatException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        int itemIndex \u003d convertToNumber(tempArray[1], taskList.getTaskListLength()) - 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (itemIndex \u003c 0 || Integer.parseInt(tempArray[1]) \u003e taskList.getTaskListLength()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IncorrectDoneInputException(taskList.getTaskListLength());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        taskList.markTaskAsDone(itemIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ui.markAsDoneMessage(taskList.getSpecificTask(itemIndex).toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int convertToNumber(String number, int taskSize) throws IncorrectDoneInputException{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return Integer.parseInt(number);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch(NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new IncorrectDoneInputException(taskSize);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 43
    }
  },
  {
    "path": "src/main/java/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.InvalidListCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ListCommand(String fullCommand) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void executeCommand(TaskList taskList, Ui ui, Storage storage) throws InvalidListCommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String[] tempArray \u003d fullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (tempArray.length !\u003d 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new InvalidListCommandException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ui.listMessage(taskList.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 26
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    // path of the data to be stored"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private static final Path path \u003d Paths.get(\".\", \"data\", \"duke.txt\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Duke() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            this.storage \u003d new Storage(path);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            tasks \u003d new TaskList(storage.getCurrentTasks());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            ui.errorMessage(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void runDuke() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ui.welcomeMessage(tasks.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                c.executeCommand(tasks, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                ui.errorMessage(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        storage.saveFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        new Duke().runDuke();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 46,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import commands.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import commands.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final static String BYE_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final static String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final static String DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final static String TODO_COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final static String DEADLINE_COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final static String EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final static String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static Command parse(String fullCommand) throws InvalidCommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String[] tempArray \u003d fullCommand.trim().split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        String command \u003d tempArray[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (command.equals(BYE_COMMAND)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new ByeCommand(fullCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (command.equals(LIST_COMMAND)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new ListCommand(fullCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (command.equals(DONE_COMMAND)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new DoneCommand(fullCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (command.equals(DELETE_COMMAND)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new DeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        if (isTask(command)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return new AddCommand(fullCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        throw new InvalidCommandException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isTask(String command) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return isDeadlineCommand(command) || isToDoCommand(command) || isEventCommand(command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isDeadlineCommand(String command) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return command.equals(DEADLINE_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isToDoCommand(String command) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return command.equals(TODO_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static boolean isEventCommand(String command) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return command.equals(EVENT_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 59
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import tasks.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final Path PATH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private List\u003cString\u003e tasksInString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final static String EVENT_COMMAND \u003d \"E\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final static String TODO_COMMAND \u003d \"T\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final static String DEADLINE_COMMAND \u003d \"D\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    Storage(Path path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.PATH\u003d path;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            // create directory if directory does not exist"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            Path parentPath \u003d path.getParent();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            Files.createDirectories(parentPath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            // create file if file do not exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                Files.createFile(path);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            this.tasksInString \u003d Files.readAllLines(path);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            System.out.println(\"There is an error with the path you set\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ArrayList\u003cTask\u003e getCurrentTasks() throws InvalidTimeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        for (String line: tasksInString) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String[] task \u003d line.split(\"#\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String command \u003d task[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            boolean isDone \u003d task[1].equals(\"done\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            String description \u003d task[2];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (command.equals(TODO_COMMAND)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                taskList.add(new ToDo(description, isDone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (command.equals(EVENT_COMMAND)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                LocalDateTime date \u003d Time.getFormattedTime(task[3]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                taskList.add(new Event(description, isDone, date));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (command.equals(DEADLINE_COMMAND)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                LocalDateTime date \u003d Time.getFormattedTime(task[3]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                taskList.add(new Deadline(description, isDone, date));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void saveFile(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            FileWriter fw \u003d new FileWriter(PATH.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            StringBuilder string \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                Task currentTask \u003d taskList.get(i);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                String currentLine \u003d \"\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                String isTaskDone \u003d currentTask.isTaskDone() ? \"done\" : \"notDone\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                String description \u003d currentTask.getDescription();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                if (currentTask instanceof ToDo) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    currentLine +\u003d \"T#\" + isTaskDone + \"#\" + description;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                if (currentTask instanceof Event) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    currentLine +\u003d \"E#\" + isTaskDone + \"#\" + description + \"#\" + ((Event) currentTask).getBy();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                if (currentTask instanceof Deadline) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    currentLine +\u003d \"D#\" + isTaskDone + \"#\" + description + \"#\" + ((Deadline) currentTask).getBy();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                string.append(currentLine);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                if (i !\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                    string.append(\"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            fw.write(string.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 105
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.TaskCompletedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        taskList.remove(index - 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void markTaskAsDone(int index) throws TaskCompletedException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        taskList.get(index).markAsDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Task getSpecificTask(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public int getTaskListLength() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        StringBuilder string \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        string.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        for (int i \u003d0; i \u003c taskList.size(); i++){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            if (taskList.size() \u003d\u003d i + 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                string.append(i + 1).append(\". \").append(taskList.get(i).toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                string.append(i + 1).append(\". \").append(taskList.get(i).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return string.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 52
    }
  },
  {
    "path": "src/main/java/duke/Time.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static LocalDateTime getFormattedTime(String dateString) throws InvalidTimeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            return LocalDateTime.parse(dateString, formatter);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "            throw new InvalidTimeException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static String convertTimeToSave(LocalDateTime time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return time.format(formatter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public static String toString(LocalDateTime time) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return time.format(formatter);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 29
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final static String DIVIDER \u003d \"__________________________________________________________\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private final Scanner SC \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    private void messageFormatter(String word) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        System.out.println(word);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        System.out.println(DIVIDER + \"\\n\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return SC.nextLine();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void welcomeMessage(String taskList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        messageFormatter(\"Hello! I\u0027m Duke! Welcome back!\\n\" + taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void byeMessage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        messageFormatter(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void listMessage(String taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        messageFormatter(taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void errorMessage(String error) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        messageFormatter(error);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void markAsDoneMessage(String message) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        messageFormatter(\"Nice! I\u0027ve marked this task as done:\\n\" + message);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void deleteMessage(String task, int size) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        messageFormatter(\"Noted. I\u0027ve removed this task:\\n\" + task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + \"\\nNow you have \" + size+ \" tasks in the list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void taskMessage(String task, int size) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        messageFormatter(\"Got it. I\u0027ve added this task:\\n\" + task +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                \"\\nNow you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 50
    }
  },
  {
    "path": "src/main/java/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 7
    }
  },
  {
    "path": "src/main/java/exceptions/IncorrectDeleteInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class IncorrectDeleteInputException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public IncorrectDeleteInputException(int listSize) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"Input for delete command is invalid! Input a number between 1 and \" + listSize + \".\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 7
    }
  },
  {
    "path": "src/main/java/exceptions/IncorrectDoneInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class IncorrectDoneInputException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public IncorrectDoneInputException(int listSize) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"Input for done command is invalid! Input a number between 1 and \" + listSize + \".\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 7
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidByeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidByeCommandException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidByeCommandException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"bye command is invalid! Input \\\"bye\\\" to exit\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 7
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! Sorry I do not understand this command!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 7
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidDeadlineFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidDeadlineFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidDeadlineFormatException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! The format of deadline command seems to be wrong.\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        + \"Try the following format: deadline task /by YYYY-MM-DD HH:MM\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 8
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidDeleteFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidDeleteFormatException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidDeleteFormatException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! Format for delete command doesnt seem to be correct. Eg. delete 2\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 7
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidDoneFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidDoneFormatException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidDoneFormatException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! Format for done command doesnt seem to be correct. Eg. done 2\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 8
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidEventFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidEventFormatException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidEventFormatException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! The format of event command seems to be wrong.\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + \"Try the following format: event task /at YYYY-MM-DD HH:MM\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 8
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidListCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidListCommandException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidListCommandException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"list command is invalid! Input \\\"list\\\" to show task in the task list.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 7
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidTimeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidTimeException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! The format of your input time seems to be wrong.\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "                + \"Try the following time format: YYYY-MM-DD HH:MM\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 8
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidToDoFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class InvalidToDoFormatException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public InvalidToDoFormatException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 7
    }
  },
  {
    "path": "src/main/java/exceptions/TaskCompletedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class TaskCompletedException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public TaskCompletedException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(\"☹ OOPS!!! Task is already done!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 7
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    // @@author Damith C. Rajapakse"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    // Reused from https://nus-cs2103-ay2021s1.github.io/website/schedule/week2/project.html with minor modifications"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String description, boolean isDone, LocalDateTime by) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return Time.convertTimeToSave(by);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + Time.toString(by) + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 7,
      "-": 23
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Event(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public Event(String description, boolean isDone, LocalDateTime by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return Time.convertTimeToSave(by);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + Time.toString(by) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 28
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.TaskCompletedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * @author Damith C. Rajapakse"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " * Reused from https://nus-cs2103-ay2021s1.github.io/website/schedule/week2/project.html with minor modifications"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    // @@author Damith C. Rajapakse"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    // Reused from https://nus-cs2103-ay2021s1.github.io/website/schedule/week2/project.html with minor modifications"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() throws TaskCompletedException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new TaskCompletedException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isTaskDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 10,
      "-": 38
    }
  },
  {
    "path": "src/main/java/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public ToDo(String description,  boolean isDone) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 17
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import commands.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import commands.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import commands.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing if ByeCommand is being outputted when bye is inputted\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parseByeCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Parser.parse(\"bye\").getClass(), ByeCommand.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing if ListCommand is being outputted when list is inputted\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parseListCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Parser.parse(\"list\").getClass(), ListCommand.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing if DoneCommand is being outputted when done is inputted\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parseDoneCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Parser.parse(\"done 2\").getClass(), DoneCommand.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing if DeleteCommand is being outputted when delete is inputted\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parseDeleteCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Parser.parse(\"delete\").getClass(), DeleteCommand.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing if AddCommand is being outputted when the deadline, event and todo command is inputted\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parseAddCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Parser.parse(\"event read book\").getClass(), AddCommand.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Parser.parse(\"todo read book\").getClass(), AddCommand.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(Parser.parse(\"deadline read book\").getClass(), AddCommand.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing if isTask, isDeadline, isToDo and isEvent methods are working\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parseMiscellaneousCommand() throws InvalidCommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Parser.isEventCommand(\"event\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Parser.isDeadlineCommand(\"deadline\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Parser.isToDoCommand(\"todo\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertTrue(Parser.isTask(\"todo\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing if InvalidCommandException is thrown if a invalid command is inputted\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void parseInvalidCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertThrows(InvalidCommandException.class, () -\u003e Parser.parse(\"blah\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 63
    }
  },
  {
    "path": "src/test/java/tasks/EventTester.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "public class EventTester {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing getBy method in Event class\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void testGetByTiming() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        LocalDateTime testDate \u003d LocalDateTime.parse(\"2020-02-02 12:12\", formatter);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(new Event(\"test\", testDate).getBy(), \"2020-02-02 12:12\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    @DisplayName(\"Testing toString method in Event class\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        LocalDateTime testDate \u003d LocalDateTime.parse(\"2020-12-12 12:12\", formatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "        assertEquals(new Event(\"read book\", testDate).toString(), \"[E][✘] read book (at: Dec 12 2020 12:12)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 28
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "todo CS2100"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "todo CS2101"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "event rotaract club presentation /at 2019-12-20 09:10"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "deadline CS2103 quiz /by mon 19:10"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "deadline CS2103 quiz /by 2019-12-21 19:10"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done s"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "delete"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "todo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "event /at Tues 8am"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "deadline /at Mon 12am"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "blah"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "bye 2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "list 33"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 28
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ashley-Lau"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Ashley-Lau": 2,
      "-": 19
    }
  }
]
