[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "TanLeYang": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "TanLeYang": 22
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "E | 1 | aefwerg | 2020-08-21T12:41"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "E | 1 | wakeeeee / | 2020-08-23T14:40"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 0 | help"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 1 | sleep"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "D | 1 | gfewrg / | 2020-08-23T20:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 1 | sleep"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 1 | sleep2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 1 | sleep"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 8
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        DialogBox userDialog \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        userDialog.dialog.getStyleClass().remove(\"chat-box\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        userDialog.dialog.getStyleClass().add(\"chat-box-user\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return userDialog;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 62
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 8
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Duke duke \u003d Duke.startDuke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        MainWindow mainWindow \u003d new MainWindow();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Scene scene \u003d new Scene(mainWindow);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        scene.getStylesheets().add(\"/styles/styles.css\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        mainWindow.setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 27
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Response;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/coffee1.jpg\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/coffee2.jpg\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public MainWindow() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                DialogBox.getDukeDialog(\"Hi, I\u0027m Duke! How can I help you today? :-)\", dukeImage)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        userInput.setOnAction((event) -\u003e handleUserInput());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        sendButton.setOnAction((event -\u003e handleUserInput()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Response response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                DialogBox.getDukeDialog(response.getMessage(), dukeImage)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (response.shouldExit()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            userInput.setDisable(true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            new Timer().schedule(new TimerTask() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    Platform.exit();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }, 1000);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 85
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Response;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Storage store;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Duke(Storage store, TaskList taskList, Ui ui, Parser parser) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.store \u003d store;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static Duke startDuke() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Storage store \u003d new Storage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Ui ui \u003d  new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            store.initializeStorage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            taskList \u003d new TaskList(store.getTasks());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            System.out.println(\"Error connecting to storage, actions made will not be saved\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Duke(store, taskList, ui, parser);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Response getResponse(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            Command c \u003d parser.parse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            Response r \u003d c.execute(taskList, ui, store);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return r;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new Response(false, e.getFriendlyMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "TanLeYang": 51
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.WrongDateFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final static String DIRECTORY_PATH \u003d \"data\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final static String STORAGE_PATH \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Initialize storage by checking if storage file path exists and if not create the appropriate directory and file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @throws IOException if error when creating the storage directory and/or file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void initializeStorage() throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        File storageDirectory \u003d new File(DIRECTORY_PATH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!storageDirectory.exists()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            storageDirectory.mkdir();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        File storagePath \u003d new File(STORAGE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!storagePath.exists()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            storagePath.createNewFile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Parse the storage file and convert each line in the file from the storage String to the appropriate Task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return a List of Tasks containing all Tasks that are stored in the storage file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        File storageFile \u003d new File(STORAGE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            Scanner scanner \u003d new Scanner(storageFile);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                tasks.add(parseStorageString(scanner.nextLine()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            System.out.println(\"duke.Storage file not found\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (WrongDateFormatException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            System.out.println(\"Wrong date formatting in storage file\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Replace the contents of the storage file with the Tasks in the given List of tasks."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param taskList a List containing Tasks to replace existing Tasks stored in the storage file"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void updateTasks(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            FileWriter storageWriter \u003d new FileWriter(STORAGE_PATH, true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            clearTasks();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            for (Task t : taskList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                addTask(storageWriter, t);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            storageWriter.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            System.out.println(\"Problem accessing storage file\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Task parseStorageString(String storageString) throws WrongDateFormatException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String[] taskComponents \u003d storageString.trim().split(\" \\\\| \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final String type \u003d taskComponents[0].trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final boolean isCompleted \u003d taskComponents[1].trim().equals(\"1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final String description \u003d taskComponents[2].trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new Todo(description, isCompleted);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            final String date \u003d taskComponents[3].trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return type.equals(\"E\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    ? new Event(description, DateParser.parseIso(date), isCompleted)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    : new Deadline(description, DateParser.parseIso(date), isCompleted);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void clearTasks() throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        FileWriter storageWriter \u003d new FileWriter(STORAGE_PATH, false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // replace the original content with an empty string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storageWriter.write(\"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storageWriter.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void addTask(FileWriter storageWriter, Task task) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storageWriter.write(task.getStorageString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storageWriter.write(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 108
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Response;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Command for users to exit the app. Created by using \"bye\"."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Instructs the GUI to exit after displaying a given goodbye message to user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param tasks TaskList containing all tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param ui Ui for formatting of message Strings to be displayed to user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param storage Storage to retrieve and store Tasks entered by user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return Response containing a goodbye message to be displayed by the GUI and an instruction for the GUI to exit"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Response execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Response(true, ui.formatMessage(\"Bye! See you again soon! :-)\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Whether the Command causes the app to terminate."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Since the Command is used for users to exit the app, return true."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof  ByeCommand) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 46
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Response;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents a command entered by the user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Executes the appropriate action for the Command and return a Response containing data the GUI requires."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param tasks TaskList containing all tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param ui Ui for formatting of message Strings to be displayed to user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param storage Storage to retrieve and store Tasks entered by user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @throws DukeException if there is a problem when executing the action due to invalid user input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return Response object containing data for the GUI to use"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public abstract Response execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns whether the Command causes the app to exit."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return true if Command causes the app to exit, false otherwise"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 34
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Response;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.WrongDateFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Command to create a Deadline Task. Created by using \"deadline description /by DD MMM YYYY hhmm\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final String dateStr;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public DeadlineCommand(String description, String dateStr) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.dateStr \u003d dateStr;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Creates a Deadline with the user entered description and due-datetime String, store it in TaskList,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * formats a feedback String to user and store the new Deadline in Storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param tasks TaskList containing all tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param ui Ui for formatting of message Strings to be displayed to user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param storage Storage to retrieve and store Tasks entered by user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @throws DukeException if invalid date String provided"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return Response object containing the formatted feedback String to be displayed by the GUI"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Response execute(TaskList tasks, Ui ui, Storage storage) throws WrongDateFormatException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        LocalDateTime deadlineDateTime \u003d DateParser.parseString(dateStr);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Deadline deadline \u003d new Deadline(description, deadlineDateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        tasks.addTask(deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String message \u003d ui.formatMessage(String.format(\"Okay, I\u0027ve added the following deadline: \\n %s\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                deadline.toString()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storage.updateTasks(tasks.getListOfTasks());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Response(false, message);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof DeadlineCommand) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return this.description.equals(((DeadlineCommand) other).description) \u0026\u0026"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    this.dateStr.equals(((DeadlineCommand) other).dateStr);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 59
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Response;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.NoSuchTaskException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Command to delete a Task. Created by using \"delete taskNumber\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final int taskNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Deletes the task with the specified taskNumber from TaskList, formats a feedback String to be displayed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * to user and updates the Storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param tasks TaskList containing all tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param ui Ui for formatting of message Strings to be displayed to user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param storage Storage to retrieve and store Tasks entered by user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @throws NoSuchTaskException if invalid taskNumber was provided"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return Response object containing the feedback String to be displayed by the GUI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Response execute(TaskList tasks, Ui ui, Storage storage) throws NoSuchTaskException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Task deletedTask \u003d tasks.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String message \u003d ui.formatMessage(String.format(\"Okay, I\u0027ve deleted the following task: \\n %s\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                deletedTask.toString()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storage.updateTasks(tasks.getListOfTasks());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Response(false, message);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return this.taskNumber \u003d\u003d ((DeleteCommand) other).taskNumber;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 50
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Response;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.NoSuchTaskException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Command to mark a Task as complete. Created by using \"done taskNumber\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Marks the task with the specified taskNumber as completed in the TaskList, formats a feedback String to be"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * displayed to user and updates the Storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param tasks TaskList containing all tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param ui Ui for formatting of message Strings to be displayed to user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param storage Storage to retrieve and store Tasks entered by user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @throws NoSuchTaskException if invalid taskNumber was provided"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return Response object containing the feedback String to be displayed by the GUI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Response execute(TaskList tasks, Ui ui, Storage storage) throws NoSuchTaskException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Task completedTask \u003d tasks.completeTask(taskNumber);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String message \u003d ui.formatMessage(String.format(\"Great! I\u0027ve marked the following task as done: \\n %s\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                completedTask));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storage.updateTasks(tasks.getListOfTasks());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Response(false, message);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof DoneCommand) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return this.taskNumber \u003d\u003d ((DoneCommand) other).taskNumber;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 50
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Response;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.WrongDateFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Command to create a Event Task. Created by using \"event description /at DD MMM YYYY hhmm\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final String dateStr;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public EventCommand(String description, String dateStr) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.dateStr \u003d dateStr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Creates a Event with the user entered description and datetime String, store it in TaskList,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * formats a feedback String to be displayed to user and store the new Deadline in Storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param tasks TaskList containing all tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param ui Ui for formatting of message Strings to be displayed to user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param storage Storage to retrieve and store Tasks entered by user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @throws WrongDateFormatException if invalid date String provided"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return Response object containing the feedback String to be displayed by the GUI"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Response execute(TaskList tasks, Ui ui, Storage storage) throws WrongDateFormatException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        LocalDateTime eventDateTime \u003d DateParser.parseString(dateStr);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Event event \u003d new Event(description, eventDateTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        tasks.addTask(event);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String message \u003d ui.formatMessage(String.format(\"Okay, I\u0027ve added the following event: \\n %s\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                event.toString()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storage.updateTasks(tasks.getListOfTasks());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Response(false, message);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof EventCommand) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return this.description.equals(((EventCommand) other).description) \u0026\u0026"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    this.dateStr.equals(((EventCommand) other).dateStr);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 58
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.NumberedTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Response;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents a search for Tasks matching a keyword. Created by using \"find keyword\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final String searchString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public FindCommand(String searchString) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.searchString \u003d searchString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Searches through all Tasks in the TaskList and gets all Tasks whose description matches the given searchString"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * and format a String to display all found Tasks to the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param tasks TaskList containing all tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param ui Ui for formatting of message Strings to be displayed to user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param storage Storage to retrieve and store Tasks entered by user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return Response object containing the String to be displayed to the user by the GUI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Response execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        List\u003cNumberedTask\u003e foundTasks \u003d tasks.getMatchingTasks(searchString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String message \u003d ui.foundTasksToString(foundTasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Response(false, ui.formatMessage(message));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 38
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.NumberedTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Response;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Command for user to view all Tasks created. Created by using \"list\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Gets all Tasks stored in TaskList and format a String to display all the Tasks to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param tasks TaskList containing all tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param ui Ui for formatting of message Strings to be displayed to user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param storage Storage to retrieve and store Tasks entered by user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return Response object containing the formatted String to be displayed to the user by the GUI"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Response execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        List\u003cNumberedTask\u003e numberedTasks \u003d tasks.tasksToString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Response(false, ui.allTasksToString(numberedTasks));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof ListCommand) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 40
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Response;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents a command to create a Todo Task. Created by using \"todo description\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Creates a Todo with the user entered description, store it in TaskList, format a feedback String to be displayed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * to user and store the new Todo in Storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param tasks TaskList containing all tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param ui Ui for formatting of message Strings to be displayed to user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param storage Storage to retrieve and store Tasks entered by user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return Response object containing the feedback String to be displayed by the GUI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Response execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        tasks.addTask(todo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String message \u003d ui.formatMessage(String.format(\"Okay! I\u0027ve added the following task: \\n %s\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                todo.toString()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storage.updateTasks(tasks.getListOfTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Response(false, message);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof TodoCommand) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return this.description.equals(((TodoCommand) other).description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 49
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected String message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected String friendlyMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.friendlyMessage \u003d message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public DukeException(String message, String friendlyMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.friendlyMessage \u003d friendlyMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String getFriendlyMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return this.friendlyMessage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 26
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EmptyBodyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class EmptyBodyException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public EmptyBodyException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(\"Body of task not specified\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 9
    }
  },
  {
    "path": "src/main/java/duke/exceptions/NoSuchTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class NoSuchTaskException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public NoSuchTaskException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(\"No such task exists\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"OOPS! No such task exists, please try again.\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 9
    }
  },
  {
    "path": "src/main/java/duke/exceptions/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public UnknownCommandException(String command) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(String.format(\"Unknown command: %s\", command),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/WrongDateFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class WrongDateFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public WrongDateFormatException(String correctFormat) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(\"Wrong datetime format\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"Wrong datetime format provided, date and time should be specified as follows: \" +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                        correctFormat);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 11
    }
  },
  {
    "path": "src/main/java/duke/exceptions/WrongSyntaxException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class WrongSyntaxException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public WrongSyntaxException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(\"Syntax error\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"OOPS!!! There is something wrong with the command, please check the syntax again!\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 9
    }
  },
  {
    "path": "src/main/java/duke/parser/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.WrongDateFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Parses Strings representing date and time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String format \u003d \"dd MMM uuuu HHmm\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String readableFormat \u003d \"DD MMM YYYY HHMM\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(format);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Parses a datetime String into a LocalDateTime object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * String should be in the format \"DD MMM YYYY hhmm\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param dateTime String representing date and time"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return LocalDateTime object for the date and time the String represents"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @throws WrongDateFormatException if unable to parse the datetime String provided"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static LocalDateTime parseString(String dateTime) throws WrongDateFormatException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            LocalDateTime result \u003d LocalDateTime.parse(dateTime, DateParser.formatter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new WrongDateFormatException(DateParser.readableFormat);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Parses a ISO datetime format String into a LocalDateTime Object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * The ISO datetime format should be of the following structure: \"YYYY-MM-DDTHH:MM\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param isoString - ISO datetime format String"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return LocalDateTime object for the date and time the isoString represents"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @throws WrongDateFormatException if unable to parse the ISO datetime format String provided"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static LocalDateTime parseIso(String isoString) throws WrongDateFormatException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            LocalDateTime result \u003d LocalDateTime.parse(isoString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new WrongDateFormatException(\"YYYY-MM-DDTHH:MM\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 52
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.UnknownCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.WrongSyntaxException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.EmptyBodyException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Parse Strings that create Commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final Set\u003cString\u003e commands \u003d new HashSet\u003c\u003e(Arrays.asList(\"bye\", \"list\", \"done\", \"delete\", \"deadline\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"event\", \"todo\", \"find\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final Set\u003cString\u003e singleArgCommands \u003d new HashSet\u003c\u003e(Arrays.asList(\"bye\", \"list\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Parse a provided String and return the corresponding Command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param commandStr the String to parse"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return the appropriate Command that corresponds to the String provided"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @throws DukeException if unable to parse String provided and decide on Command to return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Command parse(String commandStr) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String[] parts \u003d split(commandStr);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String commandName \u003d parts[0].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String commandArgs \u003d parts[1].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        switch(commandName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            int doneNumber \u003d getTaskNumber(commandArgs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new DoneCommand(doneNumber);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            int deleteNumber \u003d getTaskNumber(commandArgs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new DeleteCommand(deleteNumber);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            String[] deadlineParts \u003d splitTime(\"deadline\", commandArgs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new DeadlineCommand(deadlineParts[0].trim(), deadlineParts[1].trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            String[] eventParts \u003d splitTime(\"event\", commandArgs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new EventCommand(eventParts[0].trim(), eventParts[1].trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new TodoCommand(commandArgs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new FindCommand(commandArgs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new UnknownCommandException(commandName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private int getTaskNumber(String commandArgs) throws WrongSyntaxException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            int result \u003d Integer.parseInt(commandArgs.trim());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new WrongSyntaxException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private String[] splitTime (String type, String commandArgs) throws WrongSyntaxException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String splitBy \u003d type.equals(\"deadline\") ? \"/by\" : \"/at\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String[] parts \u003d commandArgs.split(splitBy, 2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (parts.length !\u003d 2) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new WrongSyntaxException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return parts;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private String[] split(String commandStr) throws UnknownCommandException, WrongSyntaxException, EmptyBodyException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (commandStr.isBlank()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new WrongSyntaxException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String[] parts \u003d commandStr.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String commandName \u003d parts[0].trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        boolean isSingleArgCommand \u003d singleArgCommands.contains(commandName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (parts.length \u003c 2 \u0026\u0026 !isSingleArgCommand) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new WrongSyntaxException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!commands.contains(commandName)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new UnknownCommandException(commandName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (isSingleArgCommand) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new String[]{ commandName, \"\" };"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            String commandArgs \u003d parts[1].trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            if (commandArgs.isBlank()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                throw new EmptyBodyException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new String[]{ commandName, commandArgs };"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 110
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents a Task that has a deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private LocalDateTime dueDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Deadline(String description, LocalDateTime dueDate) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super.symbol \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Deadline(String description, LocalDateTime dueDate, boolean isCompleted) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super.symbol \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Deadline markCompleted() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Deadline(description, dueDate, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String getStorageString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String baseString \u003d super.getStorageString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(\"%s | %s\", baseString, dueDate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(\"[%s]%s (by: %s)\", symbol, super.toString(), dueDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 39
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents a Task that has a set date and time when it will be completed/occur."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Event(String description, LocalDateTime date) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super.symbol \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Event(String description, LocalDateTime date, boolean isCompleted) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(description, isCompleted);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super.symbol \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Event markCompleted() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Event(description, date, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String getStorageString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String baseString \u003d super.getStorageString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(\"%s | %s\", baseString, date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(\"[%s]%s (at: %s)\", symbol, super.toString(), date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 39
    }
  },
  {
    "path": "src/main/java/duke/task/NumberedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents a mapping of a taskNumber to a Task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class NumberedTask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private int number;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public NumberedTask(int number, Task task) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(\"%d.%s\", number, task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 20
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents tasks which user enter into the app."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected boolean isCompleted;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected char symbol \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Task(String description, boolean completed) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.isCompleted \u003d completed;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Marks a Task as completed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return new Task object which has isCompleted set to true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public abstract Task markCompleted();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Gets a String representation of the Task that is used for storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return a String representation of the Task for storage"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String getStorageString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        char done \u003d isCompleted ? \u00271\u0027 : \u00270\u0027;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(\"%s | %s | %s\", symbol, done, description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String completionStatus \u003d isCompleted ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(\"[%s] %s\", completionStatus, description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 44
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.NoSuchTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Contains the user\u0027s Tasks while the app is running."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Gets an unordered List object containing all Tasks stored in this TaskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return a List object containing all Tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public List\u003cTask\u003e getListOfTasks() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return List.copyOf(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Sets the Task with the given taskNumber as completed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * taskNumber is determined by the implementation of the specific TaskList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param taskNumber taskNumber of the Task to be completed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return new Task object that represents a completed state of the original Task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @throws NoSuchTaskException if invalid taskNumber is provided"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Task completeTask(int taskNumber) throws NoSuchTaskException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!isValidTaskNumber(taskNumber)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new NoSuchTaskException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Task completedTask \u003d taskList.get(taskNumber - 1).markCompleted();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        taskList.set(taskNumber - 1, completedTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return completedTask;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Deletes the Task with the given taskNumber."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * taskNumber is determined by the implementation of the specific TaskList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param taskNumber taskNumber of the Task to be deleted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return the Task that was deleted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @throws NoSuchTaskException if invalid taskNumber is provided"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Task deleteTask(int taskNumber) throws NoSuchTaskException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!isValidTaskNumber(taskNumber)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new NoSuchTaskException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Task toRemove \u003d taskList.get(taskNumber - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        taskList.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return toRemove;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private boolean isValidTaskNumber(int taskNumber) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return !(taskNumber \u003c 1 || taskNumber \u003e taskList.size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns a List containing the mapping of all Tasks stored in this TaskList to their"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * assigned taskNumber."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return a List of NumberedTasks created from all Tasks stored in this TaskList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public List\u003cNumberedTask\u003e tasksToString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        List\u003cNumberedTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            Task currentTask \u003d taskList.get(i);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            result.add(new NumberedTask(i + 1 , currentTask));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns a List containing the mapping of all Tasks stored in this TaskList and whose description matches a given"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * keyword, to their assigned taskNumber."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param keyword keyword to find Tasks by"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return a List of NumberedTasks created from Tasks stored in this TaskList that match the given keyword"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public List\u003cNumberedTask\u003e getMatchingTasks(String keyword) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        List\u003cNumberedTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            Task currentTask \u003d taskList.get(i);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            if (currentTask.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                result.add(new NumberedTask(i + 1, currentTask));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 106
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represent a basic Task that the user has to complete."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Todo(String description, boolean completed) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(description, completed);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Todo markCompleted() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Todo(description, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(\"[%s]%s\", symbol, super.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 25
    }
  },
  {
    "path": "src/main/java/duke/ui/Response.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents a response sent by the Duke logic to the GUI."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Response {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /** Whether the GUI should exit **/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /** Message the GUI should display to user **/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Response(boolean isExit, String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 26
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.task.NumberedTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Formats Strings to be sent to the GUI to be displayed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final String LINE_SEPARATOR \u003d \"***********************\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Formats a String message by adding line separator Strings to before and after the message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param msg the message to be formatted"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return Formatted String with line separators added"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String formatMessage(String msg) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String result \u003d String.format(\"%s \\n %s \\n %s\", LINE_SEPARATOR, msg, LINE_SEPARATOR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String greet() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return formatMessage(\"Hi! I\u0027m Duke :-) What can I do for you?\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private String listAllTasks(List\u003cNumberedTask\u003e taskList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        StringBuilder tasks \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            tasks.append(taskList.get(i).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            if (i !\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                tasks.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return tasks.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Formats a String to display to user all Tasks and the taskNumber mapped to them in a given List of NumberedTasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param taskList List containing NumberedTasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return String that provides feedback to users and displays all Tasks and their taskNumbers in the given List of"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *         NumberedTasks"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String allTasksToString(List\u003cNumberedTask\u003e taskList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        StringBuilder tasks \u003d new StringBuilder(\"Here are the tasks in your list: \\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return tasks.append(listAllTasks(taskList)).toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Formats a String to display to user all Tasks that match a keyword and the taskNumber mapped to them."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param taskList List containing NumberedTasks mappings where the Task in the mapping matches a keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return String that provides feedback to users and displays all Tasks and their taskNumbers in the given List of"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *         NumberedTasks"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String foundTasksToString(List\u003cNumberedTask\u003e taskList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        StringBuilder tasks \u003d new StringBuilder(\"Here are the matching tasks in your list: \\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return tasks.append(listAllTasks(taskList)).toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void stopReading() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 78
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cfx:root"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        alignment\u003d\"TOP_RIGHT\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        spacing\u003d\"5\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" styleClass\u003d\"chat-box\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 25
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cfx:root type\u003d\"javafx.scene.layout.AnchorPane\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "         maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "         maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "         minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "         minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003cScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                fx:id\u003d\"scrollPane\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                prefHeight\u003d\"500.0\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                vvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                AnchorPane.leftAnchor\u003d\"1.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                AnchorPane.rightAnchor\u003d\"1.0\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                AnchorPane.topAnchor\u003d\"1.0\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                AnchorPane.bottomAnchor\u003d\"40\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                      maxHeight\u003d\"Infinity\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                      maxWidth\u003d\"Infinity\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                      prefWidth\u003d\"${scrollPane.width}\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003cHBox"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                AnchorPane.bottomAnchor\u003d\"1.0\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                AnchorPane.leftAnchor\u003d\"1.0\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                AnchorPane.rightAnchor\u003d\"1.0\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cTextField fx:id\u003d\"userInput\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cButton fx:id\u003d\"sendButton\" mnemonicParsing\u003d\"false\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 50
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void parseUserInput_correctInput_correctCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String[] userInput \u003d new String[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"todo sleep\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"deadline assignment /by 30 Aug 2020 2359\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"done 2\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"list\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"bye\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"delete 3\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"event meeting /at 24 Aug 2020 1000\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Command[] expectedCommands \u003d new Command[] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new TodoCommand(\"sleep\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new DeadlineCommand(\"assignment\", \"30 Aug 2020 2359\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new DoneCommand(2),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new ListCommand(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new ByeCommand(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new DeleteCommand(3),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new EventCommand(\"meeting\", \"24 Aug 2020 1000\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            for (int i \u003d 0; i \u003c userInput.length; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                Command c \u003d parser.parse(userInput[i]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                assertEquals(expectedCommands[i], c);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            fail(\"test should not have thrown an exception\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void parseUserInput_emptyTaskBody_throwsException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String[] userInput \u003d new String[] {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"todo \","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"deadline \","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \"event \","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        for (String input : userInput) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            assertThrows(DukeException.class, () -\u003e parser.parse(input));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 63
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import duke.exceptions.NoSuchTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void completeTask_invalidTaskNumber_throwException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        TaskList testList \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NoSuchTaskException.class, () -\u003e testList.completeTask(55));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void deleteTask_invalidTaskNumber_throwException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        TaskList testList \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NoSuchTaskException.class, () -\u003e testList.completeTask(123));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 21
    }
  },
  {
    "path": "text-ui-test/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "T | 0 | sleep"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "todo sleep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "deadline wake up /by 21 Aug 2020 1000"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "event do work /at 21 Aug 2020 1045"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "event efwfw /at 9pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "REM delete output from previous run and delete storage file"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "del data\\duke.txt"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java ..\\src\\main\\java\\duke.exceptions\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "TanLeYang": 4
    }
  }
]
