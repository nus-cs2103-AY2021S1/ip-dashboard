[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "erinmayg": 2
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** The duke bot that stores your tasks. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Deals with interaction with the user. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Contains the task list and add/delete operations for the task list */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Deals with saving and loading the tasks from the file. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs a Duke bot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param filePath The filepath to store the data in."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Runs the bot, accepts tasks and saves them into the file. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        Duke bot \u003d new Duke(\"data\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        bot.run();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "erinmayg": 56
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.command.ToDoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.EmptyTaskException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.NoIndexException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.NoKeywordException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.UnrecognizedTaskException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** Deals with making sense of user inputs. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Makes sense of user inputs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param fullCommand The user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return A Command for the bot to do."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws UnrecognizedTaskException If the first word is not a recognized command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws NoIndexException If the command is delete or done and the index is \u003c 0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *         or larger than the size of the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws EmptyTaskException If the command is an add task command such as todo,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *         event, or deadline and is followed by no description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public static Command parse(String fullCommand)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            throws UnrecognizedTaskException, NoIndexException, EmptyTaskException, NoKeywordException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        String firstWord \u003d fullCommand.contains(\" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                ? fullCommand.substring(0, fullCommand.indexOf(\" \")).toLowerCase()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                : fullCommand.toLowerCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        switch (firstWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return new ToDoCommand(getTask(fullCommand, \"todo\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return new EventCommand(getTask(fullCommand, \"event\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return new DeadlineCommand(getTask(fullCommand, \"deadline\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return new ListCommand(fullCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return new FindCommand(fullCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                if (fullCommand.equalsIgnoreCase(\"done\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    throw new NoIndexException(\"done\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                        int taskNo \u003d Integer.parseInt(fullCommand.substring(5));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                        return new DoneCommand(taskNo);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    } catch (NumberFormatException numError) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                        throw new NoIndexException(\"done\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                if (fullCommand.equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    throw new NoIndexException(\"delete\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                        int taskNo \u003d Integer.parseInt(fullCommand.substring(7));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                        return new DeleteCommand(taskNo);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    } catch (NumberFormatException numError) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                        throw new NoIndexException(\"delete\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                throw new UnrecognizedTaskException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private static String getTask(String fullCommand, String firstWord) throws EmptyTaskException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return fullCommand.substring(firstWord.length() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            throw new EmptyTaskException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Makes sense of a string that represents date time in ISO format."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param dateTimeString A String that represents the date time."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return The date time in LocalDateTime"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws InvalidDateException If the dateTimeString is not in a valid date time format."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public static LocalDateTime getDateTime(String dateTimeString) throws InvalidDateException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        dateTimeString \u003d dateTimeString.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            if (dateTimeString.length() \u003d\u003d 19 || dateTimeString.length() \u003d\u003d 16) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return LocalDateTime.parse(dateTimeString);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            } else if (dateTimeString.contains(\"-\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return LocalDateTime.of(LocalDate.parse(dateTimeString), LocalTime.parse(\"23:59\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            } else if (dateTimeString.contains(\":\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return LocalDateTime.of(LocalDate.now(), LocalTime.parse(dateTimeString));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                throw new InvalidDateException();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            throw new InvalidDateException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 134
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.FileLoadError;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** Deals with saving and loading the data into a file. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The filepath to store the data. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The path to an existing saved file. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private Path dukeFile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs a Storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param filePath The filepath to store the data in."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        createFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Creates a file to save the data if it has not existed. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private void createFile() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            if (Files.notExists(Paths.get(filePath))) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                Files.createDirectory(Paths.get(filePath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            if (Files.notExists(Paths.get(filePath + \"/duke.txt\"))) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                dukeFile \u003d Files.createFile(Paths.get(filePath + \"/duke.txt\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                dukeFile \u003d Paths.get(filePath + \"/duke.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (IOException ioException) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            ioException.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Saves the task list into a file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param tasks The task list to be saved."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void saveTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        StringBuilder taskString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            taskString.append(task.saveFormat());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            taskString.append(\"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Files.writeString(dukeFile, taskString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (IOException ioException) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            ioException.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Loads the task list from the saved file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return The task list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws FileLoadError If there is an error in reading or obtaining the file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileLoadError {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            for (String task : Files.readAllLines(dukeFile)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                Task t \u003d readTask(task);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                if (t !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    taskList.add(readTask(task));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (IOException ioException) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            ioException.printStackTrace();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            throw new FileLoadError();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Reads the saved tasks in the file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param task The task to be read"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return The task in the proper format, such as ToDo, Event, or Deadline"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private Task readTask(String task) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        switch (task.charAt(0)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            case \u0027T\u0027:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                ToDo toDo \u003d new ToDo(task.substring(3).trim());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                if (task.charAt(1) \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    toDo \u003d toDo.markDone();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return toDo;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            case \u0027D\u0027:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                Deadline deadline \u003d new Deadline(task.substring(3, task.length() - 19).trim(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                        LocalDateTime.parse(task.substring(task.length() - 19)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                if (task.charAt(1) \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    deadline \u003d deadline.markDone();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return deadline;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            case \u0027E\u0027:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                String taskText \u003d task.substring(3, task.length() - 43).trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                String startDateString \u003d task.substring(task.length() - 42, task.length() - 23);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                String endDateString \u003d task.substring(task.length() - 19);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                Event event \u003d new Event(taskText,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                        LocalDateTime.parse(startDateString),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                        endDateString.equals(\"XXXXXXXXXXXXXXXXXXX\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                                ? null"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                                : LocalDateTime.parse(endDateString));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                if (task.charAt(1) \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    event \u003d event.markDone();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return event;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                // Fallthrough"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 154
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DeadlineInvalidDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DuplicateTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.EventInvalidDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** Contains the task list. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The task list. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs a @TaskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskList The task list containing saved tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.tasks \u003d taskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Constructs a @TaskList. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Compares two objects."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param o The object to compare."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return True if the objects the same, in other words if the object is a @TaskList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *         with a list containing the same tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else if (o instanceof TaskList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            TaskList t \u003d (TaskList) o;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return tasks.equals(t.tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Processes the @list command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param fullCommand The full command given by the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws InvalidDateException If the command is of the format @list @[description]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *         but the @[description] is in not in a valid date format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void processList(String fullCommand) throws InvalidDateException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        if (fullCommand.trim().equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            printList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            LocalDate date \u003d Parser.getDateTime(fullCommand.substring("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    \"list\".length()).trim()).toLocalDate();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            printList(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Prints the tasks in the list. */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private void printList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(\"You have nothing on your list!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        for (Task todo : tasks) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(i + \". \" + todo);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * An overload of the @list command."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Prints the tasks occurring on the same @date in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param date The date given by the user."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private void printList(LocalDate date) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            if (task.getDate().equals(date)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    System.out.println(\"Here\u0027s your list on \" +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                            date.format(DateTimeFormatter.ofPattern(\"dd MMM y:\")));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                System.out.println((i + 1) + \". \" + task);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        if (i \u003d\u003d 0 || tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(\"You have nothing to do on \" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    date.format(DateTimeFormatter.ofPattern(\"dd MMM y.\")));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Adds a @ToDo task to the task list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param task The description of the @ToDo task."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws DuplicateTaskException If an existing @ToDo task is already on the list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void addToDo(String task) throws DuplicateTaskException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        Task toDo \u003d new ToDo(task.trim());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        if (tasks.contains(toDo)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        tasks.add(toDo);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Adds an @Event to the task list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param input The description of the @Event."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws DuplicateTaskException If an existing @Event with the same description"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *         and date is already on the list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws EventInvalidDate If the date of the event given is not in a valid date time format."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void addEvent(String input) throws DuplicateTaskException, EventInvalidDate {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            String task \u003d input.substring(0, input.indexOf(\u0027/\u0027)).trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            LocalDateTime date \u003d input.contains(\"to \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    ? Parser.getDateTime(input.substring(input.indexOf(\"/at\") + 4, input.indexOf(\"to \")))"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    : Parser.getDateTime(input.substring(input.indexOf(\"/at\") + 4));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            LocalDateTime endDate \u003d null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            if (input.contains(\"to \")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                String endDateString \u003d input.substring(input.indexOf(\"to \") + 3);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                if (endDateString.length() \u003c\u003d 8) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    endDate \u003d LocalDateTime.of(date.toLocalDate(), LocalTime.parse(endDateString));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    endDate \u003d Parser.getDateTime(endDateString);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Event event \u003d endDate !\u003d null"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    ? new Event(task, date, endDate)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    : new Event(task, date);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            if (tasks.contains(event)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                tasks.add(event);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | InvalidDateException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            throw new EventInvalidDate();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Adds a @Deadline to the task list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param input The description of the deadline."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws DuplicateTaskException If an exsiting @Deadline with the same description"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *         and date is already on the list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws DeadlineInvalidDate If the date of the deadline given is not in a valid date time format."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void addDeadline(String input) throws DuplicateTaskException, DeadlineInvalidDate {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            String task \u003d input.substring(0, input.indexOf(\u0027/\u0027)).trim();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            LocalDateTime date \u003d Parser.getDateTime(input.substring(input.indexOf(\"/by\") + 4));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Deadline deadline \u003d new Deadline(task, date);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            if (tasks.contains(deadline)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                tasks.add(deadline);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (StringIndexOutOfBoundsException | InvalidDateException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            throw new DeadlineInvalidDate();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Marks the task with the given index as done."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskIndex The index of the task to be marked."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws InvalidIndexException If the @taskIndex \u003c 0 or larger than the size of the @taskList."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void markDone(int taskIndex) throws InvalidIndexException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            tasks.set(taskIndex, tasks.get(taskIndex).markDone());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(tasks.get(taskIndex));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            throw new InvalidIndexException(tasks.size());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Deletes the task with the given index."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskIndex The index of the task to be deleted."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws InvalidIndexException If the @taskIndex \u003c 0 or larger than the size of the @taskList."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void deleteTask(int taskIndex) throws InvalidIndexException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Task deleted \u003d tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(deleted);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            throw new InvalidIndexException(tasks.size());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Finds tasks with the given @keyword."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param keyword The keyword to search for in tasks."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void findTasks(String keyword) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        keyword \u003d keyword.trim().toLowerCase();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            if (task.getTask().contains(keyword)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    System.out.println(\"Here are the matching tasks on your list.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                System.out.print((i + 1) + \". \");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                System.out.println(task);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(\"OOPS. There are no tasks on your list with the following keyword.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Prints the size of the @taskList. */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void printListSize() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        String taskText \u003d tasks.size() \u003d\u003d 1 ? \" task \" : \" tasks \";"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(\"You have \" + tasks.size() + taskText + \"on your list.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Prints the recently added task. */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void printNewTask() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(tasks.get(tasks.size() - 1).toString());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        printListSize();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 286
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** Deals with interaction with the user. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** A decorative line to serve as a border. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public static final String LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The name of the Duke bot. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private final String botName \u003d \"Bolot\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The scanner used to read user inputs. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private final Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Prints the logo of the Duke bot. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private void printLogo() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(\"Greetings, human. I am\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(\" ______      ___   _____       ___    _________\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(\"|_   _ \\\\   .\u0027   `.|_   _|    .\u0027   `. |  _   _  |\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(\"  | |_) | /  .-.  \\\\ | |     /  .-.  \\\\|_/ | | \\\\_|\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(\" _| |__) |\\\\  `-\u0027  /_| |__/ |\\\\  `-\u0027  /   _| |_\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(\"|_______/  `.___.\u0027|________| `.___.\u0027   |_____|\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Greets the user. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private void greet() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(\"Hello! I am \" + botName + \", your personal chat-bot companion.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(\"How may I help you?\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Prints the logo and greets the user. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        greet();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Says goodbye to the user. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void bye() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(\"Bye! Thank you for chatting with \" + botName + \"!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(\"Hope to see you again soon!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Prints the border line. */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Reads the input from the user. */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Prints the error message. */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Prints the error message. */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        System.out.println(\"Unable to load the data. Creating new file...\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 67
    }
  },
  {
    "path": "src/main/java/duke/command/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** A command to add tasks. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public abstract class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The description of the command. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Executes the command by adding a task into the @taskList and saves the new @taskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskList The task list that stores and modifies the list of saved tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param ui The UI of the bot."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param storage The storage system of the bot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws DukeException If there is something wrong with the task input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        addTask(taskList, input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        storage.saveTasks(taskList.getTasks());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        taskList.printNewTask();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Adds a task into the @taskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskList The task list containing all saved tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param input The description of the command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws DukeException If the input is not in a valid format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public abstract void addTask(TaskList taskList, String input) throws DukeException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 37
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** A command for the Duke bot to execute. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The type of command. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Executes the command accordingly."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskList The task list that stores and modifies the list of saved tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param ui The UI of the bot."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param storage The storage system of the bot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws DukeException If there is something wrong with the task input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Returns the type of command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return True if the command is an ExitCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 33
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** A command to add a Deadline. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class DeadlineCommand extends AddTaskCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs a DeadlineCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param input The description of the deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public DeadlineCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Adds a deadline into the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskList The task list that stores and modifies the list of saved tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param input The description of the deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws DukeException If there is something wrong with the deadline input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void addTask(TaskList taskList, String input) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        taskList.addDeadline(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Compares with an object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param o The object compared."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return True if the object is of type DeadlineCommand and has the same input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else if (o instanceof DeadlineCommand) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            DeadlineCommand t \u003d (DeadlineCommand) o;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return t.input.equals(this.input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 47
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** A command to delete a task. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The task number to be deleted. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private int taskNo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs a DeleteCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskNo The task number to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public DeleteCommand(int taskNo) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.taskNo \u003d taskNo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Executes the command by deleting a task with the given taskNo."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskList The task list that stores and modifies the list of saved tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param ui The UI of the bot."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param storage The storage system of the bot."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws DukeException If there is something wrong with the deleting process."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        taskList.deleteTask(taskNo - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        storage.saveTasks(taskList.getTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Compares with an object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param o The object compared."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return True if the object is of type DeleteCommand and has the same taskNo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else if (o instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            DeleteCommand t \u003d (DeleteCommand) o;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return t.taskNo \u003d\u003d this.taskNo;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 55
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** A command to mark a task as done. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The number of the task to be marked as done. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private int taskNo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs a DoneCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskNo The number of the task to be marked as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public DoneCommand(int taskNo) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.taskNo \u003d taskNo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Executes the command by marking the task with the given taskNo as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskList The task list that stores and modifies the list of saved tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param ui The UI of the bot."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param storage The storage system of the bot."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws DukeException If the taskNo is invalid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        taskList.markDone(taskNo - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        storage.saveTasks(taskList.getTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Compares an object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param o The object compared."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return True if the object is of type DoneCommand and has the same taskNo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else if (o instanceof DoneCommand) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            DoneCommand t \u003d (DoneCommand) o;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return t.taskNo \u003d\u003d this.taskNo;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 55
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** A command to add an @Event. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class EventCommand extends AddTaskCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs an @EventCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param input The description of the @Event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public EventCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Adds an @Event to the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskList The task list containing all saved tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param input The description of the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws DukeException If there is an error when adding the @Event into the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void addTask(TaskList taskList, String input) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        taskList.addEvent(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Compares an object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param o The object compared."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return True if the object is of type @EventCommand and has the same @input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else if (o instanceof EventCommand) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            EventCommand t \u003d (EventCommand) o;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return t.input.equals(this.input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 47
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** A command to exit the bot. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Constructs an @ExitCommand. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Executes the command by printing a goodbye message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskList The task list that stores and modifies the list of saved tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param ui The UI of the bot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param storage The storage system of the bot."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        ui.bye();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 26
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.NoKeywordException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** A command to find tasks with a given keyword. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The keyword to find in tasks. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs a @FindCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param fullCommand The input given by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws NoKeywordException If the @fullCommand has no keyword following @find command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public FindCommand(String fullCommand) throws NoKeywordException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            this.keyword \u003d fullCommand.substring(\"find\".length() + 1).trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            throw new NoKeywordException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Executes the command by finding tasks with the given @keyword."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskList The task list that adds or deletes task in the task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param ui The UI for the bot."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param storage The storage for saving tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        taskList.findTasks(keyword);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 40
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** A command to display tasks in the task list. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The full command given by the user. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs a @ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param fullCommand The input given by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public ListCommand(String fullCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Executes the command by listing the tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskList The task list that stores and modifies the list of saved tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param ui The UI of the bot."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param storage The storage system of the bot."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws DukeException If there is something wrong with the input format given by the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        taskList.processList(fullCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 35
    }
  },
  {
    "path": "src/main/java/duke/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** A command to add a @ToDo to the task list. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class ToDoCommand extends AddTaskCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs a @ToDoCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param input The description of the @ToDo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public ToDoCommand(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Adds a @ToDo to the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param taskList The task list containing all saved tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param input The description of the command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @throws DukeException If the @input is not in a valid format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void addTask(TaskList taskList, String input) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        taskList.addToDo(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Compares an object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param o The object compared."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return True if the object is of type @ToDoCommand and has the same @input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else if (o instanceof ToDoCommand) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            ToDoCommand t \u003d (ToDoCommand) o;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return t.input.equals(this.input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 47
    }
  },
  {
    "path": "src/main/java/duke/exception/DeadlineInvalidDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** An exception for an invalid date for a deadline. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class DeadlineInvalidDate extends InvalidDateTimeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Constructs a @DeadlineInvalidDate exception. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public DeadlineInvalidDate() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(\"OOPS. You need to put \\\"/by [DateTimeFormat]\\\"\\n\" +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                \"after a duke.task.Deadline.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** An exception for the Duke bot. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs a DukeException with the given message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param msg The message to be printed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/DuplicateTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** An exception that occurs when trying to add an existing task into the list. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class DuplicateTaskException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Constructs a @DuplicateTaskException. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(\"OOPS. You already have this task on your list.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** An exception when the @AddTaskCommand given has no description. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class EmptyTaskException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Constructs an @EmptyTaskException. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public EmptyTaskException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(\"OOPS! The description of a task cannot be empty\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/EventInvalidDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** An exception that occurs when the given date time format for a deadline is invalid. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class EventInvalidDate extends InvalidDateTimeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Constructs an @EventInvalidDate exception. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public EventInvalidDate() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(\"OOPS. You need to put \\\"/at [DateTimeFormat]\\\" or\\n\" +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                \"\\\"/at [DateTimeFormat] to [DateTimeFormat]\\\" after an duke.task.Event.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/FileLoadError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** An exception that occurs when there\u0027s an error when loading a file. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class FileLoadError extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Constucts a @FileLoadError exception. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public FileLoadError() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(\"Error in reading file. Bolot will now create a new file.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** An exception when the date given is invalid. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class InvalidDateException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Constructs an @InvalidDateException. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public InvalidDateException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(\"Invalid Date Format. Use YYYY-MM-DD\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs an @InvalidDateException with the given message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param msg The message given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    protected InvalidDateException(String msg) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** An exception when the date time given is invalid. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class InvalidDateTimeException extends InvalidDateException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The valid date time format that Duke accepts. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public static String DateTimeFormat \u003d \"The following DateTimeFormat is valid:\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            + \"{YYYY-MM-DD}T{HH:MM:SS}\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            + \"{YYYY-MM-DD}T{HH:MM}\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            + \"{YYYY-MM-DD}\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            + \"{HH:MM:SS}\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            + \"{HH:MM}\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Constructs an @InvalidDateTimeException. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public InvalidDateTimeException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(\"\" + DateTimeFormat);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs an @InvalidDateTimeException with the given message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param msg The given message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    protected InvalidDateTimeException(String msg) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(msg + \"\\n\\n\" + DateTimeFormat);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 27
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** An exception that occurs when an index Duke receives is invalid"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": " *     (less than 0, or larger than the task list size."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs an @InvalidIndexException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param listSize The current size of the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public InvalidIndexException(int listSize) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(\"Invalid index.\\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                \"You have \" + listSize + \" items in your list.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/NoIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** An exception when there is no index given following the @DoneCommand or @DeleteCommand. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class NoIndexException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs a @NoIndexException."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param deleteOrDone The type of command: @DeleteCommand or @DoneCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public NoIndexException(String deleteOrDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(\"Invalid format. After \\\"\" + deleteOrDone + \"\\\", you need to put a positive integer\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/NoKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** An exception when there is no keyword following a find command. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class NoKeywordException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Constructs a @NoKeywordException. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public NoKeywordException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(\"OOPS. You need to input a keyword following \\\"find\\\".\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/UnrecognizedTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** An exception when the command given is not a valid command:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": " *     list, done, delete, bye, deadline, event, or todo. */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class UnrecognizedTaskException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Constructs an UnrecognizedTaskException. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public UnrecognizedTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(\"OOPS. Bolot does not recognize the command :( Try again.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 11
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** A task of type deadline. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The deadline of the task. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs a Deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param task The description of the deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param deadline The date of the deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param isDone The status of the deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private Deadline (String task, LocalDateTime deadline, boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(task, isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs an unfinished Deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param task The description of the deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param deadline The date of the deadline."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public Deadline(String task, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Marks the deadline as done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return The same deadline with a status of completed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public Deadline markDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return new Deadline(task, deadline, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Compares with another object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param o The object compared."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return True if the object compared is a Deadline with the same task and deadline."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else if (o instanceof Deadline) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Deadline d \u003d (Deadline) o;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return d.task.equals(this.task) \u0026\u0026 d.deadline.equals(deadline);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return deadline.toLocalDate();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * The format used for saving."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return The String format used for saving."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return \"D\" + super.saveFormat() + String.format(\"%sT%s\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                deadline.format(DateTimeFormatter.ofPattern(\"y-MM-dd\")),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                deadline.format(DateTimeFormatter.ofPattern(\"HH:mm:ss\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * The format used to display on a list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return The String format of a deadline."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return \"[D]\" + super.toString() + String.format(\" (by: %s)\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                deadline.format(DateTimeFormatter.ofPattern(\"dd MMM y, h:mm a\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 89
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** A task of type Event. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The starting date time of the event. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private final LocalDateTime startDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The end date time of the event. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private final LocalDateTime endDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs an @Event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param task The description of the event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param startDate The starting date of the event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param endDate The end date of the event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param isDone The completion status of the event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private Event (String task, LocalDateTime startDate, LocalDateTime endDate, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(task, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs an uncompleted @Event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param task The description of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param startDate The starting date of the event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param endDate The end date of the event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public Event(String task, LocalDateTime startDate, LocalDateTime endDate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs an uncompleted @Event."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param task The description of the event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param date The date of the event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public Event(String task, LocalDateTime date) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.startDate \u003d date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.endDate \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The String format of the date. */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private String dateFormat() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        if (endDate !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return String.format(\" (at: %s to %s)\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    startDate.format(DateTimeFormatter.ofPattern(\"dd MMM y, h:mm a\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    startDate.toLocalDate().equals(endDate.toLocalDate())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                            ? endDate.format(DateTimeFormatter.ofPattern(\"h:mm a\"))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                            : endDate.format(DateTimeFormatter.ofPattern(\"dd MMM y, h:mm a\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return String.format(\" (at: %s)\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    startDate.format(DateTimeFormatter.ofPattern(\"dd MMM y, h:mm a\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The String format of the date used for saving. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private String dateSaveFormat() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        String startDateString \u003d String.format(\"%sT%s\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                startDate.format(DateTimeFormatter.ofPattern(\"y-MM-dd\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                startDate.format(DateTimeFormatter.ofPattern(\"HH:mm:ss\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        String endDateString \u003d endDate !\u003d null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                ? String.format(\"%sT%s\", endDate.format(DateTimeFormatter.ofPattern(\"y-MM-dd\")),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    endDate.format(DateTimeFormatter.ofPattern(\"HH:mm:ss\")))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                : \"XXXXXXXXXXXXXXXXXXX\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return startDateString + \" to \" + endDateString;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Marks the event as done."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return The same event with a status of completed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public Event markDone() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return new Event(task, startDate, endDate, true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return startDate.toLocalDate();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Compares with another object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param o The object compared."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return True if the object compared is a @Event with the same task, start and end dates."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else if (o instanceof Event) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Event e \u003d (Event) o;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            if (e.endDate \u003d\u003d null \u0026\u0026 endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return e.task.equals(this.task) \u0026\u0026 e.startDate.equals(startDate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            } else if (e.endDate !\u003d null \u0026\u0026 endDate !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return e.task.equals(this.task) \u0026\u0026 e.startDate.equals(startDate)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                        \u0026\u0026 e.endDate.equals(endDate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * The format used for saving."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return The String format used for saving."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return \"E\" + super.saveFormat() + dateSaveFormat();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * The format used to display on a list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return The String format of a deadline."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return \"[E]\" + super.toString() + dateFormat();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 143
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** The task to be put on the list. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The task description. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    protected final String task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** The completion status. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    protected final boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs a Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param task The task description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param isDone The task\u0027s completion status."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    protected Task(String task, boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs an uncompleted Task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param task The task description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public Task(String task){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Marks the task as done. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public abstract Task markDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Compares with another object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param o The object compared."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return True if the object compared is a Task with the same task description."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else if (o instanceof Task) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Task t \u003d (Task) o;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return t.task.equals(this.task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * The format used to display on a list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return The String format of a task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        String symbol \u003d isDone ? \"[✓] \" : \"[✗] \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return String.format(\"%s %s\", symbol, task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * The format used for saving."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return The String format used for saving."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        String isDoneString \u003d isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return String.format(\"%s %s \", isDoneString, task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 80
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "/** A task of type ToDo. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs a @ToDo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param task The description of the @ToDo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param isDone The completion status of the @ToDo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    private ToDo (String task, boolean isDone) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(task, isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Constructs an uncompleted @ToDo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param task The task description of the @ToDo."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public ToDo(String task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /** Marks the @ToDo as done. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public ToDo markDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return new ToDo(task, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return LocalDate.now();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * Compares with another object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @param o The object compared."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return True if the object compared is a @ToDo with the same task description."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return o instanceof ToDo \u0026\u0026 super.equals(o);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * The format used for saving."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return The String format used for saving."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return \"T\" + super.saveFormat();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * The format used to display on a list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     * @return The String format of a ToDo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 66
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void createDukeTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Duke duke \u003d new Duke(\"dukeTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            assertTrue(Files.exists(Paths.get(\"dukeTest/duke.txt\")));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Files.deleteIfExists(Paths.get(\"dukeTest/duke.txt\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Files.deleteIfExists(Paths.get(\"dukeTest\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 30
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.command.ToDoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.EmptyTaskException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.NoIndexException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.UnrecognizedTaskException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void parse_unrecognizedCommand_exceptionThrown1() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        assertThrows(UnrecognizedTaskException.class, () -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Parser.parse(\"bleh\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void parse_unrecognizedCommand_exceptionThrown2() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        assertThrows(UnrecognizedTaskException.class, () -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Parser.parse(\"bleh kdfhkdh\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void parse_deleteNoIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        assertThrows(NoIndexException.class, () -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Parser.parse(\"delete\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void parse_doneNoIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        assertThrows(NoIndexException.class, () -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Parser.parse(\"done \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void parse_eventNoTaskDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        assertThrows(EmptyTaskException.class, () -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Parser.parse(\"event \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void parse_deadlineNoTaskDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        assertThrows(EmptyTaskException.class, () -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Parser.parse(\"deadline\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void getDateTime_invalidDateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            assertThrows(InvalidDateException.class, () -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Parser.getDateTime(\"08102020\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void getDateTime_invalidDateTimeFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        assertThrows(InvalidDateException.class, () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Parser.getDateTime(\"2020-08-20T10.00\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void parse_inputToDo_returnToDoCommand() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            assertEquals(Parser.parse(\"todo sleep\"), new ToDoCommand(\"sleep\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }  catch (DukeException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void parse_inputEvent_returnEventCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            assertEquals(Parser.parse(\"event bfast /at 10:00\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    new EventCommand(\"bfast /at 10:00\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void parse_inputDeadline_returnDeadlineCommand() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            assertEquals(Parser.parse(\"deadline project /by 2020-08-27\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    new DeadlineCommand(\"project /by 2020-08-27\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void parse_inputDone_returnDoneCommand() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            assertEquals(Parser.parse(\"done 1\"), new DoneCommand(1));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void parse_inputDelete_returnDeleteCommand() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            assertEquals(Parser.parse(\"delete 1\"), new DeleteCommand(1));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 122
    }
  },
  {
    "path": "src/test/java/duke/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void createFile_inputFilePath_fileExists() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Storage storage \u003d new Storage(\"storageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            assertTrue(Files.exists(Paths.get(\"storageTest/duke.txt\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Files.deleteIfExists(Paths.get(\"storageTest/duke.txt\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            Files.deleteIfExists(Paths.get(\"storageTest\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void saveLoadTasksTest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        tasks.add(new ToDo(\"sleep\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        tasks.add(new Event(\"bfast\", LocalDateTime.of(LocalDate.now(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                LocalTime.parse(\"10:00\"))));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        tasks.add(new Deadline(\"project\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                LocalDateTime.of(LocalDate.parse(\"2020-08-27\"), LocalTime.parse(\"23:59\"))));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        Storage storage \u003d new Storage(\"storageTest\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        storage.saveTasks(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            assertEquals(tasks, storage.load());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 53
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.DuplicateTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void addToDoTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            taskList.addToDo(\"sleep\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            list.add(new ToDo(\"sleep\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            TaskList taskListTemplate \u003d new TaskList(list);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            assertEquals(taskList, taskListTemplate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void addEventTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            taskList.addEvent(\"bfast /at 10:00\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            list.add(new Event(\"bfast\", LocalDateTime.of(LocalDate.now(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    LocalTime.parse(\"10:00\"))));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            TaskList taskListTemplate \u003d new TaskList(list);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            assertEquals(taskList, taskListTemplate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void addDeadlineTest() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            taskList.addDeadline(\"project /by 2020-08-27\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            list.add(new Deadline(\"project\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                    LocalDateTime.of(LocalDate.parse(\"2020-08-27\"), LocalTime.parse(\"23:59\"))));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            TaskList taskListTemplate \u003d new TaskList(list);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            assertEquals(taskList, taskListTemplate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void markDoneTest() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            list.add(new ToDo(\"sleep\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            TaskList taskList \u003d new TaskList(list);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            taskList.markDone(0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            ArrayList\u003cTask\u003e listTemplate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            listTemplate.add(new ToDo(\"sleep\").markDone());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            TaskList taskListTemplate \u003d new TaskList(listTemplate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            assertEquals(taskList, taskListTemplate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void deleteTaskTest() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            list.add(new ToDo(\"sleep\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            TaskList taskList \u003d new TaskList(list);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            taskList.deleteTask(0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            TaskList taskListTemplate \u003d new TaskList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            assertEquals(taskList, taskListTemplate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void printListTest1() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        list.add(new ToDo(\"sleep\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        list.add(new Event(\"bfast\", LocalDateTime.of(LocalDate.now(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                LocalTime.parse(\"10:00\"))));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        list.add(new Deadline(\"project\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                LocalDateTime.of(LocalDate.parse(\"2020-08-27\"), LocalTime.MAX)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        TaskList taskList \u003d new TaskList(list);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            taskList.processList(\"list\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void printListTest2() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        list.add(new ToDo(\"sleep\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        list.add(new Event(\"bfast\", LocalDateTime.of(LocalDate.now(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                LocalTime.parse(\"10:00\"))));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        list.add(new Deadline(\"project\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "                LocalDateTime.of(LocalDate.parse(\"2020-08-27\"), LocalTime.MAX)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        TaskList taskList \u003d new TaskList(list);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            taskList.processList(\"list 2020-08-27\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void duplicateTaskTest() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        list.add(new ToDo(\"sleep\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        TaskList taskList \u003d new TaskList(list);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            taskList.addToDo(\"sleep\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    public void invalidIndexTest() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        list.add(new ToDo(\"sleep\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        TaskList taskList \u003d new TaskList(list);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "erinmayg"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        assertThrows(InvalidIndexException.class, () -\u003e {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "            taskList.deleteTask(2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "        });"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 174
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "todo sleep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "bleh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "bleh kjhfkdsh"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "todo"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "todo sleep"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "event"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "event bfast /at"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "event bfast /at 2020-08-24T10:00 to 12:00"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "deadline project"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "deadline project /by 2020-08-27"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "list 2020-08-24"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "erinmayg": 23
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erinmayg"
        },
        "content": "javac -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "erinmayg": 1
    }
  }
]
