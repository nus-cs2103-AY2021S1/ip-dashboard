[
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private String key;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    AddCommand(String key, String taskDescription) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.date \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    AddCommand(String key, String taskDescription, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (CommandKey.equalsCommandKey(key, CommandKey.TODO)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Task task \u003d new ToDo(taskDescription);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayAddTaskSuccess(task, tasks.size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (CommandKey.equalsCommandKey(key, CommandKey.DEADLINE)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Task task \u003d new Deadline(taskDescription, date, time);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayAddTaskSuccess(task, tasks.size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Task task \u003d new Event(taskDescription, date, time);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayAddTaskSuccess(task, tasks.size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 45
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute(TaskList tasks, Ui ui);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean isExit();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 4
    }
  },
  {
    "path": "src/main/java/CommandKey.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public enum CommandKey {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    DONE(\"done\"),"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    LIST(\"list\"),"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    DELETE(\"delete\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    TODO(\"todo\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    EVENT(\"event\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    EXIT(\"bye\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private String key;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    CommandKey(String key) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    String getKey() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return key;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    static boolean equalsCommandKey(String userCommand, CommandKey key) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return key.getKey().equals(userCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 23
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    LocalTime time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    Deadline(String task, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static Deadline of(String task, String inputDate, String inputTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(inputDate, DateTimeFormatter.ISO_LOCAL_DATE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            LocalTime time \u003d LocalTime.parse(inputTime, DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new Deadline(task, date, time);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(\"    ERROR: Duke doesn\u0027t recognise the date/time -\u003e \" "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                + inputDate + \" \" + inputTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static Deadline of(String task, String inputDate, String inputTime, boolean done) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(inputDate, DateTimeFormatter.ISO_LOCAL_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            LocalTime time \u003d LocalTime.parse(inputTime, DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Deadline deadline \u003d new Deadline(task, date, time);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (done) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                deadline.setDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return deadline;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(\"    ERROR: Duke doesn\u0027t recognise the date/time -\u003e \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    + inputDate + \" \" + inputTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"D // \" + (done ? \"1\": \"0\") + \" // \" + task + \" // \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + date.format(DateTimeFormatter.ISO_LOCAL_DATE) + \" // \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + time.format(DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + this.date.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \" \" + this.time.format(DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \")\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 59
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    DeleteCommand(int index) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private void checkIndex(TaskList tasks) throws DukeOutOfBoundsException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (index \u003c 1 || index \u003e tasks.size()) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new DukeOutOfBoundsException(CommandKey.DELETE.getKey() + \" \" + index);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            checkIndex(tasks);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Task removedTask \u003d tasks.delete(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayDeletedTaskMessage(removedTask, tasks.size());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DukeOutOfBoundsException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayError(e.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 29
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    DoneCommand(int index) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private void checkIndex(TaskList tasks) throws DukeOutOfBoundsException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (index \u003c 1 || index \u003e tasks.size()) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new DukeOutOfBoundsException(CommandKey.DONE.getKey() + \" \" + index);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            checkIndex(tasks);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            task.setDone();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayDoneMessage(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DukeOutOfBoundsException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayError(e.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 30
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    Duke() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String basePath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Path path \u003d Paths.get(basePath, \"data\", \"tasks.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        storage \u003d Storage.setup(path);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        tasks \u003d storage.readData();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    void exit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        ui.exit();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayWelcome();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            boolean isExit \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            while (!isExit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                String userInput \u003d ui.readInput();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                Command c \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                c.execute(tasks, ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            ui.displayError(e.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 40,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    DukeDateTimeException(String input) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke doesn\u0027t recognise the date/time -\u003e \" + input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 10
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    DukeException(String input) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke doesn\u0027t know what went wrong, but Duke knows something went wrong -\u003e \" + input;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 12
    }
  },
  {
    "path": "src/main/java/DukeNoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeNoDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    DukeNoDescriptionException(String input) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke can\u0027t find your task details -\u003e \" + input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 10
    }
  },
  {
    "path": "src/main/java/DukeNoItemToDeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeNoItemToDeleteException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    DukeNoItemToDeleteException(String input) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke doesn\u0027t know what to delete -\u003e \" + input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 10
    }
  },
  {
    "path": "src/main/java/DukeNoItemToMarkDoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeNoItemToMarkDoneException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    DukeNoItemToMarkDoneException(String input) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke doesn\u0027t know what to mark as done -\u003e \" + input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 10
    }
  },
  {
    "path": "src/main/java/DukeOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    DukeOutOfBoundsException(String input) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke can\u0027t find the task in the list -\u003e \" + input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 10
    }
  },
  {
    "path": "src/main/java/DukeUnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class DukeUnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    DukeUnknownCommandException(String input) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(input);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"ERROR: Duke can\u0027t recognise your command -\u003e \" + input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 10
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    LocalTime time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    Event(String task, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static Event of(String task, String inputDate, String inputTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(inputDate, DateTimeFormatter.ISO_LOCAL_DATE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            LocalTime time \u003d LocalTime.parse(inputTime, DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new Event(task, date, time);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(\"    ERROR: Duke doesn\u0027t recognise the date/time -\u003e \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                + inputDate + \" \" + inputTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static Event of(String task, String inputDate, String inputTime, boolean done) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(inputDate, DateTimeFormatter.ISO_LOCAL_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            LocalTime time \u003d LocalTime.parse(inputTime, DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Event event \u003d new Event(task, date, time);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (done) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                event.setDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(\"    ERROR: Duke doesn\u0027t recognise the date/time -\u003e \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    + inputDate + \" \" + inputTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"E // \" + (done ? \"1\": \"0\") + \" // \" + task + \" // \" "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + date.format(DateTimeFormatter.ISO_LOCAL_DATE) + \" // \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + time.format(DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + this.date.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \" \" + this.time.format(DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \")\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 59
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        ui.displayGoodbye();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 11
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        ui.displayTaskList(tasks);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 11
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private LocalDate parseDate(String inputDate) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return LocalDate.parse(inputDate, DateTimeFormatter.ISO_LOCAL_DATE);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new DukeDateTimeException(inputDate);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private LocalTime parseTime(String inputTime) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return LocalTime.parse(inputTime, DateTimeFormatter.ISO_LOCAL_TIME);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new DukeDateTimeException(inputTime);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String[] processedInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String key \u003d processedInput[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (CommandKey.equalsCommandKey(input, CommandKey.EXIT)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (CommandKey.equalsCommandKey(input, CommandKey.LIST)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (CommandKey.equalsCommandKey(processedInput[0], CommandKey.DELETE)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (processedInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw new DukeNoItemToDeleteException(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(processedInput[1]));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (CommandKey.equalsCommandKey(processedInput[0], CommandKey.DONE)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (processedInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw new DukeNoItemToMarkDoneException(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new DoneCommand(Integer.parseInt(processedInput[1])); "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (CommandKey.equalsCommandKey(key, CommandKey.TODO)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (processedInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw new DukeNoDescriptionException(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String taskDescription \u003d processedInput[1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            return new AddCommand(key, taskDescription);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (CommandKey.equalsCommandKey(key, CommandKey.DEADLINE)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (processedInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw new DukeNoDescriptionException(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String[] taskDetails \u003d input.substring(9).split(\" /by \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String task \u003d taskDetails[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String[] by \u003d taskDetails[1].split(\" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                LocalDate date \u003d parseDate(by[0]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                LocalTime time \u003d parseTime(by[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                return new AddCommand(key, task, date, time);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            } catch (DukeDateTimeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else if (CommandKey.equalsCommandKey(key, CommandKey.EVENT)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (processedInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw new DukeNoDescriptionException(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String[] taskDetails \u003d input.substring(6).split(\" /at \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String task \u003d taskDetails[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String[] by \u003d taskDetails[1].split(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                LocalDate date \u003d parseDate(by[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                LocalTime time \u003d parseTime(by[1]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                return new AddCommand(key, task, date, time);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            } catch (DukeDateTimeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            throw new DukeUnknownCommandException(input);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 78
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private Path storagePath;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    Storage(Path storagePath) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.storagePath \u003d storagePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private void deleteStorage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            Files.deleteIfExists(storagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private void createStorage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (!Files.exists(storagePath)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                Files.createFile(storagePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (IOException | SecurityException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private void writeData(TaskList tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            String[] data \u003d new String[tasks.size()];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                data[i - 1] \u003d tasks.get(i).toDataString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (Files.exists(storagePath)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                BufferedWriter writer \u003d new BufferedWriter("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    new FileWriter(storagePath.toString(), true));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                for (int i \u003d 0; i \u003c data.length; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    writer.append(data[i]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    writer.newLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                writer.close();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public TaskList readData() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            if (Files.exists(storagePath)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                BufferedReader reader \u003d new BufferedReader(new FileReader(storagePath.toString()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                while (line !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    String[] taskData \u003d line.split(\" // \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    if (taskData[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                        if (taskData.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                            boolean done \u003d Integer.parseInt(taskData[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                            tasks.add(new ToDo(taskData[2], done));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    } else if (taskData[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                        if (taskData.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                            boolean done \u003d Integer.parseInt(taskData[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                            tasks.add(Event.of(taskData[2], taskData[3], taskData[4], done));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    } else if (taskData[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                        if (taskData.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                            boolean done \u003d Integer.parseInt(taskData[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                            tasks.add(Deadline.of(taskData[2], taskData[3], taskData[4], done));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                    line \u003d reader.readLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                reader.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                return tasks;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        } catch (UnsupportedOperationException | IOException | SecurityException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public static Storage setup(Path storagePath) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        Storage storage \u003d new Storage(storagePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        storage.createStorage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void update(TaskList tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        deleteStorage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        createStorage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        writeData(tasks);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 97
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "abstract class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    protected String task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    protected boolean done;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    Task(String task) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    Task(String task, boolean done) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    abstract public String toDataString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String getStatusToString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return done ? \"✓\" : \"✘\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"[\" + getStatusToString() + \"] \" + task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 29
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public boolean add(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return tasks.add(task);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public Task delete(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return tasks.remove(index - 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return tasks.get(index - 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 29
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    ToDo(String task) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    ToDo(String task, boolean done) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        super(task, done);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toDataString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"T // \" + (done ? \"1\" : \"0\") + \" // \" + task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 19
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    static String ADD_TASK_LINE \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    static String DONE_TASK_LINE \u003d \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    static String LIST_TASK_LINE \u003d \"________________________________________________________\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    static String BYE_LINE \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    static String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayWelcome() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println(\"Hello my name\\n\" + logo + \"\\nHow may I help?\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayTaskList(TaskList tasks) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d tasks.getList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println(INDENT + LIST_TASK_LINE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(INDENT + (list.indexOf(task) + 1) + \".\" + task.toString()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            System.out.println(INDENT + \"None\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println(INDENT + LIST_TASK_LINE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayDoneMessage(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            INDENT + DONE_TASK_LINE + \"\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + \"The following task has been marked as done:\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + task.toString()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + \"\\n\" + INDENT + DONE_TASK_LINE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayDeletedTaskMessage(Task task, int taskCount) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                INDENT + DONE_TASK_LINE + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                + INDENT + \"The following task has been removed:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                + INDENT + INDENT + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                + INDENT + \"You now have \" + taskCount + \" task(s) in the list.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "                + INDENT + DONE_TASK_LINE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jmleong666"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayAddTaskSuccess(Task task, int taskCount) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            INDENT + ADD_TASK_LINE + \"\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + \"Added task:\" +\"\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + INDENT + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + \"You now have \" + taskCount + \" task(s) in the list.\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + ADD_TASK_LINE"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayError(String errorMessage) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println(INDENT + errorMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void displayGoodbye() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            INDENT + BYE_LINE + \"\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + \"Goodbye\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "            + INDENT + BYE_LINE"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 86
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "todo a"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "deadline b /by 2020-02-02 23:59"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "event c /at 2020-12-12 08:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 13
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "del data\\tasks.txt"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jmleong666"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "jmleong666": 2,
      "-": 20
    }
  }
]
