[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private boolean isInProgram \u003d true;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Command(CommandType commandType) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Command(CommandType commandType, int taskNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Command(CommandType commandType, String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Command(CommandType commandType, String description, String dateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (commandType \u003d\u003d CommandType.BYE) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            ui.close();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            isInProgram \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.LIST) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            ui.listStoredTasks(taskList.getStoredTasks());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.DONE) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            ui.printDoneMessage(taskList.markTaskAsDone(taskNumber));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            storage.updateTasks(taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.DELETE) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            ui.printDeleteMessage(taskList.deleteTask(taskNumber), taskList.getCount());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            storage.updateTasks(taskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.TODO) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            ToDo newTask \u003d new ToDo(description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            taskList.addTask(newTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            ui.printAddMessage(newTask, taskList.getCount());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            storage.updateTasks(taskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.DEADLINE) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            Deadline newTask \u003d new Deadline(description, dateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            taskList.addTask(newTask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            ui.printAddMessage(newTask, taskList.getCount());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            storage.updateTasks(taskList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.EVENT) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            Event newTask \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            taskList.addTask(newTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            ui.printAddMessage(newTask, taskList.getCount());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            storage.updateTasks(taskList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (commandType \u003d\u003d CommandType.FIND) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            ui.printResultTaskList(taskList.generateResultTaskList(description));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"Wrong command type\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean isInProgram() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return isInProgram;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 65
    }
  },
  {
    "path": "src/main/java/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents command type with input format."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    LIST(\"list\"), BYE(\"bye\"), DELETE(\"delete\"), DONE(\"done\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    TODO(\"todo\"), DEADLINE(\"deadline\"), EVENT(\"event\"), FIND(\"find\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final String input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initialises a command type with the input format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param input Input format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    CommandType(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Gets input format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Input format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 27
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a task with a deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected LocalDate byDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected LocalDateTime byDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a deadline task containing the task description and deadline of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the deadline task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param by          Deadline of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.byDateTime \u003d tryParseDateTime(by);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (byDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            this.byDate \u003d tryParseDate(by);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a deadline task containing the task description, if the task is done and deadline of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This is an overloaded constructor to allow for tasks in the hard drive to be loaded when Duke first runs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the deadline task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param isDone      If task is done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param by          Deadline of the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Deadline(String description, boolean isDone, String by) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.byDateTime \u003d tryParseDateTime(by);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (byDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            this.byDate \u003d tryParseDate(by);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Parses the date and time string, and returns a LocalDateTime object if the date and time string is in accordance"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * to any of the listed formats."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * If date and time string does not follow any of the listed formats, null is returned."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param dateString String representing the date and time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return LocalDateTime object if parsing the successful."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public LocalDateTime tryParseDateTime(String dateString) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        List\u003cString\u003e formatStrings \u003d Arrays.asList(\"yyyy-MM-dd HHmm\", \"yyyy-MM-d HHmm\", \"dd/MM/yyyy HHmm\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \"dd/M/yyyy HHmm\", \"d/MM/yyyy HHmm\", \"d/M/yyyy HHmm\", \"dd-MM-yyyy HHmm\", \"dd-M-yyyy HHmm\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \"d-MM-yyyy HHmm\", \"d-M-yyyy HHmm\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        for (String formatString : formatStrings) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                return LocalDateTime.parse(dateString, DateTimeFormatter.ofPattern(formatString));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Parses the date string, and returns a LocalDate object if the date string is in accordance"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * to any of the listed formats."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * If date string does not follow any of the listed formats, null is returned."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param dateString String representing the date."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return LocalDate object if parsing the successful."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public LocalDate tryParseDate(String dateString) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        List\u003cString\u003e formatStrings \u003d Arrays.asList(\"yyyy-MM-dd\", \"yyyy-MM-d\", \"dd/MM/yyyy\", \"d/MM/yyyy\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \"dd/M/yyyy\", \"d/M/yyyy\", \"dd-MM-yyyy\", \"dd-M-yyyy\", \"d-MM-yyyy\", \"d-M-yyyy\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        for (String formatString : formatStrings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                return LocalDate.parse(dateString, DateTimeFormatter.ofPattern(formatString));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Generates a string for printing from either the LocalDateTime object, LocalDate object, or by String."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return String representing the deadline for printing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String generateByFormat() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (byDateTime !\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return byDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, K:mm a\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (byDate !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return byDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return by;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the deadline of the task."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return String representing the deadline of the task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return \"[\" + TaskType.DEADLINE.getInitial() + \"]\" + super.toString() + \" (by: \" + generateByFormat() + \")\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 118
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Duke, more commonly known as Duck, is a Personal Assistant Chat Bot that"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * helps a person to keep track of various tasks."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Contains static attribute stored_task which stores task input from user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes Duke containing the storage, ui and task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param filePath Filepath of where storage files are stored."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            this.taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            ui.printError(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Runs Duke chat bot."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        boolean isInProgram \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        while (isInProgram) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                String input \u003d ui.getNextInput();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                isInProgram \u003d command.isInProgram();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                ui.printError(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Creates a duke object named duck and runs it."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Duke duck \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        duck.run();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 48,
      "-": 5
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents exceptions specific to Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 9
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents an event task with a time and date period."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected LocalDate atDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected LocalDateTime atDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes an event task containing the task description and time and date of the event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the event task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param at          Event time and/or date information."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.atDateTime \u003d tryParseDateTime(at);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (atDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            this.atDate \u003d tryParseDate(at);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (atDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            this.at \u003d at;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes an event task containing the task description, if the task is done and time and date of the event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This is an overloaded constructor to allow for tasks in the hard drive to be loaded when Duke first runs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the event task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param isDone      If task is done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param at          Event time and/or date information."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Event(String description, boolean isDone, String at) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Parses the date and time string, and returns a LocalDateTime object if the date and time string is in accordance"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * to any of the listed formats."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * If date and time string does not follow any of the listed formats, null is returned."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param dateString String representing the date and time."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return LocalDateTime object if parsing the successful."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public LocalDateTime tryParseDateTime(String dateString) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        List\u003cString\u003e formatStrings \u003d Arrays.asList(\"yyyy-MM-dd HHmm\", \"yyyy-MM-d HHmm\", \"dd/MM/yyyy HHmm\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \"dd/M/yyyy HHmm\", \"d/MM/yyyy HHmm\", \"d/M/yyyy HHmm\", \"dd-MM-yyyy HHmm\", \"dd-M-yyyy HHmm\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \"d-MM-yyyy HHmm\", \"d-M-yyyy HHmm\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        for (String formatString : formatStrings) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                return LocalDateTime.parse(dateString, DateTimeFormatter.ofPattern(formatString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Parses the date string, and returns a LocalDate object if the date string is in accordance"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * to any of the listed formats."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * If date string does not follow any of the listed formats, null is returned."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param dateString String representing the date."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return LocalDate object if parsing the successful."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public LocalDate tryParseDate(String dateString) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        List\u003cString\u003e formatStrings \u003d Arrays.asList(\"yyyy-MM-dd\", \"yyyy-MM-d\", \"dd/MM/yyyy\", \"d/MM/yyyy\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                \"dd/M/yyyy\", \"d/M/yyyy\", \"dd-MM-yyyy\", \"dd-M-yyyy\", \"d-MM-yyyy\", \"d-M-yyyy\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        for (String formatString : formatStrings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                return LocalDate.parse(dateString, DateTimeFormatter.ofPattern(formatString));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Generates a string for printing from either the LocalDateTime object, LocalDate object, or at String."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return String representing the event time and/or date for printing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String generateAtFormat() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (atDateTime !\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return atDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, K:mm a\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (atDate !\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return atDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return at;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Returns the event time and/or date of the event."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return String representing the event time and/or date of the event."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return \"[\" + TaskType.EVENT.getInitial() + \"]\" + super.toString() + \" (at: \" + generateAtFormat() + \")\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 116
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Parses user input as commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Checks if string contains only numbers."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param input Input string to check."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return If string contains only numbers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static boolean isNumber(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return input.matches(\"[0-9]+\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Gets appended strings from string array."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This facilitates parsing of input with many words."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param inputArr  Input string array."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param indexFrom Index of array to start appending."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param indexTo   Index of array to end appending."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Appended string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static String getStringFromArray(String[] inputArr, int indexFrom, int indexTo) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        for (int i \u003d indexFrom; i \u003c indexTo; i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            output +\u003d inputArr[i] + \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return output.substring(0, output.length() - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Parses user input as commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Command to be executed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When command input is wrongly formatted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        String[] inputInformation \u003d input.split(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (inputInformation[0].equals(CommandType.BYE.getInput())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return new Command(CommandType.BYE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (inputInformation[0].equals(CommandType.LIST.getInput())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return new Command(CommandType.LIST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (inputInformation[0].equals(CommandType.DONE.getInput())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (inputInformation.length \u003e 1 \u0026\u0026 isNumber(inputInformation[1])) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(inputInformation[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                return new Command((CommandType.DONE), taskNumber);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                throw new DukeException(\"You need to include your task number to mark done...\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (inputInformation[0].equals(CommandType.DELETE.getInput())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (inputInformation.length \u003e 1 \u0026\u0026 isNumber(inputInformation[1])) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(inputInformation[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                return new Command((CommandType.DELETE), taskNumber);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                throw new DukeException(\"You need to include your task number to delete...\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (inputInformation[0].equals(CommandType.TODO.getInput())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (inputInformation.length \u003e 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                String description \u003d getStringFromArray(inputInformation, 1, inputInformation.length);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                return new Command(CommandType.TODO, description);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                throw new DukeException(\"Your todo description can\u0027t be empty...\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (inputInformation[0].equals(CommandType.DEADLINE.getInput())) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (inputInformation.length \u003e 3) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                int indexOfBy \u003d Arrays.asList(inputInformation).indexOf(\"/by\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                if (indexOfBy \u003d\u003d -1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    throw new DukeException(\"Did you include /by?\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                } else if (indexOfBy \u003d\u003d 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    throw new DukeException(\"Did you include a description?\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    String description \u003d getStringFromArray(inputInformation, 1, indexOfBy);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    String by \u003d getStringFromArray(inputInformation, indexOfBy + 1, inputInformation.length);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    return new Command(CommandType.DEADLINE, description, by);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                throw new DukeException(\"Your deadline description or deadline can\u0027t be empty...\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (inputInformation[0].equals(CommandType.EVENT.getInput())) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (inputInformation.length \u003e 3) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                int indexOfAt \u003d Arrays.asList(inputInformation).indexOf(\"/at\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                if (indexOfAt \u003d\u003d -1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    throw new DukeException(\"Did you include /at?\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                } else if (indexOfAt \u003d\u003d 1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    throw new DukeException(\"Did you include a description?\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    String description \u003d getStringFromArray(inputInformation, 1, indexOfAt);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    String at \u003d getStringFromArray(inputInformation, indexOfAt + 1, inputInformation.length);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    return new Command(CommandType.EVENT, description, at);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                throw new DukeException(\"Your event description or event period can\u0027t be empty...\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else if (inputInformation[0].equals(CommandType.FIND.getInput())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (inputInformation.length \u003e 1) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                String searchDescription \u003d getStringFromArray(inputInformation, 1, inputInformation.length);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                return new Command((CommandType.FIND), searchDescription);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                throw new DukeException(\"You need to include your keyword...\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"My duck instincts tell me your input makes no sense...\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 110
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private static final String SPLITTER \u003d \"|\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (file.exists()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    String[] taskInformation \u003d sc.nextLine().split(\"\\\\\" + SPLITTER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    if (taskInformation[0].equals(TaskType.TODO.getInitial())) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                        taskList.add(new ToDo(taskInformation[2], isDone(taskInformation[1])));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    } else if (taskInformation[0].equals(TaskType.DEADLINE.getInitial())) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                        taskList.add(new Deadline(taskInformation[2], isDone(taskInformation[1]), taskInformation[3]));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    } else if (taskInformation[0].equals(TaskType.EVENT.getInitial())) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                        taskList.add(new Event(taskInformation[2], isDone(taskInformation[1]), taskInformation[3]));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                        throw new DukeException(\"File formatting is wrong...\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                sc.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"I can\u0027t seem to load the file...\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getDoneString(Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return task.isDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public boolean isDone(String storedTaskStatus) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return storedTaskStatus.equals(\"1\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void updateTasks(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            for (Task task : taskList.getStoredTasks()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    fileWriter.write(String.join(SPLITTER, TaskType.TODO.getInitial(), getDoneString(task),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                            task.getDescription()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    fileWriter.write(String.join(SPLITTER, TaskType.DEADLINE.getInitial(), getDoneString(task),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                            task.getDescription(), ((Deadline) task).getBy()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    fileWriter.write(String.join(SPLITTER, TaskType.EVENT.getInitial(), getDoneString(task),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                            task.getDescription(), ((Event) task).getAt()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                    throw new DukeException(\"I can\u0027t seem to update the file...\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                fileWriter.write(System.lineSeparator());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"I can\u0027t seem to handle the input/output properly...\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 77
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a task with a description and if task is done."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a Task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected Task(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a task containing the task description and if the task is done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This is an overloaded constructor to allow for tasks in the hard drive to be loaded when Duke first runs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Retrieves done status and returns icon corresponding to the status."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Icon corresponding to status."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected String getStatusIcon() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return (isDone ? \"✓\" : \"X\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Gets the task description."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Task description."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected String getDescription() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Marks task as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected void markAsDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Checks if task is done."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return If Task is Done."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    protected boolean isDone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 66
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a task list with a stored tasks in a list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private List\u003cTask\u003e storedTasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a task list containing the list of stored tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param storedTasks List of stored tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public TaskList(List\u003cTask\u003e storedTasks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.storedTasks \u003d storedTasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Gets the list of stored tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return List of stored tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public List\u003cTask\u003e getStoredTasks() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return storedTasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Gets the number of stored tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Number of stored tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public int getCount() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return storedTasks.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Adds task into list of stored tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param newTask Task to be added."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        storedTasks.add(newTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Marks task as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskNumber Task number of task to be marked as done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When task number is wrong or if the task is already done."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Task markTaskAsDone(int taskNumber) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (taskNumber \u003c\u003d 0 || taskNumber \u003e storedTasks.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"Wrong task number!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            Task task \u003d storedTasks.get(taskNumber - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (task.isDone()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                throw new DukeException(\"This task is already done: \" + task.getDescription());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                return task;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Deletes input task from stored_task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param taskNumber Task number of task to be deleted."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @throws DukeException When task number is wrong."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Task deleteTask(int taskNumber) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (taskNumber \u003c\u003d 0 || taskNumber \u003e storedTasks.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            throw new DukeException(\"Wrong task number!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            Task taskToDelete \u003d storedTasks.get(taskNumber - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            storedTasks.remove(taskToDelete);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            return taskToDelete;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Generates result task list of tasks with descriptions containing the search description."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param searchDescription String to be searched."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Result task list of tasks with descriptions containing the search description."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public List\u003cTask\u003e generateResultTaskList(String searchDescription) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        List\u003cTask\u003e resultTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        for (Task task : storedTasks) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            if (task.getDescription().contains(searchDescription)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                resultTaskList.add(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return resultTaskList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 98
    }
  },
  {
    "path": "src/main/java/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents task type with initial."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    TODO(\"T\"), DEADLINE(\"D\"), EVENT(\"E\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final String initial;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initialises a task type with the initial."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param initial Initial."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    TaskType(String initial) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        this.initial \u003d initial;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Gets initial."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @return Initial."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getInitial() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return initial;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 27
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " * Represents a task with a description."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a task containing the task description."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * Initializes a task containing the task description and if the task is done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * This is an overloaded constructor to allow for tasks in the hard drive to be loaded when Duke first runs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return \"[\" + TaskType.TODO.getInitial() + \"]\" + super.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 28
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final String LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final String GREETING_MESSAGE \u003d LINE +"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            \"\\n Quack! I am Duck\" +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            \"\\n How can I help you today?\\n\" + LINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private final String EXIT_MESSAGE \u003d LINE +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            \"\\n Waddling off now. See you soon! \\n\" + LINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(GREETING_MESSAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void printError(String errorMessage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public String getNextInput() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(EXIT_MESSAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void listStoredTasks(List\u003cTask\u003e stored_tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (stored_tasks.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            System.out.println(\"No tasks stored...\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            System.out.println(\"Quack! Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            for (Task task : stored_tasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                System.out.println(count + \". \" + task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void printDoneMessage(Task task) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(\"Quack! I have marked this task as done: \\n\" + task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void printAddMessage(Task task, int count) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(\"Quack! I have added: \" + task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        displayTaskCount(count);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void printDeleteMessage(Task taskToDelete, int count) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(\"Quack! I have deleted this task: \\n\" + taskToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        displayTaskCount(count);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void displayTaskCount(int numOfTasks) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (numOfTasks \u003d\u003d 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            System.out.println(\"My duck senses tell me you have 1 task in the list.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            System.out.println(\"My duck senses tell me you have \" + numOfTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void printResultTaskList(List\u003cTask\u003e resultTaskList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        if (resultTaskList.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            System.out.println(\"No tasks matched...\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            System.out.println(\"Quack! Here are the tasks in your list that match:\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            for (Task task : resultTaskList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                System.out.println(count + \". \" + task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 94
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void testGetBy() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(\"2021\", new Deadline(\"sleep\", \"2021\").getBy());"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 9
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void deleteTask_zeroTaskNumber_dukeExceptionThrown() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        List\u003cTask\u003e storedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        TaskList taskList \u003d new TaskList(storedTasks);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        Assertions.assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "            taskList.markTaskAsDone(0);;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 16
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(\"X\", new ToDo(\"sleep\").getStatusIcon());"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    public void testGetDescription() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "        assertEquals(\"sleep\", new ToDo(\"sleep\").getDescription());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "read"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "blah"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "event project /at Mon 2-4pm"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "deadline do hw /by no idea"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "delete two"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 15
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin @sources.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "pause"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 4,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\Deadline.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\DukeException.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\Event.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\Task.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rolandyuwy"
        },
        "content": "C:\\Users\\Admin\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\ToDo.java"
      }
    ],
    "authorContributionMap": {
      "rolandyuwy": 6
    }
  }
]
