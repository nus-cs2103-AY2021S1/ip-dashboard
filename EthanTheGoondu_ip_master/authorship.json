[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    archiveBaseName \u003d \"Launcher\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 19,
      "-": 42
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private Deadline(String name, String by, boolean isDone) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        super(name, TaskType.DEADLINE, isDone);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            this.by \u003d LocalDateTime.parse(by.substring(1), Ui.dateTimeFormat);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DukeWrongFormattingException();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Adds a new deadline to the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param inputSuffix String containing the description and dateTime of the new deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param taskList The taskList to have the new task added to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param isDone Boolean representing if the deadline has been done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param shouldAnnounce A boolean representing if the creation of the deadline should be displayed in the GUI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static void newDeadline(String inputSuffix, TaskList taskList, boolean isDone, boolean shouldAnnounce)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String[] deadlineParts \u003d inputSuffix.split(\"/by\", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String deadlineName \u003d deadlineParts[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (deadlineParts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DukeEmptyDescException(TaskType.EVENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            String by \u003d deadlineParts[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            System.out.println(by);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            if (Ui.isBlankString(by)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                throw new DukeEmptyDescException(TaskType.EVENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                taskList.addTask(new Deadline(deadlineName, by, isDone), shouldAnnounce);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return String.format(\"[D]%s(by: %s)\", super.toString(), by.format(Ui.dateTimeFormat));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return String.format(\"[D]%s/by %s\", super.toString(), by.format(Ui.dateTimeFormat));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else if (!super.equals(o)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Deadline deadline \u003d (Deadline) o;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return by.equals(deadline.by);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return Objects.hash(super.hashCode(), by);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 71
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Initialises the application by attempting to load a savefile and assign a new taskList from it."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void initialise() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            taskList \u003d Storage.loadFromMem();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Ui.printWithLines(e.toString() + \"\\n\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void getResponse() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Ui.startInput(taskList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 17,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeDuplicateTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class DukeDuplicateTaskException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return super.toString() + \"I can\u0027t add that task, you already have one just like it!\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 6
    }
  },
  {
    "path": "src/main/java/DukeEmptyDescException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class DukeEmptyDescException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    DukeEmptyDescException(TaskType taskType) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            type \u003d \"todo\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            type \u003d \"event\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            type \u003d \"deadline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            type \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return super.toString() + String.format(\"You can\u0027t have an empty description for this %s task silly!\\n\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                type);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 28
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return \"OOPSIE!!! \";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 6
    }
  },
  {
    "path": "src/main/java/DukeNoSaveFileFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class DukeNoSaveFileFoundException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return super.toString() + \"I cannot find an existing save file, so I shall create a new one!\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 7
    }
  },
  {
    "path": "src/main/java/DukeNoSuchInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class DukeNoSuchInputException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return super.toString() + \"I\u0027m not quite sure what that means, apologies, try again!\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 6
    }
  },
  {
    "path": "src/main/java/DukeOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class DukeOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return super.toString() + \"Sorry, that task does not exist, try again!\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 6
    }
  },
  {
    "path": "src/main/java/DukeWrongFormattingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class DukeWrongFormattingException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return super.toString() + \"Sorry! The format for a date and time is: dd-mm-yyyy HHMM\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 6
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private Event(String name, String at, boolean isDone) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        super(name, TaskType.EVENT, isDone);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            this.at \u003d LocalDateTime.parse(at.substring(1), Ui.dateTimeFormat);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DukeWrongFormattingException();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Adds a new event to the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param inputSuffix String containing the description and dateTime of the new event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param taskList The taskList to have the new event added to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param isDone Boolean representing if the task has been done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param shouldAnnounce A boolean representing if the creation of the event should be displayed in the GUI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static void newEvent(String inputSuffix, TaskList taskList, boolean isDone, boolean shouldAnnounce)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String[] eventParts \u003d inputSuffix.split(\"/at\", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String eventName \u003d eventParts[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (eventParts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DukeEmptyDescException(TaskType.EVENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            String at \u003d eventParts[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            System.out.println(at);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            if (Ui.isBlankString(at)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                throw new DukeEmptyDescException(TaskType.EVENT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                taskList.addTask(new Event(eventName, at, isDone), shouldAnnounce);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return String.format(\"[E]%s(at: %s)\", super.toString(), at.format(Ui.dateTimeFormat));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return String.format(\"[E]%s/at %s\", super.toString(), at.format(Ui.dateTimeFormat));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else if (!super.equals(o)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Event event \u003d (Event) o;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return at.equals(event.at);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return Objects.hash(super.hashCode(), at);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 70
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            duke.initialise();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Zuko.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Iroh.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Ui.initialise(userInput, dialogContainer, this, userImage, dukeImage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        duke.getResponse();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Exits the application by closing the stage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Stage stage \u003d (Stage) userInput.getScene().getWindow();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 54
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Considers the command input and performs actions accordingly."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param inputPrefix The command in string form, decides the instruction to be carried out."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param inputSuffix The parameters of the command in string form, may contain multiple parameters."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param taskList The taskList that might perform instructions based on what the command is."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param mainWindow The mainWindow that will be displaying a response, or that will close, based on what the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     *                   command is."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static void handleInput(String inputPrefix, String inputSuffix, TaskList taskList, MainWindow mainWindow)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        switch (inputPrefix) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            taskList.printList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            taskList.completeTask(Integer.parseInt(inputSuffix) - 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            taskList.addTask(new Todo(inputSuffix), true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Deadline.newDeadline(inputSuffix, taskList, false, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Event.newEvent(inputSuffix, taskList, false, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            taskList.deleteTask(Integer.parseInt(inputSuffix) - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            taskList.lookFor(inputSuffix);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            mainWindow.exit();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DukeNoSuchInputException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Storage.createNewSave(taskList.toData());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 44
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String FILEPATH \u003d \"./src/main/data/duke.txt\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Attempts to load an existing save file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static TaskList loadFromMem() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        File saveFile \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (saveFile.exists()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return convertToTaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DukeNoSaveFileFoundException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Creates a new file that contains the saved tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param data The data to be read and converted to a save file, obtained from calling toString() on a taskList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static void createNewSave(String data) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        new File(\"./src/main/data\").mkdirs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            File newFile \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            writeToFile(data, newFile);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static void writeToFile(String data, File file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(file, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        fileWriter.write(data);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static TaskList convertToTaskList() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(FILEPATH));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            br.lines().forEach(s -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    convertToTask(s, taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    Ui.printWithLines(e.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static void convertToTask(String line, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (line.startsWith(\"O\", 4)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            isDone \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else if (line.startsWith(\"X\", 4)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            isDone \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        switch (line.charAt(1)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        case \u0027T\u0027:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            taskList.addTask(new Todo(line.substring(7)), false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        case \u0027D\u0027:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Deadline.newDeadline(line.substring(7), taskList, isDone, false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        case \u0027E\u0027:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Event.newEvent(line.substring(7), taskList, isDone, false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 87
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    protected Task(String name, TaskType taskType) throws DukeEmptyDescException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (Ui.isBlankString(name)) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DukeEmptyDescException(taskType);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    protected Task(String name, TaskType taskType, boolean isDone) throws DukeEmptyDescException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (Ui.isBlankString(name)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DukeEmptyDescException(taskType);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return (isDone ? \"O\" : \"X\"); //return tick or X symbols"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Completes the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void complete() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Checks if the task contains a keyword."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param key Keyword to be searched."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @return Boolean representing if the keyword."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public boolean hasKeyword(String key) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String[] words \u003d name.split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        for (String word : words) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            if (key.equals(word)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts the task into a string that can be read by the Storage class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @return Data representing the task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Task task \u003d (Task) o;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            return name.equals(task.name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return Objects.hash(name, isDone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 82
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Prints itself in a readable form, to be displayed in the GUI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Ui.printWithLines(toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Completes a specific task in itself."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param index Index of the taskList to find the Task that is to be completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws DukeOutOfBoundsException Exception thrown when an index that is out of bounds of the taskList is used."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void completeTask(int index) throws DukeOutOfBoundsException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            String prefix \u003d \"Roger roger! I\u0027m gonna mark this task as done:\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Task task \u003d super.get(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            task.complete();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Ui.printWithLines(String.format(\"  %s%s\\n\", prefix, task));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DukeOutOfBoundsException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Adds a task to itself."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param newTask The task to be added."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param announce A boolean representing if the GUI should announce the addition of this new task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws DukeDuplicateTaskException Exception thrown when a duplicate task is added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void addTask(Task newTask, boolean announce) throws DukeDuplicateTaskException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (this.hasDuplicate(newTask)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DukeDuplicateTaskException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            super.add(newTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            if (announce) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                String prefix \u003d \"Okay! I shall add this task:\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                String suffix \u003d String.format(\"Now you got a total of %s task%s in your list!\\n\", super.size(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                        super.size() \u003d\u003d 1 ? \"\" : \"s\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                Ui.printWithLines(prefix + newTask + \"\\n\" + suffix);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Deletes a specific task from itself."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param index Index of the taskList to find the Task that is to be deleted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws DukeOutOfBoundsException Exception thrown when an index that is out of bounds of the taskList is used."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void deleteTask(int index) throws DukeOutOfBoundsException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Task task \u003d super.get(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            super.remove(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            String prefix \u003d \"Very well! I shall delete this task:\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Ui.printWithLines(prefix + task + \"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            throw new DukeOutOfBoundsException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Displays a new list containing tasks that contain the query."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param query The keyword that is used to find the tasks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void lookFor(String query) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        TaskList results \u003d new TaskList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        this.stream().filter(task -\u003e task.hasKeyword(query)).forEach(task -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                results.addTask(task, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            } catch (DukeDuplicateTaskException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        StringBuilder prefix \u003d new StringBuilder(\"Here are the matches in your list:\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Ui.printWithLines(prefix.append(results.listOut()).toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private StringBuilder listOut() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        int l \u003d size();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        for (int i \u003d 0; i \u003c l; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            list.append(i + 1).append(\".\").append(super.get(i).toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return \"Here are the tasks in your list:\\n\" + listOut();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Converts the taskList into a form of string that is readable by the Storage class to be kept into a save file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @return String that is readable by the Storage class."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toData() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        for (Task task: this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            list.append(task.toData()).append(\"\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return list.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private boolean hasDuplicate(Task newTask) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        for (Task task : this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            if (newTask.equals(task)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 116
    }
  },
  {
    "path": "src/main/java/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    EVENT"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 5
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Contructor for a todoTask."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param name Description of the todoTask."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @throws DukeEmptyDescException Exception thrown when the todoTask is empty."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public Todo(String name) throws DukeEmptyDescException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        super(name, TaskType.TODO);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 16
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    protected static DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String LINE \u003d \"-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\u003d-\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static final String INTRO \u003d \"Greetings, I am the Dragon Of The West, otherwise known as Iroh, \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            + \"how may I serve you today? The date and time now is: \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static Image userPic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static Image dukePic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static TextField userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    private static MainWindow mainWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Takes in inputs, and passes them to the Parser to perform actions."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param nextInput The input in string form, to be parsed by the parser."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param taskList The taskList that performs the appropriate functions based on the input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static void processInput(String nextInput, TaskList taskList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String[] inputParts \u003d nextInput.split(\" \", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String inputPrefix \u003d inputParts[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String inputSuffix \u003d inputParts.length \u003d\u003d 1 ? \"\" : inputParts[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            Parser.handleInput(inputPrefix, inputSuffix, taskList, mainWindow);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } catch (DukeException dukeException) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            printWithLines(dukeException + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Extracts the text from the dialogueContainer that will be used as the input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param taskList The taskList that performs the appropriate functions based on the input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static void startInput(TaskList taskList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(input, userPic));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        processInput(input, taskList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Displays the desired output with decorative lines in the GUI."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param output The output to be displayed in string form."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static void printWithLines(String output) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        System.out.println(LINE + \"\\n\" + output + LINE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(LINE + \"\\n\" + output + LINE, dukePic));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Checks if a given string only has spaces, or if it\u0027s an empty string."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param string The string to be checked for blanks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static boolean isBlankString(String string) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        if (string.length() !\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            for (char c : string.toCharArray()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                if (c !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * Initialises the class by assigning objects to the static variables."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param userInput The textField to be assigned."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param dialogContainer The vBox to be assigned."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param mainWindow The mainWindow to be assigned."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param user The image to be assigned that will represent the user."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     * @param duke The image to be assigned that will represent the bot."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public static void initialise(TextField userInput,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                                  VBox dialogContainer,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                                  MainWindow mainWindow,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                                  Image user,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                                  Image duke) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Ui.userInput \u003d userInput;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Ui.dialogContainer \u003d dialogContainer;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Ui.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        userPic \u003d user;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        dukePic \u003d duke;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        printWithLines(INTRO + LocalDateTime.now().format(dateTimeFormat) + \"\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 95
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"Infinity\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 19
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void listTest() throws DukeEmptyDescException, DukeDuplicateTaskException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        taskList.addTask(new Task(\"Hi\", TaskType.TODO, false), false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertEquals(taskList.toString(), \"Here are the tasks in your list:\\n\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                \"1.[X] Hi\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void listTest2() throws DukeEmptyDescException, DukeDuplicateTaskException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        taskList.addTask(new Task(\"Hello\", TaskType.TODO, true), false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertEquals(taskList.toData(),\"[O] Hello\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void listTest3() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        taskList.addTask(new Task(\"Hi\", TaskType.TODO, false), false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        Deadline.newDeadline(\"Deadline 12-12-1212 1212\", taskList, false,false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertEquals(taskList.toString(), \"Here are the tasks in your list:\\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                \"1.[X] Hi\\n\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "                \"2.[D][X] Deadline(by: 12-12-1212 1212)\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 34
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void descTest() throws DukeEmptyDescException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertEquals(new Task(\"Hi\", TaskType.TODO, false).toString(), \"[X] Hi\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    public void descTest2() throws DukeEmptyDescException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "        assertEquals(new Task(\"Hello There!\", TaskType.TODO, true).toString(), \"[O] Hello There!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 16
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EthanTheGoondu"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "EthanTheGoondu": 6
    }
  }
]
