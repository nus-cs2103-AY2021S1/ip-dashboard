[
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "T | 0 | return book  |2/12/2019 1800"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 1
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a Duke chat bot."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of Duke object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Initializes the TaskList, Ui and Storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param filePath Path of file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the running of the chat bot."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Runs the chat bot."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 56,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.command.UndoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.command.EventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.command.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.command.ToDoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.command.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.exception.DukeInputNotRecognizedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.exception.DukeTaskNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Parses the input by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    enum Input {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        LIST, BYE, DONE, TODO, DEADLINE, EVENT, DELETE, UNDO, FIND"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Parses the input by the user and return a Command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param fullCommand User input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeInputNotRecognizedException If the input is not recognised."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeInputNotRecognizedException, DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String[] command \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (hasInputs(command[0])) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            switch (Input.valueOf(command[0].toUpperCase())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return parseList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return parseBye();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return parseDone(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return parseToDo(command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return parseDeadline(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            case EVENT:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return parseEvent(command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return parseDelete(command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            case UNDO:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return parseUndo(command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return parseFind(command[1].trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeInputNotRecognizedException(\" ERROR... INPUT NOT RECOGNIZED. \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Checks if string is inside enum Input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Boolean value."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private static boolean hasInputs(String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (Input i : Input.values()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (input.toUpperCase().equals(i.toString())) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"done\"."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails Command inputted by user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return DoneCommand."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static DoneCommand parseDone(String[] commandDetails) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (commandDetails.length \u003e 1 \u0026\u0026 Character.isDigit(commandDetails[1].charAt(0))) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return new DoneCommand(commandDetails);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... NON-INTEGER RECOGNIZED OR TASK NUMBER NOT INPUTTED. \\n \" +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \"PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"todo\"."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails Command inputted by user."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return ToDoCommand."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static ToDoCommand parseToDo(String[] commandDetails) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (commandDetails.length \u003e 1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return new ToDoCommand(commandDetails);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... TODO DESCRIPTION EMPTY. \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"deadline\"."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails Command inputted by user."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return DeadlineCommand."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static DeadlineCommand parseDeadline(String[] commandDetails) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (commandDetails.length \u003e 1) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            String[] stringArray \u003d commandDetails[1].split(\"/\", 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (stringArray.length \u003e 1 \u0026\u0026 stringArray[1].split(\" \", 2).length \u003e 1) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return new DeadlineCommand(stringArray);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                throw new DukeTaskNotFoundException(\" ERROR... DEADLINE DATE EMPTY. \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... DEADLINE DESCRIPTION EMPTY . \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"event\"."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails Command inputted by user."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return EventCommand."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static EventCommand parseEvent(String[] commandDetails) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (commandDetails.length \u003e 1) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            String[] stringArray \u003d commandDetails[1].split(\"/\", 2);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (stringArray.length \u003e 1 \u0026\u0026 stringArray[1].split(\" \", 2).length \u003e 1) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                return new EventCommand(stringArray);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                throw new DukeTaskNotFoundException(\" ERROR... EVENT DATE EMPTY. \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... EVENT DESCRIPTION EMPTY. \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"delete\"."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails Command inputted by user."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return DeleteCommand."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static DeleteCommand parseDelete(String[] commandDetails) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (commandDetails.length \u003e 1 \u0026\u0026 Character.isDigit(commandDetails[1].charAt(0))) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return new DeleteCommand(commandDetails);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... NON-INTEGER RECOGNIZED OR TASK NUMBER NOT INPUTTED. \\n \" +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \"PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"undo\"."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails Command inputted by user."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return UndoCommand."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static UndoCommand parseUndo(String[] commandDetails) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (commandDetails.length \u003e 1 \u0026\u0026 Character.isDigit(commandDetails[1].charAt(0))) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            return new UndoCommand(commandDetails);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... NON-INTEGER RECOGNIZED OR TASK NUMBER NOT INPUTTED. \\n \" +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    \"PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"find\"."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param keyword Keyword inputted by user."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return FindCommand."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static FindCommand parseFind(String keyword) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new FindCommand(keyword);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"list\"."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return ListCommand."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static ListCommand parseList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Handles the case where the user input is \"bye\"."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return ByeCommand."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public static ByeCommand parseBye() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return new ByeCommand();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 207
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.exception.DukeFileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Takes care of file related operation."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of Storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a file directory if it is missing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a file if it does not exist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param filePath Path of the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Path directory \u003d Paths.get(filePath).getParent();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (!Files.exists(directory)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                Files.createDirectory(directory);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            file \u003d new File(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Reads the tasks in a file and convert them into an ArrayList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return ArrayList of Task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeFileNotFoundException If file is not found."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeFileNotFoundException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                String[] task \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                switch (task[0].trim()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    ToDo todo \u003d new ToDo(task[2].trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    if (task[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        todo.doneTask();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    taskList.add(todo);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    Deadline deadline \u003d new Deadline(task[2].trim(), task[3].trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    if (task[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        deadline.doneTask();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    taskList.add(deadline);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    Event event \u003d new Event(task[2].trim(), task[3].trim());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    if (task[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        event.doneTask();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    taskList.add(event);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeFileNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Saves the TaskList to a file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param taskList ArrayList of Task."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            StringBuilder content \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file.getPath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    String taskDetails \u003d String.format(\"T | %d | %s\", task.isTaskDone() ? 1 : 0, task.getDescription());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    String taskDetails \u003d String.format(\"T | %d | %s |%s\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                            task.isTaskDone() ? 1 : 0, task.getDescription(), ((Deadline) task).getDate());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    String taskDetails \u003d String.format(\"T | %d | %s |%s\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                            task.isTaskDone() ? 1 : 0, task.getDescription(), ((Event) task).getAt());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                    content.append(taskDetails).append(\"\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            fw.write(content.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 116
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks ArrayList of Task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Gets the arrayList of Task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return An arrayList of Task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 38
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Takes care of user interface for the chat bot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of Ui."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Initializes scanner."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the welcome message when the program starts."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"~ \\n Hello I\u0027m the Terminator \\n What can I do for you? \\n~\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the message when there is a loading error."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(\" ERROR DETECTED! UNABLE TO LOAD TASKLIST. \\n CREATING NEW TASKLIST\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the list of task in the TaskList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param taskList ArrayList of task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void showTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(\" Here are targets in your kill list: \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!taskList.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                int count \u003d i + 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                System.out.println(String.format(\"   %d. \", count) + taskList.get(i).toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Takes in user inputs."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Input by the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String input \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays text when the program stops."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(\" I will be back! \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays error message."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param message Error message."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays divider."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(\"\\n ******************************************************************** \\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the list of matching task in the TaskList."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks ArrayList of task."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void showMatchingTask(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(\" Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            int count \u003d i + 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            System.out.println(String.format(\"   %d. \", count) + tasks.get(i).toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the task that is completed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param task Task that is completed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void showDoneTask(Task task) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(\" Nice! Target Eliminated: \\n   \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + task.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the task that has been undone."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param task Task that is undone."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void showUndoTask(Task task) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(\" Task has been undone: \\n   \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + task.toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the task that is deleted."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param task Task that is deleted."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param numTask Number of tasks."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void showDeletedTask(Task task, int numTask) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println( String.format(\" Noted. Target Scraped: \\n   %s \\n \" +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                \"Now you have %d tasks in the list. \", task.toString(), numTask));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Displays the task that is added."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param task Task that is added."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param numTask Number of tasks."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void showTask(Task task, int numTask) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(\" Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(String.format(\"   %s \\n Now you have %d tasks in the list. \","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                task, numTask));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 146
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which ends the operation."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for the program to terminate."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return True."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 35
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes an operation."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeException If an error is encountered."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Boolean value."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 30
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which creates a task with a deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String[] commandDetails;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a DeadlineCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails String array with task details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DeadlineCommand(String[] commandDetails) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.commandDetails \u003d commandDetails;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for an task with a deadline to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String day \u003d commandDetails[1].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(\" Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Deadline deadline \u003d new Deadline(commandDetails[0], day.trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        tasks.getTasks().add(deadline);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ui.showTask(deadline, tasks.getTasks().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 49
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.exception.DukeTaskNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which deletes a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String[] commandDetails;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a DeleteCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails String array with task details."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DeleteCommand(String[] commandDetails) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.commandDetails \u003d commandDetails;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for an task to be deleted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        int taskNumber \u003d Character.getNumericValue(commandDetails[1].charAt(0)) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!tasks.getTasks().isEmpty() \u0026\u0026 taskNumber \u003c tasks.getTasks().size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Task removedTask \u003d tasks.getTasks().remove(taskNumber);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            ui.showDeletedTask(removedTask, tasks.getTasks().size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... TASK NOT FOUND. \\n PLEASE TRY AGAIN \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 53
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.exception.DukeTaskNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which marks a task as completed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String[] commandDetails;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a DoneCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails String array with task details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DoneCommand(String[] commandDetails) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.commandDetails \u003d commandDetails;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for an task to be marked as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        int taskNumber \u003d Character.getNumericValue(commandDetails[1].charAt(0)) - 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!tasks.getTasks().isEmpty() \u0026\u0026 taskNumber \u003c tasks.getTasks().size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            tasks.getTasks().get(taskNumber).doneTask();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            ui.showDoneTask(tasks.getTasks().get(taskNumber));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... TASK NOT FOUND. \\n PLEASE TRY AGAIN \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 52
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which creates a task with an event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String[] commandDetails;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of an EventCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails String array with task details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public EventCommand(String[] commandDetails) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.commandDetails \u003d commandDetails;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for an task with an event to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        String at \u003d commandDetails[1].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.out.println(\" Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Event event \u003d new Event(commandDetails[0], at);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        tasks.getTasks().add(event);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ui.showTask(event, tasks.getTasks().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 49
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.exception.DukeTaskNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which finds a task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a FindCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param keyword Keyword to find tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation to find matching tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If no matching tasks are found."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        for (Task task : tasks.getTasks()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            if (task.getDescription().toLowerCase().contains(keyword)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                taskArrayList.add(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!taskArrayList.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            ui.showMatchingTask(taskArrayList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" NO MATCHING TASK FOUND. \\n PLEASE TRY AGAIN. \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 59
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which lists the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for the list of task to be shown."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ui.showTaskList(tasks.getTasks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 34
    }
  },
  {
    "path": "src/main/java/duke/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which creates a task with a todo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String[] commandDetails;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of an ToDoCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails String array with task details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public ToDoCommand(String[] commandDetails) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.commandDetails \u003d commandDetails;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for an task with a todo to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ToDo toDo \u003d new ToDo(commandDetails[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        tasks.getTasks().add(toDo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ui.showTask(toDo, tasks.getTasks().size());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 47
    }
  },
  {
    "path": "src/main/java/duke/command/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.exception.DukeTaskNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a command which undo a task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private String[] commandDetails;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of an UndoCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param commandDetails String array with task details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public UndoCommand(String[] commandDetails) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.commandDetails \u003d commandDetails;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Executes the operation for an task to be undone."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param tasks TaskList linked to the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param ui Ui linked to the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param storage Storage linked to the program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @throws DukeTaskNotFoundException If the task is not found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeTaskNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        int taskNumber \u003d Character.getNumericValue(commandDetails[1].charAt(0)) - 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        if (!tasks.getTasks().isEmpty() \u0026\u0026 taskNumber \u003c tasks.getTasks().size()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            tasks.getTasks().get(taskNumber).undoTask();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            ui.showUndoTask(tasks.getTasks().get(taskNumber));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            throw new DukeTaskNotFoundException(\" ERROR... TASK NOT FOUND. \\n PLEASE TRY AGAIN \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Returns a boolean that dictates if the program is running."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 52
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents an exception related to program operations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with null as its detail message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with specified message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param message String representing the message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 22
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeFileNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents an exception in program operations when file is not found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DukeFileNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with null as its detail message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeFileNotFoundException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with specified message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param message String representing the message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeFileNotFoundException(String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 22
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInputNotRecognizedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DukeInputNotRecognizedException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with null as its detail message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeInputNotRecognizedException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with specified message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param message String representing the message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeInputNotRecognizedException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeTaskNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DukeTaskNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with null as its detail message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeTaskNotFoundException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Constructs a new exception with specified message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param message String representing the message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public DukeTaskNotFoundException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 19
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a task with a deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    protected LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    protected String date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private DateTimeFormatter fmt \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .appendPattern(\"[d-MM-yyyy HHmm][yyyy-MM-d HHmm]\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .optionalStart()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .appendPattern(\" HHmm\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .optionalEnd()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            .toFormatter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a Deadline."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param description Description of the task with deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param by Date of the task\u0027s deadline."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.date \u003d by;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        by \u003d by.replace(\u0027/\u0027, \u0027-\u0027);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.localDateTime \u003d LocalDateTime.parse(by, fmt);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Gets deadline of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Date of task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Converts a Deadline object to a string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return A string displaying the task and its status."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                localDateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy h:mm a\")) + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 57
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a task with an event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of an Event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param description Description of the task with deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param at Event\u0027s date and time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Gets date and time of an event task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Event\u0027s date and time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Converts an Event object to a string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return A string displaying the task and its status."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 39
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Gets task completion symbol."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Tick or X symbols"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Marks task as completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void doneTask() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Marks task as uncompleted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void undoTask() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Gets description of task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Description of task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Checks if task is done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return Boolean value."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public boolean isTaskDone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Converts a Task object to a string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return A string displaying the task and its status."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 70
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " * Represents a task with a todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Creates a new instance of a Todo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @param description Description of the todo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * Converts a ToDo object to a string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     * @return A string displaying the task and its status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 28
    }
  },
  {
    "path": "src/test/java/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_deleteCommand_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        taskList.getTasks().add(toDo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Parser.parse(\"delete 1\").execute(taskList, new Ui(), new Storage(\"invalidPath/task.txt\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"Noted. Target Scraped: \\n   \" + toDo.toString() +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                        \" \\n Now you have 0 tasks in the list.\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_doneCommand_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        taskList.getTasks().add(toDo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Parser.parse(\"done 1\").execute(taskList, new Ui(), new Storage(\"invalidPath/task.txt\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"Nice! Target Eliminated: \\n   \" + toDo.toString(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_undoCommand_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ToDo toDo \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        toDo.doneTask();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        taskList.getTasks().add(toDo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Parser.parse(\"undo 1\").execute(taskList, new Ui(), new Storage(\"invalidPath/task.txt\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"Task has been undone: \\n   \" + toDo.toString(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_toDoCommand_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Parser.parse(\"todo read book\").execute(taskList, new Ui(), new Storage(\"invalidPath/task.txt\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task: \" + System.lineSeparator() + \"   [T][✘] read book \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"\\n Now you have 1 tasks in the list.\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_deadline_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Parser.parse(\"deadline return book /by 2/12/2019 1800\").execute(taskList, new Ui(), new Storage(\"invalidPath/task.txt\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task: \" + System.lineSeparator()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"   [D][✘] return book  (by: Dec 2 2019 1800 PM) \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"\\n Now you have 1 tasks in the list.\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_event_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Parser.parse(\"event return book /at 2/12/2019 4-6pm\").execute(taskList, new Ui(), new Storage(\"invalidPath/task.txt\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task: \" + System.lineSeparator()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"   [E][✘] return book  (at: 2/12/2019 4-6pm) \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                + \"\\n Now you have 1 tasks in the list.\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 93
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void parse_invalidCommand_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            Parser.parse(\"INVALID\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"ERROR... INPUT NOT RECOGNIZED. \\n PLEASE TRY AGAIN\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void duke_invalidPath_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        new Duke(\"invalidPath/task.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(\"ERROR DETECTED! UNABLE TO LOAD PROGRAM. \\n SYSTEM SHUTTING DOWN\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "                outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 48
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.task.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.task.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import main.java.duke.task.ToDo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void todo_normalInput_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        ToDo todo \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(todo.toString(), \"[T][✘] read book\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void deadline_normalInput_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"read book\", \"2/12/2019 2300\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(deadline.toString(), \"[D][✘] read book (by: Dec 2 2019 11:00 PM)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void deadline_differentDateFormat_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"read book\", \"2019/12/2 2300\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(deadline.toString(), \"[D][✘] read book (by: Dec 2 2019 11:00 PM)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    public void event_normalInput_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        Event event \u003d new Event (\"read book\", \"2/12/2019 4-6pm\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "        assertEquals(event.toString(), \"[E][✘] read book (at: 2/12/2019 4-6pm)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 35
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "add book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 3
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "set PATH\u003d%PATH%;C:\\Program Files\\Java\\jdk-11.0.8\\bin"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "SET MY_PATH\u003dC:\\Users\\Lee\\Dropbox\\Y2S1\\CS2103T\\Duke"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\*.java\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "java -classpath \"%MY_PATH%\\bin\" main.java.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LeeMingDe"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "LeeMingDe": 10,
      "-": 16
    }
  }
]
