[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    enableAssertions(true)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 15,
      "-": 45
    }
  },
  {
    "path": "config/travis/check-eof-newline.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "# Checks that all text files end with a newline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "ret\u003d0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "# Preserve filename with spaces by only splitting on newlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "IFS\u003d\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        echo \"ERROR:$filename:$line: no newline at EOF.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 18
    }
  },
  {
    "path": "config/travis/check-line-endings.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "# Checks for prohibited line endings."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "# Prohibited line endings: \\r\\n"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ret \u003d 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 19
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 26
    }
  },
  {
    "path": "config/travis/run-checks.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "ret\u003d0 \u0026\u0026"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "for checkscript in \"$dir\"/check-*; do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    if ! \"$checkscript\"; then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ret\u003d1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "exit $ret"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 11
    }
  },
  {
    "path": "src/main/java/duke/ChatbotApplication.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.ui.CommandLineInterface;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.ui.MainLauncher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Front End Facing Script for the UI of duke.ChatbotApplication"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class ChatbotApplication {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final Duke dukeProgram;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor class of the duke.ChatbotApplication"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param ui the path to read a file from."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public ChatbotApplication(UserInterface ui) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dukeProgram \u003d new Duke(ui);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Entry point for application"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param args args"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        //args[0] \u003d \"cli\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (args.length \u003e 0 \u0026\u0026 args[0].equals(\"-cli\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            UserInterface ui \u003d new CommandLineInterface();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            Duke duke \u003d new Duke(ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            while (ui.isRunning()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                duke.nextIteration();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            Application.launch(MainLauncher.class, args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 38
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.command.CommandEnums;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeIoException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.tasks.TaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.tasks.TextParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Backend Object Class for the duke.Duke Chatbot Interface"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private static final TextParser textParser \u003d new TextParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final TaskManager taskManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final UserInterface ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for the duke.Duke Chatbot, if is old initialisation, will read from txt file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Eles it will initialise a new TaskManager class"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param ui The user interface to use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public Duke(UserInterface ui) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assert ui !\u003d null : \"ui will never be null\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        TaskManager list1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            list1 \u003d new TaskManager(System.getProperty(\"user.dir\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (DukeIoException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            list1 \u003d new TaskManager(System.getProperty(\"user.dir\"), true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.taskManager \u003d list1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ui.start(\"Friend\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private void parseRun(String input) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        for (CommandEnums cmd : CommandEnums.values()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            Optional\u003cMatcher\u003e maybeMatcher \u003d cmd.matcher(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            if (maybeMatcher.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            Matcher match \u003d maybeMatcher.get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            if (!match.find()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                throw cmd.commandError(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            int count \u003d match.groupCount();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            String[] arguments \u003d new String[count];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d count; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                arguments[i - 1] \u003d match.group(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            cmd.execute(this.taskManager, this.ui, arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        throw new DukeCommandException(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Runs the Next Iteration of Duke"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * To be invoked to iterate the continuation of Duke Application flow."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void nextIteration() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String input \u003d textParser.cleanInput(ui.nextLine());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            this.parseRun(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            ui.systemMessage(e.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"Duke{\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \"taskManager\u003d\" + taskManager"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \", ui\u003d\" + ui"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \u0027}\u0027;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 81,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/command/CommandEnums.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.tasks.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public enum CommandEnums {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    TODO(CommandList.TODO , \"(.*)\" , \"todo\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    DEADLINE(CommandList.DEADLINE, \"(.*) -by (.*)\", \"deadline\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    EVENT(CommandList.EVENT , \"(.*) -at (.*)\" , \"event\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    HELP(CommandList.HELP, \"(.*)\", \"help\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    LIST(CommandList.LIST, \"\" , \"list\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    FIND(CommandList.FIND, \"(.*)\" , \"find\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    DELETE(CommandList.DELETE , \"(\\\\d+)\" , \"delete\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    DONE(CommandList.DONE, \"(\\\\d+)\" , \"done\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    BYE(CommandList.BYE , \"\" , \"bye\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final CommandExecuter executer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final Pattern format;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructs a CommandEnums which contains the static functional interface for interacting in application"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param executer Functional interface for a specific command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param formatString Regex format for a command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param name name of command to match."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    CommandEnums(CommandExecuter executer, String formatString, String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.executer \u003d executer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.format \u003d Pattern.compile(formatString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Parse string output to return a optional.of(regex.Matcher) if there is a match"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Otherwise, returns Optional.empty(). Matcher is configured to return the arguments to the Command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * in its Capture Groups."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param rawInput The user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return Optional regex Match if exists, else empty"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public Optional\u003cMatcher\u003e matcher(String rawInput) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (!rawInput.startsWith(this.name)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Matcher matcher \u003d this.format.matcher(rawInput.substring(this.name.length()).trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return Optional.of(matcher);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Executes the task using the taskmanager and user interface"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param taskManager stored taskManager in parser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param ui User Interface"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param args String argument"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeException an Exception in the internal commandlist"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void execute(TaskManager taskManager, UserInterface ui, String[] args) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.executer.run(taskManager, ui , args);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Input given that is known to be wrong"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param input userinput"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return Error Message"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DukeCommandException commandError(String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return new DukeCommandException(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 72
    }
  },
  {
    "path": "src/main/java/duke/command/CommandExecuter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.tasks.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.ui.UserInterface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "interface CommandExecuter {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    void run(TaskManager taskManager, UserInterface ui, String[] arguments) throws DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 10
    }
  },
  {
    "path": "src/main/java/duke/command/CommandHelp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Command is a Storage for the Enumerations of each type of command that is valid in Duke Chatbot."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public enum CommandHelp {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    //random string as this is the default enum."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    ERROR(\"asjdbaksjfbanfjknjkdfnskasd\", \"This is a invalid command\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    BYE(\"bye\", \"close the application\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    HELP(\"help\", \"Get help for a specific command via help -cmd command\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    LIST(\"list\" , \"list the current list of Tasks and their statuses\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    DONE(\"done\" , \"set a task as done via index: done 1 to mark Task 1 as done\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    DELETE(\"delete\", \"delete a task via index: delete 1 to delete first task\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    TODO(\"todo\", \"schedule a untimed task\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    DEADLINE(\"deadline\", \"schedule a timed deadline task, please structure with \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"[deadline \u003ctask name\u003e /by dd-MM-YYYY]\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    EVENT(\"event\", \"schedule a timed event task, please structure with \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"[event \u003ctask name\u003e /at dd-MM-YYYY]\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    SEARCH(\"find\", \"find \u003cregex expression\u003e on description only\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    BLANK(\"\", \"This is a invalid command\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final String commandEncoding;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final String helpMsg;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructs the enumeration for help commands"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param code key word of command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param help Help message to display"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    CommandHelp(String code, String help) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.commandEncoding \u003d code;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.helpMsg \u003d help;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Getter for command that is encoded in a Command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return exact text that represents a command in Duke"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return commandEncoding;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"- \" + commandEncoding + \" to \" + helpMsg + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Checks for equivilence between the code of the command and the other"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param other Other command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return boolean indicating that the command is the same."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public boolean equals(CommandHelp other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return other.getCode().equals(this.getCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 52
    }
  },
  {
    "path": "src/main/java/duke/command/CommandList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeNoInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.tasks.TextParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * CommandList to store commands supported by duke"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Software pattern referenced from https://github.com/JoeyChenSmart/ip"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "class CommandList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private static final String ALLHELP \u003d \"\\t Need some help huh?\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"Heres a list of my commands!\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"- \u0027bye\u0027 to close the application\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"- \u0027list\u0027 to list the current list of duke.tasks and their statuses\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"- \u0027done\u0027 to set a task as done\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"- \u0027find\u0027 to find a task using regex or a query text string\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"- \u0027todo\u0027 to list a untimed task\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"- \u0027deadline\u0027 to list a timed deadline task, please structure with \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"[deadline \u003ctask name\u003e -by dd-MM-YYYY]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"- \u0027event\u0027 to list a timed event task, please structure with \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"[event \u003ctask name\u003e -at dd-MM-YYYY]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"- \u0027help\u0027 to list these commands again help \u003ccommand\u003e for specific commands\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private static final TextParser PARSER \u003d new TextParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    static final CommandExecuter DEADLINE \u003d (taskManager, ui, arguments) -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (arguments.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeNoInputException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assert arguments.length \u003d\u003d 2 : \"The length of the argument should always only be 2\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \" because of -by seperator\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ui.systemMessage(taskManager.add(new Deadline(arguments[0] , arguments[1])));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    static final CommandExecuter TODO \u003d (taskManager, ui, arguments) -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (arguments[0].isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeNoInputException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assert arguments.length \u003d\u003d 1 : \"The length of the argument should always only be 1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ui.systemMessage(taskManager.add(new ToDo(arguments[0])));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    static final CommandExecuter EVENT \u003d (taskManager, ui, arguments) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (arguments.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeNoInputException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assert arguments.length \u003d\u003d 2 : \"The length of the argument should always only be 2\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \" because of -at seperator\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ui.systemMessage(taskManager.add(new Event(arguments[0], arguments[1])));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    };"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    static final CommandExecuter FIND \u003d (taskManager, ui, arguments) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ui.systemMessage(taskManager.findTasks(arguments[0]));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    static final CommandExecuter BYE \u003d (taskManager, ui, arguments) -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        taskManager.saveTasks();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ui.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    static final CommandExecuter DELETE \u003d (taskManager, ui, arguments) -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        System.out.print(arguments[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ui.systemMessage(taskManager.deleteTask(arguments[0]));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    static final CommandExecuter DONE \u003d (taskManager, ui, arguments) -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ui.systemMessage(taskManager.doTask(arguments[0]));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    static final CommandExecuter LIST \u003d (taskManager, ui, arguments) -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ui.systemMessage(taskManager.listTasks());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    static final CommandExecuter HELP \u003d (taskManager, ui, arguments) -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        CommandHelp commandHelp \u003d PARSER.parseHelpCommand(arguments[0]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String message \u003d commandHelp.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (commandHelp.equals(CommandHelp.ERROR) || commandHelp.equals(CommandHelp.BLANK)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            message \u003d ALLHELP;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ui.systemMessage(message);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    };"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 77
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeBlankCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Error Type of a Blank Command in Duke Application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DukeBlankCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for DukeBlankCommandException for a blank command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param s String form of the bad input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DukeBlankCommandException(String s) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(s, 4);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 14
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Error Type of a Invalid Command in Duke Application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DukeCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor class for DukeCommandException"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param badCommand the command that is unrecognisable by Duke Application"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DukeCommandException(String badCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(badCommand , 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 14
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Error Type of a DateTimeError in Duke Application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * This error is thrown if the DateTime does not match or is incompatible with the DateTimeFormatter"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DukeDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor class for DukeDateTimeException"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param cmd the invalid command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DukeDateTimeException(String cmd) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(cmd, 3);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Takes in the given bad input and the code"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String message(String s) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        StringBuilder b \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"Oops you did not mark your datetime! Not sure what you mean by:\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(badCommand).append(\"\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(s);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\": \").append(code.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"Heres a tip, use the \u0027help\u0027 command to learn about my commands!\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return b.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 29
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * DukeException is a classification of errors that pertain to any running problems within Duke Class applications"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Some errors that may occur in the hierarchy of data flow:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * 1. FileRead Error (WIP): For handling stored memory and I/O errors"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * 2. Bad Command Given: When a Command that is unknown is given"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * 3. No Input given: When in the flow for a given command, no description is detected"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * 4. Bad Date Given: For handling datetime parsing errors."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * 5. Blank Command Given: For handling when a Blank command is given to a input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * 6. Index Error: When a invalid index is given"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * 7. UnknownException: For handling anything exceptionally unexpected"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected final String badCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected final ErrorEncode code;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor class for a Generic DukeException for any errortype encountered in Duke"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param badCommand The command or user input that is causing the error"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param code The enumeration to encode the error message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected DukeException(String badCommand, int code) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.badCommand \u003d badCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.code \u003d ErrorEncode.parseCode(code);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns the template user error message of the DukeException class"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param s String Message to wrap generic error Message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String message to be printed out to player."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String message(String s) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        StringBuilder b \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"Oops you used a invalid command! Not sure what you mean by:\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(badCommand).append(\"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(s);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\": \").append(code.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"Heres a tip, use the \u0027help\u0027 command to learn about my commands!\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return b.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return message(super.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 49
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Error type for Index Errors that appear when trying to perform a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DukeIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructs a DukeIndexException to indicate that the given command or index is invalid"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param cmd Command or Index that is invalid"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param size The actual or given size of the list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DukeIndexException(String cmd, int size) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(cmd, 5);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Takes in the given bad input and the code"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String message(String s) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        StringBuilder b \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"Oops you requested for a index ourside the list range or a non numeric index:\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(badCommand).append(\"\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(s);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\": \").append(code.toString()).append(\" out of \").append(size).append(\"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        b.append(\"Heres a tip, use the \u0027list\u0027 command to see the current duke.tasks!\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return b.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 31
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeIoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Error type for I/O that appear when trying to perform a read or write command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DukeIoException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for I/O exception class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param badCommand the part of the I/O process that is causing an error"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DukeIoException(String badCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(badCommand, 0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 14
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeNoInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Error Type of a Invalid Description for a task, or if it is not given."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DukeNoInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructs class for a DukeNoInputException"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * No input is given to this command hence returning the no input exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DukeNoInputException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(\"\", 2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 14
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeUnknownException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Exception Class to encapsulate any exceptional error that does not fit any of the previous criterion"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DukeUnknownException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor class for the DukeUnknownException"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param message message or input that caused this unexpected error."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public DukeUnknownException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(message, 99);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 14
    }
  },
  {
    "path": "src/main/java/duke/exceptions/ErrorEncode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public enum ErrorEncode {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    FileRead(0, \"A I/O and Filereading Error has occured.\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    BadCommandGiven(1, \"I cannot understand what that command means.\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    NoInputGiven(2, \"There was no Input given for the task.\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    BadDateGiven(3, \"You did not give a valid date!\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    BlankCommand(4, \"No input command was given\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    IndexError(5, \"The index of the task is out of bounds\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    UnknownError(99, \"Something Exceptionally unexpected has happened! We will shut the application down\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final int code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    ErrorEncode(int code, String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Parse an error code into the Enum List for the given error message"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param code int code of error"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return ErrorEncode Enumeration of the type of code"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static ErrorEncode parseCode(int code) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ErrorEncode e \u003d UnknownError;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        for (ErrorEncode i : ErrorEncode.values()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            if (i.getCode() \u003d\u003d code) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                e \u003d i;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return e;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public int getCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return getDescription();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 48
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * The Event class contains the information that is entered by the user into the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Duke Chatbot Command Line Interface."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class Deadline extends TimedTask {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for Deadline Class without done status"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * To be used for creating new duke.tasks by the end user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc the description of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param date the date on which the task is due"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeDateTimeException if the fields for the date are not matching autocorrection cases"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public Deadline(String desc, String date) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(desc, date);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for Event class with done status"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * To be used by the I/O manager to read duke.tasks and populate the system at runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc the description of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param date the date on which the task is due."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param b the Done Status of the Task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeDateTimeException if the fields for the date are not matching autocorrection cases"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    Deadline(String desc , String date , Boolean b) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(desc, date, b);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + getDateby() + \")\" + \"You have \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + timeLeft() + \" days left till its due!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns a String Representation of the Deadline object class to write to text file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return the saved task to write to a text file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"D\" + SEPERATOR + super.saveTask();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 44
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * The Event class contains the information that is entered by the user into the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Duke Chatbot Command Line Interface."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class Event extends TimedTask {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for Event Class without done status"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * To be used for creating new duke.tasks by the end user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc the description of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param date the date on which the task is due"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeDateTimeException Throws Exception if the given date is parsed and returns invalid"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public Event(String desc, String date) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(desc, date);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for Event class with done status"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * To be used by the I/O manager to read duke.tasks and populate the system at runtime"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc the description of the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param date the date on which the task is due"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param b the Done Status of the Task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeDateTimeException if the fields for the date are not matching autocorrection cases"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    Event(String desc, String date, Boolean b) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(desc, date, b);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + getDateby() + \")\" + \"You have \" + timeLeft()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                + \" days left till the event!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns a String Representation of the Event object class to write to text file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return the saved task to write to a text file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"E\" + SEPERATOR + super.saveTask();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 46
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * The Task Class is a Abstract Base class for any extending class that acts as"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * a Task object for the Duke Chatbot"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    // SEPERATION Attribute is used to encode the different attributes of the Task Class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static final String SEPERATOR \u003d \"#sep#\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected boolean isDoneTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for a Task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param description String description of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param done Done Status of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected Task(String description, boolean done) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.isDoneTask \u003d done;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns the check for if the task is already done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return Boolean representing whether the task is done"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public boolean done() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.isDoneTask;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Mark a generic Task object as done"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void doTask() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.isDoneTask \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Get the description of the task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return description of task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Checklist icon for displaying in the toString Representation."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "      * @return either done or not done"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String statusIcon() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.isDoneTask ? \"[\\u2713] \" : \"[\\u2718] \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.statusIcon() + this.getDescription();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Takes done status and attributes to encode the String"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return a encoded string version of task for writing to text file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.isDoneTask + SEPERATOR + description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 66
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskIoParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeDateTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeIoException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Class to perform reading and writing operations on the task list itself."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class TaskIoParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private static final String SAVEFILE \u003d \"save.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final File saveFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    TaskIoParser(String path) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Path taskFile \u003d Paths.get(path, \"src\", \"save\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.saveFile \u003d new File(taskFile.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Load duke.tasks from a text file into memory"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return A read text file of duke.tasks to Tasklist"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeIoException if there is an error in reading a file from disk"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public List\u003cTask\u003e loadTaskList() throws DukeIoException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            Scanner sc \u003d new Scanner(this.saveFile.toPath().resolve(SAVEFILE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            String currentLine \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            String[] spl;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    currentLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    spl \u003d currentLine.split(Task.SEPERATOR);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    switch (spl[0]) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        tasks.add(new ToDo(spl[2], Boolean.parseBoolean(spl[1])));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        tasks.add(new Deadline(spl[2], spl[3], Boolean.parseBoolean(spl[1])));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    case \"E\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        tasks.add(new Event(spl[2], spl[3], Boolean.parseBoolean(spl[1])));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                } catch (DukeDateTimeException ignored) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    // ignored as if the error occurs, we just do not parse that command"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (IOException fileException) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeIoException(\"Oops we couldnt read any file,\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    + \" hence we will start from a new save file\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * For initialising new TaskList"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return returns a new List of Tasks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public List\u003cTask\u003e loadNewTaskList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Writes the task list into a textfile"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param taskList the given list of duke.tasks."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeIoException If there is a IO error in creating or writing to the file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void writeTask(List\u003cTask\u003e taskList) throws DukeIoException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (!saveFile.exists()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                Files.createDirectory(Path.of(saveFile.getPath()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                Files.createFile(Path.of(saveFile.getPath()).resolve(SAVEFILE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                throw new DukeIoException(\"Could not save the file due to directory not created\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            FileWriter fw \u003d new FileWriter(Path.of(saveFile.getPath()).resolve(SAVEFILE).toFile());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            String linesep \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            for (Task t : taskList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                fw.write(t.saveTask());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                fw.write(linesep);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeIoException(e.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 106
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeIndexException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeIoException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * TaskManager is a class to handle where Tasks are CRUD."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final TaskIoParser ioParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructs TaskManager for the Duke Application with loading from the save file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param path File Path from Main Class"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeIoException If no loaded save is read"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public TaskManager(String path) throws DukeIoException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.ioParser \u003d new TaskIoParser(path);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.taskList \u003d ioParser.loadTaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructs TaskManger for the first time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param path File Path from Main Class"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param isNew Boolean to indicate that the TaskManager is first initialised."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public TaskManager(String path, boolean isNew) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assert isNew \u003d\u003d true : \"isNew is to allow for polymorphism for the case where taskmanager is new\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.ioParser \u003d new TaskIoParser(path);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.taskList \u003d ioParser.loadNewTaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Indicate that a task is done"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param index index of the list as displayed from the application"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String representation of indicating the task is done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeCommandException if a illegal index is given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeIndexException If a given index is out of bounds"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String doTask(String index) throws DukeCommandException, DukeIndexException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            int i \u003d Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            //0 indexing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            this.getTask(i).doTask();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return \"\\tNice! I\u0027ve marked this task as done: \\n\\t\" + this.getTask(i) + \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeCommandException(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeIndexException(index, taskList.size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Deletes task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param index index of the list as displayed from the application"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String representation of the confirmation of deletion of task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeCommandException if a illegal index is given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeIndexException if a given index is out of bounds"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String deleteTask(String index) throws DukeCommandException, DukeIndexException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            int i \u003d Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            //0 indexing"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            Task t \u003d this.getTask(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            this.taskList.remove(i);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return new StringBuilder().append(\"\\tNoted! I\u0027ve removed this task from your list: \\n\\t\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    .append(t)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    .append(\"\\n\\tNow you have \")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    .append(this.taskList.size())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    .append(\"tasks in the list.\\n\").toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeCommandException(index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeIndexException(index, taskList.size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Get task from the internal list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param index index of the internal list"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return Task the task at that index"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private Task getTask(int index) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.taskList.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * generic polymorphic data flow for adding a task to the runtime database"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param t task"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String to be wrapped and printed"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String add(Task t) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.taskList.add(t);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.echo(t);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns string builder of the task"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param task Task"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String echow when task is completed"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private String echo(Task task) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return new StringBuilder().append(\"\\tGot it. I\u0027ve added this task:\\n\\t  \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .append(task).append(\"\\n\\tNow you have \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .append(this.taskList.size())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .append(\" tasks in the list.\\n\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Message Passing for Tasks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeIoException if the task cannot be read to the file"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void saveTasks() throws DukeIoException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ioParser.writeTask(taskList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Parses the current list and prints the output"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String representation of the Task List"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String listTasks() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return findTasks(\"\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Regex pattern string search"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param pattern Regex Pattern or substring of description of any task in the list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return String representation of duke.tasks that match the given pattern"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String findTasks(String pattern) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (this.taskList.size() \u003e 0) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            Pattern stringPattern \u003d Pattern.compile(pattern);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            AtomicInteger index \u003d new AtomicInteger();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            sb.append(taskList.stream()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    .filter(task -\u003e {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        index.incrementAndGet();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                        return stringPattern.matcher(task.getDescription()).find();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    }).map(task -\u003e String.format(\"\\t%d. %s\\n\", index.get(), task))"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    .reduce(\"\" , (accumulate, next) -\u003e accumulate + next));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            if (sb.toString().isEmpty()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                sb.append(\"\\tCannot find a valid task in your list\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            sb.append(\"\\tThere are no tasks in your list!\\n\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"TaskManager: \\n\" + listTasks();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 162
    }
  },
  {
    "path": "src/main/java/duke/tasks/TextParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.command.CommandHelp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * TextParser to handle parsing of commands and possible cleaning."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class TextParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public TextParser(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Parse String Input into the Command Parser to return a Enum of the command encoded."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param cmd the string command for the Duke Application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return Command Enumeration"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public CommandHelp parseHelpCommand(String cmd) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String cleaned \u003d cmd.toLowerCase();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Optional\u003cCommandHelp\u003e given \u003d Arrays.stream(CommandHelp.values())"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .filter(commandHelp -\u003e commandHelp.getCode().equals(cleaned))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        given \u003d given.isEmpty() ? Optional.of(CommandHelp.ERROR) : given;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return given.get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * inputs string, processes and cleans the text for the chatbot"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * via adding a ending token seperator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param userInput Direct user input of the string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return Cleaned user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String cleanInput(String userInput) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return userInput.strip();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 38
    }
  },
  {
    "path": "src/main/java/duke/tasks/TimedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeDateTimeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * TimedTask is a abstract class that inherits from the base Task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * class, to add a new field of datetime into this child class which implements such functionalities"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "abstract class TimedTask extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected static final DateTimeFormatter FMAT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected static final LocalDate NOW \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        DateTimeFormatterBuilder dateTimeFormatterBuilder \u003d new DateTimeFormatterBuilder();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dateTimeFormatterBuilder.appendPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dateTimeFormatterBuilder.parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dateTimeFormatterBuilder.parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dateTimeFormatterBuilder.parseDefaulting(ChronoField.HOUR_OF_DAY, 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dateTimeFormatterBuilder.parseDefaulting(ChronoField.YEAR_OF_ERA, LocalDateTime.now().getYear());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dateTimeFormatterBuilder.parseDefaulting(ChronoField.MONTH_OF_YEAR, LocalDateTime.now().getMonthValue());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dateTimeFormatterBuilder.parseDefaulting(ChronoField.DAY_OF_MONTH, LocalDateTime.now().getDayOfMonth());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        FMAT \u003d dateTimeFormatterBuilder"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                .toFormatter();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected final LocalDateTime dateby;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for a TimedTask for use by implementing subclasses, in particular to populate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Tasks that have been read from a text save file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc Description of a task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param date String that is extracted from user input to be parsed into the constructor for a TimedTask object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param done Done Status of a task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeDateTimeException if the fields for the date are not matching autocorrection cases"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected TimedTask(String desc, String date, Boolean done) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(desc, done);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            if (NOW.format(FMAT).length() \u003e date.length()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                date \u003d date + NOW.format(FMAT).substring(date.length());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            this.dateby \u003d LocalDateTime.parse(date, FMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            throw new DukeDateTimeException(\"The String you entered does not meet the \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                    + \"required format of \u0027yyyy-MM-dd\u0027 \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructor for a TimedTask for use by implementing subclasses, in particular to create"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * a new TimedTask class"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc Description of a task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param date String that is extracted from user input to be parsed into the constructor for"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     *            a TimedTask object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @throws DukeDateTimeException if the fields for the date are not matching autocorrection cases"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected TimedTask(String desc, String date) throws DukeDateTimeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this(desc, date, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Performs a DateTime Arithmetric calculation with the current time of execution of the program"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * in order to display a countdown of days in the Task"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return integer representing the number of days left or past since the task was due."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    protected int timeLeft() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return Period.between(NOW, LocalDate.from(dateby)).getDays();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Get the dateby for the set task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return dateby for the registered task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String getDateby() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return dateby.toLocalDate().format(FMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns a String Representation of the Event object class to write to text file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return the saved task to write to a text file"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return super.saveTask() + SEPERATOR + getDateby();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 89
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * ToDo is a Implementation of the Task Class with no additional fields"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * This is the class that stores todo duke.tasks in the Duke program"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructs the ToDo Class for use when creating new duke.tasks"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * by end user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc Description of task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public ToDo(String desc) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(desc, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructs the ToDo Class for use when populating the list of duke.tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * recorded by the save text file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param desc Description of task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param done Done Status of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    ToDo(String desc, Boolean done) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        super(desc, done);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Returns a String Representation of the ToDo object class to write to text file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return the saved task to write to a text file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String saveTask() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"T\" + SEPERATOR + super.saveTask();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 37
    }
  },
  {
    "path": "src/main/java/duke/ui/CommandLineInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Class to handle Commandline interface, implements UserInterface contract."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class CommandLineInterface implements UserInterface {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private static final String logo \u003d \"\\tHello from\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \" ____        _        \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"\\tHello! %s I\u0027m Duke\\n\\tWhat can I do for you \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            + \"\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private static final String goodbye \u003d \"Bye %s! Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private static final String linebreaker \u003d \"_\".repeat(30) + \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private boolean isChatbotRunning;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private String userName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final Scanner scanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructs the CommandLineInterface UI for use without a GUI"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public CommandLineInterface() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.isChatbotRunning \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return isChatbotRunning;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Greeting from Duke Bot and set username of user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param userName Name of the user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void start(String userName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assert !isChatbotRunning : \"CommandLineInterface should only start once\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.isChatbotRunning \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        systemMessage(String.format(logo, userName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assert isChatbotRunning : \"CommandLineInterface should only end once\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.scanner.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.isChatbotRunning \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        systemMessage(String.format(goodbye, userName));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String nextLine() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Pass Message into the System for display as text"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param message from duke to human"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void systemMessage(String message) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        System.out.print(\"\\t\" + linebreaker + indent(message) + linebreaker);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Indents text"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param s text to indent"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return indented text"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private String indent(String s) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"    \" + s.replace(\"\\n\", \"\\n\\t\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 75
    }
  },
  {
    "path": "src/main/java/duke/ui/GuiHelper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Container for messages from {@link duke.Duke} to the {@link MainLauncher}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class GuiHelper implements UserInterface {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private boolean isChatbotRunning \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private String userName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private List\u003cString\u003e commandOutput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private boolean isNotConsumed \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructs helper class for GUI Interfacing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public GuiHelper() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.commandOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void start(String userName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assert !this.isChatbotRunning : \"GuiHelper should start only once\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.isChatbotRunning \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return isChatbotRunning;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assert this.isChatbotRunning : \"GuiHelper should only close once\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.isChatbotRunning \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.commandOutput.add(\"Goodbye \" + userName + \" my friend!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String nextLine() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return this.userInput;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void systemMessage(String message) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.isNotConsumed \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.commandOutput.add(message);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Consumes command and returns output from Duke command if any."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Otherwise returns Optional.empty()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * If a output is returned, mark as \"consumed\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * and subsequent calls to consumeCommandOutput returns Optional.empty()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * until a new {@link duke.command.CommandEnums} from Duke is run"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return Output from Duke Command if it is first invocation, else optional.empty."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public Optional\u003cList\u003cString \u003e\u003e consumeCommandOutput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (this.isNotConsumed) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            List\u003cString\u003e result \u003d this.commandOutput;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            this.isNotConsumed \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            this.commandOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return Optional.of(result);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Set user input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param input userInput"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void setUserInput(String input) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.userInput \u003d input;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return \"GUI\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 82
    }
  },
  {
    "path": "src/main/java/duke/ui/MainLauncher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.ui.graphics.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Main class for GUI"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class MainLauncher extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            stage.setTitle(\"Duke Chatbot\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setup();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 32
    }
  },
  {
    "path": "src/main/java/duke/ui/UserInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Class to define the UI Operations"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public interface UserInterface {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public boolean isRunning();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void start(String username);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void close();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public String nextLine();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void systemMessage(String message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 12
    }
  },
  {
    "path": "src/main/java/duke/ui/graphics/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.ui.graphics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Dialog box contains messages from duke and user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            URL file \u003d MainWindow.class.getResource(\"/view/DialogBox.fxml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(file);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.dialog.setMinHeight(Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.dialog.setText(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.displayPicture.setImage(img);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructs a Dialog box for the user"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param text text to input"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param img image for user"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return Dialog box for GUI"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Constructs a dialog box for the duke response"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param text text output"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @param img image for duke"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * @return Dialog box for GUI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 76
    }
  },
  {
    "path": "src/main/java/duke/ui/graphics/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.ui.graphics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.ui.GuiHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private GuiHelper guiHelper;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final Image userImg \u003d new Image(this.getClass().getResourceAsStream(\"/images/caocao.gif\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private final Image dukeImg \u003d new Image(this.getClass().getResourceAsStream(\"/images/trump.gif\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Substitute constructor for GUI"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.guiHelper \u003d new GuiHelper();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.duke \u003d new Duke(guiHelper);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.greeting();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Initialise the Mainwindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * then appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.guiHelper.setUserInput(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.userMessage(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.duke.nextIteration();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        if (!this.guiHelper.isRunning()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            this.closeWindow();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.guiHelper.consumeCommandOutput().ifPresent((message) -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            message.forEach(this::dukeMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private void greeting() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        final String welcomeMessage \u003d \"Hello Friend! I\u0027m Duke, how may I help you!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        this.dukeMessage(welcomeMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private void closeWindow() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Stage stage \u003d (Stage) sendButton.getScene().getWindow();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        stage.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private void userMessage(String message) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(message , userImg));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    private void dukeMessage(String message) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(message, dukeImg));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 84
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "         prefWidth\u003d\"446.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" prefWidth\u003d\"500.0\" maxHeight\u003d\"Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"200.0\" fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 21
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"594.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.graphics.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"535.0\" layoutY\u003d\"555.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"39.0\" prefWidth\u003d\"59.0\" text\u003d\"Button\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"2.0\" layoutY\u003d\"555.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"39.0\" prefWidth\u003d\"533.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" prefHeight\u003d\"555.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"597.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 19
    }
  },
  {
    "path": "src/save/save.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "T#sep#false#sep#thinsd"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "D#sep#false#sep#task#sep#12-09-2020"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "E#sep#false#sep#tasasd#sep#23-09-2020"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "T#sep#false#sep#task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "T#sep#false#sep#sad"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "T#sep#false#sep#a"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 6
    }
  },
  {
    "path": "src/test/java/duke/tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.exceptions.DukeDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Class to test Deadline and TimedTask class "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void testDeadlineClassConstructor_invalidString_throwsDukeDateTimeException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertThrows(DukeDateTimeException.class, () -\u003e new Deadline(\"description\", \"fail\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void testDeadlineConstructor_autoCorrectsBlankDateField_CorrectstoCurrentDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"random_desc\", \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            assertEquals(LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd-MM-YYYY\")),deadline.getDateby());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void testTimeLeftArithmetric_noInput_zeroReturned() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"random_desc\", \"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(deadline.timeLeft(), 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 37
    }
  },
  {
    "path": "src/test/java/duke/tasks/TextParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import duke.command.CommandHelp;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " * Class to teast TextParser and all public test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class TextParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Tests TextParser and ensures that it returns a error if a invalid command is given as input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void parseCommand_givenUnknownCommand_thenAssertThrowsException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        TextParser textParser \u003d new TextParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(CommandHelp.ERROR, textParser.parseHelpCommand(\"hello\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     * Tests that when a expected command is given, the correct enumeration is returned."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public void parseCommand_givenSeperationToken_AssertTokenSeperatesString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        TextParser textParser \u003d new TextParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        String test \u003d \"todo\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        CommandHelp expectedResult \u003d CommandHelp.TODO;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(expectedResult, textParser.parseHelpCommand(test));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 31
    }
  },
  {
    "path": "src/test/java/duke/tasks/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    public final ToDo toDo \u003d new ToDo(\"test task\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    void testDescription_isEquivalent() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(\"test task\", toDo.getDescription());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    void testStatusIcon_matchesExpectedStatus() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(\"[\\u2718] \", toDo.statusIcon());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    void testSaveTaskEncoding_matchesExpectedStatus() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(\"T#sep#false#test task#sep#\", toDo.saveTask());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    void testMarkDoneTask_changesOutput() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        toDo.doTask();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "        assertEquals(\"[\\u2713] test task\", toDo.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 30
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "todo taskAbc 1231"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "deadline Say Hi \\by tofu"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "deadline Say Hi /by tofu"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "abc 123"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "event hello friends /by /by TIME"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 12
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blackonyyx"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ../bin Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "blackonyyx": 2,
      "-": 36
    }
  }
]
