[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "theyifan": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.6.0\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 44
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "if exist \"%JAVA_EXE%\" goto execute"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyifan"
        },
        "content": ":end"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyifan"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyifan"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyifan"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyifan"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyifan"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyifan"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyifan"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyifan"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theyifan"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyifan"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "theyifan": 89
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": " * This file was generated by the Gradle \u0027init\u0027 task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": " * The settings file is used to specify which projects to include in your build."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": " * Detailed information about configuring a multi-project build in Gradle can be found"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": " * in the user manual at https://docs.gradle.org/6.6.1/userguide/multi_project_builds.html"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "rootProject.name \u003d \u0027ip\u0027"
      }
    ],
    "authorContributionMap": {
      "theyifan": 10
    }
  },
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    protected CommandType commandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    protected String[] inputs;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Creates a Command object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param commandType Type of command given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param inputs Inputs related to the command given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Command(CommandType commandType, String[] inputs) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.inputs \u003d inputs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns whether the use is exiting the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return Whether the user is exiting ths program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String execute(Ui ui, TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            isExit \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return ui.printBye();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return ui.printHelp();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return ui.showList(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            if (inputs.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                throw new DukeException(\"OOPS! duke.Task number cannot be empty for done action!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                Task doneTask \u003d tasks.markTaskAsDone(Integer.parseInt(inputs[1]));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                storage.saveTaskListToFile(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                return ui.showMarkedAsDone(doneTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            } catch (NumberFormatException | IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                throw new DukeException(\"OOPS! duke.Task number is invalid!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            if (inputs.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                throw new DukeException(\"OOPS! duke.Task number cannot be empty for delete action!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                Task deleteTask \u003d tasks.deleteTask(Integer.parseInt(inputs[1]));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                storage.saveTaskListToFile(tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                return ui.showDeletedTask(deleteTask, tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            } catch (NumberFormatException | IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                throw new DukeException(\"OOPS! duke.Task number is invalid!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            if (inputs.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                throw new DukeException(\"OOPS! The description of a todo cannot be empty!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            Task addedToDo \u003d tasks.addTask(new ToDo(inputs[1]));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            storage.saveTaskListToFile(tasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return ui.showAddedTask(addedToDo, tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            if (inputs.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                throw new DukeException(\"OOPS! The description of a deadline cannot be empty!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            String[] deadlineDetails \u003d inputs[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            if (deadlineDetails.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                throw new DukeException(\"OOPS! The date of a deadline cannot be empty!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            Task addedDeadline \u003d tasks.addTask(new Deadline(deadlineDetails[0], deadlineDetails[1]));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            storage.saveTaskListToFile(tasks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return ui.showAddedTask(addedDeadline, tasks);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            if (inputs.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                throw new DukeException(\"OOPS! The description of an event cannot be empty!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            String[] eventDetails \u003d inputs[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            if (eventDetails.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                throw new DukeException(\"OOPS! The time of an event cannot be empty!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            Task addedEvent \u003d tasks.addTask(new Event(eventDetails[0], eventDetails[1]));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            storage.saveTaskListToFile(tasks);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return ui.showAddedTask(addedEvent, tasks);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            if (inputs.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                throw new DukeException(\"OOPS! The keyword for search cannot be empty!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return ui.showMatchingTasks(tasks, inputs[1]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new DukeException(\"OOPS! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 95
    }
  },
  {
    "path": "src/main/java/duke/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    BYE, LIST, DONE, DELETE, TODO, DEADLINE, EVENT, HELP, FIND"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 5
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Creates a Deadline object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param description Description of the deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param date Date of the deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws DukeException If date format is wrong."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Deadline(String description, String date) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.date \u003d parseDeadlineDate(date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Creates a Deadline object with done/not done status."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param isDone Whether the deadline is done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param description Description of the deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param date Date of the deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws DukeException If date format is wrong."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Deadline(boolean isDone, String description, String date) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.date \u003d parseDeadlineDate(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Converts string date to LocalDate."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param date String date input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return Converted LocalDate object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws DukeException If date format is wrong."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private static LocalDate parseDeadlineDate(String date) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return LocalDate.parse(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new DukeException(\"OOPS! Wrong Date/Time format! Type \u0027help\u0027 to see the correct format\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    String getTaskDetailsForSave() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return \"D | \" + (isDone ? 1 : 0) + \" | \" + description + \" | \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String formattedDate \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return \"[D]\" + super.toString() + String.format(\" (by: %s)\", formattedDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 58
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        displayPicture.setFitWidth(80.0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        displayPicture.setFitHeight(80.0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 47
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    // GUI variables"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Creates the Duke object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String filePath \u003d \"data/duke.TaskList.txt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                storage.newStorage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                ui.printError(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns a response to be displayed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param input User input string."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return The response."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String output \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            output \u003d command.execute(ui, tasks, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            output \u003d ui.printError(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // Formatting the window to look as expected"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        stage.setMinWidth(500.0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        mainLayout.setPrefSize(500.0, 600.0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        scrollPane.setPrefSize(500, 550);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        userInput.setPrefWidth(445.0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // print greetings"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Label greetings \u003d new Label(ui.printGreetings());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                DialogBox.getDukeDialog(greetings, new ImageView(duke))"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        // handle user input"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 147,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 7
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    protected LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    protected LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Creates an event object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param description Description of the event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param time Time of the event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws DukeException If time format is not correct."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Event(String description, String time) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String[] timeDetails \u003d time.split(\"\\\\s\", 3);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (timeDetails.length \u003c 3) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new DukeException(\"OOPS! Wrong Date/Time format! Type \u0027help\u0027 to see the correct format\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.startDateTime \u003d parseEventDateTime(timeDetails[0], timeDetails[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.endDateTime \u003d parseEventDateTime(timeDetails[0], timeDetails[2]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Creates an event object with done/not done status."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param isDone Whether the event is done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param description Description of the event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param time Time of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws DukeException If time format is not correct."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Event(boolean isDone, String description, String time) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String[] timeDetails \u003d time.split(\"\\\\s\", 3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.startDateTime \u003d parseEventDateTime(timeDetails[0], timeDetails[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.endDateTime \u003d parseEventDateTime(timeDetails[0], timeDetails[2]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Converts string date and time to LocalDateTime."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param date String date input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param time String time input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return Converted LocalDateTime object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws DukeException If date format is wrong."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private static LocalDateTime parseEventDateTime(String date, String time) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            LocalDate datePart \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            LocalTime timePart \u003d LocalTime.parse(time);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return LocalDateTime.of(datePart, timePart);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new DukeException(\"OOPS! Wrong Date/Time format! Type \u0027help\u0027 to see the correct format\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    String getTaskDetailsForSave() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return \"E | \" + (isDone ? 1 : 0) + \" | \" + description + \" | \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + startDateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + startDateTime.format(DateTimeFormatter.ofPattern(\"HH:mm\")) + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + endDateTime.format(DateTimeFormatter.ofPattern(\"HH:mm\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String formattedStartDateTime \u003d startDateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String formattedEndDateTime \u003d endDateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return \"[E]\" + super.toString()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + String.format(\" (at: %s to %s)\", formattedStartDateTime, formattedEndDateTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 75
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 12
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns the command object parsed from user input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return Command parsed from use input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws DukeException If input command type is incorrect."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String[] inputs \u003d input.split(\"\\\\s\", 2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        CommandType commandType \u003d convertInputToEnum(inputs[0].toLowerCase());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return new Command(commandType, inputs);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Converts user input command to CommandType Enum."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param input User input of command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return CommandType Enum."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private static CommandType convertInputToEnum(String input) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return CommandType.BYE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return CommandType.LIST;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return CommandType.DONE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return CommandType.DELETE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return CommandType.TODO;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return CommandType.DEADLINE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return CommandType.EVENT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return CommandType.HELP;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return CommandType.FIND;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new DukeException(\"OOPS! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 47
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Return a list of tasks saved in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return List of tasks saved in local storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws DukeException If there is error in the local storage file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public List\u003cString\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            FileReader fr \u003d new FileReader(filepath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            String task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            List\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            while ((task \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                tasks.add(task.strip());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            fr.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new DukeException(\"OOPS! I\u0027m sorry, there is an error during initialisation :-(\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Creates new storage file for saving the tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws DukeException If there is error while creating the local file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void newStorage() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        new File(\"data/\").mkdirs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            new File(filepath).createNewFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new DukeException(\"OOPS! I\u0027m sorry, there is an error during initialisation :-(\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Saves the updated task list to local storage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param taskList Task list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws DukeException If there is error when writing to the local file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void saveTaskListToFile(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        PrintWriter writer \u003d initialiseWriter();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String allTasks \u003d taskList.getTaskListForSave();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        writer.print(allTasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Initialises the file writer."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return File Writer to the local storage file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws DukeException If there is error when initialising the file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public static PrintWriter initialiseWriter() throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            PrintWriter writer \u003d new PrintWriter(\"data/duke.TaskList.txt\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return writer;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            throw new DukeException(\"OOPS! I\u0027m sorry, there is an error during initialisation :-(\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 82
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Creates a task object, default to status in not done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Creates a task object with done/not done status."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param isDone Whether the task is done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Task(boolean isDone, String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns the status icon of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return Status icon of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return (isDone ? \"[\\u2713]\" : \"[\\u2718]\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Task markAsDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Gets the task details in the format for saving to local storage."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return Task details in the correct format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    abstract String getTaskDetailsForSave();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return this.getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 49
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    protected List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public TaskList(List\u003cString\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        generateTaskList(tasks);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns the number of tasks in the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return Number of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Adds a task into the task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return The task added to the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Task addTask(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Returns a string of task list in the correct format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return String of formatted task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String printList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String output \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        int count \u003d taskList.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (count \u003c\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return \"There is no task in your list currently. \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                output +\u003d (i + 1) + \". \" + taskList.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return output.strip();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Deletes a task from the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param num Index of the task that the user wants to delete."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return Deleted task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Task deleteTask(int num) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        Task deletedTask \u003d taskList.get(num - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        taskList.remove(num - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return deletedTask;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param idx Index of the task that the user wants to mark as done."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return The task marked as done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Task markTaskAsDone(int idx) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return taskList.get(idx - 1).markAsDone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Finds the tasks that matches the keyword."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param keyword Keyword for finding matching tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return List of matching tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public List\u003cTask\u003e findTasks(String keyword) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        List\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            if (task.description.contains(keyword)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return matchingTasks;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String printMatchingTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String output \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        int count \u003d tasks.size();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        if (count \u003c\u003d 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return \"There is no matching task in your list. \";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                output +\u003d (i + 1) + \". \" + tasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            return output.strip();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Generates a list of tasks from strings read from file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param tasks List of tasks in strings."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @throws DukeException If there is error in the input."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    private void generateTaskList(List\u003cString\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        for (String task : tasks) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            if (task.length() \u003c 1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            String[] taskDetail \u003d task.split(\" \\\\| \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            String type \u003d taskDetail[0];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            boolean isDone \u003d Integer.parseInt(taskDetail[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            String description \u003d taskDetail[2];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                taskList.add(new ToDo(isDone, description));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                taskList.add(new Event(isDone, description, taskDetail[3]));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                taskList.add(new Deadline(isDone, description, taskDetail[3]));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                throw new DukeException(\"OOPS! Invalid input from file! \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String getTaskListForSave() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String allTasks \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theyifan"
        },
        "content": "            allTasks +\u003d task.getTaskDetailsForSave() + \"\\n\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 141
    }
  },
  {
    "path": "src/main/java/duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public ToDo(boolean isDone, String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    String getTaskDetailsForSave() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return \"T | \" + (isDone ? 1 : 0) + \" | \" + description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 21
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    protected Scanner sc;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String readInputs() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String input \u003d sc.nextLine().strip();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Formats the element to be printed into the correct format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param str The element to be printed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return The text to be displayed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String formatPrint(String str) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String divider \u003d \"----------------------------\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String newStr \u003d (\"   \" + divider + str + \"\\n\" + divider).replaceAll(\"(\\r\\n|\\n)\", \"\\r\\n   \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return newStr;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Prints error message in the correct format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param str Error message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return The text to be displayed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String printError(String str) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String divider \u003d \"############################\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String newStr \u003d (\"   \" + divider + str + \"\\n\" + divider).replaceAll(\"(\\r\\n|\\n)\", \"\\r\\n   \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return newStr;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Prints greetings to the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return The text to be displayed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String printGreetings() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String greeting \u003d \"Hello I\u0027m Duke, your favourite chatbot! \\n\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"Type \u0027help\u0027 to see the list of command I support. \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return formatPrint(greeting);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Prints the list of supported commands."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return The text to be displayed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String printHelp() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String supportedCommands \u003d \"I support these commands: \\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"todo: \\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"    add a todo item with a description. \\n    format: todo {description} \\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"deadline: \\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"    add a deadline with a description and date. \\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"    format: deadline {description} /by {yyyy-mm-dd} \\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"event: \\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"    add an event with a description, date, \\n    start time and end time. \\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"    format: event {description} /at \\n    {yyyy-mm-dd} {hh:mm} {hh:mm}\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"done: \\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"    mark an item as done. \\n    format: done {taskNumber} \\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"delete: \\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"    delete an item. \\n    format: delete {taskNumber} \\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"list: \\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"    see all the tasks you have now. \\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"find: \\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"    search your task list with keywords. \\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"bye: \\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"    say goodbye to me :\u003c\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return formatPrint(supportedCommands);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Prints goodbye message."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return The text to be displayed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String printBye() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "theyifan"
        },
        "content": "         return formatPrint(\"Bye! Hope to see you again soon! \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Shows the list of tasks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param taskList Task list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return The text to be displayed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String showList(TaskList taskList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return formatPrint(taskList.printList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Shows the added task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param task Added task."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return The test to be displayed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String showAddedTask(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return formatPrint(String.format(\"Got it. I\u0027ve added this task: \\n   %s\\nNow you have %d task%s in the list.\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                task, taskList.getSize(), taskList.getSize() \u003e 1 ? \"s\" : \"\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Shows the tasks that match the search keyword."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param taskList Task list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param keyword Keyword for finding matching tasks."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return The text to be displayed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String showMatchingTasks(TaskList taskList, String keyword) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return formatPrint(taskList.printMatchingTasks(taskList.findTasks(keyword)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Shows the deleted task."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param task Deleted task."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return The text to be displayed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String showDeletedTask(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return formatPrint(String.format(\"Got it. I\u0027ve deleted this task: \\n   %s\\nNow you have %d task%s in the list.\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                task, taskList.getSize(), taskList.getSize() \u003e 1 ? \"s\" : \"\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * Shows the task marked as done."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @param task Task marked as done."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     * @return The text to be displayed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "theyifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public String showMarkedAsDone(Task task) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        return formatPrint(\"Nice! I\u0027ve marked this task as done: \\n   \" + task);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 139
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void testTaskListAdd() throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        tasks.addTask(new ToDo(\"clean my room\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        tasks.addTask(new Deadline(\"do CS2103\", \"2020-05-25\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        tasks.addTask(new Event(\"meet CS2103 group\", \"2020-05-25 12:34 13:34\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String taskList \u003d tasks.printList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String expectedList \u003d \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        + \"1. [T][✘] clean my room\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        + \"2. [D][✘] do CS2103 (by: May 25 2020)\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        + \"3. [E][✘] meet CS2103 group (at: May 25 2020 12:34 to May 25 2020 13:34)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertEquals(taskList, expectedList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void testTaskListDone() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        tasks.addTask(new ToDo(\"clean my room\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        tasks.addTask(new Deadline(\"do CS2103\", \"2020-05-25\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        tasks.addTask(new Event(\"meet CS2103 group\", \"2020-05-25 12:34 13:34\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        tasks.markTaskAsDone(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String taskList \u003d tasks.printList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String expectedList \u003d \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        + \"1. [T][✓] clean my room\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        + \"2. [D][✘] do CS2103 (by: May 25 2020)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        + \"3. [E][✘] meet CS2103 group (at: May 25 2020 12:34 to May 25 2020 13:34)\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertEquals(taskList, expectedList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    public void testTaskListDelete() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        tasks.addTask(new ToDo(\"clean my room\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        tasks.addTask(new Deadline(\"do CS2103\", \"2020-05-25\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        tasks.addTask(new Event(\"meet CS2103 group\", \"2020-05-25 12:34 13:34\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        tasks.deleteTask(2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String taskList \u003d tasks.printList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        String expectedList \u003d \"Here are the tasks in your list:\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"1. [T][✘] clean my room\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "theyifan"
        },
        "content": "                + \"2. [E][✘] meet CS2103 group (at: May 25 2020 12:34 to May 25 2020 13:34)\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "theyifan"
        },
        "content": "        assertEquals(taskList, expectedList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "theyifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "theyifan": 50
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "theyifan"
        },
        "content": "deadline do 2103 homework /by 2020-05-25"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "theyifan"
        },
        "content": "event meet jason leo /at 2020-05-06 12:23 14:45"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": "todo write resume"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "theyifan"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "theyifan"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "theyifan"
        },
        "content": "event meet babe"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "theyifan"
        },
        "content": "todo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "theyifan"
        },
        "content": "blah blab"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "theyifan"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "theyifan"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "theyifan"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "theyifan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "theyifan": 14
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "theyifan"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "theyifan": 2,
      "-": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "theyifan"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "theyifan"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "theyifan"
        },
        "content": "if [ -e \"./data/\" ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "theyifan"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "theyifan"
        },
        "content": "    rm -r data/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "theyifan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "theyifan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "theyifan"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "theyifan"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "theyifan": 10,
      "-": 36
    }
  }
]
