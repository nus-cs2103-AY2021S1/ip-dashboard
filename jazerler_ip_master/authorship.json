[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    String time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    Deadline(String name, String time) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return String.format(\"[D] %s (by: %s)\", super.toString(), time);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 14
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String LINE1 \u003d \"_____________________________________________________DUKE___\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String LINE2 \u003d \"------------------------------------------------------------\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String DONE \u003d \"done\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        looper();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static void reply(String text) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        System.out.printf(\"%s\\n%s\\n%s\\n\", LINE1, text.trim(), LINE2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static void invalid(String message) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        reply(String.format(\"Invalid command. %s\", message));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static void addTaskNotification(Task t) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        reply(String.format(\"Added %s\", t.toString()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static String[] readCommand(String text) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return text.split(\" \", 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static void looper() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        reply(\"Hello\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        boolean exit \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        while (!exit) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                String input \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                String[] parsedInput \u003d readCommand(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                switch (parsedInput[0]) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    case BYE:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        exit \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    case LIST:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        if (!list.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        String result \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            result +\u003d String.format(\"%d. %s\\n\", i + 1, list.get(i));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        reply(result);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            reply(\"List is empty.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    case DONE:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            int index \u003d Integer.parseInt(parsedInput[1]) - 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            list.get(index).setCompleted();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            reply(String.format(\"Task marked as completed: \\n%s\", list.get(index).toString()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            throw new DukeException(String.format(\"%s is not a number that Done can use\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                                    parsedInput[1]));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    case DELETE:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            int index \u003d Integer.parseInt(parsedInput[1]) - 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            Task deleted \u003d list.get(index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            list.remove(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            reply(String.format(\"Task deleted: \\n%s\", deleted.toString()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            throw new DukeException(String.format(\"%s is not a number that Delete can use\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                                    parsedInput[1]));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    case TODO:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            Todo todo \u003d new Todo(parsedInput[1]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            list.add(todo);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            addTaskNotification(todo);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            throw new DukeException(\"Insufficient arguments for Todo\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    case EVENT:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            String[] evInput \u003d parsedInput[1].split(\"/at \", 2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            Event event \u003d new Event(evInput[0].trim(), evInput[1].trim());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            list.add(event);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            addTaskNotification(event);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            throw new DukeException(\"Insufficient arguments for Event\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    case DEADLINE:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            String[] dlInput \u003d parsedInput[1].split(\"/by \", 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            Deadline deadline \u003d new Deadline(dlInput[0].trim(), dlInput[1].trim());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            list.add(deadline);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            addTaskNotification(deadline);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                            throw new DukeException(\"Insufficient arguments for Deadline\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                        throw new DukeException(\"Input did not match any existing command.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                System.out.println(String.format(\"DukeException: %s\", e.getMessage()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        reply(\"Goodbye.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 132,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    DukeException(String error) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class Event extends  Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    String time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    Event(String name, String time) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return String.format(\"[E] %s (at: %s)\", super.toString(), time);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 14
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    String name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    Boolean completed;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    Task(String name) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.completed \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        if (completed) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return String.format(\"[✓] %s\", name);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return String.format(\"[✗] %s\", name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void setCompleted() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        completed \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 23
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class Todo extends  Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    Todo(String name) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return String.format(\"[T] %s\", super.toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 11
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": "todo Todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "deadline Deadline /by deadline"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "event Event /at event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jazerler": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "cmd /k"
      }
    ],
    "authorContributionMap": {
      "jazerler": 3,
      "-": 20
    }
  }
]
