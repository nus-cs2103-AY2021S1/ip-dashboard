[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    //For JavaFX Setup"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    toolVersion \u003d \u00278.36\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 17,
      "-": 44
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "T | 0 | homeworkTT"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 1
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import graphicinterface.Gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Application.launch(Gui.class, args);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 8
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Responsible for interpreting the input and interacting with the User."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Initialised duke.Duke with a designated location to read and save the data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param filePath File location to read and save data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            this.tasks \u003d new TaskList(this.storage.loadDefaultFile());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String getWelcome() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return ui.showWelcome();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private String createEvent(String[] commandParts) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (commandParts.length !\u003d 3) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            String errorMessage \u003d \"Error: Please key in as: \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    + \"event [title] /at YYYY-MM-DD [startTime] [endTime]\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    + \"where start and end time is in HH:MM \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return ui.showError(errorMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Task addedEvent \u003d tasks.addEvent(commandParts[1], commandParts[2]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return ui.showTaskAdded(addedEvent.toString(), tasks.getTotalTask());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private String createDeadline(String[] commandParts) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (commandParts.length !\u003d 3) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            String errorMessage \u003d ui.showError(\"Error: Please key in as: \\n \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    + \"event [title] /by YYYY-MM-DD HH:MM\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return ui.showError(errorMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Task addedDeadline \u003d tasks.addDeadLine(commandParts[1], commandParts[2]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return ui.showTaskAdded(addedDeadline.toString(), tasks.getTotalTask());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private String createTodo(String[] commandParts) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (commandParts.length !\u003d 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            String errorMessage \u003d \"Error: Please key in as: \\n \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    + \"event [title]\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return ui.showError(errorMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Task addedToDo \u003d tasks.addTodo(commandParts[1]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return ui.showTaskAdded(addedToDo.toString(), tasks.getTotalTask());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private String deleteTask(String[] commandParts) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            int index \u003d Integer.parseInt(commandParts[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Task deletedTask \u003d tasks.deleteTask(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return ui.showDeletedTasks(deletedTask.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (NumberFormatException err) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new DukeException(\"Error. Please key in an integer after \\\"done\\\"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new DukeException(\"Key in \\\"delete [x]\\\" to delete x^th item\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void loadFile(String filePath) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.tasks \u003d new TaskList(storage.loadCustomFile(filePath));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     ** Take in user input and carry out the respective command based on the input command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return Either Success Message or Error Message due to bad formatting."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String processInput(String input, Runnable terminationFunction) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String response \u003d \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            String[] inputComponents \u003d parser.splitIntoComponents(input);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            String command \u003d inputComponents[0];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //Common functions"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                storage.saveToFile(tasks.toSaveFormat());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                response \u003d ui.showBye();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                terminationFunction.run();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                index \u003d Integer.parseInt(inputComponents[1]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                tasks.doTask(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                response \u003d ui.showTaskDone(tasks.getTaskStatus(index));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                if (tasks.getTotalTask() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    response \u003d ui.show(\"Currently, you have no tasks on hand\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    response \u003d ui.showTasks(tasks.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            case \"archive\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                String[] filePaths \u003d Arrays.copyOfRange(inputComponents, 1, inputComponents.length);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                this.storage.saveToFile(tasks.toSaveFormat(), filePaths);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                response \u003d ui.show(\"You have successfully archive current progress to the file(s) indicated\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            case \"load\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                if (inputComponents.length !\u003d 2) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    response \u003d ui.show(\"Invalid Input. \u0027Load\u0027 should be followed by the filePath\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                this.loadFile(inputComponents[1]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                response \u003d ui.show(\"Successful\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //3 different types of task"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                response \u003d this.createEvent(inputComponents);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                response \u003d this.createTodo(inputComponents);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                response \u003d this.createDeadline(inputComponents);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //Delete Task"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                response \u003d this.deleteTask(inputComponents);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //Find task by keyword"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                String result \u003d tasks.find(inputComponents[1]);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                if (result.equals(\"\")) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    response \u003d ui.show(\"No match found\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    response \u003d ui.show(\"These following tasks match the keyword you entered: \\n\" + result);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //When command does not match any of those above"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                response \u003d ui.showError(\"OOPS!!! I don\u0027t know what does it mean by: \\\"\" + input + \"\\\"\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            response \u003d ui.showError(err.getMessage());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assert !response.equals(\"\") : \"Error, none of the case catch the command\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 165
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Custom Exception for the project: duke.Duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assert !message.equals(\"\") : \"Empty Duke Exception Message\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 16
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Parser(){}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Take in the String input and split into the 3 parts, namely"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * the command, the title and extra_descriptions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param input The input from the users."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return a String array that contains different components of the input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String[] splitIntoComponents(String input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ArrayList\u003cString\u003e inputComponents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        int spaceIndex \u003d input.indexOf(\" \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        int slashIndex \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        int infoIndex \u003d input.indexOf(\" \", slashIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (spaceIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            inputComponents.add(input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } else if (slashIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            inputComponents.add(input.substring(0, spaceIndex));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            inputComponents.add(input.substring(spaceIndex + 1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            inputComponents.add(input.substring(0, spaceIndex));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            inputComponents.add(input.substring(spaceIndex + 1, slashIndex));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            inputComponents.add(input.substring(infoIndex + 1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return inputComponents.toArray(new String[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 31
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Represents a file location that user\u0027s input. Capable of reading from and writing to the file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "@SuppressWarnings(\"checkstyle:Regexp\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final String DEFAULT_SAVE_LOCATION \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private static final DukeException FILE_NOT_FOUND \u003d new DukeException(\"Can\u0027t find the File. Please ensure that:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            + \"Filepath is not pointed to a directory,\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            + \"you have permission to access/create file there and\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            + \"in this format: dir\\\\...\\\\filename.txt\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Points to the default save location."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.file \u003d new File(DEFAULT_SAVE_LOCATION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.filePath \u003d DEFAULT_SAVE_LOCATION;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Points to the file which filePath is input by User."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param filePath filePath of the file that wish to be load/ write"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Storage(String filePath) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assert !filePath.equals(\"\") : \"Empty FilePath\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (!isWritableFilePath(filePath)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private boolean isWritableFilePath(String filePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return Files.isWritable(Paths.get(filePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private boolean isReadableFilePath(String filePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return Files.isReadable(Paths.get(filePath));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * If there is input in FilePaths, write to File"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Write the argument into the file destinated during initialisation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param data An array of String to be written to the designated file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws DukeException If no permission to create at filePath or filePath is a directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void saveToFile(String[] data, String... filePaths) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //If not specified, write to assigned filePath during initialisation"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (filePaths.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                FileWriter fw \u003d new FileWriter(this.file);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                fw.write(\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                for (String s: data) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    fw.append(s);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            for (String currentFilePath: filePaths) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                File currentFile \u003d new File(currentFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                if (isWritableFilePath(filePath)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    FileWriter fw \u003d new FileWriter(currentFile);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    fw.write(\"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    for (String s: data) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                        fw.append(s);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    fw.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new DukeException(\"File Path is a directory -OR- Can\u0027t create file at location\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /** Read and interpret the saved file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return ArrayList of Task that is saved inside the designated file. If file / directory does not exist, create."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws DukeException If file is not found."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ArrayList\u003cTask\u003e loadDefaultFile() throws DukeException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return loadFile(this.file);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (FileNotFoundException err) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            this.createNewFile(this.filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /** Load a file at path specified by the user."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param newFilePath Path of the file that user wish to load."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return ArrayList of Task that is saved inside the designated file. If file / directory does not exist, create."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws DukeException If file is not found."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ArrayList\u003cTask\u003e loadCustomFile(String newFilePath) throws DukeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (!isReadableFilePath(newFilePath)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                throw FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return loadFile(new File(newFilePath));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (FileNotFoundException err) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void createNewFile(String filePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String[] fileDirectory \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String parentDirectory \u003d \"\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (int i \u003d 0; i \u003c fileDirectory.length - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            parentDirectory +\u003d fileDirectory[i] + \"/\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        File f \u003d new File(parentDirectory);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        f.mkdirs();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private ArrayList\u003cTask\u003e loadFile(File file) throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ArrayList\u003cTask\u003e loadedTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String[] dataRead;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            dataRead \u003d readSavedData(scanner.nextLine());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Task newTask \u003d loadSavedTask(dataRead);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            loadedTask.add(newTask);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return loadedTask;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Split individual saved line into a 3 parts: Command, What, When"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param inputLine A line from save file to be interpreted."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return A String array with 2 or 3 parts."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private String[] readSavedData(String inputLine) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String[] parts \u003d inputLine.split(\" \\\\| \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (String part : parts) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            result.add(part.trim());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return result.toArray(parts);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Create a new Task based on the input."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param args The 2 or 3 parts command (Command, What, When)."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return Task created based on the command"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws DukeException If the command requires (What, When) parts but one or more parts is missing."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Task loadSavedTask(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            switch(args[0]) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                newTask \u003d new Deadline(args[2], args[3]);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                newTask \u003d new ToDo(args[2]);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                newTask \u003d new Event(args[2], args[3]);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                throw new DukeException(\"Error: Saved File is badly corrupted\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (Exception err) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new DukeException(\"Error: Saved File is badly corrupted\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (args[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            newTask.setDone();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 194
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Represents a Manager to manage different tasks on hand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Initialise with no initial task on hand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Initialise with serveral tasks on hand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Add a new Task of type ToDo."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param name Name of the ToDo to create."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return The new task added."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Task addTodo(String name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Task newTask \u003d new ToDo(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Find for Tasks that contain the keyword."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param keyword The keyword to search."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return String representation of Tasks that contains the keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String find(String keyword) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (Task currentTask : tasks) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (!currentTask.getName().contains(keyword)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            } else if (result.equals(\"\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                result +\u003d \"\\n\" + currentTask.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            result +\u003d \" \" + currentTask.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Add a new Task of type Deadline."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param name Name Name of the Deadline to be created."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param time Timing of the new Deadline to be created."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return The new Task added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws DukeException If time is wrongly formatted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Task addDeadLine(String name, String time) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Task newTask \u003d new Deadline(name, time);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Add a new Task of type Event."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param name Name Name of the Event to be created."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param time Timing of the new Event to be created."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return The new Task added."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws DukeException If time is wrongly formatted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Task addEvent(String name, String time) throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Task newTask \u003d new Event(name, time);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return The total number of tasks at hands."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public int getTotalTask() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Set the task as done. Notes, task starts counting from 1."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param index The index of task to be done."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws DukeException If the task at index is already done."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void doTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.tasks.get(index - 1).setDone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Convert all tasks at hands to a format friendly for saving."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return Array of String that describes tasks at hands in saved format."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String[] toSaveFormat() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String[] result \u003d new String[this.tasks.size()];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            result[i] \u003d tasks.get(i).toSaveFormat();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Set the task as done. Notes, task starts counting from 1."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param index The index of task to be deleted."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return Task delted."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws DukeException If the task does not exists."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Task deleteTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (index - 1 \u003c 1 || index \u003e this.tasks.size()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new DukeException(\"Task #\" + index + \"does not exist.\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    + \"To check for lists of Tasks, type \\\"list\\\"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assert index - 1 \u003e 0 : \"Error. Delete Task don\u0027t catch index out of bound exception\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return this.tasks.remove(index - 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Get detail of the Task at index."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param index The index of task that is concerned."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return String representation of the task at concerned."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String getTaskStatus(int index) throws DukeException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            return tasks.get(index - 1).toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new DukeException(\"Please key in an index between 1 and \" + tasks.size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Display all the tasks on hands."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return The String that represents all the tasks on hands in display format."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            output +\u003d i + \".\" + tasks.get(i - 1).toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (i !\u003d tasks.size()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                output +\u003d \"\\n\"; //Add a new line only if the current task is not the last."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void loadArchivedTasks(ArrayList\u003cTask\u003e dataRead) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.tasks \u003d dataRead;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 165
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Responsible for customizing the Messages shown to User"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Return the input according to default\u0027s style."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param input The message to display to user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String show(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Return Welcome Message according to default\u0027s style."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return show(\"duke.Duke at your service. How may I help?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Return the detail of the new Task and new count of tasks at hand according to default\u0027s style."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String showTaskAdded(String taskDetail, int taskCount) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String first \u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String second \u003d \"    \" + taskDetail + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String third \u003d String.format(\"Now you have %d tasks in the list\", taskCount);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return show(first + second + third);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Return the detail of the task that is just set to done according to default\u0027s style."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String showTaskDone(String taskDetail) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return show(\"Nice! I have marked this task as done:\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                + taskDetail);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Return the tasks that the user has on hand."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param taskDetails String of Task Descriptions that corresponds to the tasks user have on hand."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String showTasks(String taskDetails) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return show(\"Here are the tasks in your list\\n\" + taskDetails);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Return the tasks that the user has just deleted."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param taskDetail String of Task that is just deleted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String showDeletedTasks(String taskDetail) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return show(\"Alright! I have deleted this task:\\n\" + taskDetail);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * String error message with different style."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param err Error Message to print out."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String showError(String err) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String line \u003d \"*******************************************************\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return String.format(\"%s\\n%s\\n%s\", line, err, line);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Print out the bye with different style."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String showBye() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return show(\"Bye. See you again\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                + \"Window will close in 2 seconds\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 76
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Represents a Deadline Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Create an instance of Deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param name The name of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param taskDetail The timing of the Deadline, which has a date and [optionally] a timing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws DukeException If taskDetail is badly formatted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Deadline(String name, String taskDetail) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String[] input \u003d taskDetail.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            super.setDate(LocalDate.parse(input[0]));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            if (input.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                time \u003d LocalTime.parse(input[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                time \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DateTimeParseException err) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new DukeException(\"Error: Please key in as: \\n \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    + \"event [title] /by YYYY-MM-DD HH:MM\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Convert Task into the saved format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return A String that described the Task in saved format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return String.format(\"D%s | %s %s\", super.toSaveFormat(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                Task.SAVE_DATE_FORMATTER.format(super.date.get()), Task.TIME_FORMATTER.format(time));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Convert Task into the display format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return A String that described the Task in display format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String dateTime \u003d Task.DATE_FORMATTER.format(super.date.get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (time !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            dateTime +\u003d \" \" + Task.TIME_FORMATTER.format(this.time);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), dateTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 60
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Represents a Event Task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Create an instance of Event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param name The name of the Event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param eventDetail The timing of the event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws DukeException If eventDetail is badly formatted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Event(String name, String eventDetail) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String[] input \u003d eventDetail.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            super.setDate(LocalDate.parse(input[0]));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            startTime \u003d LocalTime.parse(input[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            endTime \u003d LocalTime.parse(input[2]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (Exception err) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new DukeException(\"Error: Please key in as: \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    + \"event [title] /at YYYY-MM-DD [startTime] [endTime] where start and end time is in HH:MM \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Convert Task into the saved format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return A String that described the Task in saved format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return String.format(\"E%s | %s %s %s\", super.toSaveFormat(), SAVE_DATE_FORMATTER.format(super.date.get()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                TIME_FORMATTER.format(startTime), TIME_FORMATTER.format(endTime));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Convert Task into the display format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return A String that described the Task in display format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String dateTime \u003d DATE_FORMATTER.format(super.date.get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        dateTime +\u003d \" \" + TIME_FORMATTER.format(startTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        dateTime +\u003d \" - \" + TIME_FORMATTER.format(endTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), dateTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 55
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Represents Task that the user wants duke.Duke to remember"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected static final DateTimeFormatter SAVE_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected Optional\u003cLocalDate\u003e date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected final String taskName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    protected Task(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.taskName \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.date \u003d Optional.empty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Return the Name of the Task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return String representing the name of Task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Assign a date to Task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @param date Date for the Task is set to."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.date \u003d Optional.of(date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Return the task\u0027s date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return the date if date is set. Else, return Optional.empty."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public Optional\u003cLocalDate\u003e getDate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Set the Task as done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @throws DukeException If a done-task is set done again."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setDone() throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            throw new DukeException(\"Task is already done\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Convert Task into the saved format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return A String that described the Task in saved format."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String status \u003d isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return \" | \" + status + \" | \" + taskName;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Convert Task into the display format."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return A String that described the Task in display format."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        //String icon \u003d isDone ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String icon \u003d isDone ? \"X\" : \" \";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return \"[\" + icon + \"] \" + taskName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 85
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Represents a ToDo Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public ToDo(String name) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Convert Task into the saved format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return A String that described the Task in saved format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String toSaveFormat() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return \"T\" + super.toSaveFormat();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Convert Task into the display format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * @return A String that described the Task in display format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 28
    }
  },
  {
    "path": "src/main/java/graphicinterface/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package graphicinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 61
    }
  },
  {
    "path": "src/main/java/graphicinterface/Gui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package graphicinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * A GUI for duke.Duke using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Credit for line 32-34 go to James_D answer in"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * https://stackoverflow.com/questions/27334455/how-to-close-a-stage-after-a-certain-amount-of-time-javafx."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class Gui extends Application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Gui.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Duke duke \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setTerminateFunction(() -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                PauseTransition delay \u003d new PauseTransition(Duration.seconds(2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                delay.setOnFinished( event -\u003e stage.close() );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                delay.play();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().welcomeMessage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 42
    }
  },
  {
    "path": "src/main/java/graphicinterface/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package graphicinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " * Controller for graphicInterface.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private boolean isFinished;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private Runnable closeWindowFunction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void welcomeMessage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.getWelcome(), dukeImage));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setTerminateFunction(Runnable function) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.closeWindowFunction \u003d function;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setFinished() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        this.isFinished \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void showErrorMessage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String errorMessage \u003d \"Unexpected Error Occurred\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                DialogBox.getDukeDialog(errorMessage, dukeImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     * appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String response \u003d duke.processInput(input, () -\u003e this.setFinished());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        if (this.isFinished) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            this.closeWindowFunction.run();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 79
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"54.0\" fitWidth\u003d\"54.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"596.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"graphicinterface.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"550.0\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"319.0\" AnchorPane.bottomAnchor\u003d\"4.666666666666629\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"550.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"550.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"554.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 19
    }
  },
  {
    "path": "test/main/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void interpretInput_valid_success() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String test1 \u003d Arrays.toString(parser.splitIntoComponents(\"todo homework\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(test1,\"[todo, homework]\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String test2 \u003d Arrays.toString(parser.splitIntoComponents(\"event test2 /at 2020-09-08 18:00 20:00\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(test2,\"[event, test2 , 2020-09-08 18:00 20:00]\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        String test3 \u003d Arrays.toString(parser.splitIntoComponents(\"deadline assignment 3 /by 2020-08-25 23:59\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(test3,\"[deadline, assignment 3 , 2020-08-25 23:59]\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 21
    }
  },
  {
    "path": "test/main/java/duke/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void saveFile_fileNotFound_fail() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Storage storage \u003d new Storage(\"test/main/java/duke/badFormatFile.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            String[] data \u003d {\"Hello World\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            storage.saveFile(data);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(err.getMessage(), \"File Path is a directory -OR- Can\u0027t create file at location\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void loadFile_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Storage storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            storage.loadFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            System.out.println(err.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void loadFile_corruptedFile_fail() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Storage storage \u003d new Storage(\"test/main/java/duke/badFormatFile.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            storage.loadFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(err.getMessage(), \"Error: Saved File is badly corrupted\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 44
    }
  },
  {
    "path": "test/main/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package main.java.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void addTask_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            TaskList tk \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.addDeadLine(\"Assignment 1\", \"2020-09-08 06:00\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.addEvent(\"Assignment 1\", \"2020-09-08 06:00 08:00\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.addTodo(\"Assignment 1\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            String expectedAnswer \u003d \"1.[D][ ] Assignment 1 (by: Sep 08 2020 06:00)\\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \"2.[E][ ] Assignment 1 (at: Sep 08 2020 06:00 - 08:00)\\n\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \"3.[T][ ] Assignment 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(tk.toString(), expectedAnswer);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void addTask_invalidArgument() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            TaskList tk \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.addDeadLine(\"Assignment 1\", \"2020-09-08 06:00\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(err.getMessage(), \"Error: Please key in as: \\n \" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \"event [title] /by YYYY-MM-DD HH:MM\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void doTask_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            TaskList tk \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.addDeadLine(\"Assignment 1\", \"2020-09-08 06:00\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.addEvent(\"Assignment 1\", \"2020-09-08 06:00 08:00\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.addTodo(\"Assignment 1\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.doTask(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.doTask(3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            String expectedAnswer \u003d \"1.[D][X] Assignment 1 (by: Sep 08 2020 06:00)\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \"2.[E][ ] Assignment 1 (at: Sep 08 2020 06:00 - 08:00)\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \"3.[T][X] Assignment 1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(tk.toString(), expectedAnswer);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void doTask_setDoneTaskDone_fail() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            TaskList tk \u003d new TaskList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.addDeadLine(\"Assignment 1\", \"2020-09-08 06:00\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.doTask(1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.doTask(1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(err.getMessage(), \"Task is already done\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void toSaveFormat() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            TaskList tk \u003d new TaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.addDeadLine(\"return book\", \"2020-06-06 23:59\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.addEvent(\"project meeting\", \"2020-08-06 14:00 16:00\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.addTodo(\"read book\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.doTask(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.doTask(3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            String expectedAnswer \u003d \"D | 1 | return book | 2020-06-06 23:59\\n\" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \"E | 0 | project meeting | 2020-08-06 14:00 16:00\\n\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \"T | 1 | read book\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(tk.toSaveFormat(), expectedAnswer);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    void deleteTask() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            TaskList tk \u003d new TaskList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.addDeadLine(\"Assignment 1\", \"2020-09-08 06:00\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.addEvent(\"Assignment 2\", \"2020-09-08 06:00 08:00\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.addTodo(\"Assignment 1\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.doTask(1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.doTask(3);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            tk.deleteTask(3);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            System.out.println(tk.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            String expectedAnswer \u003d \"1.[D][X] Assignment 1 (by: Sep 08 2020 06:00)\\n\" +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \"2.[E][ ] Assignment 2 (at: Sep 08 2020 06:00 - 08:00)\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(tk.toString(), expectedAnswer);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 103
    }
  },
  {
    "path": "test/main/java/duke/badFormatFile.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "Hello World"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 1
    }
  },
  {
    "path": "test/main/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void constructor_invalidInput_fail() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            new Deadline(\"Assignment 1\",\"2020-09-08 0600\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(err.getMessage(), \"Error: Please key in as: \\n \" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \"event [title] /by YYYY-MM-DD HH:MM\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toString_newlyCreated_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //test 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(new Deadline(\"Assignment 1\", \"2020-09-08 06:00\").toString(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \"[D][ ] Assignment 1 (by: Sep 08 2020 06:00)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //test 2"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(new Deadline(\"CS2101 OP1\", \"2020-08-25 14:35\").toString(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \"[D][ ] CS2101 OP1 (by: Aug 25 2020 14:35)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toString_markDone_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Deadline test1 \u003d new Deadline(\"Assignment 1\", \"2020-09-08 06:00\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Deadline test2 \u003d new Deadline(\"CS2101 OP1\", \"2020-08-25 14:35\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Deadline test3 \u003d new Deadline(\"NOC Application\", \"2020-08-28 23:59\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test1.setDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test2.setDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test3.setDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test1.toString(), \"[D][X] Assignment 1 (by: Sep 08 2020 06:00)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test2.toString(), \"[D][X] CS2101 OP1 (by: Aug 25 2020 14:35)\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test3.toString(), \"[D][X] NOC Application (by: Aug 28 2020 23:59)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setDone_doubleSetDone_fail() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Deadline test1 \u003d new Deadline(\"Assignment 1\", \"2020-09-08 06:00\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test1.setDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test1.setDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(err.getMessage(), \"Task is already done\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toSaveFormat() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Deadline test1 \u003d new Deadline(\"Assignment 1\", \"2020-09-08 06:00\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Deadline test2 \u003d new Deadline(\"CS2101 OP1\", \"2020-08-25 14:35\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Deadline test3 \u003d new Deadline(\"NOC Application\", \"2020-08-28 23:59\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test1.setDone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test1.toSaveFormat(), \"D | 1 | Assignment 1 | 2020-09-08 06:00\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test2.toSaveFormat(), \"D | 0 | CS2101 OP1 | 2020-08-25 14:35\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test3.toSaveFormat(), \"D | 0 | NOC Application | 2020-08-28 23:59\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 79
    }
  },
  {
    "path": "test/main/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void constructor_invalidInput_fail() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            new Event(\"Assignment 1\",\"2020-09-08 0600 08:00\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(err.getMessage(), \"Error: Please key in as: \\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \"event [title] /at YYYY-MM-DD [startTime] [endTime] where start and end time is in HH:MM \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toString_newlyCreated_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //test 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(new Event(\"Assignment 1\", \"2020-09-08 06:00 08:00\").toString(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \"[E][ ] Assignment 1 (at: Sep 08 2020 06:00 - 08:00)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            //test 2"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(new Event(\"CS2101 OP1\", \"2020-08-25 14:35 16:35\").toString(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "                    \"[E][ ] CS2101 OP1 (at: Aug 25 2020 14:35 - 16:35)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toString_markDone_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Event test1 \u003d new Event(\"Assignment 1\", \"2020-09-08 06:00 08:00\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Event test2 \u003d new Event(\"CS2101 OP1\", \"2020-08-25 14:35 16:35\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Event test3 \u003d new Event(\"NOC Briefing\", \"2020-08-28 16:00 17:00\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test1.setDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test2.setDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test3.setDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test1.toString(), \"[E][X] Assignment 1 (at: Sep 08 2020 06:00 - 08:00)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test2.toString(), \"[E][X] CS2101 OP1 (at: Aug 25 2020 14:35 - 16:35)\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test3.toString(), \"[E][X] NOC Briefing (at: Aug 28 2020 16:00 - 17:00)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setDone_doubleSetDone_fail() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Event test1 \u003d new Event(\"Assignment 1\", \"2020-09-08 06:00 08:00\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test1.setDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test1.setDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(err.getMessage(), \"Task is already done\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toSaveFormat() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Event test1 \u003d new Event(\"Assignment 1\", \"2020-09-08 06:00 08:00\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Event test2 \u003d new Event(\"CS2101 OP1\", \"2020-08-25 14:35 16:35\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            Event test3 \u003d new Event(\"NOC Briefing\", \"2020-08-28 16:00 17:00\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test1.setDone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test1.toSaveFormat(), \"E | 1 | Assignment 1 | 2020-09-08 06:00 08:00\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test2.toSaveFormat(), \"E | 0 | CS2101 OP1 | 2020-08-25 14:35 16:35\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test3.toSaveFormat(), \"E | 0 | NOC Briefing | 2020-08-28 16:00 17:00\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 79
    }
  },
  {
    "path": "test/main/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "package main.java.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toString_newlyCreated_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(new ToDo(\"Assignment 1\").toString(), \"[T][ ] Assignment 1\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(new ToDo(\"CS2101 OP1\").toString(), \"[T][ ] CS2101 OP1\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        assertEquals(new ToDo(\"Get a CCA\").toString(), \"[T][ ] Get a CCA\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toString_markDone_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ToDo test1 \u003d new ToDo(\"Assignment 1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ToDo test2 \u003d new ToDo(\"CS2101 OP1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ToDo test3 \u003d new ToDo(\"Get a CCA\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test1.setDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test2.setDone();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test3.setDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test1.toString(), \"[T][X] Assignment 1\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test2.toString(), \"[T][X] CS2101 OP1\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test3.toString(), \"[T][X] Get a CCA\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void setDone_doubleSetDone_fail() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        ToDo test1 \u003d new ToDo(\"Assignment 1\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test1.setDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test1.setDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(err.getMessage(), \"Task is already done\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    public void toSaveFormat() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            ToDo test1 \u003d new ToDo(\"Assignment 1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            ToDo test2 \u003d new ToDo(\"CS2101 OP1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            ToDo test3 \u003d new ToDo(\"Get a CCA\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            test1.setDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test1.toSaveFormat(), \"T | 1 | Assignment 1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test2.toSaveFormat(), \"T | 0 | CS2101 OP1\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            assertEquals(test3.toSaveFormat(), \"T | 0 | Get a CCA\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        } catch (DukeException err) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 59
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\duke.Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nahoyhp"
        },
        "content": "java -classpath ..\\bin duke\\duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Nahoyhp": 2,
      "-": 19
    }
  }
]
