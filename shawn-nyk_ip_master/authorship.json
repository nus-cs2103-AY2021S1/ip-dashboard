[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":25,"shawn-nyk":1}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":44,"shawn-nyk":17}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"[D]|1|buy presents|2020-12-24T23:59:00"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":"[E]|1|Christmas party|my house"},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"[T]|1|clean my room"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"[D]|1|submit final iP|2020-09-16T23:59:00"}],"authorContributionMap":{"shawn-nyk":4}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"Star Bot is a **personal assistant chatbot app that keeps track of various tasks.** It stores a list of tasks that you"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"can interact with and manipulate via its Graphical User Interface (GUI)."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"All tasks are represented in the following format:"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"`[S][Done?] task description`"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"* `[S]` - the task symbol"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"* `[Done?]` - a tick/cross representing if the task has been completed"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"* `task description` - description of the task as entered by the user"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"List of features:"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"* Add a task"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"  * Add a ToDo task"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"  * Add an Event task"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"  * Add a Deadline task"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"* Delete a task"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"* Mark a task as completed"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"* Show your list of tasks"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"* Find a task"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"* Exit the program"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"Note:"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user. \u003cbr /\u003e"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"e.g. in `todo TASK`, `TASK` is a parameter to be supplied by the user, for example: `todo homework`"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"* Command words are case-insensitive"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"### Add a task"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"##### Add a ToDo `[T]` task: `todo` / `td` / `t`"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"Adds a ToDo task to the task list."},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"ToDo tasks are the most generic type of tasks that need not be done by a particular date or time, nor at any particular"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"place."},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"Format: `todo TASK`"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"Example of usage: `todo make breakfast`"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"Expected outcome:"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"[T][X] make breakfast"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"Now you have 1 task in the list."},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"##### Add an Event `[E]` task: `event` / `ev` / `e`"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"Adds an Event task to the task list."},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"Event tasks are tasks that occur at a particular place."},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"Format: `event TASK /at PLACE`"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"Example of usage: `event party /at my house`"},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"Expected outcome:"},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"[E][X] party (at: my house)"},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":"Now you have 2 tasks in the list."},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":"##### Add a Deadline `[D]` task: `deadline` / `d`"},{"lineNumber":75,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":76,"author":{"gitId":"shawn-nyk"},"content":"Adds a Deadline task to the task list."},{"lineNumber":77,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":78,"author":{"gitId":"shawn-nyk"},"content":"Deadline tasks are tasks that need to be done by a particular date and time."},{"lineNumber":79,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":80,"author":{"gitId":"shawn-nyk"},"content":"Format: `deadline TASK /by YYYY-MM-DD hhmm`"},{"lineNumber":81,"author":{"gitId":"shawn-nyk"},"content":"* `YYYY` - year"},{"lineNumber":82,"author":{"gitId":"shawn-nyk"},"content":"* `MM` - month"},{"lineNumber":83,"author":{"gitId":"shawn-nyk"},"content":"* `DD` - day"},{"lineNumber":84,"author":{"gitId":"shawn-nyk"},"content":"* `hh` - hour (in 24-hour format)"},{"lineNumber":85,"author":{"gitId":"shawn-nyk"},"content":"* `mm` - minute"},{"lineNumber":86,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":87,"author":{"gitId":"shawn-nyk"},"content":"Example of usage: `deadline send email /by 2020-11-23 2359`"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"shawn-nyk"},"content":"Expected outcome:"},{"lineNumber":90,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":91,"author":{"gitId":"shawn-nyk"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":92,"author":{"gitId":"shawn-nyk"},"content":"[D][X] send email (by: 23 Nov 2020 @ 11:59pm)"},{"lineNumber":93,"author":{"gitId":"shawn-nyk"},"content":"Now you have 3 tasks in the list."},{"lineNumber":94,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":95,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":96,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":97,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":98,"author":{"gitId":"shawn-nyk"},"content":"### Delete a task: `delete` / `del`"},{"lineNumber":99,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":100,"author":{"gitId":"shawn-nyk"},"content":"Deletes a task in the task list."},{"lineNumber":101,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":102,"author":{"gitId":"shawn-nyk"},"content":"Format: `delete TASK_NUMBER`, where `TASK_NUMBER` is the index of the task in the task list."},{"lineNumber":103,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":104,"author":{"gitId":"shawn-nyk"},"content":"Example of usage: `delete 3`"},{"lineNumber":105,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":106,"author":{"gitId":"shawn-nyk"},"content":"Expected outcome:"},{"lineNumber":107,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":108,"author":{"gitId":"shawn-nyk"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":109,"author":{"gitId":"shawn-nyk"},"content":"[D][X] send email (by: 23 Nov 2020 @ 11:59pm)"},{"lineNumber":110,"author":{"gitId":"shawn-nyk"},"content":"Now you have 2 tasks in the list."},{"lineNumber":111,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":112,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":113,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":114,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":115,"author":{"gitId":"shawn-nyk"},"content":"### Mark a task as completed: `done` / `dn`"},{"lineNumber":116,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":117,"author":{"gitId":"shawn-nyk"},"content":"Marks a task in the task list as completed."},{"lineNumber":118,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":119,"author":{"gitId":"shawn-nyk"},"content":"Format: `done TASK_NUMBER`, where `TASK_NUMBER` is the index of the task in the task list."},{"lineNumber":120,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":121,"author":{"gitId":"shawn-nyk"},"content":"Example of usage: `done 1`"},{"lineNumber":122,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":123,"author":{"gitId":"shawn-nyk"},"content":"Expected outcome:"},{"lineNumber":124,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":125,"author":{"gitId":"shawn-nyk"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":126,"author":{"gitId":"shawn-nyk"},"content":"[T][✓] make breakfast"},{"lineNumber":127,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":128,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":129,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":130,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":131,"author":{"gitId":"shawn-nyk"},"content":"### Show your list of tasks: `list` / `ls` / `l`"},{"lineNumber":132,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":133,"author":{"gitId":"shawn-nyk"},"content":"Shows all the tasks in your task list."},{"lineNumber":134,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":135,"author":{"gitId":"shawn-nyk"},"content":"Format / example of usage: `list`"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":138,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":139,"author":{"gitId":"shawn-nyk"},"content":"Here are the tasks in your list:"},{"lineNumber":140,"author":{"gitId":"shawn-nyk"},"content":"1.[T][✓] make breakfast"},{"lineNumber":141,"author":{"gitId":"shawn-nyk"},"content":"2.[E][X] party (at: my house)"},{"lineNumber":142,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":143,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":144,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"shawn-nyk"},"content":"### Find tasks: `find` / `f`"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"shawn-nyk"},"content":"Finds all the tasks in your task list that contain a specified word(s)."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"shawn-nyk"},"content":"Format: `find SEARCH_WORDS`"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"shawn-nyk"},"content":"Example of usage: `find present`"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":155,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":156,"author":{"gitId":"shawn-nyk"},"content":"Here are the tasks in your list with the word(s) \"present\":"},{"lineNumber":157,"author":{"gitId":"shawn-nyk"},"content":"1.[T][✓] buy presents"},{"lineNumber":158,"author":{"gitId":"shawn-nyk"},"content":"2.[E][X] give presentation (at: school)"},{"lineNumber":159,"author":{"gitId":"shawn-nyk"},"content":"3.[T][X] revise present tense French words"},{"lineNumber":160,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":161,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":162,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":163,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":164,"author":{"gitId":"shawn-nyk"},"content":"### Exit the program: `bye` / `b`"},{"lineNumber":165,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":166,"author":{"gitId":"shawn-nyk"},"content":"Exits the program."},{"lineNumber":167,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":168,"author":{"gitId":"shawn-nyk"},"content":"Format / example of usage: `bye`"},{"lineNumber":169,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":170,"author":{"gitId":"shawn-nyk"},"content":"Expected outcome:"},{"lineNumber":171,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":172,"author":{"gitId":"shawn-nyk"},"content":"Goodbye, see you again soon! :)"},{"lineNumber":173,"author":{"gitId":"shawn-nyk"},"content":"```"},{"lineNumber":174,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":175,"author":{"gitId":"shawn-nyk"},"content":"\u003cbr /\u003e"},{"lineNumber":176,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":177,"author":{"gitId":"shawn-nyk"},"content":"## Command Summary"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"shawn-nyk"},"content":"Action | Command | Shortcuts | Format, Examples"},{"lineNumber":180,"author":{"gitId":"shawn-nyk"},"content":"-------|---------|----------|-----------------"},{"lineNumber":181,"author":{"gitId":"shawn-nyk"},"content":"Add a ToDo task | `todo` | `td` / `t` | `todo TASK`\u003cbr /\u003ee.g.`todo make breakfast`"},{"lineNumber":182,"author":{"gitId":"shawn-nyk"},"content":"Add an Event task | `event` | `ev` / `e` | `event TASK /at PLACE`\u003cbr /\u003ee.g.`event party /at my house`"},{"lineNumber":183,"author":{"gitId":"shawn-nyk"},"content":"Add a Deadline task | `deadline` | `d` | `deadline TASK /by YYYY-MM-DD hhmm`\u003cbr /\u003ee.g.`deadline send email /by 2020-11-23 2359`"},{"lineNumber":184,"author":{"gitId":"shawn-nyk"},"content":"Delete a task | `delete` | `del` | `delete TASK_NUMBER`\u003cbr /\u003ee.g.`delete 3`"},{"lineNumber":185,"author":{"gitId":"shawn-nyk"},"content":"Mark a task as completed | `done` | `dn` | `done TASK_NUMBER`\u003cbr /\u003ee.g.`done 1`"},{"lineNumber":186,"author":{"gitId":"shawn-nyk"},"content":"Show your list of tasks | `list` | `ls` / `l`"},{"lineNumber":187,"author":{"gitId":"shawn-nyk"},"content":"Find tasks | `find` | `f` | `find SEARCH_WORDS`\u003cbr /\u003ee.g.`find cook`"},{"lineNumber":188,"author":{"gitId":"shawn-nyk"},"content":"Exit the program | `bye` | `b`"}],"authorContributionMap":{"-":19,"shawn-nyk":169}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import java.util.concurrent.TimeUnit;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.UnknownCommand;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import duke.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.UiForGui;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":" * Represents the Duke chat bot a.k.a. Star Bot. Duke can keep a record of user\u0027s inputs as a list of tasks, mark them"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":" * as completed when they are done, and show the user the list of tasks upon request. This list of tasks will be"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":" * written to the user\u0027s hard disk such that it can be saved and loaded. Currently, Duke supports 3 types of tasks:"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":" * to-do, deadline and event tasks."},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    /** The relative path in which the save file is located */"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    private static final String FILE_PATH \u003d \"data/duke.txt\";"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"    /** Deals with loading tasks from and saving tasks to the save file on the hard disk */"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"    private Storage storage;"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"    /** The user\u0027s list of tasks */"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    private TaskList tasks;"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    /** Deals with interactions with the user for CLI version of Duke */"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"    private Ui ui;"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"    /** Deals with interactions with the user for GUI version of Duke */"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"    private UiForGui uiForGui;"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes the CLI version of the Duke program."},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"     * @param filePath The relative path in which the save file is located."},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"    public Duke(String filePath) {"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"        ui \u003d new Ui();"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"            ui.showError(e);"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes the GUI version of the Duke program."},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"    public Duke() {"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"        uiForGui \u003d new UiForGui();"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"        storage \u003d new Storage(FILE_PATH);"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"            uiForGui.showError(e);"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the Duke program by calling the run() method."},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"     * @param args User input arguments (not used)."},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"    public static void main(String[] args) {"},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"        new Duke(FILE_PATH).run();"},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the Duke program."},{"lineNumber":76,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"shawn-nyk"},"content":"    public void run() {"},{"lineNumber":78,"author":{"gitId":"shawn-nyk"},"content":"        ui.showWelcome();"},{"lineNumber":79,"author":{"gitId":"shawn-nyk"},"content":"        boolean isExit \u003d false;"},{"lineNumber":80,"author":{"gitId":"shawn-nyk"},"content":"        while (!isExit) { // Duke takes in user input indefinitely until the user says \"bye\""},{"lineNumber":81,"author":{"gitId":"shawn-nyk"},"content":"            try {"},{"lineNumber":82,"author":{"gitId":"shawn-nyk"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":83,"author":{"gitId":"shawn-nyk"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":84,"author":{"gitId":"shawn-nyk"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":85,"author":{"gitId":"shawn-nyk"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":86,"author":{"gitId":"shawn-nyk"},"content":"            } catch (DukeException e) {"},{"lineNumber":87,"author":{"gitId":"shawn-nyk"},"content":"                ui.showError(e);"},{"lineNumber":88,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"shawn-nyk"},"content":"        assert isExit : \"program terminated prematurely\";"},{"lineNumber":91,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":93,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"shawn-nyk"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":95,"author":{"gitId":"shawn-nyk"},"content":"     * Replace this stub with your completed method."},{"lineNumber":96,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"shawn-nyk"},"content":"    public Response getResponse(String input) {"},{"lineNumber":98,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"shawn-nyk"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":100,"author":{"gitId":"shawn-nyk"},"content":"            exitIfIsExit(c);"},{"lineNumber":101,"author":{"gitId":"shawn-nyk"},"content":"            return new Response(c.execute(tasks, uiForGui, storage), c);"},{"lineNumber":102,"author":{"gitId":"shawn-nyk"},"content":"        } catch (DukeException e) {"},{"lineNumber":103,"author":{"gitId":"shawn-nyk"},"content":"            return new Response(uiForGui.showError(e), new UnknownCommand());"},{"lineNumber":104,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":107,"author":{"gitId":"shawn-nyk"},"content":"    private void exitIfIsExit(Command command) {"},{"lineNumber":108,"author":{"gitId":"shawn-nyk"},"content":"        if (command.isExit()) {"},{"lineNumber":109,"author":{"gitId":"shawn-nyk"},"content":"            Thread newThread \u003d new Thread(() -\u003e exitProgram());"},{"lineNumber":110,"author":{"gitId":"shawn-nyk"},"content":"            newThread.start();"},{"lineNumber":111,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":114,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"shawn-nyk"},"content":"     * Terminates the GUI version of Duke."},{"lineNumber":116,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"shawn-nyk"},"content":"    private void exitProgram() {"},{"lineNumber":118,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":119,"author":{"gitId":"shawn-nyk"},"content":"            TimeUnit.SECONDS.sleep(3);"},{"lineNumber":120,"author":{"gitId":"shawn-nyk"},"content":"        } catch (InterruptedException e) {"},{"lineNumber":121,"author":{"gitId":"shawn-nyk"},"content":"            e.printStackTrace();"},{"lineNumber":122,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"shawn-nyk"},"content":"        Platform.exit();"},{"lineNumber":124,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":2,"shawn-nyk":123}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":" * A launcher class to launch the GUI version of Duke."},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"     * Launches Duke (GUI version)."},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"     * @param args not in use."},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"    public static void main(String[] args) {"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":17}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.MainWindow;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"    private static final String MAIN_WINDOW_FXML_FILE_PATH \u003d \"/view/MainWindow.fxml\";"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"    private static final String APPLICATION_NAME \u003d \"Star Bot\";"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    public void start(Stage stage) {"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(MAIN_WINDOW_FXML_FILE_PATH));"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"            stage.setScene(scene);"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"            stage.setResizable(false);"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"            stage.setTitle(APPLICATION_NAME);"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"            stage.show();"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":36}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.AddDeadlineCommand;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.AddEventCommand;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.AddTodoCommand;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.Command;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.DoneCommand;"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.ExitCommand;"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.FindCommand;"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.ListCommand;"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.UnknownCommand;"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"import duke.exception.DeadlineWrongFormatException;"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"import duke.exception.DeleteWrongFormatException;"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"import duke.exception.DoneWrongFormatException;"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"import duke.exception.EventWrongFormatException;"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"import duke.exception.FindWrongFormatException;"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"import duke.exception.TodoWrongFormatException;"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"import duke.exception.WrongFormatException;"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":" * Parses user commands in the Duke program."},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"public class Parser {"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"    private static final int INDEX_OF_HOURS_START \u003d 0;"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"    private static final int INDEX_OF_HOURS_END \u003d 2;"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"    private static final int INDEX_OF_MINUTES_START \u003d 2;"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"    private static final int INDEX_OF_MINUTES_END \u003d 4;"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"     * Parses user commands and returns the appropriate executable command for the program to then execute."},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"     * @param fullCommand The user command to be parsed."},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"     * @return The appropriate command to be executed."},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"     * @throws WrongFormatException If the user command is wrongly formatted."},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"    public static Command parse(String fullCommand) throws WrongFormatException {"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"        String[] commandWords \u003d fullCommand.split(\" \");"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"        String firstWord \u003d commandWords[0];"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"        if (isExitCommand(fullCommand)) { // Exit the program"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"            return new ExitCommand();"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"        } else if (isListCommand(fullCommand)) { // List out task list"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"            return new ListCommand();"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"        } else if (isDoneCommand(firstWord)) { // Done with a task"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"            return createDoneCommand(commandWords);"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"        } else if (isDeleteCommand(firstWord)) { // Delete a task"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"            return createDeleteCommand(commandWords);"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"        } else if (isAddTodoCommand(firstWord)) { // Add To-Do task"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"            return createAddTodoCommand(fullCommand, firstWord);"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"        } else if (isAddEventCommand(firstWord)) { // Add Event task"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"            return createAddEventCommand(fullCommand, firstWord);"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"        } else if (isAddDeadlineCommand(firstWord)) { // Add Deadline task"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"            return createAddDeadlineCommand(fullCommand, firstWord);"},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"        } else if (isFindCommand(firstWord)) { // Find task(s) in task list"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"            return createFindCommand(fullCommand, firstWord);"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"        } else { // Unknown command entered"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"            return new UnknownCommand();"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"    private static boolean isExitCommand(String fullCommand) {"},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"        return ExitCommand.COMMAND_WORDS.contains(fullCommand.toLowerCase());"},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"    private static boolean isListCommand(String fullCommand) {"},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"        return ListCommand.COMMAND_WORDS.contains(fullCommand.toLowerCase());"},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":"    private static boolean isDoneCommand(String firstWord) {"},{"lineNumber":75,"author":{"gitId":"shawn-nyk"},"content":"        return DoneCommand.COMMAND_WORDS.contains(firstWord.toLowerCase());"},{"lineNumber":76,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":78,"author":{"gitId":"shawn-nyk"},"content":"    private static boolean isDeleteCommand(String firstWord) {"},{"lineNumber":79,"author":{"gitId":"shawn-nyk"},"content":"        return DeleteCommand.COMMAND_WORDS.contains(firstWord.toLowerCase());"},{"lineNumber":80,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":82,"author":{"gitId":"shawn-nyk"},"content":"    private static boolean isAddTodoCommand(String firstWord) {"},{"lineNumber":83,"author":{"gitId":"shawn-nyk"},"content":"        return AddTodoCommand.COMMAND_WORDS.contains(firstWord.toLowerCase());"},{"lineNumber":84,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":86,"author":{"gitId":"shawn-nyk"},"content":"    private static boolean isAddEventCommand(String firstWord) {"},{"lineNumber":87,"author":{"gitId":"shawn-nyk"},"content":"        return AddEventCommand.COMMAND_WORDS.contains(firstWord.toLowerCase());"},{"lineNumber":88,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":90,"author":{"gitId":"shawn-nyk"},"content":"    private static boolean isAddDeadlineCommand(String firstWord) {"},{"lineNumber":91,"author":{"gitId":"shawn-nyk"},"content":"        return AddDeadlineCommand.COMMAND_WORDS.contains(firstWord.toLowerCase());"},{"lineNumber":92,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":94,"author":{"gitId":"shawn-nyk"},"content":"    private static boolean isFindCommand(String firstWord) {"},{"lineNumber":95,"author":{"gitId":"shawn-nyk"},"content":"        return FindCommand.COMMAND_WORDS.contains(firstWord.toLowerCase());"},{"lineNumber":96,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":98,"author":{"gitId":"shawn-nyk"},"content":"    private static Command createDoneCommand(String[] commandWords) throws DoneWrongFormatException {"},{"lineNumber":99,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"shawn-nyk"},"content":"            if (commandWords.length !\u003d DoneCommand.EXPECTED_NUMBER_OF_ARGUMENTS) { // If command is in a wrong format"},{"lineNumber":101,"author":{"gitId":"shawn-nyk"},"content":"                // by having more than 2 words"},{"lineNumber":102,"author":{"gitId":"shawn-nyk"},"content":"                throw new DoneWrongFormatException();"},{"lineNumber":103,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"shawn-nyk"},"content":"            int taskIndex \u003d Integer.parseInt(commandWords[1]) - 1; // Index of task in the task list"},{"lineNumber":105,"author":{"gitId":"shawn-nyk"},"content":"            return new DoneCommand(taskIndex);"},{"lineNumber":106,"author":{"gitId":"shawn-nyk"},"content":"        } catch (NumberFormatException e) { // Second argument of command was not a number, e.g. \"done X\""},{"lineNumber":107,"author":{"gitId":"shawn-nyk"},"content":"            throw new DoneWrongFormatException();"},{"lineNumber":108,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":111,"author":{"gitId":"shawn-nyk"},"content":"    private static Command createDeleteCommand(String[] commandWords) throws DeleteWrongFormatException {"},{"lineNumber":112,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":113,"author":{"gitId":"shawn-nyk"},"content":"            if (commandWords.length !\u003d DeleteCommand.EXPECTED_NUMBER_OF_ARGUMENTS) { // If command is in a wrong format"},{"lineNumber":114,"author":{"gitId":"shawn-nyk"},"content":"                // by having more than 2 words"},{"lineNumber":115,"author":{"gitId":"shawn-nyk"},"content":"                throw new DeleteWrongFormatException();"},{"lineNumber":116,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"shawn-nyk"},"content":"            int taskIndex \u003d Integer.parseInt(commandWords[1]) - 1; // Index of task in the task list"},{"lineNumber":118,"author":{"gitId":"shawn-nyk"},"content":"            return new DeleteCommand(taskIndex);"},{"lineNumber":119,"author":{"gitId":"shawn-nyk"},"content":"        } catch (NumberFormatException e) { // Second argument of command was not a number, e.g. \"delete X\""},{"lineNumber":120,"author":{"gitId":"shawn-nyk"},"content":"            throw new DeleteWrongFormatException();"},{"lineNumber":121,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":124,"author":{"gitId":"shawn-nyk"},"content":"    private static Command createAddTodoCommand(String fullCommand, String firstWord) throws TodoWrongFormatException {"},{"lineNumber":125,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":126,"author":{"gitId":"shawn-nyk"},"content":"            int indexOfStartOfDescription \u003d firstWord.length() + 1;"},{"lineNumber":127,"author":{"gitId":"shawn-nyk"},"content":"            String taskDescription \u003d fullCommand.substring(indexOfStartOfDescription).trim();"},{"lineNumber":128,"author":{"gitId":"shawn-nyk"},"content":"            if (taskDescription.isEmpty()) {"},{"lineNumber":129,"author":{"gitId":"shawn-nyk"},"content":"                throw new TodoWrongFormatException();"},{"lineNumber":130,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"shawn-nyk"},"content":"            return new AddTodoCommand(taskDescription);"},{"lineNumber":132,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IndexOutOfBoundsException e) { // add to-do command is in a wrong format"},{"lineNumber":133,"author":{"gitId":"shawn-nyk"},"content":"            throw new TodoWrongFormatException();"},{"lineNumber":134,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":137,"author":{"gitId":"shawn-nyk"},"content":"    private static Command createAddEventCommand(String fullCommand, String firstWord)"},{"lineNumber":138,"author":{"gitId":"shawn-nyk"},"content":"            throws EventWrongFormatException {"},{"lineNumber":139,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":140,"author":{"gitId":"shawn-nyk"},"content":"            int indexOfStartOfDescription \u003d firstWord.length() + 1;"},{"lineNumber":141,"author":{"gitId":"shawn-nyk"},"content":"            String[] commandParts \u003d fullCommand.split(AddEventCommand.COMMAND_SPLIT_WORD);"},{"lineNumber":142,"author":{"gitId":"shawn-nyk"},"content":"            String taskDescription \u003d commandParts[0].substring(indexOfStartOfDescription).trim();"},{"lineNumber":143,"author":{"gitId":"shawn-nyk"},"content":"            if (taskDescription.isEmpty()) {"},{"lineNumber":144,"author":{"gitId":"shawn-nyk"},"content":"                throw new EventWrongFormatException();"},{"lineNumber":145,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":146,"author":{"gitId":"shawn-nyk"},"content":"            String taskLocation \u003d commandParts[1].trim();"},{"lineNumber":147,"author":{"gitId":"shawn-nyk"},"content":"            if (taskLocation.isEmpty()) {"},{"lineNumber":148,"author":{"gitId":"shawn-nyk"},"content":"                throw new EventWrongFormatException();"},{"lineNumber":149,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":150,"author":{"gitId":"shawn-nyk"},"content":"            return new AddEventCommand(taskDescription, taskLocation);"},{"lineNumber":151,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IndexOutOfBoundsException e) { // add event command is in a wrong format"},{"lineNumber":152,"author":{"gitId":"shawn-nyk"},"content":"            throw new EventWrongFormatException();"},{"lineNumber":153,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":156,"author":{"gitId":"shawn-nyk"},"content":"    private static Command createAddDeadlineCommand(String fullCommand, String firstWord)"},{"lineNumber":157,"author":{"gitId":"shawn-nyk"},"content":"            throws DeadlineWrongFormatException {"},{"lineNumber":158,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":159,"author":{"gitId":"shawn-nyk"},"content":"            int indexOfStartOfDescription \u003d firstWord.length() + 1;"},{"lineNumber":160,"author":{"gitId":"shawn-nyk"},"content":"            String[] commandParts \u003d fullCommand.split(AddDeadlineCommand.COMMAND_SPLIT_WORD);"},{"lineNumber":161,"author":{"gitId":"shawn-nyk"},"content":"            String taskDescription \u003d commandParts[0].substring(indexOfStartOfDescription).trim();"},{"lineNumber":162,"author":{"gitId":"shawn-nyk"},"content":"            if (taskDescription.isEmpty()) {"},{"lineNumber":163,"author":{"gitId":"shawn-nyk"},"content":"                throw new DeadlineWrongFormatException();"},{"lineNumber":164,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":165,"author":{"gitId":"shawn-nyk"},"content":"            String taskDeadline \u003d commandParts[1].trim();"},{"lineNumber":166,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":167,"author":{"gitId":"shawn-nyk"},"content":"            String[] dateAndTimeParts \u003d taskDeadline.split(\" \");"},{"lineNumber":168,"author":{"gitId":"shawn-nyk"},"content":"            String deadlineDateString \u003d dateAndTimeParts[0];"},{"lineNumber":169,"author":{"gitId":"shawn-nyk"},"content":"            String deadlineTimeString \u003d dateAndTimeParts[1];"},{"lineNumber":170,"author":{"gitId":"shawn-nyk"},"content":"            int deadlineTimeHours \u003d Integer.parseInt(deadlineTimeString.substring(INDEX_OF_HOURS_START,"},{"lineNumber":171,"author":{"gitId":"shawn-nyk"},"content":"                    INDEX_OF_HOURS_END));"},{"lineNumber":172,"author":{"gitId":"shawn-nyk"},"content":"            int deadlineTimeMinutes \u003d Integer.parseInt(deadlineTimeString.substring(INDEX_OF_MINUTES_START,"},{"lineNumber":173,"author":{"gitId":"shawn-nyk"},"content":"                    INDEX_OF_MINUTES_END));"},{"lineNumber":174,"author":{"gitId":"shawn-nyk"},"content":"            LocalDate deadlineDate \u003d LocalDate.parse(deadlineDateString);"},{"lineNumber":175,"author":{"gitId":"shawn-nyk"},"content":"            LocalDateTime deadlineDateAndTime \u003d deadlineDate.atTime(deadlineTimeHours, deadlineTimeMinutes);"},{"lineNumber":176,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":177,"author":{"gitId":"shawn-nyk"},"content":"            return new AddDeadlineCommand(taskDescription, deadlineDate, deadlineDateAndTime);"},{"lineNumber":178,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IndexOutOfBoundsException | DateTimeException | NumberFormatException e) {"},{"lineNumber":179,"author":{"gitId":"shawn-nyk"},"content":"            // add deadline command is in a wrong format"},{"lineNumber":180,"author":{"gitId":"shawn-nyk"},"content":"            throw new DeadlineWrongFormatException();"},{"lineNumber":181,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":184,"author":{"gitId":"shawn-nyk"},"content":"    private static Command createFindCommand(String fullCommand, String firstWord) throws FindWrongFormatException {"},{"lineNumber":185,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":186,"author":{"gitId":"shawn-nyk"},"content":"            int indexOfStartOfDescription \u003d firstWord.length() + 1;"},{"lineNumber":187,"author":{"gitId":"shawn-nyk"},"content":"            String keyWords \u003d fullCommand.substring(indexOfStartOfDescription).trim();"},{"lineNumber":188,"author":{"gitId":"shawn-nyk"},"content":"            if (keyWords.isEmpty()) {"},{"lineNumber":189,"author":{"gitId":"shawn-nyk"},"content":"                throw new FindWrongFormatException();"},{"lineNumber":190,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":191,"author":{"gitId":"shawn-nyk"},"content":"            return new FindCommand(keyWords);"},{"lineNumber":192,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":193,"author":{"gitId":"shawn-nyk"},"content":"            throw new FindWrongFormatException();"},{"lineNumber":194,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":196}},{"path":"src/main/java/duke/Response.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":" * Returns responses to show to the user in the GUI version of Duke."},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"public class Response {"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"    /** The response to show to the user */"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"    private String responseString;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"    /** The command that the user entered that created this response */"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"    private Command command;"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"     * Creates a Response object."},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"     * @param responseString The response to show to the user."},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"     * @param command The command that the user entered that created this response."},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    public Response(String responseString, Command command) {"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"        this.responseString \u003d responseString;"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"        this.command \u003d command;"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"     * Gets the command that the user entered that created this response."},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"     * @return The command that the user entered that created this response."},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"    public Command getCommand() {"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"        return command;"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"     * Gets the response to show to the user."},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"     * @return The response to show to the user."},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"    public String getResponseString() {"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"        return responseString;"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":43}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Task;"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":" * Loads tasks from and saves tasks to the save file (a saved task list). Storage will attempt to load the save file"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":" * upon start up of the program and will from thereon overwrite and save the file every time the task list changes."},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    /** The relative path in which the save file is located */"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    private String filePath;"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes the Storage object."},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"     * @param filePath The relative path in which the save file is located."},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    public Storage (String filePath) {"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"     * Loads the task list from the save file upon start up of the program. If no valid save file is found upon start"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"     * up, a new save file will be created."},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"     * @return A list of strings that represents tasks, that the TaskList class can then convert into a list of"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"     * tasks."},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"     * @throws FileNotFoundException If from the path specified by filePath, a save file is not found or there is a"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"     * missing directory / there are missing directories."},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"    public List\u003cString\u003e load() throws FileNotFoundException {"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"        File memoryFile \u003d new File(filePath);"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"        // If file is non-existent, either the .txt file or a directory in the filePath does not exist"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"        if (!memoryFile.exists()) {"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"            handleMemoryFileDoesNotExist();"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"        // Else the save file exists and we load the task list with tasks as specified in the save file"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"        List\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"        Scanner sc \u003d new Scanner(memoryFile);"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"            tasks.add(sc.nextLine());"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"        return tasks;"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"    private void handleMemoryFileDoesNotExist() throws FileNotFoundException {"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"        if (areAllExistentDirectories()) { // All directories specified in memoryFilePath exists, only the .txt file"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"            // does not exist"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"            createMissingSaveFile();"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"        } else { // A directory specified in filePath does not exist so we should create it (and all its subdirectories"},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"            // if any)"},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"            createMissingDirectoriesAndSaveFile();"},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":"    private boolean areAllExistentDirectories() {"},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"        boolean areAllExistentDirectories \u003d true; // Check if all directories specified in filePath exist"},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"        String[] pathParts \u003d filePath.split(\"/\");"},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":"        String testPath \u003d \"\";"},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":"        for (int i \u003d 0; i \u003c pathParts.length - 1; i++) {"},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":"            testPath +\u003d pathParts[i] + \"/\";"},{"lineNumber":75,"author":{"gitId":"shawn-nyk"},"content":"            if (!new File(testPath).exists()) { // A directory specified in filePath does not exist"},{"lineNumber":76,"author":{"gitId":"shawn-nyk"},"content":"                areAllExistentDirectories \u003d false;"},{"lineNumber":77,"author":{"gitId":"shawn-nyk"},"content":"                break;"},{"lineNumber":78,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"shawn-nyk"},"content":"        return areAllExistentDirectories;"},{"lineNumber":81,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":83,"author":{"gitId":"shawn-nyk"},"content":"    private String findNonExistentDirectory() {"},{"lineNumber":84,"author":{"gitId":"shawn-nyk"},"content":"        String[] pathParts \u003d filePath.split(\"/\");"},{"lineNumber":85,"author":{"gitId":"shawn-nyk"},"content":"        String testPath \u003d \"\";"},{"lineNumber":86,"author":{"gitId":"shawn-nyk"},"content":"        for (int i \u003d 0; i \u003c pathParts.length - 1; i++) {"},{"lineNumber":87,"author":{"gitId":"shawn-nyk"},"content":"            testPath +\u003d pathParts[i] + \"/\";"},{"lineNumber":88,"author":{"gitId":"shawn-nyk"},"content":"            if (!new File(testPath).exists()) { // A directory specified in filePath does not exist"},{"lineNumber":89,"author":{"gitId":"shawn-nyk"},"content":"                return pathParts[i]; // The directory specified in filePath that does not exist"},{"lineNumber":90,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"shawn-nyk"},"content":"        assert false : \"All directories exist. This method was wrongly called.\";"},{"lineNumber":93,"author":{"gitId":"shawn-nyk"},"content":"        return \"\";"},{"lineNumber":94,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":96,"author":{"gitId":"shawn-nyk"},"content":"    private void createMissingSaveFile() throws FileNotFoundException {"},{"lineNumber":97,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":98,"author":{"gitId":"shawn-nyk"},"content":"            Files.createFile(Path.of(filePath)); // Create the .txt file with location as stated in filePath"},{"lineNumber":99,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IOException e) {"},{"lineNumber":100,"author":{"gitId":"shawn-nyk"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":101,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"shawn-nyk"},"content":"        String[] pathParts \u003d filePath.split(\"/\");"},{"lineNumber":103,"author":{"gitId":"shawn-nyk"},"content":"        throw new FileNotFoundException(\"Error encountered: Could not load last save.\\nThe save file \\\"\""},{"lineNumber":104,"author":{"gitId":"shawn-nyk"},"content":"                + pathParts[pathParts.length - 1] + \"\\\" does not exist.\\nNow loading a new, empty task list\""},{"lineNumber":105,"author":{"gitId":"shawn-nyk"},"content":"                + \".\\nA new save file \\\"\" + pathParts[pathParts.length - 1] + \"\\\" has been created with the\\n\""},{"lineNumber":106,"author":{"gitId":"shawn-nyk"},"content":"                + \"following path: \\\"\" + filePath + \"\\\".\");"},{"lineNumber":107,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":109,"author":{"gitId":"shawn-nyk"},"content":"    private void createMissingDirectoriesAndSaveFile() throws FileNotFoundException {"},{"lineNumber":110,"author":{"gitId":"shawn-nyk"},"content":"        String nonExistentDirectory \u003d findNonExistentDirectory();"},{"lineNumber":111,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":112,"author":{"gitId":"shawn-nyk"},"content":"            String pathOfDirectoriesToCreate \u003d buildPathOfDirectoriesToCreate();"},{"lineNumber":113,"author":{"gitId":"shawn-nyk"},"content":"            Files.createDirectories(Path.of(pathOfDirectoriesToCreate)); // Create missing directory (and all its"},{"lineNumber":114,"author":{"gitId":"shawn-nyk"},"content":"            // subdirectories if any) as specified by filePath"},{"lineNumber":115,"author":{"gitId":"shawn-nyk"},"content":"            Files.createFile(Path.of(filePath)); // Create .txt file in newly created path"},{"lineNumber":116,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IOException e) {"},{"lineNumber":117,"author":{"gitId":"shawn-nyk"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":118,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"shawn-nyk"},"content":"        String[] pathParts \u003d filePath.split(\"/\");"},{"lineNumber":120,"author":{"gitId":"shawn-nyk"},"content":"        throw new FileNotFoundException(\"Error encountered: Could not load last save.\\nPath specified for save \""},{"lineNumber":121,"author":{"gitId":"shawn-nyk"},"content":"                + \"file: \""},{"lineNumber":122,"author":{"gitId":"shawn-nyk"},"content":"                + \"\\\"\" + filePath + \"\\\"\\nThe directory \\\"\" + nonExistentDirectory + \"\\\"\\n(and hence all \""},{"lineNumber":123,"author":{"gitId":"shawn-nyk"},"content":"                + \"subdirectories of it, if any)\\ndoes not exist.\\nNow loading a new, empty task list.\\nA new \""},{"lineNumber":124,"author":{"gitId":"shawn-nyk"},"content":"                + \"save file \\\"\" + pathParts[pathParts.length - 1] + \"\\\" has been created with the\\nfollowing \""},{"lineNumber":125,"author":{"gitId":"shawn-nyk"},"content":"                + \"path: \\\"\" + filePath + \"\\\".\");"},{"lineNumber":126,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":128,"author":{"gitId":"shawn-nyk"},"content":"    private String buildPathOfDirectoriesToCreate() {"},{"lineNumber":129,"author":{"gitId":"shawn-nyk"},"content":"        String[] pathParts \u003d filePath.split(\"/\");"},{"lineNumber":130,"author":{"gitId":"shawn-nyk"},"content":"        String pathOfDirectoriesToCreate \u003d \"\";"},{"lineNumber":131,"author":{"gitId":"shawn-nyk"},"content":"        for (int i \u003d 0; i \u003c pathParts.length - 1; i++) {"},{"lineNumber":132,"author":{"gitId":"shawn-nyk"},"content":"            pathOfDirectoriesToCreate +\u003d pathParts[i] + \"/\";"},{"lineNumber":133,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"shawn-nyk"},"content":"        return pathOfDirectoriesToCreate;"},{"lineNumber":135,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":137,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"shawn-nyk"},"content":"     * Writes to save file as specified by filePath. Writing to save occurs every time the task list changes."},{"lineNumber":139,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":140,"author":{"gitId":"shawn-nyk"},"content":"     * @throws IOException If an error occurs during the process of trying to write to the save file."},{"lineNumber":141,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"shawn-nyk"},"content":"    public void writeToFile(TaskList tasks) throws IOException {"},{"lineNumber":143,"author":{"gitId":"shawn-nyk"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":144,"author":{"gitId":"shawn-nyk"},"content":"        for (Task task : tasks.getTaskList()) {"},{"lineNumber":145,"author":{"gitId":"shawn-nyk"},"content":"            fw.write(task.toStringForMemory() + \"\\n\");"},{"lineNumber":146,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"shawn-nyk"},"content":"        fw.close();"},{"lineNumber":148,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":149}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.ToDo;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":" * Stores the user\u0027s list of tasks."},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"public class TaskList {"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"    private static final String DONE \u003d Integer.toString(Task.DONE_SYMBOL_MEMORY);"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"    /** The user\u0027s list of tasks */"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a list of tasks that is empty."},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"    public TaskList() {}"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a list of tasks and populates it with tasks specified by the listOfTasks."},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"     * @param listOfTasks The list of tasks in String format, to populate the task list with."},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"    public TaskList(List\u003cString\u003e listOfTasks) {"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"        initiateTaskList(listOfTasks);"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"     * Populates the task list with tasks specified by the listOfTasks."},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"     * @param listOfTasks The list of tasks in String format, to populate the task list with."},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"    private void initiateTaskList(List\u003cString\u003e listOfTasks) {"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"        assert listOfTasks !\u003d null : \"listOfTasks is null\";"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"        for (String taskString : listOfTasks) {"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"            String[] taskStringParts \u003d taskString.split(\"\\\\|\");"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"            String taskTypeSymbol \u003d taskStringParts[0];"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"            String doneSymbol \u003d taskStringParts[1];"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"            String taskDescription \u003d taskStringParts[2];"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"            switch (taskTypeSymbol) {"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"            case ToDo.TASK_TYPE_SYMBOL:"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"                tasks.add(new ToDo(taskDescription, doneSymbol.equals(DONE)));"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"                break;"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"            case Event.TASK_TYPE_SYMBOL:"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"                String eventLocation \u003d taskStringParts[3];"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"                tasks.add(new Event(taskDescription, eventLocation, doneSymbol.equals(DONE)));"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"                break;"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"            case Deadline.TASK_TYPE_SYMBOL:"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"                String deadline \u003d taskStringParts[3];"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"                tasks.add(new Deadline(taskDescription, LocalDateTime.parse(deadline).toLocalDate(),"},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"                                LocalDateTime.parse(deadline), doneSymbol.equals(DONE)));"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"                break;"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"            default:"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"                assert false : \"Error in last save. The save file may have been tampered with and some tasks may have \""},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"                        + \"been corrupted.\";"},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"                break;"},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"     * Returns the list of tasks."},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":"     * @return The task list."},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":"    public List\u003cTask\u003e getTaskList() {"},{"lineNumber":75,"author":{"gitId":"shawn-nyk"},"content":"        return tasks;"},{"lineNumber":76,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":78,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"shawn-nyk"},"content":"     * Returns the task in the task list that has the index specified by taskIndex."},{"lineNumber":80,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"shawn-nyk"},"content":"     * @param taskIndex The index of the task in the task list."},{"lineNumber":82,"author":{"gitId":"shawn-nyk"},"content":"     * @return The task with the specified index."},{"lineNumber":83,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"shawn-nyk"},"content":"    public Task getTask(int taskIndex) {"},{"lineNumber":85,"author":{"gitId":"shawn-nyk"},"content":"        return tasks.get(taskIndex);"},{"lineNumber":86,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":88,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"shawn-nyk"},"content":"     * Adds a task to the task list."},{"lineNumber":90,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"shawn-nyk"},"content":"     * @param task The task to be added to the task list."},{"lineNumber":92,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"shawn-nyk"},"content":"    public void addTask(Task task) {"},{"lineNumber":94,"author":{"gitId":"shawn-nyk"},"content":"        tasks.add(task);"},{"lineNumber":95,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":97,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"shawn-nyk"},"content":"     * Removes a task from the task list."},{"lineNumber":99,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"shawn-nyk"},"content":"     * @param taskIndex The index of the task to be removed."},{"lineNumber":101,"author":{"gitId":"shawn-nyk"},"content":"     * @return The removed task."},{"lineNumber":102,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"shawn-nyk"},"content":"    public Task removeTask(int taskIndex) {"},{"lineNumber":104,"author":{"gitId":"shawn-nyk"},"content":"        return tasks.remove(taskIndex);"},{"lineNumber":105,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":107,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"shawn-nyk"},"content":"     * Returns the number of tasks in the task list."},{"lineNumber":109,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":110,"author":{"gitId":"shawn-nyk"},"content":"     * @return The number of tasks in the task list."},{"lineNumber":111,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"shawn-nyk"},"content":"    public int getNumberOfTasks() {"},{"lineNumber":113,"author":{"gitId":"shawn-nyk"},"content":"        return tasks.size();"},{"lineNumber":114,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":116,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"shawn-nyk"},"content":"     * Indicates if the task list is empty or not."},{"lineNumber":118,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"shawn-nyk"},"content":"     * @return true if the task list is empty; false otherwise."},{"lineNumber":120,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"shawn-nyk"},"content":"    public boolean isEmpty() {"},{"lineNumber":122,"author":{"gitId":"shawn-nyk"},"content":"        return tasks.isEmpty();"},{"lineNumber":123,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":125,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"shawn-nyk"},"content":"     * Returns the String representation of the task list where all the tasks are represented in a top-down"},{"lineNumber":127,"author":{"gitId":"shawn-nyk"},"content":"     * sequential order based on their indexes in the list. Each task occupies one line."},{"lineNumber":128,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":129,"author":{"gitId":"shawn-nyk"},"content":"     * @return The String representation of the task list."},{"lineNumber":130,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"shawn-nyk"},"content":"    public String toStringForGui() {"},{"lineNumber":132,"author":{"gitId":"shawn-nyk"},"content":"        int index \u003d 1;"},{"lineNumber":133,"author":{"gitId":"shawn-nyk"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":134,"author":{"gitId":"shawn-nyk"},"content":"        for (Task task : tasks) {"},{"lineNumber":135,"author":{"gitId":"shawn-nyk"},"content":"            result.append(\"\\n\").append(index++).append(\".\").append(task.toStringForGui());"},{"lineNumber":136,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"shawn-nyk"},"content":"        return result.toString();"},{"lineNumber":138,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":140,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"shawn-nyk"},"content":"     * Returns the String representation of the task list where all the tasks are represented in a top-down"},{"lineNumber":142,"author":{"gitId":"shawn-nyk"},"content":"     * sequential order based on their indexes in the list. Each task occupies one line."},{"lineNumber":143,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"shawn-nyk"},"content":"     * @return The String representation of the task list."},{"lineNumber":145,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"shawn-nyk"},"content":"    public String toStringForCli() {"},{"lineNumber":147,"author":{"gitId":"shawn-nyk"},"content":"        int index \u003d 1;"},{"lineNumber":148,"author":{"gitId":"shawn-nyk"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":149,"author":{"gitId":"shawn-nyk"},"content":"        for (Task task : tasks) {"},{"lineNumber":150,"author":{"gitId":"shawn-nyk"},"content":"            result.append(\"\\n\").append(index++).append(\".\").append(task.toStringForCli());"},{"lineNumber":151,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"shawn-nyk"},"content":"        return result.toString();"},{"lineNumber":153,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":154}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates an add command for the Duke program. These are commands that add tasks to the task list. There is an"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":" * add command for each type of task, namely: to-do, deadline and event tasks."},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"public abstract class AddCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":8}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import duke.Storage;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import duke.TaskList;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Deadline;"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Task;"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.Ui;"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.UiForGui;"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates an add command for deadline tasks. This command adds a deadline task to the task list. The format for"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":" * this command is: \"deadline task /by YYYY-MM-DD hhmm\" where hh is hours and mm is minutes."},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"public class AddDeadlineCommand extends AddCommand {"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    /** Valid words to invoke the add deadline command */"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"    public static final List\u003cString\u003e COMMAND_WORDS \u003d new ArrayList\u003c\u003e(List.of(\"deadline\", \"d\"));"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"    /** Delimiter that separates the task\u0027s description and deadline */"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"    public static final String COMMAND_SPLIT_WORD \u003d \"/by\";"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"    private String taskDescription;"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    private LocalDate deadlineDate;"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"    private LocalDateTime deadlineDateAndTime;"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes an AddDeadlineCommand object."},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"     * @param taskDescription The task description as entered by the user."},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"     * @param deadlineDate The date of the deadline."},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"     * @param deadlineDateAndTime The date and time of the deadline."},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"    public AddDeadlineCommand(String taskDescription, LocalDate deadlineDate, LocalDateTime deadlineDateAndTime) {"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"        this.deadlineDate \u003d deadlineDate;"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"        this.deadlineDateAndTime \u003d deadlineDateAndTime;"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the CLI version of Duke. If successful, it will add a deadline task to the task list."},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"     * @param ui The Ui object being used in the program."},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"        Task newTask \u003d new Deadline(taskDescription, deadlineDate, deadlineDateAndTime);"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"        tasks.addTask(newTask);"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"        ui.showReplyForAddTask(newTask, tasks);"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"            storage.writeToFile(tasks);"},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IOException e) {"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the GUI version of Duke. If successful, it will add a deadline task to the task list."},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"     * @param uiForGui The UiForGui object being used in the program."},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":"    public String execute(TaskList tasks, UiForGui uiForGui, Storage storage) {"},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":"        Task newTask \u003d new Deadline(taskDescription, deadlineDate, deadlineDateAndTime);"},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":"        tasks.addTask(newTask);"},{"lineNumber":75,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"shawn-nyk"},"content":"            storage.writeToFile(tasks);"},{"lineNumber":77,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IOException e) {"},{"lineNumber":78,"author":{"gitId":"shawn-nyk"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":79,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"shawn-nyk"},"content":"        return uiForGui.showReplyForAddTask(newTask, tasks);"},{"lineNumber":81,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":82}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import duke.Storage;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import duke.TaskList;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Event;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Task;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.UiForGui;"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates an add command for event tasks. This command adds an event task to the task list. The format for this"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":" * command is: \"event task /at venue\"."},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"public class AddEventCommand extends AddCommand {"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    /** Valid words to invoke the add event command */"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    public static final List\u003cString\u003e COMMAND_WORDS \u003d new ArrayList\u003c\u003e(List.of(\"event\", \"ev\", \"e\"));"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"    /** Delimiter that separates the task\u0027s description and location */"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"    public static final String COMMAND_SPLIT_WORD \u003d \"/at\";"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"    private String taskDescription;"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    private String taskLocation;"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes an AddEventCommand object."},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"     * @param taskDescription The task description as entered by the user."},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"     * @param taskLocation The task location as entered by the user."},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"    public AddEventCommand(String taskDescription, String taskLocation) {"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"        this.taskLocation \u003d taskLocation;"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the CLI version of Duke. If successful, it will add an event task to the task list."},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"     * @param ui The Ui object being used in the program."},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"        Task newTask \u003d new Event(taskDescription, taskLocation);"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"        tasks.addTask(newTask);"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"        ui.showReplyForAddTask(newTask, tasks);"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"            storage.writeToFile(tasks);"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IOException e) {"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the GUI version of Duke. If successful, it will add an event task to the task list."},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"     * @param uiForGui The UiForGui object being used in the program."},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"    public String execute(TaskList tasks, UiForGui uiForGui, Storage storage) {"},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"        Task newTask \u003d new Event(taskDescription, taskLocation);"},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":"        tasks.addTask(newTask);"},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"            storage.writeToFile(tasks);"},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IOException e) {"},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"shawn-nyk"},"content":"        return uiForGui.showReplyForAddTask(newTask, tasks);"},{"lineNumber":76,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":77}},{"path":"src/main/java/duke/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import duke.Storage;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import duke.TaskList;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.ToDo;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.UiForGui;"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates an add command for to-do tasks. This command adds a to-do task to the task list. The format for this"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":" * command is: \"to-do task\" (without the hyphen between \"to\" and \"do\")."},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"public class AddTodoCommand extends AddCommand {"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    /** Valid words to invoke the add to-do command */"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    public static final List\u003cString\u003e COMMAND_WORDS \u003d new ArrayList\u003c\u003e(List.of(\"todo\", \"td\", \"t\"));"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"    private String taskDescription;"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes an AddTodoCommand object."},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"     * @param taskDescription The task description entered by the user."},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"    public AddTodoCommand(String taskDescription) {"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the CLI version of Duke. If successful, it will add a to-do task to the task list."},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"     * @param ui The Ui object being used in the program."},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"        Task newTask \u003d new ToDo(taskDescription);"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"        tasks.addTask(newTask);"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"        ui.showReplyForAddTask(newTask, tasks);"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"            storage.writeToFile(tasks);"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IOException e) {"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the GUI version of Duke. If successful, it will add a to-do task to the task list."},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"     * @param uiForGui The UiForGui object being used in the program."},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"    public String execute(TaskList tasks, UiForGui uiForGui, Storage storage) {"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"        Task newTask \u003d new ToDo(taskDescription);"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"        tasks.addTask(newTask);"},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"            storage.writeToFile(tasks);"},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IOException e) {"},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":"        return uiForGui.showReplyForAddTask(newTask, tasks);"},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":71}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.UiForGui;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates a command for the Duke program. These are commands that users can enter as input to interact with Duke."},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":" * There are several types of commands, namely: add, delete, done and find task commands, and exit, list and unknown"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":" * commands."},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"public abstract class Command {"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"    /** Indicates if the command is telling the program to terminate */"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"    private boolean isExit \u003d false;"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the CLI version of Duke."},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"     * @param ui The Ui object being used in the program."},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"     * @throws DukeException If the command cannot be executed properly (is an invalid or unknown command)."},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the GUI version of Duke."},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"     * @param uiForGui The UiForGui object being used in the program."},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"     * @return String to show to the user at the end of the execution of the command."},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"     * @throws DukeException If the command cannot be executed properly (is an invalid or unknown command)."},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"    public abstract String execute(TaskList tasks, UiForGui uiForGui, Storage storage) throws DukeException;"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"     * Indicates if the command is telling the program to terminate."},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"     * @return true if the command is telling the program to terminate, false otherwise."},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"    public boolean isExit() {"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"        return isExit;"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"     * Sets boolean flag isExit to indicate if the command is telling the program to terminate."},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"     * @param exitStatus Value that isExit will be set to."},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"    public void setExit(boolean exitStatus) {"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"        isExit \u003d exitStatus;"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":57}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import duke.Storage;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import duke.TaskList;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import duke.exception.TaskIndexOutOfBoundsException;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Task;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.UiForGui;"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates a delete command for the Duke program. This is the command that removes tasks from the task list. The"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":" * format for this command is: \"delete x\" where x is in the index of a task in the task list."},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    /** Valid words to invoke the delete command */"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    public static final List\u003cString\u003e COMMAND_WORDS \u003d new ArrayList\u003c\u003e(List.of(\"delete\", \"del\"));"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"    /** Strict number of arguments expected for the delete command */"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"    public static final int EXPECTED_NUMBER_OF_ARGUMENTS \u003d 2;"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"    private int taskIndex;"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    private int userSpecifiedIndex;"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a DeleteCommand object."},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"     * @param taskIndex The user\u0027s full command split into strings separated by whitespaces."},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"    public DeleteCommand(int taskIndex) {"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"        this.userSpecifiedIndex \u003d taskIndex + 1;"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the CLI version of Duke. If successful, it will remove a task from the task list."},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"     * @param ui The Ui object being used in the program."},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"     * @throws TaskIndexOutOfBoundsException If the index of the task specified by the user is not present in the task"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"     * list."},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws TaskIndexOutOfBoundsException {"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"            Task removedTask \u003d tasks.removeTask(taskIndex);"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"            ui.showReplyForDeleteTask(removedTask, tasks);"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"            try {"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"                storage.writeToFile(tasks);"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"            } catch (IOException e) {"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"                System.err.println(e.getMessage());"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IndexOutOfBoundsException e) { // User requests for a task with an index not within the current task"},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"            // list"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"            throw new TaskIndexOutOfBoundsException(Integer.toString(userSpecifiedIndex));"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the GUI version of Duke. If successful, it will remove a task from the task list."},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"     * @param uiForGui The UiForGui object being used in the program."},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"     * @throws TaskIndexOutOfBoundsException If the index of the task specified by the user is not present in the task"},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"     * list."},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":"    public String execute(TaskList tasks, UiForGui uiForGui, Storage storage) throws TaskIndexOutOfBoundsException {"},{"lineNumber":75,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"shawn-nyk"},"content":"            Task removedTask \u003d tasks.removeTask(taskIndex);"},{"lineNumber":77,"author":{"gitId":"shawn-nyk"},"content":"            try {"},{"lineNumber":78,"author":{"gitId":"shawn-nyk"},"content":"                storage.writeToFile(tasks);"},{"lineNumber":79,"author":{"gitId":"shawn-nyk"},"content":"            } catch (IOException e) {"},{"lineNumber":80,"author":{"gitId":"shawn-nyk"},"content":"                System.err.println(e.getMessage());"},{"lineNumber":81,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"shawn-nyk"},"content":"            return uiForGui.showReplyForDeleteTask(removedTask, tasks);"},{"lineNumber":83,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IndexOutOfBoundsException e) { // User requests for a task with an index not within the current task"},{"lineNumber":84,"author":{"gitId":"shawn-nyk"},"content":"            // list"},{"lineNumber":85,"author":{"gitId":"shawn-nyk"},"content":"            throw new TaskIndexOutOfBoundsException(Integer.toString(userSpecifiedIndex));"},{"lineNumber":86,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":88}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import duke.Storage;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import duke.TaskList;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import duke.exception.TaskIndexOutOfBoundsException;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Task;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.UiForGui;"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates a done command for the Duke program. This is the command that marks tasks as completed in the task list."},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":" * The format for this command is: \"done x\" where x is in the index of a task in the task list."},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"public class DoneCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    /** Valid words to invoke the done command */"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    public static final List\u003cString\u003e COMMAND_WORDS \u003d new ArrayList\u003c\u003e(List.of(\"done\", \"dn\"));"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"    /** Strict number of arguments expected for the done command */"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"    public static final int EXPECTED_NUMBER_OF_ARGUMENTS \u003d 2;"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"    private int taskIndex;"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    private int userSpecifiedIndex;"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a DoneCommand object."},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"     * @param taskIndex The index of the task in the list."},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"    public DoneCommand(int taskIndex) {"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"        this.userSpecifiedIndex \u003d taskIndex + 1;"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the CLI version of Duke. If successful, it will mark a task as done in the task list."},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"     * @param ui The Ui object being used in the program."},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"     * @throws TaskIndexOutOfBoundsException If the index of the task specified by the user is not present in the task"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"     * list."},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws TaskIndexOutOfBoundsException {"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"            Task completedTask \u003d tasks.getTask(taskIndex);"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"            completedTask.setDone(true);"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"            ui.showReplyForDoneTask(completedTask);"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"            try {"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"                storage.writeToFile(tasks);"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"            } catch (IOException e) {"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"                System.err.println(e.getMessage());"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IndexOutOfBoundsException e) { // User requests for a task with an index not within the current task"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"            // list"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"            throw new TaskIndexOutOfBoundsException(Integer.toString(userSpecifiedIndex));"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the GUI version of Duke. If successful, it will mark a task as done in the task list."},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":"     * @param uiForGui The UiForGui object being used in the program."},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"     * @throws TaskIndexOutOfBoundsException If the index of the task specified by the user is not present in the task"},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":"     * list."},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"shawn-nyk"},"content":"    public String execute(TaskList tasks, UiForGui uiForGui, Storage storage) throws TaskIndexOutOfBoundsException {"},{"lineNumber":76,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":77,"author":{"gitId":"shawn-nyk"},"content":"            Task completedTask \u003d tasks.getTask(taskIndex);"},{"lineNumber":78,"author":{"gitId":"shawn-nyk"},"content":"            completedTask.setDone(true);"},{"lineNumber":79,"author":{"gitId":"shawn-nyk"},"content":"            try {"},{"lineNumber":80,"author":{"gitId":"shawn-nyk"},"content":"                storage.writeToFile(tasks);"},{"lineNumber":81,"author":{"gitId":"shawn-nyk"},"content":"            } catch (IOException e) {"},{"lineNumber":82,"author":{"gitId":"shawn-nyk"},"content":"                System.err.println(e.getMessage());"},{"lineNumber":83,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"shawn-nyk"},"content":"            return uiForGui.showReplyForDoneTask(completedTask);"},{"lineNumber":85,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IndexOutOfBoundsException e) { // User requests for a task with an index not within the current task"},{"lineNumber":86,"author":{"gitId":"shawn-nyk"},"content":"            // list"},{"lineNumber":87,"author":{"gitId":"shawn-nyk"},"content":"            throw new TaskIndexOutOfBoundsException(Integer.toString(userSpecifiedIndex));"},{"lineNumber":88,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":90}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.UiForGui;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates an exit command for the Duke program. This is the command that terminates the program. The format for"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":" * this command is: \"bye\"."},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"public class ExitCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"    /** Valid words to invoke the exit command */"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"    public static final List\u003cString\u003e COMMAND_WORDS \u003d new ArrayList\u003c\u003e(List.of(\"bye\", \"b\"));"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes an ExitCommand object. Its isExit boolean flag is marked as true to indicate to the"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"     * program that it should terminate."},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"    public ExitCommand() {"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"        setExit(true);"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the CLI version of Duke and terminates the program."},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"     * @param ui The Ui object being used in the program."},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"        ui.showGoodbye();"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the GUI version of Duke and terminates the program."},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"     * @param uiForGui The UiForGui object being used in the program."},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"    public String execute(TaskList tasks, UiForGui uiForGui, Storage storage) {"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"        return uiForGui.showGoodbye();"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":51}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.UiForGui;"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates a find command for the Duke program. This is the command that finds tasks in the task list that contain"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":" * specific word(s) specified by the user. The format for this command is: \"find key_words\"."},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"public class FindCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"    /** Valid words to invoke the find command */"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    public static final List\u003cString\u003e COMMAND_WORDS \u003d new ArrayList\u003c\u003e(List.of(\"find\", \"f\"));"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    private String keyWords;"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes an FindCommand object."},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"     * @param keyWords The key words for which the user is asking to find tasks that contain them."},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    public FindCommand(String keyWords) {"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"        this.keyWords \u003d keyWords;"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the CLI version of Duke. If successful, it will find and return all tasks from the task"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"     * list that contain the key words specified by the user."},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"     * @param ui The Ui object being used in the program."},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"        TaskList foundTasks \u003d new TaskList();"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"        for (Task task : tasks.getTaskList()) {"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"            if (task.getDescription().contains(keyWords)) {"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"                foundTasks.addTask(task);"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"            } else if (task instanceof Event \u0026\u0026 ((Event) task).getAt().contains(keyWords)) {"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"                foundTasks.addTask(task);"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"        ui.showFoundTaskList(foundTasks, keyWords);"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the GUI version of Duke. If successful, it will find and return all tasks from the task"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"     * list that contain the key words specified by the user."},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"     * @param uiForGui The UiForGui object being used in the program."},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"    public String execute(TaskList tasks, UiForGui uiForGui, Storage storage) {"},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"        TaskList foundTasks \u003d new TaskList();"},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"        for (Task task : tasks.getTaskList()) {"},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"            if (task.getDescription().contains(keyWords)) {"},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"                foundTasks.addTask(task);"},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"            } else if (task instanceof Event \u0026\u0026 ((Event) task).getAt().contains(keyWords)) {"},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":"                foundTasks.addTask(task);"},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":"        return uiForGui.showFoundTaskList(foundTasks, keyWords);"},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":74}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.UiForGui;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates a list command for the Duke program. This is the command that lists out the tasks in the task list"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":" * and presents them to the user. The format for this command is: \"list\"."},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"public class ListCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"    /** Valid words to invoke the list command */"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"    public static final List\u003cString\u003e COMMAND_WORDS \u003d new ArrayList\u003c\u003e(List.of(\"list\", \"ls\", \"l\"));"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the CLI version of Duke and lists out the tasks in the task list and presents them to"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"     * the user."},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"     * @param ui The Ui object being used in the program."},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"        ui.showTaskList(tasks);"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the GUI version of Duke and lists out the tasks in the task list and presents them to"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"     * the user."},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"     * @param uiForGui The UiForGui object being used in the program."},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"    public String execute(TaskList tasks, UiForGui uiForGui, Storage storage) {"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"        return uiForGui.showTaskList(tasks);"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":45}},{"path":"src/main/java/duke/command/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import duke.exception.UnknownCommandException;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.UiForGui;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates unknown commands for the Duke program. These are invalid commands (in which the first word of the"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":" * command is not any of the valid commands)."},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"public class UnknownCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the CLI version of Duke and informs the user that the command entered was invalid."},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"     * @param ui The Ui object being used in the program."},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"        ui.showError(new UnknownCommandException());"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"     * Executes the command in the GUI version of Duke and informs the user that the command entered was invalid."},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks in the program."},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"     * @param uiForGui The UiForGui object being used in the program."},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"     * @param storage The Storage object being used in the program."},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"    public String execute(TaskList tasks, UiForGui uiForGui, Storage storage) {"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"        return uiForGui.showError(new UnknownCommandException());"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":38}},{"path":"src/main/java/duke/exception/DeadlineWrongFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.AddDeadlineCommand;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates a deadline wrong format exception. These exceptions are thrown when the user enters a deadline command"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":" * with an invalid format (the first word of the command is a valid command word but an error lies elsewhere in the"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":" * command)."},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"public class DeadlineWrongFormatException extends WrongFormatException {"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"    private static final String correctFormatDescription \u003d \"description of a task in the following format:\\ntask /by \""},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"            + \"YYYY-MM-DD hhmm\\nwhere hh is hours and mm is minutes.\\nPlease ensure that the date and time are valid.\";"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a DeadlineWrongFormatException object."},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"    public DeadlineWrongFormatException() {"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"        super(AddDeadlineCommand.COMMAND_WORDS.get(0), correctFormatDescription);"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":21}},{"path":"src/main/java/duke/exception/DeleteWrongFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates a delete wrong format exception. These exceptions are thrown when the user enters a delete command with"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":" * an invalid format in which the first word of the command is \"delete\" but either no other text accompanies the"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":" * command, or the text after the word \"delete\" is not a single integer)."},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"public class DeleteWrongFormatException extends WrongFormatException {"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"    private static final String correctFormatDescription \u003d \"single whitespace and an integer\";"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a DeleteWrongFormatException object."},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"    public DeleteWrongFormatException() {"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"        super(DeleteCommand.COMMAND_WORDS.get(0), correctFormatDescription);"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":20}},{"path":"src/main/java/duke/exception/DoneWrongFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.DoneCommand;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates a done wrong format exception. These exceptions are thrown when the user enters a done command with an"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":" * invalid format in which the first word of the command is \"done\" but either no other text accompanies the command, or"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":" * the text after the word \"done\" is not a single integer)."},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"public class DoneWrongFormatException extends WrongFormatException {"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"    private static final String correctFormatDescription \u003d \"single whitespace and an integer\";"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a DoneWrongFormatException object."},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"    public DoneWrongFormatException() {"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"        super(DoneCommand.COMMAND_WORDS.get(0), correctFormatDescription);"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":20}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates an exception specific to the Duke program. There are several types of exceptions, namely: wrong"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":" * format, unknown command, and task index out of bounds exceptions."},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"public class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"    /** Describes the error that occurred in more detail to the user */"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"    protected String additionalErrorDescription;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a DukeException object."},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"    public DukeException(String additionalErrorDescription) {"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"        this.additionalErrorDescription \u003d additionalErrorDescription;"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"     * Returns an error message. Informs the user what went wrong and how to avoid the error if appropriate."},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"     * @return The error message."},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"    public String getMessage() {"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"        return \"OOPS!\" + additionalErrorDescription;"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":28}},{"path":"src/main/java/duke/exception/EventWrongFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.AddEventCommand;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates an event wrong format exception. These exceptions are thrown when the user enters an event command with"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":" * an invalid format (the first word of the command is a valid command word but an error lies elsewhere in the"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":" * command)."},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"public class EventWrongFormatException extends WrongFormatException {"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"    private static final String correctFormatDescription \u003d \"description of a task in the following format:\\nevent /at\""},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"            + \" time and/or place.\";"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes an EventWrongFormatException object."},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"    public EventWrongFormatException() {"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"        super(AddEventCommand.COMMAND_WORDS.get(0), correctFormatDescription);"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":21}},{"path":"src/main/java/duke/exception/FindWrongFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.FindCommand;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"public class FindWrongFormatException extends WrongFormatException {"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"    private static final String correctFormatDescription \u003d \"word / words that you would like to search for in\\nthe\""},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"            + \" task list.\";"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a FindWrongFormatException object."},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"    public FindWrongFormatException() {"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"        super(FindCommand.COMMAND_WORDS.get(0), correctFormatDescription);"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":16}},{"path":"src/main/java/duke/exception/TaskIndexOutOfBoundsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates a task index out of bounds exception. These exceptions are thrown when the user enters a done or delete"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":" * command but specifies an index that is out of the range of the task list."},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"public class TaskIndexOutOfBoundsException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a TaskIndexOutOfBoundsException object."},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"     * @param index The index specified by the user."},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"    public TaskIndexOutOfBoundsException(String index) {"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"        super(\" There is no task no. \" + index);"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":17}},{"path":"src/main/java/duke/exception/TodoWrongFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.AddTodoCommand;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates a to-do wrong format exception. These exceptions are thrown when the user enters a to-do command with"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":" * an invalid format (the first word of the command is a valid command word but an error lies elsewhere in the"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":" * command)."},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"public class TodoWrongFormatException extends WrongFormatException {"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"    private static final String correctFormatDescription \u003d \"description of a task.\";"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a TodoWrongFormatException object."},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"    public TodoWrongFormatException() {"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"        super(AddTodoCommand.COMMAND_WORDS.get(0), correctFormatDescription);"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":20}},{"path":"src/main/java/duke/exception/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates unknown command exceptions. These exceptions are thrown when the user enters an invalid command in"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":" * which the first word of the command is not a recognized command word."},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"public class UnknownCommandException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"    private static final String additionalErrorDescription \u003d \" I\u0027m sorry, but I don\u0027t know what that means :(\";"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes an UnknownCommandException object."},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"    public UnknownCommandException() {"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"        super(additionalErrorDescription);"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":17}},{"path":"src/main/java/duke/exception/WrongFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates wrong format exceptions. These exceptions are thrown when the user enters a command with an invalid"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":" * format (the first word of the command is a valid command word but an error lies elsewhere in the command)."},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"public class WrongFormatException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a WrongFormatException object."},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"     * @param commandWord The command type as specified by the first word of the command that the user entered."},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"    public WrongFormatException(String commandWord, String correctFormatDescription) {"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"        super(\" The \" + commandWord + \" command has to be followed by a\\n\" + correctFormatDescription);"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":17}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates the deadline task type. A deadline task has a description of the task and the date and time of when"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":" * the task should be completed by."},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"public class Deadline extends Task {"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"    /** The task type symbol that is used in the program to represent a deadline task */"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"    public static final String TASK_TYPE_SYMBOL \u003d \"[D]\";"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"    private static final String TASK_TYPE_NAME \u003d \"deadline\";"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"    private static final String DATE_TIME_FORMAT \u003d \"d MMM yyyy @ hh:mma\";"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"    /** Date that the task should be completed by */"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    protected LocalDate date;"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    /** Date and time that the task should be completed by */"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"    protected LocalDateTime dateAndTime;"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a deadline task that has not been completed by default."},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"     * @param description The description of the task."},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"     * @param deadlineDate The date of the deadline of the task."},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"     * @param deadlineDateAndTime The date and time of the deadline of the task."},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"    public Deadline(String description, LocalDate deadlineDate, LocalDateTime deadlineDateAndTime) {"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"        this(description, deadlineDate, deadlineDateAndTime, false);"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a deadline task that can be marked as completed."},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"     * @param description The description of the task."},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"     * @param deadlineDate The date of the deadline of the task."},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"     * @param deadlineDateAndTime The date and time of the deadline of the task."},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"     * @param isDone Marks whether the task has been completed or not."},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"    public Deadline(String description, LocalDate deadlineDate, LocalDateTime deadlineDateAndTime, boolean isDone) {"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"        super(description,"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"                \" (by: \" + deadlineDateAndTime.format(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)) + \")\","},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"                \"|\" + deadlineDateAndTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME),"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"                TASK_TYPE_SYMBOL,"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"                TASK_TYPE_NAME,"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"                isDone);"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"        this.date \u003d deadlineDate;"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"        this.dateAndTime \u003d deadlineDateAndTime;"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":54}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates the event task type. An event task has a description of the task and the venue of where the task will"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":" * be done."},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"    /** The task type symbol that is used in the program to represent an event task */"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"    public static final String TASK_TYPE_SYMBOL \u003d \"[E]\";"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"    private static final String TASK_TYPE_NAME \u003d \"event\";"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"    /** The venue where the task is to be done */"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"    protected String at;"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes an event task that has not been completed by default."},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"     * @param description The description of the task."},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"     * @param at The venue where the task is to be done."},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"    public Event(String description, String at) {"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"        this(description, at, false);"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes an event task that can be marked as completed."},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"     * @param description The description of the task."},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"     * @param at The venue where the task is to be done."},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"     * @param isDone Marks whether the task has been completed or not."},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"    public Event(String description, String at, boolean isDone) {"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"        super(description,"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"                \" (at: \" + at + \")\","},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"                \"|\" + at,"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"                TASK_TYPE_SYMBOL,"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"                TASK_TYPE_NAME,"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"                isDone);"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"        this.at \u003d at;"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"     * Returns the venue where the task is to be done."},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"     * @return The venue where the task is to be done."},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"    public String getAt() {"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"        return at;"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":52}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates a task for the Duke program. A task is inclusive of a textual description and a boolean flag to mark"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":" * whether it has been completed or not. There are several types of tasks, namely: to-do, event and deadline."},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"public class Task {"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"    /** Symbol for indicating that a task is completed, in the memory save file */"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"    public static final int DONE_SYMBOL_MEMORY \u003d 1;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"    /** Symbol for indicating that a task has not been completed, in the memory save file */"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"    public static final int NOT_DONE_SYMBOL_MEMORY \u003d 0;"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"    private static final String DONE_SYMBOL_GUI \u003d \"\\u2713\";"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"    private static final String NOT_DONE_SYMBOL_GUI \u003d \"\\u2718\";"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"    private static final String DONE_SYMBOL_CLI \u003d \"✓\";"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"    private static final String NOT_DONE_SYMBOL_CLI \u003d \"✘\";"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    /** Describes the task */"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    protected String description;"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"    /** Additional information to describe the task */"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"    protected String additionalDescription;"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"    /** Additional information to describe the task to be stored in save file */"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    protected String additionalDescriptionForMemory;"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    /** Marks whether the task has been completed or not */"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"    protected boolean isDone;"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"    /** The symbol that represents the type of task */"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"    protected String taskTypeSymbol; // [T], [D] or [E]"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"    /** The name of the task type */"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"    protected String taskTypeName; // to-do, deadline or event"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a task."},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"     * @param description The description of the task."},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"     * @param taskTypeSymbol The symbol that represents the type of task."},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"     * @param taskTypeName The name of the task type."},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"     * @param isDone Marks whether the task has been completed or not."},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"    public Task(String description, String additionalDescription, String additionalDescriptionForMemory,"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"                String taskTypeSymbol, String taskTypeName, boolean isDone) {"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"        this.description \u003d description;"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"        this.additionalDescription \u003d additionalDescription;"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"        this.additionalDescriptionForMemory \u003d additionalDescriptionForMemory;"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"        this.taskTypeSymbol \u003d taskTypeSymbol;"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"        this.taskTypeName \u003d taskTypeName;"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"    private String getStatusIconForGui() {"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"        return (isDone ? DONE_SYMBOL_GUI : NOT_DONE_SYMBOL_GUI);"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"    private String getStatusIconForCli() {"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"        return (isDone ? DONE_SYMBOL_CLI : NOT_DONE_SYMBOL_CLI);"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"    private int getStatusIconForMemory() {"},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"        return (isDone ? DONE_SYMBOL_MEMORY : NOT_DONE_SYMBOL_MEMORY);"},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":"     * Changes the task\u0027s completion indicator to either completed or not completed."},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"     * @param isDone The user enters true to mark the task as complete and false for incomplete."},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":"    public void setDone(boolean isDone) {"},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":75,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":77,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"shawn-nyk"},"content":"     * Returns the task\u0027s description."},{"lineNumber":79,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"shawn-nyk"},"content":"     * @return The task\u0027s description."},{"lineNumber":81,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"shawn-nyk"},"content":"    public String getDescription() {"},{"lineNumber":83,"author":{"gitId":"shawn-nyk"},"content":"        return description;"},{"lineNumber":84,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":86,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"shawn-nyk"},"content":"     * Formats the string that will be written in the save file to represent this particular task."},{"lineNumber":88,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"shawn-nyk"},"content":"     * @return The string that will be written in the save file to represent this particular task."},{"lineNumber":90,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"shawn-nyk"},"content":"    public String toStringForMemory() {"},{"lineNumber":92,"author":{"gitId":"shawn-nyk"},"content":"        return taskTypeSymbol + \"|\" + getStatusIconForMemory() + \"|\" + description + additionalDescriptionForMemory;"},{"lineNumber":93,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":95,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"shawn-nyk"},"content":"     * Formats the way the task is presented to the user as part of the task list."},{"lineNumber":97,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"shawn-nyk"},"content":"     * @return The String that represents the task when it is presented to the user as part of the task list."},{"lineNumber":99,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"shawn-nyk"},"content":"    public String toStringForGui() {"},{"lineNumber":101,"author":{"gitId":"shawn-nyk"},"content":"        return taskTypeSymbol + \"[\" + getStatusIconForGui() + \"] \" + description + additionalDescription;"},{"lineNumber":102,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":104,"author":{"gitId":"shawn-nyk"},"content":"    public String toStringForCli() {"},{"lineNumber":105,"author":{"gitId":"shawn-nyk"},"content":"        return taskTypeSymbol + \"[\" + getStatusIconForCli() + \"] \" + description + additionalDescription;"},{"lineNumber":106,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":107}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":" * Encapsulates the to-do task type. A to-do task only has a description of the task."},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"    /** The task type symbol that is used in the program to represent a to-do task */"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"    public static final String TASK_TYPE_SYMBOL \u003d \"[T]\";"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"    private static final String TASK_TYPE_NAME \u003d \"todo\";"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a to-do task that has not been completed by default."},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"     * @param description The description of the task."},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"    public ToDo(String description) {"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"        this(description, false);"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"     * Creates and initializes a to-do task that can be marked as completed."},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"     * @param description The description of the task."},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"     * @param isDone Marks whether the task has been completed or not."},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"    public ToDo(String description, boolean isDone) {"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"        super(description,"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"                \"\","},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"                \"\","},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"                TASK_TYPE_SYMBOL,"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"                TASK_TYPE_NAME,"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"                isDone);"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":36}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":" * An example of a custom control using FXML."},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":" * containing text from the speaker."},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"public class DialogBox extends HBox {"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"    private static final String DIALOG_BOX_FXML_FILE_PATH \u003d \"/view/DialogBox.fxml\";"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"    private Label dialog;"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"    private ImageView displayPicture;"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(DIALOG_BOX_FXML_FILE_PATH));"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"            fxmlLoader.load();"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"        } catch (IOException e) {"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"            e.printStackTrace();"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"        dialog.setText(text);"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"        Circle clip \u003d new Circle(35, 35, 35);"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"        displayPicture.setImage(img);"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"        displayPicture.setClip(clip);"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"    private void flip() {"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"        Collections.reverse(tmp);"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"        return new DialogBox(text, img);"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"        db.flip();"},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"        return db;"},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":68}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import duke.Response;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.AddCommand;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.DoneCommand;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.ExitCommand;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.FindCommand;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.ListCommand;"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.UnknownCommand;"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"import javafx.scene.control.Button;"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"import javafx.scene.image.Image;"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"    private VBox dialogContainer;"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"    private TextField userInput;"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"    private Button sendButton;"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"    private Duke duke;"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"    private Image dukeSmileImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DukeSmile.png\"));"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"    private Image dukeBigSmileImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DukeBigSmile.png\"));"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"    private Image dukeOopsImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DukeOops.png\"));"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"    private Image dukeImage \u003d dukeSmileImage;"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"     * Initializes certain properties of the MainWindow."},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"    public void initialize() {"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(UiForGui.showWelcome(), dukeSmileImage));"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"        duke \u003d d;"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"    private void handleUserInput() {"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"        Response response \u003d duke.getResponse(input);"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"        String responseString \u003d response.getResponseString();"},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"        Command responseCommand \u003d response.getCommand();"},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"        setDukeImage(responseCommand);"},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"                DialogBox.getDukeDialog(responseString, dukeImage)"},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":"        );"},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"        userInput.clear();"},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":"    private void setDukeImage(Command responseCommand) {"},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":"        if (responseCommand instanceof AddCommand || responseCommand instanceof DeleteCommand"},{"lineNumber":75,"author":{"gitId":"shawn-nyk"},"content":"                || responseCommand instanceof FindCommand || responseCommand instanceof ListCommand) {"},{"lineNumber":76,"author":{"gitId":"shawn-nyk"},"content":"            dukeImage \u003d dukeSmileImage;"},{"lineNumber":77,"author":{"gitId":"shawn-nyk"},"content":"        } else if (responseCommand instanceof DoneCommand || responseCommand instanceof ExitCommand) {"},{"lineNumber":78,"author":{"gitId":"shawn-nyk"},"content":"            dukeImage \u003d dukeBigSmileImage;"},{"lineNumber":79,"author":{"gitId":"shawn-nyk"},"content":"        } else if (responseCommand instanceof UnknownCommand) {"},{"lineNumber":80,"author":{"gitId":"shawn-nyk"},"content":"            dukeImage \u003d dukeOopsImage;"},{"lineNumber":81,"author":{"gitId":"shawn-nyk"},"content":"        } else {"},{"lineNumber":82,"author":{"gitId":"shawn-nyk"},"content":"            assert false : \"Command entered was not recognised.\";"},{"lineNumber":83,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":85}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":" * Handles all interactions with the user in the CLI version of Duke."},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"    /** Duke a.k.a. Star Bot\u0027s logo shown upon start up */"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"    private static final String LOGO \u003d \"     _______.___________.    ___     \""},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"            + \" .______      \\n\""},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"            + \"    /       |           |   /   \\\\     |   _  \\\\     \\n\""},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"            + \"   |   (----`---|  |----`  /  ^  \\\\    |  |_)  |    \\n\""},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"            + \"    \\\\   \\\\       |  |      /  /_\\\\  \\\\   |      /     \\n\""},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"            + \".----)   |      |  |     /  _____  \\\\  |  |\\\\  \\\\----.\\n\""},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"            + \"|_______/       |__|    /__/     \\\\__\\\\ | _| `._____|\\n\""},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"            + \"                                                   \\n\""},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"            + \"         .______     ______   .___________.        \\n\""},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"            + \"         |   _  \\\\   /  __  \\\\  |           |        \\n\""},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"            + \"         |  |_)  | |  |  |  | `---|  |----`        \\n\""},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"            + \"         |   _  \u003c  |  |  |  |     |  |             \\n\""},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"            + \"         |  |_)  | |  `--\u0027  |     |  |             \\n\""},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"            + \"         |______/   \\\\______/      |__|             \\n\""},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"            + \"                                                   \";"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"    /** Divider that delineates Duke\u0027s replies */"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"    private static final String DIVIDER \u003d"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"            \"------------------------------------------------------\\n\";"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"    private static final String GREETING \u003d \"\\nHello, I\u0027m Star Bot! What can I do for you?\\n\";"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"    private static final String GOODBYE_MESSAGE \u003d \"Goodbye, see you again soon! :)\";"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"    private static final String EMPTY_LIST_MESSAGE \u003d \"Your list is empty! Let\u0027s add some tasks!\";"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"    /** Scanner used to scan user\u0027s input */"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"    private static final Scanner SCANNER \u003d new Scanner(System.in);"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"     * Greets the user upon program start up."},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"    public void showWelcome() {"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"        System.out.println(LOGO + GREETING);"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"     * Shows the program\u0027s response to the user\u0027s input. The look of these replies are standardised by wrapping them in"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"     * dividers."},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"     * @param reply The text to present to the user."},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"    private void showReply(String reply) {"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"        assert !reply.isEmpty() : \"showReply called with no valid reply string.\";"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"        System.out.println(DIVIDER + reply + \"\\n\" + DIVIDER);"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"     * Says goodbye to the user before termination of the program."},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"    public void showGoodbye() {"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"        showReply(GOODBYE_MESSAGE);"},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"     * Informs the user that an error occurred."},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":"     * @param e The error that occurred in the program."},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"    public void showError(Exception e) {"},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":"        showReply(e.getMessage());"},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":75,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"shawn-nyk"},"content":"     * Reads the user input."},{"lineNumber":77,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"shawn-nyk"},"content":"     * @return The user\u0027s input as a String."},{"lineNumber":79,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"shawn-nyk"},"content":"    public String readCommand() {"},{"lineNumber":81,"author":{"gitId":"shawn-nyk"},"content":"        return SCANNER.nextLine();"},{"lineNumber":82,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":84,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"shawn-nyk"},"content":"     * Shows a standardised reply for when the user adds a task."},{"lineNumber":86,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"shawn-nyk"},"content":"     * @param newTask The task being added."},{"lineNumber":88,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks that the task is being added to."},{"lineNumber":89,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"shawn-nyk"},"content":"    public void showReplyForAddTask(Task newTask, TaskList tasks) {"},{"lineNumber":91,"author":{"gitId":"shawn-nyk"},"content":"        showReply(\"Got it. I\u0027ve added this task:\\n\" + newTask.toStringForCli() + \"\\nNow you have \""},{"lineNumber":92,"author":{"gitId":"shawn-nyk"},"content":"                + tasks.getNumberOfTasks() + \" tasks in the list.\");"},{"lineNumber":93,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":95,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"shawn-nyk"},"content":"     * Shows a standardised reply for when the user completes a task."},{"lineNumber":97,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"shawn-nyk"},"content":"     * @param doneTask The task that has been completed."},{"lineNumber":99,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"shawn-nyk"},"content":"    public void showReplyForDoneTask(Task doneTask) {"},{"lineNumber":101,"author":{"gitId":"shawn-nyk"},"content":"        showReply(\"Nice! I\u0027ve marked this task as done:\\n\" + doneTask.toStringForCli());"},{"lineNumber":102,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":104,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"shawn-nyk"},"content":"     * Shows a standardised reply for when the user removes a task."},{"lineNumber":106,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"shawn-nyk"},"content":"     * @param removedTask The task being removed."},{"lineNumber":108,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks that the task is being removed from."},{"lineNumber":109,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"shawn-nyk"},"content":"    public void showReplyForDeleteTask(Task removedTask, TaskList tasks) {"},{"lineNumber":111,"author":{"gitId":"shawn-nyk"},"content":"        showReply(\"Noted. I\u0027ve removed this task:\\n\" + removedTask.toStringForCli() + \"\\nNow you have \""},{"lineNumber":112,"author":{"gitId":"shawn-nyk"},"content":"                + tasks.getNumberOfTasks() + \" tasks in the list.\");"},{"lineNumber":113,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":115,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"shawn-nyk"},"content":"     * Formats the task list to be shown to the user."},{"lineNumber":117,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks to be shown."},{"lineNumber":119,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"shawn-nyk"},"content":"    public void showTaskList(TaskList tasks) {"},{"lineNumber":121,"author":{"gitId":"shawn-nyk"},"content":"        if (tasks.isEmpty()) {"},{"lineNumber":122,"author":{"gitId":"shawn-nyk"},"content":"            showReply(EMPTY_LIST_MESSAGE);"},{"lineNumber":123,"author":{"gitId":"shawn-nyk"},"content":"        } else {"},{"lineNumber":124,"author":{"gitId":"shawn-nyk"},"content":"            showReply(\"Here are the tasks in your list:\" + tasks.toStringForCli());"},{"lineNumber":125,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":128,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"shawn-nyk"},"content":"     * Formats the task list to be shown to the user."},{"lineNumber":130,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"shawn-nyk"},"content":"    public void showFoundTaskList(TaskList tasks, String keyWords) {"},{"lineNumber":132,"author":{"gitId":"shawn-nyk"},"content":"        if (tasks.isEmpty()) {"},{"lineNumber":133,"author":{"gitId":"shawn-nyk"},"content":"            showReply(\"Sorry! No tasks were found with the word(s)\\n\\\"\" + keyWords + \"\\\".\");"},{"lineNumber":134,"author":{"gitId":"shawn-nyk"},"content":"        } else {"},{"lineNumber":135,"author":{"gitId":"shawn-nyk"},"content":"            showReply(\"Here are the tasks in your list with the word(s)\\n\\\"\" + keyWords + \"\\\":\""},{"lineNumber":136,"author":{"gitId":"shawn-nyk"},"content":"                    + tasks.toStringForCli());"},{"lineNumber":137,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":139}},{"path":"src/main/java/duke/ui/UiForGui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":" * Handles all interactions with the user in the GUI version of Duke."},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":" */"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"public class UiForGui {"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"    private static final String GREETING \u003d \"Hello, I\u0027m Star Bot! What can I do for you?\";"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"    private static final String GOODBYE_MESSAGE \u003d \"Goodbye, see you again soon! :)\";"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"    private static final String EMPTY_LIST_MESSAGE \u003d \"Your list is empty! Let\u0027s add some tasks!\";"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"    /** Scanner used to scan user\u0027s input */"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"    private static final Scanner SCANNER \u003d new Scanner(System.in);"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"     * Greets the user upon program start up."},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    public static String showWelcome() {"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"        return GREETING;"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"     * Says goodbye to the user before termination of the program."},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    public String showGoodbye() {"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"        return GOODBYE_MESSAGE;"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"     * Informs the user that an error occurred."},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"     * @param e The error that occurred in the program."},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"    public String showError(Exception e) {"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"        return e.getMessage();"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"     * Shows a standardised reply for when the user adds a task."},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"     * @param newTask The task being added."},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks that the task is being added to."},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"    public String showReplyForAddTask(Task newTask, TaskList tasks) {"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + newTask.toStringForGui() + \"\\nNow you have \""},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"                + tasks.getNumberOfTasks() + \" tasks in the list.\";"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"     * Shows a standardised reply for when the user completes a task."},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"     * @param doneTask The task that has been completed."},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"    public String showReplyForDoneTask(Task doneTask) {"},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + doneTask.toStringForGui();"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"     * Shows a standardised reply for when the user removes a task."},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"     * @param removedTask The task being removed."},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks that the task is being removed from."},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"    public String showReplyForDeleteTask(Task removedTask, TaskList tasks) {"},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\" + removedTask.toStringForGui() + \"\\nNow you have \""},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"                + tasks.getNumberOfTasks() + \" tasks in the list.\";"},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":"     * Formats the task list to be shown to the user."},{"lineNumber":75,"author":{"gitId":"shawn-nyk"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"shawn-nyk"},"content":"     * @param tasks The list of tasks to be shown."},{"lineNumber":77,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"shawn-nyk"},"content":"    public String showTaskList(TaskList tasks) {"},{"lineNumber":79,"author":{"gitId":"shawn-nyk"},"content":"        if (tasks.isEmpty()) {"},{"lineNumber":80,"author":{"gitId":"shawn-nyk"},"content":"            return EMPTY_LIST_MESSAGE;"},{"lineNumber":81,"author":{"gitId":"shawn-nyk"},"content":"        } else {"},{"lineNumber":82,"author":{"gitId":"shawn-nyk"},"content":"            return \"Here are the tasks in your list:\" + tasks.toStringForGui();"},{"lineNumber":83,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":86,"author":{"gitId":"shawn-nyk"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"shawn-nyk"},"content":"     * Formats the task list to be shown to the user."},{"lineNumber":88,"author":{"gitId":"shawn-nyk"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"shawn-nyk"},"content":"    public String showFoundTaskList(TaskList tasks, String keyWords) {"},{"lineNumber":90,"author":{"gitId":"shawn-nyk"},"content":"        if (tasks.isEmpty()) {"},{"lineNumber":91,"author":{"gitId":"shawn-nyk"},"content":"            return \"Sorry! No tasks were found with the word(s)\\n\\\"\" + keyWords + \"\\\".\";"},{"lineNumber":92,"author":{"gitId":"shawn-nyk"},"content":"        } else {"},{"lineNumber":93,"author":{"gitId":"shawn-nyk"},"content":"            return \"Here are the tasks in your list with the word(s)\\n\\\"\" + keyWords + \"\\\":\" + tasks.toStringForGui();"},{"lineNumber":94,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":96}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\""},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"               style\u003d\"-fx-background-color: #fcf7de; -fx-padding: 5 10 5 10; -fx-background-radius: 15; -fx-font-family: \u0027Courier New\u0027; -fx-font-weight: 600; -fx-font-size: 13px;\"/\u003e"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"        \u003cStackPane\u003e"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"            \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"70.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\""},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"                       preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"            \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"                \u003cInsets left\u003d\"12.0\" right\u003d\"12.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"            \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    \u003c/children\u003e"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    \u003cpadding\u003e"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"    \u003c/padding\u003e"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"shawn-nyk":25}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"            prefWidth\u003d\"550.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"            fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"    \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"458.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"474.0\""},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\""},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"                   style\u003d\"-fx-background-color: #002f3a; -fx-text-fill: #ffffff; -fx-font-family: \u0027Courier New\u0027; -fx-font-weight: 500; -fx-font-size: 15px;\"/\u003e"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"474.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"                onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\""},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"                style\u003d\"-fx-background-color: #f4c047; -fx-text-fill: #681824; -fx-font-family: \u0027Courier New\u0027; -fx-font-weight: 700; -fx-font-size: 15px;\"/\u003e"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"550.0\""},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"                    vvalue\u003d\"1.0\"\u003e"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"            \u003ccontent\u003e"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"538.0\""},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"                      style\u003d\"-fx-background-color: #262626;\"/\u003e"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"            \u003c/content\u003e"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"    \u003c/children\u003e"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"shawn-nyk":27}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.AddDeadlineCommand;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.AddEventCommand;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.AddTodoCommand;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.DoneCommand;"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.ExitCommand;"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.FindCommand;"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.ListCommand;"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.UnknownCommand;"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"import duke.exception.WrongFormatException;"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"public class ParserTest {"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validExitCommandByeAllLowerCase_exitCommandReturned() {"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"bye\") instanceof ExitCommand);"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validExitCommandByeAllUpperCase_exitCommandReturned() {"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"BYE\") instanceof ExitCommand);"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validExitCommandByeMixedCase_exitCommandReturned() {"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"ByE\") instanceof ExitCommand);"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validExitCommandBLowerCase_exitCommandReturned() {"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"b\") instanceof ExitCommand);"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validExitCommandBUpperCase_exitCommandReturned() {"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"B\") instanceof ExitCommand);"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidExitCommandTooManyArguments_unknownCommandReturned() {"},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"bye bye\") instanceof UnknownCommand);"},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validListCommandListAllLowerCase_listCommandReturned() {"},{"lineNumber":76,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":77,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"list\") instanceof ListCommand);"},{"lineNumber":78,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":79,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":80,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":83,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validListCommandListAllUpperCase_listCommandReturned() {"},{"lineNumber":85,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"LIST\") instanceof ListCommand);"},{"lineNumber":87,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":88,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":89,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":92,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validListCommandListMixedCase_listCommandReturned() {"},{"lineNumber":94,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"LisT\") instanceof ListCommand);"},{"lineNumber":96,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":97,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":98,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":101,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validListCommandLsAllLowerCase_listCommandReturned() {"},{"lineNumber":103,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":104,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"ls\") instanceof ListCommand);"},{"lineNumber":105,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":106,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":107,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":110,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validListCommandLsAllUpperCase_listCommandReturned() {"},{"lineNumber":112,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":113,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"LS\") instanceof ListCommand);"},{"lineNumber":114,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":115,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":116,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":119,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validListCommandLsMixedCase_listCommandReturned() {"},{"lineNumber":121,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":122,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"lS\") instanceof ListCommand);"},{"lineNumber":123,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":124,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":125,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":128,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validListCommandLLowerCase_listCommandReturned() {"},{"lineNumber":130,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":131,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"l\") instanceof ListCommand);"},{"lineNumber":132,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":133,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":134,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":137,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validListCommandLUpperCase_listCommandReturned() {"},{"lineNumber":139,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":140,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"L\") instanceof ListCommand);"},{"lineNumber":141,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":142,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":143,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":146,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":147,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidListCommandTooManyArguments_unknownCommandReturned() {"},{"lineNumber":148,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":149,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"list all\") instanceof UnknownCommand);"},{"lineNumber":150,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":151,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":152,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":155,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":156,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDoneCommandDoneAllLowerCase_doneCommandReturned() {"},{"lineNumber":157,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":158,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"done 2\") instanceof DoneCommand);"},{"lineNumber":159,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":160,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":161,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":164,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDoneCommandDoneAllUpperCase_doneCommandReturned() {"},{"lineNumber":166,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":167,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"DONE 1\") instanceof DoneCommand);"},{"lineNumber":168,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":169,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":170,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":173,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":174,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDoneCommandDoneMixedCase_doneCommandReturned() {"},{"lineNumber":175,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":176,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"Done 3\") instanceof DoneCommand);"},{"lineNumber":177,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":178,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":179,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":182,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":183,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDoneCommandDnAllLowerCase_doneCommandReturned() {"},{"lineNumber":184,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":185,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"dn 3\") instanceof DoneCommand);"},{"lineNumber":186,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":187,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":188,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":191,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":192,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDoneCommandDnAllUpperCase_doneCommandReturned() {"},{"lineNumber":193,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":194,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"DN 3\") instanceof DoneCommand);"},{"lineNumber":195,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":196,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":197,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":200,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":201,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDoneCommandDnMixedCase_doneCommandReturned() {"},{"lineNumber":202,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":203,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"dN 3\") instanceof DoneCommand);"},{"lineNumber":204,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":205,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":206,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":209,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":210,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDoneCommandExtraWhitespaces_wrongFormatExceptionThrown() {"},{"lineNumber":211,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":212,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"done    4\");"},{"lineNumber":213,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":214,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":215,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":216,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":219,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":220,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDoneCommandNoTaskIndex_wrongFormatExceptionThrown() {"},{"lineNumber":221,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":222,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"done\");"},{"lineNumber":223,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":224,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":225,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":226,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":229,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":230,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDoneCommandNoWhitespace_unknownCommandReturned() {"},{"lineNumber":231,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":232,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"done3\") instanceof UnknownCommand);"},{"lineNumber":233,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":234,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":235,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":236,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":238,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":239,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDeleteCommandDeleteAllLowerCase_deleteCommandReturned() {"},{"lineNumber":240,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":241,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"delete 1\") instanceof DeleteCommand);"},{"lineNumber":242,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":243,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":244,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":245,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":247,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":248,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDeleteCommandDeleteAllUpperCase_deleteCommandReturned() {"},{"lineNumber":249,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":250,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"DELETE 3\") instanceof DeleteCommand);"},{"lineNumber":251,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":252,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":253,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":254,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":255,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":256,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":257,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDeleteCommandDeleteMixedCase_deleteCommandReturned() {"},{"lineNumber":258,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":259,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"deletE 7\") instanceof DeleteCommand);"},{"lineNumber":260,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":261,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":262,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":263,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":265,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":266,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDeleteCommandDelAllLowerCase_deleteCommandReturned() {"},{"lineNumber":267,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":268,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"del 5\") instanceof DeleteCommand);"},{"lineNumber":269,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":270,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":271,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":272,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":273,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":274,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":275,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDeleteCommandDelAllUpperCase_deleteCommandReturned() {"},{"lineNumber":276,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":277,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"DEL 5\") instanceof DeleteCommand);"},{"lineNumber":278,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":279,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":280,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":281,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":282,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":283,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":284,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDeleteCommandDelMixedCase_deleteCommandReturned() {"},{"lineNumber":285,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":286,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"dEl 5\") instanceof DeleteCommand);"},{"lineNumber":287,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":288,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":289,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":290,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":291,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":292,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":293,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDeleteCommandExtraWhitespaces_wrongFormatExceptionThrown() {"},{"lineNumber":294,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":295,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"delete    4\");"},{"lineNumber":296,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":297,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":298,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":299,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":300,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":301,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":302,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":303,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDeleteCommandNoTaskIndex_wrongFormatExceptionThrown() {"},{"lineNumber":304,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":305,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"delete\");"},{"lineNumber":306,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":307,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":308,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":309,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":310,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":311,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":312,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":313,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDeleteCommandNoWhitespace_unknownCommandReturned() {"},{"lineNumber":314,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":315,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"delete3\") instanceof UnknownCommand);"},{"lineNumber":316,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":317,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":318,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":319,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":320,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":321,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":322,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validTodoCommandTodoAllLowerCase_addTodoCommandReturned() {"},{"lineNumber":323,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":324,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"todo read book\") instanceof AddTodoCommand);"},{"lineNumber":325,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":326,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":327,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":328,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":329,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":330,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":331,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validTodoCommandTodoAllUpperCase_addTodoCommandReturned() {"},{"lineNumber":332,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":333,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"TODO read book\") instanceof AddTodoCommand);"},{"lineNumber":334,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":335,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":336,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":337,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":338,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":339,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":340,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validTodoCommandTodoMixedCase_addTodoCommandReturned() {"},{"lineNumber":341,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":342,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"ToDo read book\") instanceof AddTodoCommand);"},{"lineNumber":343,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":344,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":345,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":346,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":347,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":348,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":349,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validTodoCommandTdAllLowerCase_addTodoCommandReturned() {"},{"lineNumber":350,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":351,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"td read book\") instanceof AddTodoCommand);"},{"lineNumber":352,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":353,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":354,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":355,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":356,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":357,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":358,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validTodoCommandTdAllUpperCase_addTodoCommandReturned() {"},{"lineNumber":359,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":360,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"TD read book\") instanceof AddTodoCommand);"},{"lineNumber":361,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":362,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":363,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":364,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":365,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":366,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":367,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validTodoCommandTdMixedCase_addTodoCommandReturned() {"},{"lineNumber":368,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":369,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"Td read book\") instanceof AddTodoCommand);"},{"lineNumber":370,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":371,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":372,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":373,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":374,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":375,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":376,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validTodoCommandTLowerCase_addTodoCommandReturned() {"},{"lineNumber":377,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":378,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"t read book\") instanceof AddTodoCommand);"},{"lineNumber":379,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":380,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":381,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":382,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":383,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":384,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":385,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validTodoCommandTUpperCase_addTodoCommandReturned() {"},{"lineNumber":386,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":387,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"T read book\") instanceof AddTodoCommand);"},{"lineNumber":388,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":389,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":390,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":391,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":392,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":393,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":394,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validTodoCommandExtraWhitespaces_addTodoCommandReturned() {"},{"lineNumber":395,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":396,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"todo     read book    \") instanceof AddTodoCommand);"},{"lineNumber":397,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":398,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":399,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":400,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":401,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":402,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":403,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidTodoCommandNoDescription_wrongFormatExceptionThrown() {"},{"lineNumber":404,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":405,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"todo\");"},{"lineNumber":406,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":407,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":408,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":409,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":410,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":411,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":412,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":413,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidTodoCommandDescriptionIsWhitespace_wrongFormatExceptionThrown() {"},{"lineNumber":414,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":415,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"todo      \");"},{"lineNumber":416,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":417,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":418,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":419,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":420,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":421,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":422,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":423,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidTodoCommandNoWhitespaceAfterTodo_unknownCommandReturned() {"},{"lineNumber":424,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":425,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"todoread book\") instanceof UnknownCommand);"},{"lineNumber":426,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":427,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":428,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":429,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":430,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":431,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":432,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidTodoCommandNoWhitespaceAfterTd_unknownCommandReturned() {"},{"lineNumber":433,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":434,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"tdread book\") instanceof UnknownCommand);"},{"lineNumber":435,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":436,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":437,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":438,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":439,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":440,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":441,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidTodoCommandNoWhitespaceAfterT_unknownCommandReturned() {"},{"lineNumber":442,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":443,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"tread book\") instanceof UnknownCommand);"},{"lineNumber":444,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":445,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":446,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":447,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":448,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":449,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":450,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validEventCommandEventAllLowerCase_addEventCommandReturned() {"},{"lineNumber":451,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":452,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"event this /at there\") instanceof AddEventCommand);"},{"lineNumber":453,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":454,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":455,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":456,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":457,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":458,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":459,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validEventCommandEventAllUpperCase_addEventCommandReturned() {"},{"lineNumber":460,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":461,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"EVENT this /at there\") instanceof AddEventCommand);"},{"lineNumber":462,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":463,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":464,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":465,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":466,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":467,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":468,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validEventCommandEventMixedCase_addEventCommandReturned() {"},{"lineNumber":469,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":470,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"EVENt this /at there\") instanceof AddEventCommand);"},{"lineNumber":471,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":472,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":473,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":474,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":475,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":476,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":477,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validEventCommandEvAllLowerCase_addEventCommandReturned() {"},{"lineNumber":478,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":479,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"ev this /at there\") instanceof AddEventCommand);"},{"lineNumber":480,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":481,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":482,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":483,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":484,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":485,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":486,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validEventCommandEvAllUpperCase_addEventCommandReturned() {"},{"lineNumber":487,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":488,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"EV this /at there\") instanceof AddEventCommand);"},{"lineNumber":489,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":490,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":491,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":492,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":493,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":494,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":495,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validEventCommandEvMixedCase_addEventCommandReturned() {"},{"lineNumber":496,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":497,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"eV this /at there\") instanceof AddEventCommand);"},{"lineNumber":498,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":499,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":500,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":501,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":502,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":503,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":504,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validEventCommandELowerCase_addEventCommandReturned() {"},{"lineNumber":505,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":506,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"e this /at there\") instanceof AddEventCommand);"},{"lineNumber":507,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":508,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":509,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":510,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":511,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":512,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":513,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validEventCommandEUpperCase_addEventCommandReturned() {"},{"lineNumber":514,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":515,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"E this /at there\") instanceof AddEventCommand);"},{"lineNumber":516,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":517,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":518,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":519,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":520,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":521,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":522,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validEventCommandExtraWhitespaces_addEventCommandReturned() {"},{"lineNumber":523,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":524,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"event    this     /at    there\") instanceof AddEventCommand);"},{"lineNumber":525,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":526,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":527,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":528,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":529,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":530,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":531,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validEventCommandNoWhitespacesAroundDelimiter_addEventCommandReturned() {"},{"lineNumber":532,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":533,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"event this/atthere\") instanceof AddEventCommand);"},{"lineNumber":534,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":535,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":536,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":537,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":538,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":539,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":540,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidEventCommandNoDescription_wrongFormatExceptionThrown() {"},{"lineNumber":541,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":542,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"event\") instanceof AddEventCommand);"},{"lineNumber":543,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":544,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":545,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":546,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":547,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":548,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":549,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":550,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidEventCommandDescriptionNoDelimiter_wrongFormatExceptionThrown() {"},{"lineNumber":551,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":552,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"event this there\");"},{"lineNumber":553,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":554,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":555,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":556,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":557,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":558,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":559,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":560,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidEventCommandDescriptionWrongDelimiter_wrongFormatExceptionThrown() {"},{"lineNumber":561,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":562,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"event this /by there\") instanceof AddEventCommand);"},{"lineNumber":563,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":564,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":565,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":566,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":567,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":568,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":569,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":570,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidEventCommandDescriptionNoLocation_wrongFormatExceptionThrown() {"},{"lineNumber":571,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":572,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"event this /at\");"},{"lineNumber":573,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":574,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":575,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":576,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":577,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":578,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":579,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":580,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidEventCommandDescriptionNoTask_wrongFormatExceptionThrown() {"},{"lineNumber":581,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":582,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"event /at there\");"},{"lineNumber":583,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":584,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":585,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":586,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":587,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":588,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":589,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":590,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidEventCommandNoWhitespaceAfterEvent_unknownCommandReturned() {"},{"lineNumber":591,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":592,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"eventthis /at there\") instanceof UnknownCommand);"},{"lineNumber":593,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":594,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":595,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":596,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":597,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":598,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":599,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidEventCommandNoWhitespaceAfterEv_unknownCommandReturned() {"},{"lineNumber":600,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":601,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"evthis /at there\") instanceof UnknownCommand);"},{"lineNumber":602,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":603,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":604,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":605,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":606,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":607,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":608,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidEventCommandNoWhitespaceAfterE_unknownCommandReturned() {"},{"lineNumber":609,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":610,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"ethis /at there\") instanceof UnknownCommand);"},{"lineNumber":611,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":612,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":613,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":614,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":615,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":616,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":617,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDeadlineCommandDeadlineAllLowerCase_addDeadlineCommandReturned() {"},{"lineNumber":618,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":619,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"deadline this /by 2020-10-21 1345\") instanceof AddDeadlineCommand);"},{"lineNumber":620,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":621,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":622,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":623,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":624,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":625,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":626,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDeadlineCommandDeadlineAllUpperCase_addDeadlineCommandReturned() {"},{"lineNumber":627,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":628,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"DEADLINE this /by 2020-10-21 1345\") instanceof AddDeadlineCommand);"},{"lineNumber":629,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":630,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":631,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":632,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":633,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":634,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":635,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDeadlineCommandDeadlineMixedCase_addDeadlineCommandReturned() {"},{"lineNumber":636,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":637,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"dEaDlInE this /by 2020-10-21 1345\") instanceof AddDeadlineCommand);"},{"lineNumber":638,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":639,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":640,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":641,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":642,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":643,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":644,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDeadlineCommandDLowerCase_addDeadlineCommandReturned() {"},{"lineNumber":645,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":646,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"d this /by 2020-10-21 1345\") instanceof AddDeadlineCommand);"},{"lineNumber":647,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":648,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":649,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":650,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":651,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":652,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":653,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDeadlineCommandDUpperCase_addDeadlineCommandReturned() {"},{"lineNumber":654,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":655,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"D this /by 2020-10-21 1345\") instanceof AddDeadlineCommand);"},{"lineNumber":656,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":657,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":658,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":659,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":660,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":661,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":662,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDeadlineCommandExtraWhitespaces_addDeadlineCommandReturned() {"},{"lineNumber":663,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":664,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"deadline    this     /by    2020-10-21 1345\")"},{"lineNumber":665,"author":{"gitId":"shawn-nyk"},"content":"                    instanceof AddDeadlineCommand);"},{"lineNumber":666,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":667,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":668,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":669,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":670,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":671,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":672,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validDeadlineCommandNoWhitespacesAroundDelimiter_addDeadlineCommandReturned() {"},{"lineNumber":673,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":674,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"deadline this/by2020-10-21 1345\") instanceof AddDeadlineCommand);"},{"lineNumber":675,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":676,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":677,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":678,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":679,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":680,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":681,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDeadlineCommandExtraWhitespacesInDeadline_wrongFormatExceptionThrown() {"},{"lineNumber":682,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":683,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"deadline this /by 2020-10-21     1345\");"},{"lineNumber":684,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":685,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":686,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":687,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":688,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":689,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":690,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":691,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDeadlineCommandNoWhitespaceInDeadline_wrongFormatExceptionThrown() {"},{"lineNumber":692,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":693,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"deadline this /by 2020-10-211345\");"},{"lineNumber":694,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":695,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":696,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":697,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":698,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":699,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":700,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":701,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDeadlineCommandInvalidDate_wrongFormatExceptionThrown() {"},{"lineNumber":702,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":703,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"deadline this /by 2020-13-21 1345\");"},{"lineNumber":704,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":705,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":706,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":707,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":708,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":709,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":710,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":711,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDeadlineCommandInvalidTime_wrongFormatExceptionThrown() {"},{"lineNumber":712,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":713,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"deadline this /by 2020-13-21 1365\");"},{"lineNumber":714,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":715,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":716,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":717,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":718,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":719,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":720,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":721,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDeadlineCommandNoDescription_wrongFormatExceptionThrown() {"},{"lineNumber":722,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":723,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"deadline\");"},{"lineNumber":724,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":725,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":726,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":727,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":728,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":729,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":730,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":731,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDeadlineCommandDescriptionNoDelimiter_wrongFormatExceptionThrown() {"},{"lineNumber":732,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":733,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"deadline this 2020-10-21 1345\");"},{"lineNumber":734,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":735,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":736,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":737,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":738,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":739,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":740,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":741,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDeadlineCommandDescriptionWrongDelimiter_wrongFormatExceptionThrown() {"},{"lineNumber":742,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":743,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"deadline this /at 2020-10-21 1345\");"},{"lineNumber":744,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":745,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":746,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":747,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":748,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":749,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":750,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":751,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDeadlineCommandDescriptionNoDeadline_wrongFormatExceptionThrown() {"},{"lineNumber":752,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":753,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"deadline this /by\");"},{"lineNumber":754,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":755,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":756,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":757,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":758,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":759,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":760,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":761,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDeadlineCommandDescriptionNoTask_wrongFormatExceptionThrown() {"},{"lineNumber":762,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":763,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"deadline /by 2020-10-21 1345\");"},{"lineNumber":764,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":765,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":766,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":767,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":768,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":769,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":770,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":771,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDeadlineCommandNoWhitespaceAfterDeadline_unknownCommandReturned() {"},{"lineNumber":772,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":773,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"deadlinethis /by 2020-10-21 1345\") instanceof UnknownCommand);"},{"lineNumber":774,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":775,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":776,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":777,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":778,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":779,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":780,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidDeadlineCommandNoWhitespaceAfterD_unknownCommandReturned() {"},{"lineNumber":781,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":782,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"dthis /by 2020-10-21 1345\") instanceof UnknownCommand);"},{"lineNumber":783,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":784,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":785,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":786,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":787,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":788,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":789,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validFindCommandFindAllLowerCase_findCommandReturned() {"},{"lineNumber":790,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":791,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"find homework\") instanceof FindCommand);"},{"lineNumber":792,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":793,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":794,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":795,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":796,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":797,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":798,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validFindCommandFindAllUpperCase_findCommandReturned() {"},{"lineNumber":799,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":800,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"FIND homework\") instanceof FindCommand);"},{"lineNumber":801,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":802,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":803,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":804,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":805,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":806,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":807,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_validFindCommandFindMixedCase_findCommandReturned() {"},{"lineNumber":808,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":809,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"fINd homework\") instanceof FindCommand);"},{"lineNumber":810,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":811,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":812,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":813,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":814,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":815,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":816,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidFindCommandNoWhitespace_unknownCommandReturned() {"},{"lineNumber":817,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":818,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"findhomework\") instanceof UnknownCommand);"},{"lineNumber":819,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":820,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":821,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":822,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":823,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":824,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":825,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidFindCommandNoDescription_wrongFormatExceptionThrown() {"},{"lineNumber":826,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":827,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"find\");"},{"lineNumber":828,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":829,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":830,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":831,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":832,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":833,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":834,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":835,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_invalidFindCommandDescriptionIsWhitespace_wrongFormatExceptionThrown() {"},{"lineNumber":836,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":837,"author":{"gitId":"shawn-nyk"},"content":"            Parser.parse(\"find            \");"},{"lineNumber":838,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":839,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":840,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":841,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":842,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":843,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":844,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":845,"author":{"gitId":"shawn-nyk"},"content":"    public void parse_unknownCommand_unknownCommandReturned() {"},{"lineNumber":846,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":847,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(Parser.parse(\"foo\") instanceof UnknownCommand);"},{"lineNumber":848,"author":{"gitId":"shawn-nyk"},"content":"        } catch (WrongFormatException e) {"},{"lineNumber":849,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":850,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":851,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":852,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":852}},{"path":"src/test/java/duke/ResponseTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import duke.command.Command;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"import duke.ui.UiForGui;"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"class ResponseTest {"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"    private class CommandStub extends Command {"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"        public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"        public String execute(TaskList tasks, UiForGui uiForGui, Storage storage) {"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"            return \"method is working\";"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    void getCommand() {"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"        CommandStub commandStub \u003d new CommandStub();"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"        String responseString \u003d \"method is working\";"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"        Response response \u003d new Response(responseString, commandStub);"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(response.getCommand(), commandStub);"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"    void getResponseString() {"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"        CommandStub commandStub \u003d new CommandStub();"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"        String responseString \u003d \"method is working\";"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"        Response response \u003d new Response(responseString, commandStub);"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(response.getResponseString(), responseString);"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":36}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.Event;"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"import duke.task.ToDo;"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"class TaskListTest {"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"    private static final ToDo TODO \u003d new ToDo(\"finish paperwork\");"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"    private static final List\u003cString\u003e LIST_OF_STRING_TASKS \u003d new ArrayList\u003c\u003e(List.of(\"[E]|0|Christmas party|my house\","},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"            \"[T]|1|clean my room\"));"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    void getTask() {"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"        TaskList taskList \u003d new TaskList(LIST_OF_STRING_TASKS);"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"        assertTrue(taskList.getTask(0) instanceof Event);"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"        assertTrue(taskList.getTask(1) instanceof ToDo);"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    void getNumberOfTasks() {"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"        TaskList taskList \u003d new TaskList(LIST_OF_STRING_TASKS);"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(2, taskList.getNumberOfTasks());"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"    void isEmpty() {"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"        TaskList taskListEmpty \u003d new TaskList();"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"        TaskList taskListNotEmpty \u003d new TaskList(LIST_OF_STRING_TASKS);"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"        assertTrue(taskListEmpty.isEmpty());"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"        assertFalse(taskListNotEmpty.isEmpty());"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":41}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"public class DeadlineTest {"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"    public void newDeadline_validArguments_deadlineObjectReturned() {"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"            LocalDate deadlineDate \u003d LocalDate.parse(\"2020-05-18\");"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"            LocalDateTime deadlineDateAndTime \u003d deadlineDate.atTime(21, 17);"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"            new Deadline(\"homework\", deadlineDate, deadlineDateAndTime);"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"        } catch (Exception e) {"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"    public void newDeadline_validArgumentsWithIsDoneSet_deadlineObjectReturned() {"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"            LocalDate deadlineDate \u003d LocalDate.parse(\"2020-05-18\");"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"            LocalDateTime deadlineDateAndTime \u003d deadlineDate.atTime(21, 17);"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"            new Deadline(\"homework\", deadlineDate, deadlineDateAndTime, true);"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"        } catch (Exception e) {"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForMemory_taskNotDone() {"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"        LocalDate deadlineDate \u003d LocalDate.parse(\"2020-05-18\");"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"        LocalDateTime deadlineDateAndTime \u003d deadlineDate.atTime(21, 17);"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"        Deadline deadline \u003d new Deadline(\"homework\", deadlineDate, deadlineDateAndTime);"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[D]|0|homework|2020-05-18T21:17:00\", deadline.toStringForMemory());"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForMemory_taskDone() {"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"        LocalDate deadlineDate \u003d LocalDate.parse(\"2020-05-18\");"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"        LocalDateTime deadlineDateAndTime \u003d deadlineDate.atTime(21, 17);"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"        Deadline deadline \u003d new Deadline(\"homework\", deadlineDate, deadlineDateAndTime, true);"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[D]|1|homework|2020-05-18T21:17:00\", deadline.toStringForMemory());"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForGui_taskNotDone() {"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"        LocalDate deadlineDate \u003d LocalDate.parse(\"2020-05-18\");"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"        LocalDateTime deadlineDateAndTime \u003d deadlineDate.atTime(21, 17);"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"        Deadline deadline \u003d new Deadline(\"homework\", deadlineDate, deadlineDateAndTime);"},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[D][\\u2718] homework (by: 18 May 2020 @ 09:17pm)\", deadline.toStringForGui());"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForGui_taskDone() {"},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"        LocalDate deadlineDate \u003d LocalDate.parse(\"2020-05-18\");"},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"        LocalDateTime deadlineDateAndTime \u003d deadlineDate.atTime(21, 17);"},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"        Deadline deadline \u003d new Deadline(\"homework\", deadlineDate, deadlineDateAndTime, true);"},{"lineNumber":67,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[D][\\u2713] homework (by: 18 May 2020 @ 09:17pm)\", deadline.toStringForGui());"},{"lineNumber":68,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":70,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForCli_taskNotDone() {"},{"lineNumber":72,"author":{"gitId":"shawn-nyk"},"content":"        LocalDate deadlineDate \u003d LocalDate.parse(\"2020-05-18\");"},{"lineNumber":73,"author":{"gitId":"shawn-nyk"},"content":"        LocalDateTime deadlineDateAndTime \u003d deadlineDate.atTime(21, 17);"},{"lineNumber":74,"author":{"gitId":"shawn-nyk"},"content":"        Deadline deadline \u003d new Deadline(\"homework\", deadlineDate, deadlineDateAndTime);"},{"lineNumber":75,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[D][✘] homework (by: 18 May 2020 @ 09:17pm)\", deadline.toStringForCli());"},{"lineNumber":76,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":78,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForCli_taskDone() {"},{"lineNumber":80,"author":{"gitId":"shawn-nyk"},"content":"        LocalDate deadlineDate \u003d LocalDate.parse(\"2020-05-18\");"},{"lineNumber":81,"author":{"gitId":"shawn-nyk"},"content":"        LocalDateTime deadlineDateAndTime \u003d deadlineDate.atTime(21, 17);"},{"lineNumber":82,"author":{"gitId":"shawn-nyk"},"content":"        Deadline deadline \u003d new Deadline(\"homework\", deadlineDate, deadlineDateAndTime, true);"},{"lineNumber":83,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[D][✓] homework (by: 18 May 2020 @ 09:17pm)\", deadline.toStringForCli());"},{"lineNumber":84,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":85}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"public class EventTest {"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"    public void newEvent_validArguments_eventObjectReturned() {"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"            new Event(\"meeting\", \"NUS\");"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"        } catch (Exception e) {"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    public void newEvent_validArgumentsWithIsDoneSet_eventObjectReturned() {"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"            new Event(\"meeting\", \"NUS\", true);"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"        } catch (Exception e) {"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForMemory_taskNotDone() {"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"        Event event \u003d new Event(\"meeting\", \"NUS\");"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[E]|0|meeting|NUS\", event.toStringForMemory());"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForMemory_taskDone() {"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"        Event event \u003d new Event(\"meeting\", \"NUS\", true);"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[E]|1|meeting|NUS\", event.toStringForMemory());"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForGui_taskNotDone() {"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"        Event event \u003d new Event(\"meeting\", \"NUS\");"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[E][\\u2718] meeting (at: NUS)\", event.toStringForGui());"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForGui_taskDone() {"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"        Event event \u003d new Event(\"meeting\", \"NUS\", true);"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[E][\\u2713] meeting (at: NUS)\", event.toStringForGui());"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForCli_taskNotDone() {"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"        Event event \u003d new Event(\"meeting\", \"NUS\");"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[E][✘] meeting (at: NUS)\", event.toStringForCli());"},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForCli_taskDone() {"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"        Event event \u003d new Event(\"meeting\", \"NUS\", true);"},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[E][✓] meeting (at: NUS)\", event.toStringForCli());"},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":66}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"public class TaskTest {"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"    public void newTask_validInput_taskObjectReturned() {"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"            Task task \u003d new Task(\"meeting\", \" (at: NUS)\", \"|NUS\", \"[E]\", \"event\", false);"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"        } catch (Exception e) {"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    public void setDone() {"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"        Task task \u003d new Task(\"meeting\", \" (at: NUS)\", \"|NUS\", \"[E]\", \"event\", false);"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"        task.setDone(true);"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[E]|1|meeting|NUS\", task.toStringForMemory());"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForMemory_taskNotDone() {"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"        Task task \u003d new Task(\"meeting\", \" (at: NUS)\", \"|NUS\", \"[E]\", \"event\", false);"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[E]|0|meeting|NUS\", task.toStringForMemory());"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForMemory_taskDone() {"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"        Task task \u003d new Task(\"meeting\", \" (at: NUS)\", \"|NUS\", \"[E]\", \"event\", true);"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[E]|1|meeting|NUS\", task.toStringForMemory());"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForGui_taskNotDone() {"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"        Task task \u003d new Task(\"meeting\", \" (at: NUS)\", \"|NUS\", \"[E]\", \"event\", false);"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[E][\\u2718] meeting (at: NUS)\", task.toStringForGui());"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForGui_taskDone() {"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"        Task task \u003d new Task(\"meeting\", \" (at: NUS)\", \"|NUS\", \"[E]\", \"event\", true);"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[E][\\u2713] meeting (at: NUS)\", task.toStringForGui());"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForCli_taskNotDone() {"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"        Task task \u003d new Task(\"meeting\", \" (at: NUS)\", \"|NUS\", \"[E]\", \"event\", false);"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[E][✘] meeting (at: NUS)\", task.toStringForCli());"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForCli_taskDone() {"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"        Task task \u003d new Task(\"meeting\", \" (at: NUS)\", \"|NUS\", \"[E]\", \"event\", true);"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[E][✓] meeting (at: NUS)\", task.toStringForCli());"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":63}},{"path":"src/test/java/duke/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"public class ToDoTest {"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"    public void newToDo_validArguments_toDoObjectReturned() {"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"            new ToDo(\"read book\");"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"        } catch (Exception e) {"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"    public void newToDo_validArgumentsWithIsDoneSet_toDoObjectReturned() {"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"            new ToDo(\"read book\", true);"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"            assertTrue(true);"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"        } catch (Exception e) {"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"            fail();"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForMemory_taskNotDone() {"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"        ToDo todo \u003d new ToDo(\"read book\");"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[T]|0|read book\", todo.toStringForMemory());"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForMemory_taskDone() {"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"        ToDo todo \u003d new ToDo(\"read book\", true);"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[T]|1|read book\", todo.toStringForMemory());"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForGui_taskNotDone() {"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"        ToDo todo \u003d new ToDo(\"read book\");"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[T][\\u2718] read book\", todo.toStringForGui());"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForGui_taskDone() {"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"        ToDo todo \u003d new ToDo(\"read book\", true);"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[T][\\u2713] read book\", todo.toStringForGui());"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForCli_taskNotDone() {"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"        ToDo todo \u003d new ToDo(\"read book\");"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[T][✘] read book\", todo.toStringForCli());"},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"    public void toStringForCli_taskDone() {"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"        ToDo todo \u003d new ToDo(\"read book\", true);"},{"lineNumber":64,"author":{"gitId":"shawn-nyk"},"content":"        assertEquals(\"[T][✓] read book\", todo.toStringForCli());"},{"lineNumber":65,"author":{"gitId":"shawn-nyk"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"shawn-nyk"},"content":"}"}],"authorContributionMap":{"shawn-nyk":66}},{"path":"text-ui-test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"[T]|0|first task"}],"authorContributionMap":{"shawn-nyk":1}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shawn-nyk"},"content":"delete 1"},{"lineNumber":2,"author":{"gitId":"shawn-nyk"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"shawn-nyk"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"shawn-nyk"},"content":"done 1"},{"lineNumber":5,"author":{"gitId":"shawn-nyk"},"content":"list"},{"lineNumber":6,"author":{"gitId":"shawn-nyk"},"content":"todo join sports club"},{"lineNumber":7,"author":{"gitId":"shawn-nyk"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"shawn-nyk"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"shawn-nyk"},"content":"list"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"shawn-nyk"},"content":"list"},{"lineNumber":12,"author":{"gitId":"shawn-nyk"},"content":"todo"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"blah"},{"lineNumber":14,"author":{"gitId":"shawn-nyk"},"content":"todooo"},{"lineNumber":15,"author":{"gitId":"shawn-nyk"},"content":"event"},{"lineNumber":16,"author":{"gitId":"shawn-nyk"},"content":"event disco"},{"lineNumber":17,"author":{"gitId":"shawn-nyk"},"content":"event /at"},{"lineNumber":18,"author":{"gitId":"shawn-nyk"},"content":"event disco /at"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"event /at Orchard Rd"},{"lineNumber":20,"author":{"gitId":"shawn-nyk"},"content":"event disco /at Orchard Rd"},{"lineNumber":21,"author":{"gitId":"shawn-nyk"},"content":"deadline"},{"lineNumber":22,"author":{"gitId":"shawn-nyk"},"content":"deadline homework"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":"deadline /by"},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"deadline homework /by"},{"lineNumber":25,"author":{"gitId":"shawn-nyk"},"content":"deadline /by tomorrow"},{"lineNumber":26,"author":{"gitId":"shawn-nyk"},"content":"deadline homework /by tomorrow"},{"lineNumber":27,"author":{"gitId":"shawn-nyk"},"content":"deadline homework /by 2020-8-23 2359"},{"lineNumber":28,"author":{"gitId":"shawn-nyk"},"content":"deadline homework /by 2020-08-23 1370"},{"lineNumber":29,"author":{"gitId":"shawn-nyk"},"content":"deadline homework /by 23 Aug 2020 2359"},{"lineNumber":30,"author":{"gitId":"shawn-nyk"},"content":"deadline homework /by 2020-08-23 2359"},{"lineNumber":31,"author":{"gitId":"shawn-nyk"},"content":"list"},{"lineNumber":32,"author":{"gitId":"shawn-nyk"},"content":"done 99"},{"lineNumber":33,"author":{"gitId":"shawn-nyk"},"content":"done 3"},{"lineNumber":34,"author":{"gitId":"shawn-nyk"},"content":"delete 5"},{"lineNumber":35,"author":{"gitId":"shawn-nyk"},"content":"delete 21"},{"lineNumber":36,"author":{"gitId":"shawn-nyk"},"content":"list"},{"lineNumber":37,"author":{"gitId":"shawn-nyk"},"content":"delete 1"},{"lineNumber":38,"author":{"gitId":"shawn-nyk"},"content":"delete 1"},{"lineNumber":39,"author":{"gitId":"shawn-nyk"},"content":"delete 1"},{"lineNumber":40,"author":{"gitId":"shawn-nyk"},"content":"delete 1"},{"lineNumber":41,"author":{"gitId":"shawn-nyk"},"content":"delete 1"},{"lineNumber":42,"author":{"gitId":"shawn-nyk"},"content":"delete 1"},{"lineNumber":43,"author":{"gitId":"shawn-nyk"},"content":"list"},{"lineNumber":44,"author":{"gitId":"shawn-nyk"},"content":"deadline buy presents /by 2020-12-24 2359"},{"lineNumber":45,"author":{"gitId":"shawn-nyk"},"content":"todo deck the halls"},{"lineNumber":46,"author":{"gitId":"shawn-nyk"},"content":"todo dress presentably"},{"lineNumber":47,"author":{"gitId":"shawn-nyk"},"content":"event Christmas party /at home"},{"lineNumber":48,"author":{"gitId":"shawn-nyk"},"content":"event give presents /at Christmas party"},{"lineNumber":49,"author":{"gitId":"shawn-nyk"},"content":"deadline homework /by 2020-10-17 1330"},{"lineNumber":50,"author":{"gitId":"shawn-nyk"},"content":"find"},{"lineNumber":51,"author":{"gitId":"shawn-nyk"},"content":"find mistletoe"},{"lineNumber":52,"author":{"gitId":"shawn-nyk"},"content":"find present"},{"lineNumber":53,"author":{"gitId":"shawn-nyk"},"content":"find presents"},{"lineNumber":54,"author":{"gitId":"shawn-nyk"},"content":"find give presents"},{"lineNumber":55,"author":{"gitId":"shawn-nyk"},"content":"find home"},{"lineNumber":56,"author":{"gitId":"shawn-nyk"},"content":"delete 5"},{"lineNumber":57,"author":{"gitId":"shawn-nyk"},"content":"delete 3"},{"lineNumber":58,"author":{"gitId":"shawn-nyk"},"content":"delete 1"},{"lineNumber":59,"author":{"gitId":"shawn-nyk"},"content":"delete 2"},{"lineNumber":60,"author":{"gitId":"shawn-nyk"},"content":"delete 1"},{"lineNumber":61,"author":{"gitId":"shawn-nyk"},"content":"delete 1"},{"lineNumber":62,"author":{"gitId":"shawn-nyk"},"content":"todo first task"},{"lineNumber":63,"author":{"gitId":"shawn-nyk"},"content":"bye"}],"authorContributionMap":{"shawn-nyk":63}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"shawn-nyk"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Command\\*.java ..\\src\\main\\java\\duke\\Exception\\*.java ..\\src\\main\\java\\duke\\Task\\*.java ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"shawn-nyk"},"content":"    PAUSE"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"shawn-nyk"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":23,"author":{"gitId":"shawn-nyk"},"content":""},{"lineNumber":24,"author":{"gitId":"shawn-nyk"},"content":"PAUSE"}],"authorContributionMap":{"-":19,"shawn-nyk":5}}]
