[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 17,
      "-": 44
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** Deadline of the task in String type. */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    protected String originalBy;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** Deadline of the task in LocalDateTime type. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Constructs new Deadline object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param description Description of the Deadline task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param by Deadline of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws DukeException If Deadline task format is invalid."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            this.originalBy \u003d by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            this.by \u003d Parser.getLocalDateTimeBy(by);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new DukeException(\"invalidDeadlineDateTime\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String strBy \u003d Parser.getStringBy(by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String day \u003d Parser.getDay(by);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + day + \", \" + strBy + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns the Deadline task string to be written to the duke.txt storage file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Deadline task string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return \"[D]\" + super.toStorageString() + \" (by: \" + this.originalBy + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 42
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** Object dealing with loading/saving tasks. */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** Object containing the list of tasks. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Constructs new Duke object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param filePath Destination path of the duke.txt storage file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Runs the Duke application with the basic logic."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param command User command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String run(String command) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String action \u003d Parser.getAction(command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            response \u003d tasks.printList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            response \u003d tasks.markDone(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            response \u003d tasks.createToDo(command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            response \u003d tasks.createDeadline(command);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            response \u003d tasks.createEvent(command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            response \u003d tasks.delete(command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            response \u003d tasks.find(command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            response \u003d tasks.getDefaultError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        storage.save(tasks.getTasks());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Retrieves the opening lines of Duke."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Opening lines when user starts the application."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String getOpening() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return Ui.opening();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Retrieves the closing lines of Duke."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Closing lines when user ends the application."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String getClosing() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return Ui.closing();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Retrieves Duke\u0027s response via a wrapper method."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param input User command."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Duke response."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this.run(input);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 80,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** Error message of the Exception to be printed. */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final String errorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Constructs new Exception object based on error type."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param errorType Description of error."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DukeException(String errorType) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        switch (errorType) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"emptyList\":"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            message \u003d \"You don\u0027t have any tasks currently!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"invalidCommand\":"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            message \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"invalidDone\":"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            message \u003d \"OOPS!! Please indicate existing task numbers separated by commas!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"invalidTodo\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            message \u003d \"OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"invalidDeadlineTask\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            message \u003d \"OOPS!!! The deadline task is formatted wrongly.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"invalidDeadlineDateTime\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            message \u003d \"OOPS!!! The deadline datetime should be in a valid \u0027YYYY-MM-DD HH:MM\u0027 format.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"invalidEventChronology\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            message \u003d \"OOPS!!! The event end time should be after start time.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"invalidEvent\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            message \u003d \"OOPS!!! The event task is formatted wrongly.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"invalidEventDateTime\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            message \u003d \"OOPS!!! The event datetime should be in a valid \u0027YYYY-MM-DD HH:MM to YYYY-MM-DD HH:MM\u0027 format.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"invalidDelete\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            message \u003d \"OOPS!!! Please indicate existing task numbers separated by commas!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"invalidFind\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            message \u003d \"OOPS!!! You cannot find tasks with no keywords!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case \"noMatchingTasks\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            message \u003d \"OOPS!! I couldn\u0027t find any tasks matching your keyword!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            message \u003d \"Unknown error. Contact the developer NOW!.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.errorMessage \u003d message;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Prints out the error message of the Exception."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Error message."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String print() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 63
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** Time duration of Event. */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** Start datetime of the Event. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    protected LocalDateTime start;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** End datetime of the Event. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    protected LocalDateTime end;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Constructs new Event object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param description Description of the Event task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param at Duration of the Event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws DukeException If Event task format is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Event(String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            this.at \u003d at;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            LocalDateTime localStart \u003d Parser.getLocalDateTimeStart(at);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            LocalDateTime localEnd \u003d Parser.getLocalDateTimeEnd(at);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            if (localEnd.isAfter(localStart)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                this.start \u003d localStart;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                this.end \u003d localEnd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                throw new DukeException(\"invalidEventChronology\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new DukeException(\"invalidEventDateTime\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String strStart \u003d Parser.getStringStart(start);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String strEnd \u003d Parser.getStringEnd(end);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String startDay \u003d Parser.getStartDay(start);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String endDay \u003d Parser.getEndDay(end);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + startDay + \", \" + strStart + \" to \" + endDay + \", \" + strEnd + \")\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns the Event task string to be written to the duke.txt storage file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Event task string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return \"[E]\" + super.toStorageString() + \" (at: \" + this.at + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 57
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Launches Duke and works around classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Sets up a GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** The Duke object to be set up. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final Duke duke \u003d new Duke(Storage.getFilePath());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Configures and displays the GUI for Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param stage JavaFX Stage object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 34
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.concurrent.CompletableFuture;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/whip.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/cryLaugh.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Initialises Duke and displays the opening message from Duke."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param d Duke object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                DialogBox.getDukeDialog(duke.getOpening(), dukeImage)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Creates two dialog boxes by default, one echoing user input and the other containing Duke\u0027s reply"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * and then appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Displays a closing message before closing the application if user inputs \u0027bye\u0027."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    DialogBox.getDukeDialog(duke.getClosing(), dukeImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            CompletableFuture.runAsync(() -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    Thread.sleep(1000);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            }).thenRun(Platform::exit);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 76
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Gets the relevant task id from command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param command User command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Id of the task to be modified/deleted."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static Integer[] getTaskIds(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String idString \u003d command.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String[] ids \u003d idString.split(\",\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return Arrays.stream(ids)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                     .map(x -\u003e Integer.parseInt(x) - 1)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                     .sorted(Comparator.reverseOrder())"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                     .toArray(Integer[]::new);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses the string representation of a task to its Task type."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param taskString line in duke.txt file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Task to be included in task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws DukeException If Deadline/Event tasks cannot be created."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static Task getTask(String taskString) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        char taskType \u003d taskString.charAt(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assert taskType \u003d\u003d \u0027T\u0027 || taskType \u003d\u003d \u0027D\u0027 || taskType \u003d\u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        char completionStatus \u003d taskString.charAt(4);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assert completionStatus \u003d\u003d \u00270\u0027 || completionStatus \u003d\u003d \u00271\u0027;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        boolean isTaskDone \u003d completionStatus \u003d\u003d \u00271\u0027;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Task result;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (taskType \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            String taskDesc \u003d taskString.substring(7);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            result \u003d new ToDo(taskDesc);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            String[] strArr \u003d taskString.split(taskType \u003d\u003d \u0027D\u0027 ? \" \\\\(by: \" : \" \\\\(at: \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            String taskDesc \u003d strArr[0].substring(7);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            String time \u003d strArr[1].substring(0, strArr[1].length() - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            result \u003d taskType \u003d\u003d \u0027D\u0027 ? new Deadline(taskDesc, time) : new Event(taskDesc, time);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (isTaskDone) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            result.markAsDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Gets the action keyword of user command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param command User command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Action keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getAction(String command) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String[] commandList \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return commandList[0].toLowerCase();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Gets the details for the creation of tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param command User command."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Details of the task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getDetail(String command) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String[] commandList \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return commandList[1];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Gets the description for the creation of a deadline task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param command User command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Deadline task description."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getDeadlineDesc(String command) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return getDetail(command).split(\" /by \")[0];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Gets the deadline for the creation of a deadline task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param command User command."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Deadline of task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getBy(String command) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return getDetail(command).split(\" /by \")[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Gets the description for the creation of an event task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param command User command."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Event task description."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getEventDesc(String command) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return getDetail(command).split(\" /at \")[0];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Gets the timing for the creation of an event task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param command User command."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Event duration."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getAt(String command) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return getDetail(command).split(\" /at \")[1];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses the string representation of datetime to LocalDateTime type."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param by Deadline of task."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return LocalDateTime of deadline."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static LocalDateTime getLocalDateTimeBy(String by) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String parsableBy \u003d by.replace(\" \", \"T\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return LocalDateTime.parse(parsableBy);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses the string representation of the start time to LocalDateTime type."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param at Event duration."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return LocalDateTime of start time."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static LocalDateTime getLocalDateTimeStart(String at) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String[] dateTimeArr \u003d at.split(\" to \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String parsableStart \u003d dateTimeArr[0].replace(\" \", \"T\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return LocalDateTime.parse(parsableStart);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses the string representation of the end time to LocalDateTime type."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param at Event duration."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return LocalDateTime of end time."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static LocalDateTime getLocalDateTimeEnd(String at) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String[] dateTimeArr \u003d at.split(\" to \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String parsableEnd \u003d dateTimeArr[1].replace(\" \", \"T\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return LocalDateTime.parse(parsableEnd);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses the LocalDateTime representation of the start time to String type."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param start Start datetime of the Event."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return String of start datetime of the Event."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getStringStart(LocalDateTime start) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return start.format(formatter);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses the LocalDateTime representation of the end time to String type."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param end End datetime of the Event."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return String of end datetime of the Event."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getStringEnd(LocalDateTime end) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return end.format(formatter);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses the LocalDateTime representation of the deadline to String type."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param by Deadline of the Task."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return String of the deadline."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getStringBy(LocalDateTime by) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy, HH:mm\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return by.format(formatter);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Retrieves the day of the deadline."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param by Deadline of the Task."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Day of the deadline."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getDay(LocalDateTime by) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return by.getDayOfWeek().getDisplayName(TextStyle.SHORT, new Locale(\"en\"));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Retrieves the day of the start of the Event."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param start Start datetime of the Event."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Day of the start of the Event."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getStartDay(LocalDateTime start) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return start.getDayOfWeek().getDisplayName(TextStyle.SHORT, new Locale(\"en\"));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Retrieves the day of the end of the Event."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param end End datetime of the Event."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Day of the end of the Event."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getEndDay(LocalDateTime end) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return end.getDayOfWeek().getDisplayName(TextStyle.SHORT, new Locale(\"en\"));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 212
    }
  },
  {
    "path": "src/main/java/ReadFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class ReadFile {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** Destination path of the duke.txt storage file. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Construct new ReadFile object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param filePath Destination path of the duke.txt storage file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public ReadFile(String filePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        path \u003d filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns the number of lines in the duke.txt storage file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Number of lines."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws IOException If input or output exceptions are encountered."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private int readLines() throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        FileReader reader \u003d new FileReader(path);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(reader);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String nextLine;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        int numLines \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        while ((nextLine \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            ++numLines;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        bufferedReader.close();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return numLines;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Populates the (saved) data from the duke.txt storage file into an array and returns it."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return An array of tasks stored in their toString() form."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws IOException If input or output exceptions are encountered."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String[] openFile() throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        FileReader fileReader \u003d new FileReader(path);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        int numLines \u003d readLines();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String[] data \u003d new String[numLines];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        for (int i \u003d 0; i \u003c numLines; ++i) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            data[i] \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        bufferedReader.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 55
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** Destination path of the duke.txt storage file. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Constructs new Storage object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param path Destination path of duke.txt file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        filePath \u003d path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Creates the data folder and duke.txt storage file if absent."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Destination path of duke.txt file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            boolean hasStorageFile \u003d new File(\"./data\").exists();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            if (!hasStorageFile) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new File(\"./data\").mkdir();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                new File(\"./data/duke.txt\").createNewFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            System.out.println(\"Something went wrong in creating the storage file...\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return \"./data/duke.txt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Loads the contents from the (saved) duke.txt storage file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return List of (saved) Tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public List\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            ReadFile file \u003d new ReadFile(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            String[] dataArr \u003d file.openFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            for (String taskStr : dataArr) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                tasks.add(Parser.getTask(taskStr));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            System.out.println(e.print());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            System.out.println(\"Something went wrong in reading data...\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Writes updated list of tasks into the duke.txt storage file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param tasks List of Tasks to be saved."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void save(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                WriteFile emptyData \u003d new WriteFile(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                emptyData.writeToFile(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                WriteFile firstData \u003d new WriteFile(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                firstData.writeToFile(tasks.get(0).toStorageString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                if (tasks.size() \u003e 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    WriteFile appendData \u003d new WriteFile(filePath, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    for (int i \u003d 1; i \u003c tasks.size(); ++i) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                        appendData.writeToFile(tasks.get(i).toStorageString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            System.out.println(\"Something went wrong in writing data...\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 83
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** Description of the task. */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** Completion status of the task */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Construct new Task object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns tick or cross symbols depending on completion."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Tick or cross unicode"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public char getStatusIcon() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return (isDone ? \u0027\\u2713\u0027 : \u0027\\u2717\u0027);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sets the isDone attribute to true."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns part of the task string to be written to the duke.txt storage file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return task string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return \"[\" + (isDone ? \"1\" : \"0\") + \"] \" + description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 47
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Enumeration indicating the type of change to be acted on the TaskList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "enum ListChange {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    ADD, DONE, DELETE"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** The list of tasks present. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    protected List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Constructs a new TaskList object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param taskList List of Tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        tasks \u003d taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Gets the list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return List of Tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns substring of tasks depending on their amount."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return String of number of tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String getNumTasksStr() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        int numTasks \u003d tasks.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return numTasks + (numTasks \u003d\u003d 1 ? \" task\" : \" tasks\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns the correct message to signify a change in tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param change ListChange enum depending on command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Message string."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String listChangePrint(ListChange change) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String keyphrase;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        switch (change) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            keyphrase \u003d \"added the new task\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            keyphrase \u003d \"marked done the task(s)\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            keyphrase \u003d \"deleted the task(s)\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            keyphrase \u003d \"some issues but I\u0027d die\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String firstLine \u003d \"Nice! I\u0027ve \" + keyphrase + \" for you!\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String secondLine \u003d change \u003d\u003d ListChange.DONE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                ? \"\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                : \"Now you have \" + this.getNumTasksStr() + \" in the list.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return String.join(\"\\n\", firstLine, secondLine);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Compiles an ordered list (in String) of tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return String of task list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String printList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return new DukeException(\"emptyList\").print();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return IntStream.range(0, tasks.size())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                        .mapToObj(i -\u003e i + 1 + \".\" + tasks.get(i).toString())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                        .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Marks task(s) as done."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param command User command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Duke response indicating successful action (or not)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String markDone(String command) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            Integer[] taskIds \u003d command.contains(\"all\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    ? IntStream.range(0, tasks.size())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                               .boxed()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                               .toArray(Integer[]::new)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    : Parser.getTaskIds(command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            for (int taskId : taskIds) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                tasks.get(taskId).markAsDone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return listChangePrint(ListChange.DONE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return new DukeException(\"invalidDone\").print();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Creates new ToDo task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param command User command."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Duke response indicating successful action (or not)."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String createToDo(String command) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            String detail \u003d Parser.getDetail(command);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            if (detail.isBlank()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                return new DukeException(\"invalidTodo\").print();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                Task newTask \u003d new ToDo(detail);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                tasks.add(newTask);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                return listChangePrint(ListChange.ADD);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return new DukeException(\"invalidTodo\").print();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Creates new Deadline task."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param command User command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Duke response indicating successful action (or not)."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String createDeadline(String command) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            String desc \u003d Parser.getDeadlineDesc(command);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            String by \u003d Parser.getBy(command);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            Task newTask \u003d new Deadline(desc, by);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return listChangePrint(ListChange.ADD);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return e.print();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return new DukeException(\"invalidDeadlineTask\").print();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Creates new Event task."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param command User command."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Duke response indicating successful action (or not)."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String createEvent(String command) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            String desc \u003d Parser.getEventDesc(command);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            String at \u003d Parser.getAt(command);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            Task newTask \u003d new Event(desc, at);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            tasks.add(newTask);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return listChangePrint(ListChange.ADD);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return e.print();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return new DukeException(\"invalidEvent\").print();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Deletes task(s)."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param command User command."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Duke response indicating successful action (or not)."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String delete(String command) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            Integer[] taskIds \u003d command.contains(\"all\")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    ? Arrays.stream(new int[tasks.size()])"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                            .boxed()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                            .toArray(Integer[]::new)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    : Parser.getTaskIds(command);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            for (int taskId : taskIds) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                tasks.remove(taskId);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return listChangePrint(ListChange.DELETE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return new DukeException(\"invalidDelete\").print();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Finds task(s) according to keyword."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param command User command."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return String of task(s) matching the keyword."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String find(String command) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            String keyword \u003d Parser.getDetail(command);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            if (keyword.isBlank()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                return new DukeException(\"invalidFind\").print();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                List\u003cTask\u003e tasksFound \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                for (Task task : tasks) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    if (task.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                        tasksFound.add(task);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                return tasksFound.isEmpty()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    ? new DukeException(\"noMatchingTasks\").print()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    : new TaskList(tasksFound).printList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return new DukeException(\"invalidFind\").print();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns the default invalid command error."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Duke response for default error."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String getDefaultError() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return new DukeException(\"invalidCommand\").print();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 228
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Constructs new Todo object."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param description Description of the Todo task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns the ToDo task string to be written to the duke.txt storage file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return Todo task string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return \"[T]\" + super.toStorageString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 24
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns the opening lines in Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return opening string."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String opening() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return \"Hello! I\u0027m Duke!\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns the closing lines in Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @return closing string."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String closing() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 19
    }
  },
  {
    "path": "src/main/java/WriteFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class WriteFile {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** Destination path of the duke.txt storage file. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /** True if new data should be appended to current data. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private boolean isToAppend \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Constructs new WriteFile object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param filePath Destination path of the duke.txt storage file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public WriteFile(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        path \u003d filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Constructs new WriteFile object (overloaded)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param filePath Destination path of the duke.txt storage file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param isToAppendValue Indication if new data should be appended to current data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public WriteFile(String filePath, boolean isToAppendValue) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        path \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        isToAppend \u003d isToAppendValue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Writes data into the duke.txt storage file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param text Data to be written."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws IOException If input or output errors are encountered."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void writeToFile(String text) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        FileWriter write \u003d new FileWriter(path, isToAppend);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        PrintWriter print \u003d new PrintWriter(write);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        print.printf(text.equals(\"\") ? \"%s\" : \"%s\" + \"%n\", text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        print.close();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 45
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-border-color: #ffffad; -fx-border-width: 5; -fx-background-color: #b7ffad;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" prefHeight\u003d\"99.0\" prefWidth\u003d\"273.0\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" textFill\u003d\"#656565\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI Semibold\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Type something here...\" style\u003d\"-fx-background-color: #fff2e6;\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            \u003cFont name\u003d\"Segoe UI\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #ccfcff;\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 26
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void getAtTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String expected \u003d \"2020-05-12 19:00 to 2020-05-12 22:00\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String result \u003d Parser.getAt(\"event town hall /at 2020-05-12 19:00 to 2020-05-12 22:00\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void getLocalDateTime() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        LocalDateTime expected \u003d LocalDateTime.of(2020, 7, 19, 15, 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        LocalDateTime result \u003d Parser.getLocalDateTimeBy(\"2020-07-19 15:00\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 21
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void numTasksTest1() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        List\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        lst.add(new Task(\"test\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        TaskList testList \u003d new TaskList(lst);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String expected \u003d \"1 task\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String result \u003d testList.getNumTasksStr();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public void numTasksTest2() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        List\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; ++i) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            lst.add(new Task(\"test\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        TaskList testList \u003d new TaskList(lst);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String expected \u003d \"3 tasks\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String result \u003d testList.getNumTasksStr();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 32
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "todo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "event anyhow"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "blah"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 12
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "-": 20
    }
  }
]
