[
  {
    "path": "src/main/java/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Deadlines(String description, String deadline) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Deadlines(String description, String deadline, boolean bool) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        super(description, bool);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Deadlines markDone() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Deadlines(this.description, this.deadline, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (this.isComplete) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[D][\\u2713] \" + this.description + \"(by:\" + this.deadline + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[D][\\u2718] \" + this.description + \"(by:\" + this.deadline + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 31
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import jdk.jfr.Event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        processInput(scanner);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void processInput(Scanner scanner) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        System.out.println(\"Hi! I\u0027m Duke\" + \"\\n\" + \"What can I do for you?\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String currInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        List\u003cTask\u003e storedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            while (isNotTerminateCommand(currInput)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    if (isListCommand(currInput)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        //List out all tasks\u0027 description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        System.out.println(readList(storedTasks));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    } else if (isDoneCommand(currInput)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        verifyDoneCommand(currInput, storedTasks.size());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        String[] parts \u003d currInput.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        int index \u003d Integer.parseInt(parts[1]) - 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        storedTasks.set(index, storedTasks.get(index).markDone());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        System.out.println(\"Nice! I\u0027ve marked this task as done:\" + \"\\n\" + \"  \" + storedTasks.get(index).toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    } else if (isDeleteCommand(currInput)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                      verifyDeleteCommand(currInput, storedTasks.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        String[] parts \u003d currInput.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        int index \u003d Integer.parseInt(parts[1]) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        System.out.println(\"Noted. I\u0027ve removed this task:\" + \"\\n\" + \"  \" + storedTasks.get(index)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                                + \"\\n\" + \"Now you have \" + (storedTasks.size() - 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        storedTasks.remove(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        //handle task commands"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        addTasks(currInput, storedTasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        System.out.println(\"Got it. I\u0027ve added this task:\" + \"\\n\" + \"  \" + storedTasks.get(storedTasks.size() - 1)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                                + \"\\n\" + \"Now you have \" + storedTasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    currInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        System.out.println(e + \"\\n\" + \"Please enter a valid command\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        currInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        //Should continue to run the program as it is"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        System.out.println(e + \"\\n\" + \"Please enter a valid input\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        currInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        //Should continue to run the program as it is"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     public static boolean isDeleteCommand(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "         String[] parts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "         return parts[0].equals(\"delete\") \u0026\u0026 parts.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "     }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void verifyDeleteCommand(String input, int numOfTasks) throws InvalidCommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String[] parts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            int index \u003d Integer.parseInt(parts[1]) - 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            boolean result \u003d index \u003e -1 \u0026\u0026 index \u003c numOfTasks;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (result) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidCommandException(\"Number is invalid!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException((\"Please input number after the delete command!\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static boolean isDoneCommand(String input) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] parts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return parts[0].equals(\"done\") \u0026\u0026 parts.length \u003d\u003d 2;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void verifyDoneCommand(String input, int numOfTasks) throws InvalidCommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            String[] parts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            int index \u003d Integer.parseInt(parts[1]) - 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            boolean result \u003d index \u003e -1 \u0026\u0026 index \u003c numOfTasks;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (result) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidCommandException(\"Number is invalid!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException((\"Please input number after the done command!\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static boolean isListCommand(String input) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return input.equals(\"list\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static boolean isNotTerminateCommand(String input) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return !input.equals(\"bye\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void addTasks(String input, List\u003cTask\u003e tasks) throws InvalidInputException, InvalidCommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] parts \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                //Verify the todo command"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                verifyTodo(input);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                tasks.add(new Task(parts[1]));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                //Verify the deadline command"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                verifyDeadline(input);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String[] split \u003d parts[1].split(\"/by\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                tasks.add(new Deadlines(split[0], split[1]));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                //Verify the event command"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                verifyEvent(input);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String[] split \u003d parts[1].split(\"/at\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                tasks.add(new Events(split[0], split[1]));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidInputException(\"Sorry, I don\u0027t know what that means :(\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void verifyTodo(String input) throws InvalidCommandException{"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String[] parts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (parts.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Sorry, the description of a todo cannot be empty :(\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void verifyDeadline(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (input.contains(\" /by \")) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (input.charAt(8) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String[] parts \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                if (parts[1].startsWith(\"/by\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    throw new InvalidCommandException(\"Sorry, missing deadline description :(\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    String[] split \u003d parts[1].split(\"/by\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    if (split.length \u003c\u003d 1 || split[1].isBlank()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        throw new InvalidCommandException(\"Sorry, missing deadline time :(\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    } else if (split[0].isBlank()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        throw new InvalidCommandException(\"Sorry, missing deadline description :(\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidCommandException(\"Sorry please leave a space after the deadline command!\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Sorry, missing /by keyword, make sure to leave a space before \" +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    \"and after the /by keyword!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static void verifyEvent(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (input.contains(\" /at \")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            if (input.charAt(5) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                String[] parts \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                if (parts[1].startsWith(\"/at\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    throw new InvalidCommandException(\"Sorry, missing event description :(\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    String[] split \u003d parts[1].split(\"/at\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    if (split.length \u003c\u003d 1 || split[1].isBlank()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        throw new InvalidCommandException(\"Sorry, missing event time :(\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    } else if (split[0].isBlank()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                        throw new InvalidCommandException(\"Sorry, missing event description :(\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                throw new InvalidCommandException(\"Sorry please leave a space after the event command!\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            throw new InvalidCommandException(\"Sorry, missing /at keyword, make sure to leave a space before \" +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                    \"and after the /at keyword!\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public static String readList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        String listOfTasks \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            Task currTask \u003d list.get(i - 1);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "                listOfTasks +\u003d \"\\n\" + i + \".\" + currTask.toString();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"Currently no tasks in you list\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return listOfTasks;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jzwoo": 203,
      "-": 6
    }
  },
  {
    "path": "src/main/java/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Events(String description, String startTime) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Events(String description, String startTime, boolean bool) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        super(description, bool);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Events markDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Events(this.description, this.startTime, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (this.isComplete) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[E][\\u2713] \" + this.description + \"(at:\" + this.startTime + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[E][\\u2718] \" + this.description + \"(at:\" + this.startTime + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 27
    }
  },
  {
    "path": "src/main/java/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class InvalidCommandException extends Throwable {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    protected String errorMessage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.errorMessage \u003d message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 12
    }
  },
  {
    "path": "src/main/java/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class InvalidInputException extends Throwable {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    protected String errorMessage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.errorMessage \u003d message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 12
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    protected boolean isComplete;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        isComplete \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    protected Task(String description, boolean bool) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        isComplete \u003d bool;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public Task markDone() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        return new Task(this.description, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        if (this.isComplete) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[T][\\u2713] \" + this.description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "            return \"[T][\\u2718] \" + this.description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 27
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 10
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "if"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "  ! ("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    find ../src/main/java -name \"*.java\" \u003esources.txt"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "    javac -cp ../src -Xlint:none -d ../bin @sources.txt"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "  )"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 7,
      "-": 37
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/InvalidCommandException.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/Task.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/InvalidInputException.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/Events.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/Duke.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jzwoo"
        },
        "content": "../src/main/java/Deadlines.java"
      }
    ],
    "authorContributionMap": {
      "jzwoo": 6
    }
  }
]
