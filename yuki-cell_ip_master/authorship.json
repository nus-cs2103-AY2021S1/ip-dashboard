[
  {
    "path": "iP/build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    //javaFX(GUI)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "//    seedu.duke.Duke"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    //before: 8.23"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 20,
      "-": 44
    }
  },
  {
    "path": "iP/build/scripts/iP.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "@rem  iP startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "set APP_HOME\u003d%DIRNAME%.."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and I_P_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\lib\\iP.jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "@rem Execute iP"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %I_P_OPTS%  -classpath \"%CLASSPATH%\" duke.Duke %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "rem Set variable I_P_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "if  not \"\" \u003d\u003d \"%I_P_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 9,
      "-": 94
    }
  },
  {
    "path": "iP/build/scriptsShadow/iP.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "@rem  iP startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "set APP_HOME\u003d%DIRNAME%.."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and I_P_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\lib\\duke.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "@rem Execute iP"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %I_P_OPTS%  -jar \"%CLASSPATH%\" %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "rem Set variable I_P_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "if  not \"\" \u003d\u003d \"%I_P_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 9,
      "-": 75
    }
  },
  {
    "path": "iP/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "todo this 1"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 1
    }
  },
  {
    "path": "iP/src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * Deadline is one type of tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * It contains deadline for the task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    protected LocalDate deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * constructor of Deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param deadline deadline of task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public Deadline(String description, LocalDate deadline) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * represents Deadline in string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @return string representation of deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 32
    }
  },
  {
    "path": "iP/src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 51
    }
  },
  {
    "path": "iP/src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "//javaFX"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * Duke is the main class in this todo app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public TaskList tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * constructor of Duke"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param filePath path where saved data of todo is stored"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // need empty tasks to load properly"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            tasks \u003d new TaskList(storage.load(this));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * load tasks from saved text file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * takes user input and execute until program terminates"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                user_input_handler(fullCommand, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * run todo app"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * takes user input and execute tasks according to it"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param user_input input from user, run tasks according to this"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param loading indicates whether input is from saved data or user"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String user_input_handler(String user_input, boolean loading) throws DukeException, IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String instructionType \u003d Parser.parseInstruction(user_input);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String response \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        if (instructionType.equals(\"bye\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // quit"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            response \u003d ui.showGoodBye();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        } else if (instructionType.equals(\"list\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // list task"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            response \u003d ui.showListOfTask(tasks.taskList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        } else if (instructionType.equals(\"done\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // mark done"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // parse instruction"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            int index \u003d Parser.parseMarkDoneInstr(user_input);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // execute"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            Task chosenTask \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            chosenTask.markAsDone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            if (!loading){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                response \u003d ui.showMarkedDoneTask(chosenTask);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        } else if (instructionType.equals(\"delete\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // delete task"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // parse instruction"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            int index \u003d Parser.parseDeleteInstr(user_input);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // execute"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            Task chosenTask \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            tasks.deleteTask(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            if (!loading){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                response \u003d ui.showDeletedTask(chosenTask, tasks.taskList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        } else if (instructionType.equals(\"find\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // find task"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // parse instruction"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            String keyword \u003d Parser.parseFindInstr(user_input);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // execute"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            ArrayList\u003cTask\u003e foundTasks \u003d tasks.find(keyword);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            if (!loading){"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                response \u003d ui.showFoundTask(foundTasks);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        } else if (instructionType.equals(\"todo\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // make todo"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                // parse instruction"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                String description \u003d Parser.parseAddTodoInstr(user_input);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                // execute"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                Task todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                tasks.addTask(todo);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                if (!loading){"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                    response \u003d ui.showAddedTask(todo, tasks.taskList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                response \u003d ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        } else if (instructionType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // make deadline"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                // parse instruction"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                HashMap\u003cString, Object\u003e parsedData \u003d Parser.parseAddDeadlineInstr(user_input);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                String description \u003d (String) parsedData.get(\"description\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                LocalDate l_time \u003d (LocalDate) parsedData.get(\"time\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                // execute"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                Task deadline \u003d new Deadline(description, l_time);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                tasks.addTask(deadline);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                if (!loading) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                    response \u003d ui.showAddedTask(deadline, tasks.taskList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                response \u003d ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        } else if (instructionType.equals(\"event\")){"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // make event"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                // parse instruction"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                HashMap\u003cString, Object\u003e parsedData \u003d Parser.parseAddEventInstr(user_input);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                String description \u003d (String) parsedData.get(\"description\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                LocalDate l_time \u003d (LocalDate) parsedData.get(\"time\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                // execute"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                Task event \u003d new Event(description, l_time);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                tasks.addTask(event);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                if (!loading){"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                    response \u003d ui.showAddedTask(event, tasks.taskList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                response \u003d ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // invalid input"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            if (!loading){"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        // save Data for every user input"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        Storage.save(tasks.taskList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        });"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        });"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        // show welcome message"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        showWelcome();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private void showWelcome() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        Duke dukeObj \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String welcomeMsg \u003d dukeObj.ui.showWelcome();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        Label dukeText \u003d new Label(welcomeMsg);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        );"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        );"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        Duke duke \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String response \u003d \"\";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            response \u003d duke.user_input_handler(input, false);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            response \u003d duke.ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return \"Duke heard: \\n\""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                + response;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public Duke(){"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 306
    }
  },
  {
    "path": "iP/src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * Exception related to Duke application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * constructor of DukeException"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param errorMessage error message"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 14
    }
  },
  {
    "path": "iP/src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * Event is a type of task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * contains eventTime of task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    protected LocalDate eventTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * constructor of Event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param description description of event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param eventTime time which event will happen"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public Event(String description, LocalDate eventTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * represents event as text"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @return string representation of event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                eventTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 32
    }
  },
  {
    "path": "iP/src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 12
    }
  },
  {
    "path": "iP/src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * Parse the user input is useable form"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * parse and get the instruction type of user input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param user_input input give from user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @return instruction type of user input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    static String parseInstruction(String user_input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String instructionType \u003d user_input.split(\" \")[0];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return instructionType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * parse instruction for marking tasks done and return index of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param user_input input give from user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @return index of task which will be marked as done"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    static int parseMarkDoneInstr(String user_input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        int index \u003d Integer.parseInt(user_input.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * parse instruction for deleting task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param user_input input give from user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @return index of task which will be deleted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    static int parseDeleteInstr(String user_input) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        int index \u003d Integer.parseInt(user_input.split(\" \")[1]) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * parse instruction for adding todo"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param user_input input give from user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @return description of todo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    static String parseAddTodoInstr(String user_input) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        // check if input is valid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        if (user_input.split(\" \", 2).length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        // get data"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String description \u003d user_input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * parse instruction for adding deadline"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param user_input input give from user"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @return hashMap containing description and deadline of task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    static HashMap\u003cString, Object\u003e parseAddDeadlineInstr(String user_input) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        // check if input is valid"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        if (user_input.split(\" \", 2).length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String task \u003d user_input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        if (task.split(\" /by \", 2).length \u003c 2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description and time is required for deadline\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        // get data"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String description \u003d task.split(\" /by \", 2)[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String time \u003d task.split(\" /by \")[1];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        LocalDate l_time \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        HashMap\u003cString, Object\u003e parsedData \u003d new HashMap\u003cString, Object\u003e(){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            { put(\"description\", description); put(\"time\", l_time); }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        };"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return parsedData;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * parse instruction for adding event"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param user_input input give from user"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @return hashMap containing description and eventTime of event"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    static HashMap\u003cString, Object\u003e parseAddEventInstr(String user_input) throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        // check if input is valid"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        if (user_input.split(\" \", 2).length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String task \u003d user_input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        if (task.split(\" /at \", 2).length \u003c 2) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description and time is required for event\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        // get data"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String description \u003d user_input.split(\" /at \", 2)[0];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String time \u003d task.split(\" /at \")[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        LocalDate l_time \u003d LocalDate.parse(time);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        HashMap\u003cString, Object\u003e parsedData \u003d new HashMap\u003cString, Object\u003e() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            { put(\"description\", description); put(\"time\", l_time); }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        };"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return parsedData;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    static String parseFindInstr(String user_input) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String keyword \u003d user_input.split(\" \")[1];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return keyword;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 108
    }
  },
  {
    "path": "iP/src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * Storage is responsible for loading saving data(tasks)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * load data from text file in specific folder"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param Duke app which is currently used"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @return ArrayList containing tasks from text file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public ArrayList\u003cTask\u003e load(Duke Duke) throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        // read file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            Scanner reader \u003d new Scanner(file);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            while (reader.hasNextLine()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                String user_input \u003d reader.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                Duke.user_input_handler(user_input, true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // create folder if doesn\u0027t exist"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            File path \u003d new File(\"data/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            if (!path.isDirectory()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                path.mkdir();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // create file if doesn\u0027t exist"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            File file \u003d new File(\"data/duke.txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // Load again"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            load(Duke);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d Duke.tasks.taskList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * save tasks to text file in specific folder"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param taskList contains list of tasks which will be saved"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    static void save(ArrayList\u003cTask\u003e taskList) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        File file \u003d new File(\"data/duke.txt\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(file, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // convert task into instruction(user input)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            String taskInst \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                Todo todo \u003d (Todo) task;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                taskInst \u003d String.format(\"todo %s\\n\", todo.description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                taskInst \u003d String.format(\"event %s /at %s\\n\", event.description, event.eventTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                taskInst \u003d String.format(\"deadline %s /by %s\\n\", task.description, deadline.deadline);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            //write instruction to text file"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            fileWriter.write(taskInst);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            // add done instruction if task is done"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            if (task.isDone) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                fileWriter.write(String.format(\"done %s\\n\", index));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            index +\u003d 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 85
    }
  },
  {
    "path": "iP/src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * Is responsible for basic functionality of task"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * They are different types of task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * constructor of Task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * get status icon for task for indicating whether task is done or not"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @return status icon indicating whether task is done or not"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * mark task as done"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * represents task in string format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @return string representation of task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 42
    }
  },
  {
    "path": "iP/src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * contains list of task and functionality associated with it (ex; delete/add)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * constructor of task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * constructor of task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param taskList ArrayList containing list of tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * add tasks to taskList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param task task to be added"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * delete task in taskList according to the index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param index index of task in taskList to be deleted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * get task in taskList according to the index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param index index of task in taskList to be return"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @return task in the taskList according to the index"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        Task task \u003d taskList.get(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String keyword) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            if (task.description.contains(keyword)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                foundTasks.add(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 60
    }
  },
  {
    "path": "iP/src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * A type of task which contains description"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * constructor of Todo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * represents Todo in string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @return string representation of Todo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 22
    }
  },
  {
    "path": "iP/src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " * Responsible for UI such as getting user input and outputting message to the user"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * shows error message occured while loading data from text file"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String message \u003d \"Failed to load data\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * show welcome message when app is started"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String message \u003d logo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                + \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                + \"What can I do for you?\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * show goodbye message when app exits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String showGoodBye() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String message \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * show list of tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param taskList ArrayList containing tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String showListOfTask(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String message \u003d \"Here are the tasks in your list: \\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            message +\u003d String.format(\"%s. %s \\n\", index, task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            index +\u003d 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * show message when task is marked done"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param doneTask task which is marked as done"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String showMarkedDoneTask(Task doneTask) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String message \u003d \"Nice! I\u0027ve marked this task as done: \\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                + doneTask.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * show message when task is deleted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param deletedTask task which is deleted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param taskList ArrayList containing tasks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String showDeletedTask(Task deletedTask, ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String message \u003d \"Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                + deletedTask.toString() + \"\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                + String.format(\"Now you have %s tasks in the list.\", taskList.size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * show message when task is added"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param addedTask task which is added"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param taskList ArrayList containing tasks"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String showAddedTask(Task addedTask, ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String message \u003d \"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                + addedTask.toString() + \"\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "                + String.format(\"Now you have %s tasks in the list.\", taskList.size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * show horizontal line to saparate different messages"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String showLine() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String message \u003d \"---------------------------------------\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * show message for any error occurred"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @param message message of error that occurred"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String showError(String message) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * read command from user input"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     * @return command from user input"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);  // Create a Scanner object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String user_input \u003d \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        user_input \u003d scanner.nextLine();  // Read user input"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return user_input;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public String showFoundTask(ArrayList\u003cTask\u003e foundTasks) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        String message \u003d \"Here are the matching tasks in your list: \\n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        for (Task task : foundTasks) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            message +\u003d (String.format(\"%s. %s \\n\", index, task));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "            index +\u003d 1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 135
    }
  },
  {
    "path": "iP/src/test/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "todo homework"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "todo homework"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 2
    }
  },
  {
    "path": "iP/src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void addTodo() throws IOException, DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        Duke duke \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertEquals(0, duke.tasks.taskList.size());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        duke.user_input_handler(\"todo homework\", false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertEquals( 1, duke.tasks.taskList.size());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    public void addAndDeleteTodo() throws IOException, DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        Duke duke \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        duke.user_input_handler(\"todo homework\", false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertEquals( 1, duke.tasks.taskList.size());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        duke.user_input_handler(\"delete 1\", false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "        assertEquals( 0, duke.tasks.taskList.size());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 26
    }
  },
  {
    "path": "iP/text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "bye"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 6
    }
  },
  {
    "path": "iP/text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuki-cell"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "yuki-cell": 1,
      "-": 37
    }
  }
]
