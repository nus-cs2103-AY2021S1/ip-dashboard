[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.8\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 22,
      "-": 45
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[T][0] play"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[T][0] practice piano"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[E][0] piano exam /at 2020-08-09"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[D][0] homework due /by 2020-08-10"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[T][0] do homework"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "[T][0] play"
      }
    ],
    "authorContributionMap": {
      "foongsq": 7
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Represents a deadline task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @author Siqi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @since 2020-08-25"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Date in which the deadline task is due."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private LocalDate by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Time in which the deadline task is due."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Deadline constructor with date only."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description   The description of the deadline task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param by            The date that the deadline task is due."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Deadline(final String description, final LocalDate by) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Deadline constructor with date and time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description The description for the deadline task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param by    The date that the deadline task is due."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param time  The time that the deadline task is due."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Deadline(final String description, final LocalDate by,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    final String time) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Deadline constructor with date and marked as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description   The description of the deadline task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param isDone        The deadline task is marked as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param by            The date that the deadline task is due."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Deadline(final String description, final boolean isDone,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    final LocalDate by) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Deadline constructor with date and time and marked as done."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description   The description of the deadline task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param isDone        The deadline task is marked as done."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param by            The date that the deadline task is due."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param time          The time that the deadline task is due."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Deadline(final String description, final boolean isDone,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    final LocalDate by, final String time) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method formats the task for display to the user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return This returns a string containing the task details."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String display() { //format time here"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (time \u003d\u003d null || time.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + \")\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + \" \" + time + \")\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + by + (time \u003d\u003d null || time.isEmpty() ? \"\" : time)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 94
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Represents a to do list chatbot called Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @author Siqi"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @since 2020-08-25"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke  {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Storage object that handles reading and writing to local hard disk."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Task list that stores tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * UI object that handles interactions with the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            ui.printLoadingError(de);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Duke constructor."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param filePath The path of the local copy where Duke saves list to."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Duke(final String filePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            ui.printLoadingError(de);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method runs Duke the chatbot by taking in commands from the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        ui.printGreeting();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        boolean isEnd \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        while (!isEnd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            isEnd \u003d Parser.execute(tasks, ui, storage, input).equals(\"bye then\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return Parser.execute(tasks, ui, storage, input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This is the main method which makes use of the run method."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param args Unused"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static void main(final String[] args) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 69,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * DukeException constructor."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param message   The exception message."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public DukeException(final String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 9
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Represents an event task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @author Siqi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @since 2020-08-25"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * The date of the event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private LocalDate at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * The time of the event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Event constructor with date only."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description   The description of the event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param at            The date of the event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Event(final String description, final LocalDate at) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Event constructor with date and time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description   The description of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param at            The date of the event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param time          The time of the event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Event(final String description, final LocalDate at,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                 final String time) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Event constructor with date and marked as done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description   The description of the event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param isDone        The event is marked as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param at            The date of the event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Event(final String description, final boolean isDone,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                 final LocalDate at) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Event constructor with date and time and marked as done."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description   The description of the event."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param isDone        The event is marked as done."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param at            The date of the event."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param time          The time of the event."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Event(final String description, final boolean isDone,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                 final LocalDate at, final String time) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method formats the task for display to the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return This returns a string containing the task details."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String display() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (time \u003d\u003d null || time.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + \")\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + \" \" + time + \")\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + (time \u003d\u003d null || time.isEmpty() ? \"\" : \" \" + time)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 93
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/icebear.jpg\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/grizz.jpg\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                DialogBox.getDukeDialog(\"Yooo, I\u0027m Grizz.\\nWhat can I do for you today?\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        + \"Please enter dates and times like this: yyyy-mm-dd hhmm\", dukeImage)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 53
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Represents a parser that makes sense of user input."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @author Siqi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @since 2020-08-25"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private final static int DONE \u003d 4;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private final static int DELETE \u003d 6;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private final static int TODO \u003d 4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private final static int DEADLINE \u003d 8;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private final static int EVENT \u003d 5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private final static int FIND \u003d 4;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method takes in a string and converts it to a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     *      format (YYYY-MM-DD) that can be parsed by LocalDate class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param dateString This is a string that contains a date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return This returns a string in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static String formatDate(String dateString) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (dateString.contains(\"/\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            dateString \u003d dateString.replaceAll(\"\\\\/\", \"-\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String[] dateStringArr \u003d dateString.split(\"-\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        dateString \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        for (int i \u003d 0; i \u003c dateStringArr.length; i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (dateStringArr[i].length() \u003c 2) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                dateStringArr[i] \u003d \"0\" + dateStringArr[i];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (i \u003e 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                dateString \u003d dateString + \"-\" + dateStringArr[i];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                dateString \u003d dateStringArr[i];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return dateString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This is a method that parses user input when it contains a \"done\" in it."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param input This is the string to be parsed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param taskList This is the current task list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @throws DukeException When an invalid input is entered."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static String handleDoneInput(final String input,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            final TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(DONE).trim().isEmpty()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                //to make sure the input after \"done\" is a number"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 input.substring(DONE).trim().matches(\"[0-9]+\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            //convert string to integer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            int index \u003d Integer.parseInt(input.substring(DONE).trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (index \u003e\u003d 1) { //if input index is valid"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return taskList.markTaskAsDone(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(\"Please enter a valid task number \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        + \"to mark as done (index is not valid)\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid task number to \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + \"mark as done (substring doesn\u0027t match regex)\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This is a method that parses user input when it contains a \"delete\"."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param input This is the string to be parsed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param taskList This is the current task list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @throws DukeException When an invalid input is entered."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static String handleDeleteInput(final String input,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                     final TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(DELETE).trim().isEmpty()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                //to make sure the input after \"done\" is a number"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 input.substring(DELETE).trim().matches(\"[0-9]+\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            //convert string to integer"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            int index \u003d Integer.parseInt(input.substring(DELETE).trim());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (index \u003e\u003d 1) { //if input index is valid"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return taskList.deleteTask(index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(\"Please enter a valid task number \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        + \"to delete (index is not valid)\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid task number to\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    + \" delete (substring doesn\u0027t match regex)\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This is a method that parses user input when it contains a \"todo\" in it."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param input This is the string to be parsed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param taskList This is the current task list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @throws DukeException When an invalid input is entered."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return String to be printed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static String handleTodoInput(final String input,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    final TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        //to make sure to do task is not empty"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(TODO).trim().isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foongsq"
        },
        "content": "           return taskList.addTodo(input);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid todo\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This is a method that parses user input when it contains a \"deadline\"."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param input This is the string to be parsed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param taskList This is the current task list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @throws DukeException When an invalid input is entered."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return String to be printed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static String handleDeadlineInput(final String input,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        final TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        //to make sure deadline is not empty"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(DEADLINE).trim().isEmpty()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                //to make sure deadline contains /by"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 input.substring(DEADLINE).trim().contains(\"/by\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                //to make sure deadline contains a task description"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 !input.substring(DEADLINE).trim().startsWith(\"/by\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                //to make sure deadline contains a deadline"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 !input.substring(DEADLINE).trim().endsWith(\"/by\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String descriptionAndTime \u003d input.substring(DEADLINE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String description \u003d descriptionAndTime.trim().split(\"/by \")[0];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String by \u003d descriptionAndTime.trim().split(\"/by \")[1].trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (by.contains(\" \")) { //user gave a time input"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String dateString \u003d by.split(\" \")[0].trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String timeString \u003d by.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    dateString \u003d formatDate(dateString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate d1 \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    if (timeString.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            //convert string to integer"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            int time \u003d Integer.parseInt(timeString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            if (time \u003e\u003d 0000 \u0026\u0026 time \u003c\u003d 2359) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                return taskList.addDeadline(description,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                        d1, timeString);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                throw new DukeException(\"Please enter a \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                       + \"valid time between 0000 and 2359\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            throw new DukeException(\"Please input the time \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                   + \"in the right format (eg. 1800)\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        return taskList.addDeadline(description, d1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else { //user didn\u0027t give a time input"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    by \u003d formatDate(by);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate d1 \u003d LocalDate.parse(by);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return taskList.addDeadline(description, d1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } catch (DateTimeException dte) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(\"Please enter your date \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                       + \"and time in the format yyyy-mm-dd hhmm \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                       + \"(eg. 2020-08-23 1800)\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid deadline\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This is a method that parses user input when it contains a \"event\"."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param input This is the string to be parsed."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param taskList This is the current task list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @throws DukeException When an invalid input is entered."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return String to be printed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private static String handleEventInput(final String input,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                         final TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        //to make sure event is not empty"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(EVENT).trim().isEmpty()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                //to make sure event contains at"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 input.substring(EVENT).trim().contains(\"/at\")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                //to make sure event description is not empty"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 !input.substring(EVENT).trim().startsWith(\"/at\")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                //to make sure event contains a time/date"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u0026\u0026 !input.substring(EVENT).trim().endsWith(\"/at\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String descriptionAndTime \u003d input.substring(EVENT);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String description \u003d descriptionAndTime.split(\"/at \")[0];"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String at \u003d descriptionAndTime.split(\"/at \")[1].trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (at.contains(\" \")) { //user gave a time input"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String dateString \u003d at.split(\" \")[0].trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String timeString \u003d at.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    dateString \u003d formatDate(dateString);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate d2 \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    if (timeString.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            //convert string to integer"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            int time \u003d Integer.parseInt(timeString);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            if (time \u003e\u003d 0000 \u0026\u0026 time \u003c\u003d 2359) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                               return taskList.addEvent(description,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                       d2, timeString);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                throw new DukeException(\"Please enter a \""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                    + \"valid time between 0000 and 2359\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            throw new DukeException(\"Please input the \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                   + \"time in the right format (eg. 1800)\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        return taskList.addEvent(description, d2);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else { //user didn\u0027t give a time input"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    at \u003d formatDate(at);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate d2 \u003d LocalDate.parse(at);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return taskList.addEvent(description, d2);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } catch (DateTimeException dte) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(\"Please enter your date \""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                       + \"and time in the format yyyy-mm-dd hhmm \""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                       + \"(eg. 2020-08-23 1800)\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid event\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method parses user input when it contains \"find\"."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param input     The user input."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param taskList  The list of tasks."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return          A list of tasks that matches query."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @throws DukeException When query is empty."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static TaskList handleFindInput(final String input,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                       final TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        //to make sure to do task is not empty"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!input.substring(FIND).trim().isEmpty()) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "foongsq"
        },
        "content": "           return taskList.findTasks(input.substring(FIND).trim());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(\"Please enter a valid search item\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This is a method that parses list items from the saved list."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param taskString This is the string to be parsed."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param list This is the current task list."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return TaskList This returns a updated task list."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static TaskList addTaskFromFile(final String taskString,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                           final TaskList list) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (Character.toString(taskString.charAt(1)).equals(\"T\")) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (Character.toString(taskString.charAt(4)).equals(\"0\")) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                list.add(new Todo(taskString.substring(6).trim()));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return list;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                list.add(new Todo(taskString.substring(6).trim(), true));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return list;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else if (Character.toString(taskString.charAt(1)).equals(\"D\")) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String description \u003d taskString.substring(6).split(\"/by\")[0].trim();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String dateString \u003d taskString.substring(6).split(\"/by\")[1].trim();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            //task is marked as not done yet"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (Character.toString(taskString.charAt(4)).equals(\"0\")) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (dateString.contains(\" \")) { //2020-02-03 1800"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String date \u003d dateString.split(\" \")[0];"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String time \u003d dateString.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Deadline(description, dateObj, time));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else { //2020-02-03"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Deadline(description, dateObj));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else { //task is marked as done"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (dateString.contains(\" \")) { //2020-02-03 1800"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String date \u003d dateString.split(\" \")[0];"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String time \u003d dateString.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Deadline(description, true, dateObj, time));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else { //2020-02-03"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Deadline(description, true, dateObj));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String description \u003d taskString.substring(6).split(\"/at\")[0].trim();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String dateString \u003d taskString.substring(6).split(\"/at\")[1].trim();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            //task is marked as not done yet"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (Character.toString(taskString.charAt(4)).equals(\"0\")) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (dateString.contains(\" \")) { //2020-02-03 1800"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String date \u003d dateString.split(\" \")[0];"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String time \u003d dateString.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Event(description, dateObj, time));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else { //2020-02-03"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Event(description, dateObj));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else { //task is marked as done"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                if (dateString.contains(\" \")) { //2020-02-03 1800"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String date \u003d dateString.split(\" \")[0];"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String time \u003d dateString.split(\" \")[1].trim();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Event(description, true, dateObj, time));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                } else { //2020-02-03"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    LocalDate dateObj \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    list.add(new Event(description, true, dateObj));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    return list;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method checks the input and calls the respective parsing functions."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param taskList This is the current task list."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param ui This is the system that handles interaction with the user."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param storage This handles the reading and writing from the local list."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param input This is the user input."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return This returns whether the user is done using the chatbot."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @throws DukeException When the input is not recognized."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static String execute(final TaskList taskList, final Ui ui,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "foongsq"
        },
        "content": "          final Storage storage, final String input) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (input.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                ui.printGoodbye();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                storage.write(taskList);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return \"bye then\";"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else if (input.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return ui.printTasks(taskList);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else if (input.toLowerCase().startsWith(\"done\")) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return handleDoneInput(input, taskList);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else if (input.toLowerCase().startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return handleDeleteInput(input, taskList);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else if (input.toLowerCase().startsWith(\"find\")) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return ui.printMatchingTasks(handleFindInput(input, taskList));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else if (input.toLowerCase().startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return handleTodoInput(input, taskList);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else if (input.toLowerCase().startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return handleDeadlineInput(input, taskList);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else if (input.toLowerCase().startsWith(\"event\")) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return handleEventInput(input, taskList);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(\"Sorry I don\u0027t know what that means :(\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 359
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Represents a storage class that allows data to be stored and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * retrieved in/from a local file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @author Siqi"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @since 2020-08-25"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * The path of the storage file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Storage constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Storage(final String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method loads the data from a local file and returns it in TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return This returns a TaskList loaded from the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @throws DukeException When there is a problem finding/creating the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public TaskList load() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        File directory \u003d new File(\"data/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        File f \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        if (f.exists()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                while (s.hasNext()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    String taskString \u003d s.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    if (!taskString.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        Parser.addTaskFromFile(taskString, taskList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                return taskList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(fnfe.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } else { //file f doesn\u0027t exist"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method saves data from the program into a local file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param listToAdd         This is the task list to be saved."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @throws DukeException    When there is a problem writing to local file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void write(final TaskList listToAdd) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            FileWriter resetfw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            resetfw.write(\"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            resetfw.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.filePath, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            for (int i \u003d 0; i \u003c listToAdd.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                String task \u003d listToAdd.get(i).toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                task \u003d task.replace(\"(\", \"/\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                task \u003d task.replace(\")\", \"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                task \u003d task.replace(\":\", \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                fw.write(\"\\n\" + task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            throw new DukeException(ioe.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 91
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @author Siqi"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @since 2020-08-25"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Task description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This states whether task is done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Task constructor, marked as not done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Task(final String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Task constructor, marked as done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param isDone    Whether the task is done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Task(final String description, final boolean isDone) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return (isDone ? \"1\" : \"0\"); //return tick or X symbols"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method marks the task as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return This returns the same task that has been marked as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Task markAsDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"[\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + this.getStatusIcon() + \"] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + this.description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method formats the task for display to the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return This returns a string containing the task details."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String display() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 68
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Represents a task list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @author Siqi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @since 2020-08-25"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * List of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Tasklist constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method gives the size of the task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return The size of task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method returns Task at index position in list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param index The index of the task to be returned."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return  The task at index position in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Task get(final int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method adds a task to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param task Task to be added to list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void add(final Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method marks the task at index index of the list as done."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param index     The index of the task to be marked as done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String markTaskAsDone(final int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Task newTask \u003d this.taskList.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList.set(index - 1, newTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return Ui.printMarkAsDone(newTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method deletes the task at the index in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param index     The index of the task to be deleted."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String deleteTask(final int index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Task removed \u003d this.taskList.get(index - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList.remove(index - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return Ui.printRemoveTask(removed, this.taskList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method adds a to do task in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param input     This contains information about task to be added."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return          String to be printed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String addTodo(final String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String description \u003d input.substring(4);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Task newTask \u003d new Todo(description.trim());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return Ui.printTaskAdded(newTask, taskList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method adds a deadline task in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description   This is the description of the deadline task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param d1            This is the date associated with the deadline task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param timeString    This is the time associated with the deadline task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return String to be printed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String addDeadline(final String description, final LocalDate d1,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                            final String timeString) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Task newTask \u003d new Deadline(description.trim(), d1, timeString);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return Ui.printTaskAdded(newTask, this.taskList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method adds a deadline task in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description   This is the description of the deadline task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param d1            This is the date associated with the deadline task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return String to be printed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String addDeadline(final String description, final LocalDate d1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Task newTask \u003d new Deadline(description.trim(), d1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return Ui.printTaskAdded(newTask, this.taskList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method adds an event task in the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description   This is the description of the event task."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param d2            This is the date associated with the event task."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param timeString    This is the time associated with the deadline task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return String to be printed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String addEvent(final String description, final LocalDate d2,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                         final String timeString) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Task newTask \u003d new Event(description.trim(), d2, timeString);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return Ui.printTaskAdded(newTask, this.taskList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method adds an event task in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description   This is the description of the event task."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param d2            This is the date associated with the event task."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return String to be printed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String addEvent(final String description, final LocalDate d2) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Task newTask \u003d new Event(description.trim(), d2);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.taskList.add(newTask);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return Ui.printTaskAdded(newTask, this.taskList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method finds tasks that match the query."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param input String containing query."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return      Task list containing tasks that match query."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public TaskList findTasks(final String input) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        TaskList result \u003d new TaskList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            String taskDescription \u003d this.taskList.get(i).getDescription();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            if (taskDescription.contains(input)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                result.add(this.taskList.get(i));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 148
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Represents a to do task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @author Siqi"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @since 2020-08-25"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * To do constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Todo(final String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * To do constructor, marked as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param isDone      The task is marked as done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Todo(final String description, final boolean isDone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method formats the task for display to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return This returns a string containing the task details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String display() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 38
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * Represents a UI class that handles interactions with the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @author Siqi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": " * @since 2020-08-25"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Scanner object to take in user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * UI constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method gets the next line from the scanner."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return This returns the next line from the scanner."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method prints a greeting when the user starts the program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void printGreeting() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Yooo, I\u0027m Duke.\\nWhat can I do for you today?\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foongsq"
        },
        "content": "              + \"Please enter dates and times like this: yyyy-mm-dd hhmm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method prints a goodbye message when the user closes the program."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void printGoodbye() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Bye bye!!! See you again next time :)\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method prints the error message of an exception."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param e The exception which we want to print its error message."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void printLoadingError(final Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method prints all the tasks in a task list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param list The task list to be printed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return Returns string containing what was printed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String printTasks(final TaskList list) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String result \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            System.out.println(i + 1 + \". \" + list.get(i).display());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            result +\u003d i + 1 + \". \" + list.get(i).display() + \"\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * Prints out all tasks in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param list  Task list containing tasks to be printed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return String of message to be printed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public String printMatchingTasks(final TaskList list) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        String result \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            System.out.println(i + 1 + \". \" + list.get(i).display());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            result +\u003d i + 1 + \". \" + list.get(i).display() + \"\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method prints a message confirming that a task has been added."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param task  The task that has been added."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param list  The list to which the task has been added."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return      String to be printed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static String printTaskAdded(final Task task,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                      final ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Added task: \" + task.display()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + \"\\nYou have \" + list.size() + \" task(s) left in your list.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"Added task: \" + task.display()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + \"\\nYou have \" + list.size() + \" task(s) left in your list.\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method prints a message confirming that a task has been done."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param newTask The task that has been marked as done."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return String of message to be printed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static String printMarkAsDone(final Task newTask) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Marked task as done:\\n\" + newTask.display());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"Marked task as done:\\n\" + newTask.display();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * This method prints a message confirming that a task has been deleted."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param removed   The task that has been removed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @param taskList  The list from which the task has been removed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     * @return          String of message to be printed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foongsq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public static String printRemoveTask(final Task removed,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                                       final ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        System.out.println(\"Removed task:\\n\" + removed.display()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + \"\\nYou have \" + taskList.size()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + \" task(s) left in your list.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        return \"Removed task:\\n\" + removed.display()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + \"\\nYou have \" + taskList.size()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                + \" task(s) left in your list.\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 124
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" cache\u003d\"true\" centerShape\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"99.0\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003cFont name\u003d\"Cambria\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" layoutX\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "foongsq": 26
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.control.Accordion?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Enter text here\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003cFont name\u003d\"Cambria\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003cFont name\u003d\"Cambria\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"554.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "      \u003cAccordion /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "foongsq": 28
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void deadlineConstructorTest1(){ //tests basic constructor"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"family day\", date);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[D][0] family day (by: 2020-08-24)\", deadline.toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void deadlineConstructorTest2(){ //test constructor that marks task as done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"family day\", true, date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[D][1] family day (by: 2020-08-24)\", deadline.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void deadlineDisplayTest(){ //tests display() method"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"family day\", date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[D][0] family day (by: Aug 24 2020)\", deadline.display());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void deadlineEmptyDescriptionTest(){ //tests display() method"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"\", date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[D][0]  (by: 2020-08-24)\", deadline.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 33
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    //tests if duke can run"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void dukeTest(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        new Duke(\"../../data/duke.txt\").run();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 9
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void eventConstructorTest1(){ //tests basic constructor"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Event event \u003d new Event(\"do homework\", date);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[E][0] do homework (at: 2020-08-24)\", event.toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void eventConstructorTest2(){ //test constructor that marks task as done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Event event \u003d new Event(\"do homework\", true, date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[E][1] do homework (at: 2020-08-24)\", event.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void eventDisplayTest(){ //tests display() method"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Event event \u003d new Event(\"do homework\", true, date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[E][1] do homework (at: Aug 24 2020)\", event.display());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void eventEmptyDescriptionTest(){ //tests display() method"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"2020-08-24\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Event event \u003d new Event(\"\", true, date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[E][1]  (at: Aug 24 2020)\", event.display());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 33
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void todoConstructorTest1(){ //tests basic constructor"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Todo todo \u003d new Todo(\"do homework\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[T][0] do homework\", todo.toString());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void todoConstructorTest2(){ //test constructor that marks task as done"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Todo todo \u003d new Todo(\"watch youtube videos\", true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[T][1] watch youtube videos\", todo.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void todoDisplayTest(){ //tests display() method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Todo todo \u003d new Todo(\"watch youtube videos\", true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[T][1] watch youtube videos\", todo.display());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foongsq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    public void todoEmptyDescriptionTest(){ //tests display() method"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        Todo todo \u003d new Todo(\"\", true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foongsq"
        },
        "content": "        assertEquals(\"[T][1] \", todo.display());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foongsq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foongsq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foongsq": 28
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foongsq"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foongsq"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foongsq"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foongsq"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foongsq"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foongsq"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foongsq"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foongsq"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foongsq"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "foongsq": 9
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foongsq"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "foongsq": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foongsq"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "foongsq": 1,
      "-": 37
    }
  }
]
