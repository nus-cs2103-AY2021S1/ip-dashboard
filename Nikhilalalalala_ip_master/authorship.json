[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"-"},"content":"1. After the importing is complete, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":"In the creation of this individual project, some code has been adapted from "},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"[this website](https://se-education.org/guides/tutorials/javaFx.html)"},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":" to make the graphical user interface."},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":" "},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":" You may view the user guide [here](https://nikhilalalalala.github.io/ip/)"}],"authorContributionMap":{"-":26,"Nikhilalalalala":6}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"Nikhilalalalala"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":44,"Nikhilalalalala":17}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"## A. Quick Start"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"1. Ensure you have Java 11 or above installed in your Computer."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"2. Download the latest duke.jar from the releases page of this repo."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"3. Copy the file to the folder you want to use as the home folder to run Duke."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"![Screenshot of Duke](Ui.png)"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"## B. Features "},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"- Add a task that can either be a todo, deadline, or event."},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"- Delete any of the tasks added."},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"- View all the tasks you have keyed in."},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"- Mark any task done. "},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"- Take down any quick short notes. "},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"- Save these tasks to you computer"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"## C. Usage"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"### 1. Greet Duke"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":"Say Hi to Duke!"},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"Example of usage: \u003cbr/\u003e"},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":" - `hi` "},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":" - `yo` "},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":" - `hello`"},{"lineNumber":33,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":34,"author":{"gitId":"Nikhilalalalala"},"content":"### 2. Add a task"},{"lineNumber":35,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":36,"author":{"gitId":"Nikhilalalalala"},"content":"A task can either be a todo, deadline or event. \u003cbr/\u003e"},{"lineNumber":37,"author":{"gitId":"Nikhilalalalala"},"content":"A todo needs the description of the task. \u003cbr/\u003e"},{"lineNumber":38,"author":{"gitId":"Nikhilalalalala"},"content":"A deadline needs both the description of the task and the deadline to complete it by. \u003cbr/\u003e"},{"lineNumber":39,"author":{"gitId":"Nikhilalalalala"},"content":"An event needs both the description of the task and the date of the event. "},{"lineNumber":40,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":41,"author":{"gitId":"Nikhilalalalala"},"content":"Format \u003cbr/\u003e"},{"lineNumber":42,"author":{"gitId":"Nikhilalalalala"},"content":"1. To add a todo: `todo (description)`"},{"lineNumber":43,"author":{"gitId":"Nikhilalalalala"},"content":"2. To add a deadline: `deadline (description) / (date)`"},{"lineNumber":44,"author":{"gitId":"Nikhilalalalala"},"content":"3. To add an event : `event (description)  / (date)`"},{"lineNumber":45,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":46,"author":{"gitId":"Nikhilalalalala"},"content":"Example of usage: \u003cbr/\u003e"},{"lineNumber":47,"author":{"gitId":"Nikhilalalalala"},"content":"- `todo finish cs2103t tasks` \u003cbr/\u003e "},{"lineNumber":48,"author":{"gitId":"Nikhilalalalala"},"content":"   Adds a todo with the description \"finish cs2103 tasks\" \u003cbr/\u003e"},{"lineNumber":49,"author":{"gitId":"Nikhilalalalala"},"content":"- `deadline finish cs2103t tasks / 18092020` \u003cbr/\u003e "},{"lineNumber":50,"author":{"gitId":"Nikhilalalalala"},"content":"   Adds a deadline with the description \"finish cs2103 tasks\" by the deadline 18-09-2020\u003cbr/\u003e"},{"lineNumber":51,"author":{"gitId":"Nikhilalalalala"},"content":"- `event cs2103t team meeting / 20092020` \u003cbr/\u003e "},{"lineNumber":52,"author":{"gitId":"Nikhilalalalala"},"content":"   Adds a event with the description \"cs2103t team meeting\" on the date 18-09-2020\u003cbr/\u003e"},{"lineNumber":53,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":54,"author":{"gitId":"Nikhilalalalala"},"content":"Ensure your date is keyed in `ddmmyyyy` format. "},{"lineNumber":55,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":56,"author":{"gitId":"Nikhilalalalala"},"content":"### 3. Lists all tasks"},{"lineNumber":57,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":58,"author":{"gitId":"Nikhilalalalala"},"content":"This lists all the tasks currently stored. "},{"lineNumber":59,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":60,"author":{"gitId":"Nikhilalalalala"},"content":"Example of usage: \u003cbr/\u003e"},{"lineNumber":61,"author":{"gitId":"Nikhilalalalala"},"content":"- `list`"},{"lineNumber":62,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":63,"author":{"gitId":"Nikhilalalalala"},"content":"### 4. Marks a specific task done"},{"lineNumber":64,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":65,"author":{"gitId":"Nikhilalalalala"},"content":"This marks the specified task done, regardless of which type of task it is (i.e. works for todo, deadline, event)."},{"lineNumber":66,"author":{"gitId":"Nikhilalalalala"},"content":"You need to know the number of the task you wish to mark done, which can be found by the list command. "},{"lineNumber":67,"author":{"gitId":"Nikhilalalalala"},"content":"The number should be a positive number and within than the number of tasks you have. "},{"lineNumber":68,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":69,"author":{"gitId":"Nikhilalalalala"},"content":"Format:  \u003cbr/\u003e"},{"lineNumber":70,"author":{"gitId":"Nikhilalalalala"},"content":" `done INDEX` \u003cbr/\u003e "},{"lineNumber":71,"author":{"gitId":"Nikhilalalalala"},"content":" This marks the task done at the specified index."},{"lineNumber":72,"author":{"gitId":"Nikhilalalalala"},"content":" "},{"lineNumber":73,"author":{"gitId":"Nikhilalalalala"},"content":"Example of usage: \u003cbr/\u003e"},{"lineNumber":74,"author":{"gitId":"Nikhilalalalala"},"content":"- `done 1`  \u003cbr/\u003e"},{"lineNumber":75,"author":{"gitId":"Nikhilalalalala"},"content":"   This marks the first task done.\u003cbr/\u003e"},{"lineNumber":76,"author":{"gitId":"Nikhilalalalala"},"content":"- `done 13` \u003cbr/\u003e"},{"lineNumber":77,"author":{"gitId":"Nikhilalalalala"},"content":"   This marks the 13th task done."},{"lineNumber":78,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":79,"author":{"gitId":"Nikhilalalalala"},"content":"### 5. Deletes a specific task"},{"lineNumber":80,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":81,"author":{"gitId":"Nikhilalalalala"},"content":"This deletes the specified task, regardless of which type of task it is (i.e. works for todo, deadline, event)."},{"lineNumber":82,"author":{"gitId":"Nikhilalalalala"},"content":"You need to know the number of the task you wish to delete, which can be found by the list command. "},{"lineNumber":83,"author":{"gitId":"Nikhilalalalala"},"content":"The number should be a positive number and within than the number of tasks you have. "},{"lineNumber":84,"author":{"gitId":"Nikhilalalalala"},"content":" "},{"lineNumber":85,"author":{"gitId":"Nikhilalalalala"},"content":"Format:  \u003cbr/\u003e"},{"lineNumber":86,"author":{"gitId":"Nikhilalalalala"},"content":"`delete INDEX` \u003cbr/\u003e"},{"lineNumber":87,"author":{"gitId":"Nikhilalalalala"},"content":"This deletes the task at the specified index"},{"lineNumber":88,"author":{"gitId":"Nikhilalalalala"},"content":" "},{"lineNumber":89,"author":{"gitId":"Nikhilalalalala"},"content":"Example of usage: \u003cbr/\u003e"},{"lineNumber":90,"author":{"gitId":"Nikhilalalalala"},"content":"- `delete 1`  \u003cbr/\u003e"},{"lineNumber":91,"author":{"gitId":"Nikhilalalalala"},"content":"   This deletes the first task.\u003cbr/\u003e"},{"lineNumber":92,"author":{"gitId":"Nikhilalalalala"},"content":"- `delete 13` \u003cbr/\u003e"},{"lineNumber":93,"author":{"gitId":"Nikhilalalalala"},"content":"   This deletes the 13th task."},{"lineNumber":94,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":95,"author":{"gitId":"Nikhilalalalala"},"content":"### 6. Finds a task"},{"lineNumber":96,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":97,"author":{"gitId":"Nikhilalalalala"},"content":"This helps you search for a task that matches your input."},{"lineNumber":98,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":99,"author":{"gitId":"Nikhilalalalala"},"content":"Format: \u003cbr/\u003e"},{"lineNumber":100,"author":{"gitId":"Nikhilalalalala"},"content":"`find (input)` \u003cbr/\u003e"},{"lineNumber":101,"author":{"gitId":"Nikhilalalalala"},"content":"`search (input)`"},{"lineNumber":102,"author":{"gitId":"Nikhilalalalala"},"content":"This helps you search for a task that matches the input given."},{"lineNumber":103,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":104,"author":{"gitId":"Nikhilalalalala"},"content":"Example of usage: \u003cbr/\u003e"},{"lineNumber":105,"author":{"gitId":"Nikhilalalalala"},"content":"- `find cs2103t` "},{"lineNumber":106,"author":{"gitId":"Nikhilalalalala"},"content":"   This finds all tasks that includes cs2103t."},{"lineNumber":107,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":108,"author":{"gitId":"Nikhilalalalala"},"content":"### 7. Leave the conversation"},{"lineNumber":109,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":110,"author":{"gitId":"Nikhilalalalala"},"content":"Say bye to duke."},{"lineNumber":111,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":112,"author":{"gitId":"Nikhilalalalala"},"content":"Example of usage: \u003cbr/\u003e"},{"lineNumber":113,"author":{"gitId":"Nikhilalalalala"},"content":"- `bye`"},{"lineNumber":114,"author":{"gitId":"Nikhilalalalala"},"content":"- `cya`"}],"authorContributionMap":{"-":10,"Nikhilalalalala":104}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":" * Wraps the tasklist in a Duke object."},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"    private TaskList taskList;"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"    public Duke() {"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"        this.taskList \u003d new TaskList();"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"    public TaskList getTaskList() {"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"        return taskList;"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":2,"Nikhilalalalala":14}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"class DukeGotNoArgumentsException extends IllegalArgumentException {"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"    public DukeGotNoArgumentsException(String message) {"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"        super(\"Please reenter your input in the format \" + message + \"\\nFill in all blanks.\");"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"}"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"class DukeCannotUnderstandException extends IllegalArgumentException {"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"    public DukeCannotUnderstandException() {"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"        super(\"Hmm I did not understand what you meant.\\n\""},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"                + \"Could you try again?\");"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":14}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.ui.Main;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"public class Launcher {"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"    public static void main(String[] args) {"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"}"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":""}],"authorContributionMap":{"Nikhilalalalala":14}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"import java.util.zip.DataFormatException;"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.command.AddCommand;"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.command.ByeCommand;"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.command.Command;"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.command.DoneCommand;"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.command.FindCommand;"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.command.HelloCommand;"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.command.ListCommand;"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.ui.Ui;"},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":" * Understands inputs given by user and validates them."},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"public class Parser {"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"     * Understands input from user"},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param userText input from user"},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param taskList list of tasks user has currently"},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":"     * @return boolean value of whether conversation is to be continued"},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":"    public static String understandText(String userText, TaskList taskList) {"},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":"            String editedAnswer \u003d userText.strip().toLowerCase();"},{"lineNumber":33,"author":{"gitId":"Nikhilalalalala"},"content":"            String[] answers \u003d editedAnswer.split(\" \", 2);"},{"lineNumber":34,"author":{"gitId":"Nikhilalalalala"},"content":"            String commandWord \u003d answers[0];"},{"lineNumber":35,"author":{"gitId":"Nikhilalalalala"},"content":"            if (answers.length \u003d\u003d 2 \u0026\u0026 Commands.DONE.containsKeyWord(commandWord)"},{"lineNumber":36,"author":{"gitId":"Nikhilalalalala"},"content":"                    || Commands.DELETE.containsKeyWord(commandWord)) {"},{"lineNumber":37,"author":{"gitId":"Nikhilalalalala"},"content":"                return Parser.understandTaskNumber(answers[0], answers[1], taskList);"},{"lineNumber":38,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":39,"author":{"gitId":"Nikhilalalalala"},"content":"            } else if (Commands.FIND.containsKeyWord(commandWord)) {"},{"lineNumber":40,"author":{"gitId":"Nikhilalalalala"},"content":"                return Parser.understandMatchingString(editedAnswer, taskList);"},{"lineNumber":41,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":42,"author":{"gitId":"Nikhilalalalala"},"content":"            } else if (Commands.LIST.containsKeyWord(commandWord)) {"},{"lineNumber":43,"author":{"gitId":"Nikhilalalalala"},"content":"                return (new ListCommand()).execute(\" \", taskList);"},{"lineNumber":44,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":45,"author":{"gitId":"Nikhilalalalala"},"content":"            } else if (Commands.EXIT.containsKeyWord(commandWord)) {"},{"lineNumber":46,"author":{"gitId":"Nikhilalalalala"},"content":"                return (new ByeCommand()).execute(\" \", taskList);"},{"lineNumber":47,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":48,"author":{"gitId":"Nikhilalalalala"},"content":"            } else if (Commands.HELLO.containsKeyWord(commandWord)) {"},{"lineNumber":49,"author":{"gitId":"Nikhilalalalala"},"content":"                return (new HelloCommand()).execute(\" \", taskList);"},{"lineNumber":50,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":51,"author":{"gitId":"Nikhilalalalala"},"content":"            } else if (Commands.TODO.containsKeyWord(commandWord)"},{"lineNumber":52,"author":{"gitId":"Nikhilalalalala"},"content":"                    || Commands.DEADLINE.containsKeyWord(commandWord)"},{"lineNumber":53,"author":{"gitId":"Nikhilalalalala"},"content":"                    || Commands.EVENT.containsKeyWord(commandWord)) {"},{"lineNumber":54,"author":{"gitId":"Nikhilalalalala"},"content":"                return Parser.understandTaskDescription(userText, taskList);"},{"lineNumber":55,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":56,"author":{"gitId":"Nikhilalalalala"},"content":"            } else {"},{"lineNumber":57,"author":{"gitId":"Nikhilalalalala"},"content":"                throw new DukeCannotUnderstandException();"},{"lineNumber":58,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (DukeCannotUnderstandException e) {"},{"lineNumber":60,"author":{"gitId":"Nikhilalalalala"},"content":"            return Ui.printErrorMessage(e.getMessage());"},{"lineNumber":61,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":64,"author":{"gitId":"Nikhilalalalala"},"content":"    private static String understandMatchingString(String userInput, TaskList taskList) {"},{"lineNumber":65,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"Nikhilalalalala"},"content":"            String[] dissectedInput \u003d userInput.split(\" \", 2);"},{"lineNumber":67,"author":{"gitId":"Nikhilalalalala"},"content":"            if (dissectedInput.length \u003e 1) {"},{"lineNumber":68,"author":{"gitId":"Nikhilalalalala"},"content":"                String toMatch \u003d dissectedInput[1];"},{"lineNumber":69,"author":{"gitId":"Nikhilalalalala"},"content":"                Command command \u003d new FindCommand();"},{"lineNumber":70,"author":{"gitId":"Nikhilalalalala"},"content":"                return command.execute(toMatch, taskList);"},{"lineNumber":71,"author":{"gitId":"Nikhilalalalala"},"content":"            } else {"},{"lineNumber":72,"author":{"gitId":"Nikhilalalalala"},"content":"                throw new DukeGotNoArgumentsException(\"find \u003cthing to find\u003e\");"},{"lineNumber":73,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (DukeGotNoArgumentsException e) {"},{"lineNumber":75,"author":{"gitId":"Nikhilalalalala"},"content":"            return Ui.printErrorMessage(e.getMessage());"},{"lineNumber":76,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":79,"author":{"gitId":"Nikhilalalalala"},"content":"    private static String understandTaskNumber(String stringCommand, String answer, TaskList taskList) {"},{"lineNumber":80,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"Nikhilalalalala"},"content":"            int givenIndex \u003d Integer.parseInt(answer);"},{"lineNumber":82,"author":{"gitId":"Nikhilalalalala"},"content":"            int realIndex \u003d givenIndex - 1;"},{"lineNumber":83,"author":{"gitId":"Nikhilalalalala"},"content":"            if (realIndex \u003e\u003d taskList.getNumberOfTasks()) {"},{"lineNumber":84,"author":{"gitId":"Nikhilalalalala"},"content":"                throw new IndexOutOfBoundsException();"},{"lineNumber":85,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"Nikhilalalalala"},"content":"            Command command;"},{"lineNumber":87,"author":{"gitId":"Nikhilalalalala"},"content":"            if (Commands.DONE.containsKeyWord(stringCommand)) {"},{"lineNumber":88,"author":{"gitId":"Nikhilalalalala"},"content":"                command \u003d new DoneCommand();"},{"lineNumber":89,"author":{"gitId":"Nikhilalalalala"},"content":"            } else {"},{"lineNumber":90,"author":{"gitId":"Nikhilalalalala"},"content":"                assert Commands.DELETE.containsKeyWord(stringCommand);"},{"lineNumber":91,"author":{"gitId":"Nikhilalalalala"},"content":"                command \u003d new DeleteCommand();"},{"lineNumber":92,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"Nikhilalalalala"},"content":"            return command.execute(String.valueOf(realIndex), taskList);"},{"lineNumber":94,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":95,"author":{"gitId":"Nikhilalalalala"},"content":"            return Ui.printErrorMessage(\"I can\u0027t seem to understand what task you are referring to.\\n\""},{"lineNumber":96,"author":{"gitId":"Nikhilalalalala"},"content":"                    + \"Please let me know in this format: \" + stringCommand"},{"lineNumber":97,"author":{"gitId":"Nikhilalalalala"},"content":"                    + \" \u003cnumber of task\u003e\\n\");"},{"lineNumber":98,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":99,"author":{"gitId":"Nikhilalalalala"},"content":"            return Ui.printErrorMessage(\"Hmm... I don\u0027t have a task numbered \" + answer);"},{"lineNumber":100,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":103,"author":{"gitId":"Nikhilalalalala"},"content":"    private static String understandTaskDescription(String answer, TaskList taskList) {"},{"lineNumber":104,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":105,"author":{"gitId":"Nikhilalalalala"},"content":"            String[] answers \u003d answer.split(\" \", 2);"},{"lineNumber":106,"author":{"gitId":"Nikhilalalalala"},"content":"            String type \u003d answers[0].strip();"},{"lineNumber":107,"author":{"gitId":"Nikhilalalalala"},"content":"            if (answers.length \u003e 1 || Commands.TODO.containsKeyWord(type)) {"},{"lineNumber":108,"author":{"gitId":"Nikhilalalalala"},"content":"                String task \u003d answers[1].strip();"},{"lineNumber":109,"author":{"gitId":"Nikhilalalalala"},"content":"                if (Commands.TODO.containsKeyWord(type)) {"},{"lineNumber":110,"author":{"gitId":"Nikhilalalalala"},"content":"                    Command command \u003d new AddCommand(type);"},{"lineNumber":111,"author":{"gitId":"Nikhilalalalala"},"content":"                    return command.execute(task, taskList);"},{"lineNumber":112,"author":{"gitId":"Nikhilalalalala"},"content":"                } else {"},{"lineNumber":113,"author":{"gitId":"Nikhilalalalala"},"content":"                    // it is either an event or deadline"},{"lineNumber":114,"author":{"gitId":"Nikhilalalalala"},"content":"                    return Parser.understandDeadlineOrEventDate(type, task, taskList);"},{"lineNumber":115,"author":{"gitId":"Nikhilalalalala"},"content":"                }"},{"lineNumber":116,"author":{"gitId":"Nikhilalalalala"},"content":"            } else {"},{"lineNumber":117,"author":{"gitId":"Nikhilalalalala"},"content":"                //  no description given"},{"lineNumber":118,"author":{"gitId":"Nikhilalalalala"},"content":"                String instruction \u003d Commands.DEADLINE.containsKeyWord(type)"},{"lineNumber":119,"author":{"gitId":"Nikhilalalalala"},"content":"                        ? \"\u003ctype of task\u003e \u003cdescription\u003e / \u003cdue date\u003e\""},{"lineNumber":120,"author":{"gitId":"Nikhilalalalala"},"content":"                        : \"\u003ctype of task\u003e \u003cdescription\u003e / \u003cdate of event\u003e\";"},{"lineNumber":121,"author":{"gitId":"Nikhilalalalala"},"content":"                throw new DukeGotNoArgumentsException(instruction);"},{"lineNumber":122,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":123,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (DukeGotNoArgumentsException e) {"},{"lineNumber":124,"author":{"gitId":"Nikhilalalalala"},"content":"            return Ui.printErrorMessage(e.getMessage());"},{"lineNumber":125,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":126,"author":{"gitId":"Nikhilalalalala"},"content":"            return Ui.printErrorMessage(answer);"},{"lineNumber":127,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":130,"author":{"gitId":"Nikhilalalalala"},"content":"    private static String understandDeadlineOrEventDate(String type, String task, TaskList taskList) {"},{"lineNumber":131,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":132,"author":{"gitId":"Nikhilalalalala"},"content":"            String[] partsOfTask \u003d task.strip().split(\"/\", 2);"},{"lineNumber":133,"author":{"gitId":"Nikhilalalalala"},"content":"            if (partsOfTask.length \u003e 1) {"},{"lineNumber":134,"author":{"gitId":"Nikhilalalalala"},"content":"                String date \u003d partsOfTask[1].strip();"},{"lineNumber":135,"author":{"gitId":"Nikhilalalalala"},"content":"                // check if the date is given in correct format"},{"lineNumber":136,"author":{"gitId":"Nikhilalalalala"},"content":"                if (date.length() \u003d\u003d 8) {"},{"lineNumber":137,"author":{"gitId":"Nikhilalalalala"},"content":"                    Command command \u003d new AddCommand(type);"},{"lineNumber":138,"author":{"gitId":"Nikhilalalalala"},"content":"                    return command.execute(task, taskList);"},{"lineNumber":139,"author":{"gitId":"Nikhilalalalala"},"content":"                } else {"},{"lineNumber":140,"author":{"gitId":"Nikhilalalalala"},"content":"                    throw new DataFormatException();"},{"lineNumber":141,"author":{"gitId":"Nikhilalalalala"},"content":"                }"},{"lineNumber":142,"author":{"gitId":"Nikhilalalalala"},"content":"            } else {"},{"lineNumber":143,"author":{"gitId":"Nikhilalalalala"},"content":"                // date details not given"},{"lineNumber":144,"author":{"gitId":"Nikhilalalalala"},"content":"                String instruction \u003d Commands.DEADLINE.containsKeyWord(type)"},{"lineNumber":145,"author":{"gitId":"Nikhilalalalala"},"content":"                        ? \"\u003ctype of task\u003e \u003cdescription\u003e / \u003cdue date\u003e\""},{"lineNumber":146,"author":{"gitId":"Nikhilalalalala"},"content":"                        : \"\u003ctype of task\u003e \u003cdescription\u003e / \u003cdate of event\u003e\";"},{"lineNumber":147,"author":{"gitId":"Nikhilalalalala"},"content":"                throw new DukeGotNoArgumentsException(instruction);"},{"lineNumber":148,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":149,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (DukeGotNoArgumentsException e) {"},{"lineNumber":150,"author":{"gitId":"Nikhilalalalala"},"content":"            return Ui.printErrorMessage(e.getMessage());"},{"lineNumber":151,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (DataFormatException e) {"},{"lineNumber":152,"author":{"gitId":"Nikhilalalalala"},"content":"            return Ui.printErrorMessage(\"Please key in again with the date in the ddmmyyyy format.\");"},{"lineNumber":153,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":156,"author":{"gitId":"Nikhilalalalala"},"content":"    enum Commands {"},{"lineNumber":157,"author":{"gitId":"Nikhilalalalala"},"content":"        TODO(\"todo\"),"},{"lineNumber":158,"author":{"gitId":"Nikhilalalalala"},"content":"        DEADLINE(\"deadline\"),"},{"lineNumber":159,"author":{"gitId":"Nikhilalalalala"},"content":"        EVENT(\"event\"),"},{"lineNumber":160,"author":{"gitId":"Nikhilalalalala"},"content":"        LIST(\"list\", \"name\"),"},{"lineNumber":161,"author":{"gitId":"Nikhilalalalala"},"content":"        EXIT(\"bye\", \"goodbye\", \"cya\", \"exit\"),"},{"lineNumber":162,"author":{"gitId":"Nikhilalalalala"},"content":"        DONE(\"done\", \"finish\"),"},{"lineNumber":163,"author":{"gitId":"Nikhilalalalala"},"content":"        DELETE(\"delete\", \"remove\"),"},{"lineNumber":164,"author":{"gitId":"Nikhilalalalala"},"content":"        FIND(\"find\", \"search\"),"},{"lineNumber":165,"author":{"gitId":"Nikhilalalalala"},"content":"        HELLO(\"hello\", \"hi\", \"yo\");"},{"lineNumber":166,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":167,"author":{"gitId":"Nikhilalalalala"},"content":"        private List\u003cString\u003e relevantWords;"},{"lineNumber":168,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":169,"author":{"gitId":"Nikhilalalalala"},"content":"        Commands(String... relevantWords) {"},{"lineNumber":170,"author":{"gitId":"Nikhilalalalala"},"content":"            this.relevantWords \u003d Arrays.asList(relevantWords);"},{"lineNumber":171,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":173,"author":{"gitId":"Nikhilalalalala"},"content":"        public boolean containsKeyWord(String userInput) {"},{"lineNumber":174,"author":{"gitId":"Nikhilalalalala"},"content":"            return this.relevantWords.contains(userInput);"},{"lineNumber":175,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":178,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":178}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.task.Deadline;"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.task.Event;"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.task.Task;"},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.ui.Ui;"},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"class Storage {"},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"    private File savedCopy;"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"    private List\u003cTask\u003e savedTasks;"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"    Storage() {"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"            this.savedTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"            this.savedCopy \u003d new File(\"./data/save.txt\");"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"            if (!this.savedCopy.exists()) {"},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":"                File directory \u003d new File(\"./data\");"},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":"                directory.mkdir();"},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"                this.savedCopy.createNewFile();"},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":"            } else {"},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":"                this.retrieveStorage();"},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (IOException e) {"},{"lineNumber":34,"author":{"gitId":"Nikhilalalalala"},"content":"            Ui.printErrorMessage(\"Something went wrong:  \" + e.getMessage());"},{"lineNumber":35,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":38,"author":{"gitId":"Nikhilalalalala"},"content":"    private void retrieveStorage() {"},{"lineNumber":39,"author":{"gitId":"Nikhilalalalala"},"content":"        // LIMITATION: CANNOT HAVE COMMA IN DESCRIPTION OF TASKS"},{"lineNumber":40,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"Nikhilalalalala"},"content":"            FileReader fileReader \u003d new FileReader(this.savedCopy);"},{"lineNumber":42,"author":{"gitId":"Nikhilalalalala"},"content":"            BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"},{"lineNumber":43,"author":{"gitId":"Nikhilalalalala"},"content":"            String eachLine \u003d bufferedReader.readLine();"},{"lineNumber":44,"author":{"gitId":"Nikhilalalalala"},"content":"            while (eachLine !\u003d null) {"},{"lineNumber":45,"author":{"gitId":"Nikhilalalalala"},"content":"                String[] simplerData \u003d eachLine.split(\",\");"},{"lineNumber":46,"author":{"gitId":"Nikhilalalalala"},"content":"                Task toAdd;"},{"lineNumber":47,"author":{"gitId":"Nikhilalalalala"},"content":"                if (simplerData.length \u003d\u003d 3) {"},{"lineNumber":48,"author":{"gitId":"Nikhilalalalala"},"content":"                    assert simplerData[0].equals(\"T\");"},{"lineNumber":49,"author":{"gitId":"Nikhilalalalala"},"content":"                    toAdd \u003d this.readTask(simplerData);"},{"lineNumber":50,"author":{"gitId":"Nikhilalalalala"},"content":"                } else {"},{"lineNumber":51,"author":{"gitId":"Nikhilalalalala"},"content":"                     assert simplerData.length \u003d\u003d 4;"},{"lineNumber":52,"author":{"gitId":"Nikhilalalalala"},"content":"                    toAdd \u003d this.readDeadlineOrEvent(simplerData);"},{"lineNumber":53,"author":{"gitId":"Nikhilalalalala"},"content":"                }"},{"lineNumber":54,"author":{"gitId":"Nikhilalalalala"},"content":"                this.savedTasks.add(toAdd);"},{"lineNumber":55,"author":{"gitId":"Nikhilalalalala"},"content":"                eachLine \u003d bufferedReader.readLine();"},{"lineNumber":56,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (IOException e) {"},{"lineNumber":58,"author":{"gitId":"Nikhilalalalala"},"content":"            Ui.printErrorMessage(\"Something went wrong:  \" + e.getMessage());"},{"lineNumber":59,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":62,"author":{"gitId":"Nikhilalalalala"},"content":"    private Task readTask(String[] details) {"},{"lineNumber":63,"author":{"gitId":"Nikhilalalalala"},"content":"        String description \u003d details[2].strip();"},{"lineNumber":64,"author":{"gitId":"Nikhilalalalala"},"content":"        boolean isDone \u003d details[1].strip().equals(\"D\");"},{"lineNumber":65,"author":{"gitId":"Nikhilalalalala"},"content":"        Task toAdd \u003d new Task(description, isDone);"},{"lineNumber":66,"author":{"gitId":"Nikhilalalalala"},"content":"        return toAdd;"},{"lineNumber":67,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":69,"author":{"gitId":"Nikhilalalalala"},"content":"    private Task readDeadlineOrEvent(String[] details) {"},{"lineNumber":70,"author":{"gitId":"Nikhilalalalala"},"content":"        String description \u003d details[2].strip();"},{"lineNumber":71,"author":{"gitId":"Nikhilalalalala"},"content":"        boolean isDone \u003d details[1].strip().equals(\"D\");"},{"lineNumber":72,"author":{"gitId":"Nikhilalalalala"},"content":"        String date \u003d details[3].strip();"},{"lineNumber":73,"author":{"gitId":"Nikhilalalalala"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"ddMMyyyy\");"},{"lineNumber":74,"author":{"gitId":"Nikhilalalalala"},"content":"        LocalDate actualDate \u003d LocalDate.parse(date, formatter);"},{"lineNumber":75,"author":{"gitId":"Nikhilalalalala"},"content":"        Task toAdd;"},{"lineNumber":76,"author":{"gitId":"Nikhilalalalala"},"content":"        if (details[0].equals(\"D\")) {"},{"lineNumber":77,"author":{"gitId":"Nikhilalalalala"},"content":"            toAdd \u003d new Deadline(description, actualDate, isDone);"},{"lineNumber":78,"author":{"gitId":"Nikhilalalalala"},"content":"        } else {"},{"lineNumber":79,"author":{"gitId":"Nikhilalalalala"},"content":"            assert details[0].equals(\"E\");"},{"lineNumber":80,"author":{"gitId":"Nikhilalalalala"},"content":"            toAdd \u003d new Event(description, actualDate, isDone);"},{"lineNumber":81,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"Nikhilalalalala"},"content":"        return toAdd;"},{"lineNumber":83,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":85,"author":{"gitId":"Nikhilalalalala"},"content":"    public List\u003cTask\u003e getSavedTasks() {"},{"lineNumber":86,"author":{"gitId":"Nikhilalalalala"},"content":"        return this.savedTasks;"},{"lineNumber":87,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":89,"author":{"gitId":"Nikhilalalalala"},"content":"    public void saveIntoHardDisk() {"},{"lineNumber":90,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"Nikhilalalalala"},"content":"            FileWriter writer \u003d new FileWriter(\"./data/save.txt\", false);"},{"lineNumber":92,"author":{"gitId":"Nikhilalalalala"},"content":"            writer.write(\"\");"},{"lineNumber":93,"author":{"gitId":"Nikhilalalalala"},"content":"            writer.close();"},{"lineNumber":94,"author":{"gitId":"Nikhilalalalala"},"content":"            writer \u003d new FileWriter(\"./data/save.txt\", true);"},{"lineNumber":95,"author":{"gitId":"Nikhilalalalala"},"content":"            for (Task task : this.savedTasks) {"},{"lineNumber":96,"author":{"gitId":"Nikhilalalalala"},"content":"                writer.write(task.getStoreRepresentation() + \"\\n\");"},{"lineNumber":97,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"Nikhilalalalala"},"content":"            writer.close();"},{"lineNumber":99,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (IOException e) {"},{"lineNumber":100,"author":{"gitId":"Nikhilalalalala"},"content":"            Ui.printErrorMessage(\"Something went wrong:  \" + e.getMessage());"},{"lineNumber":101,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":103}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":" * Handles actions by user with regards to all their tasks."},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"    private static HashMap\u003cInteger, Task\u003e matchingTasks;"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"    private Storage savedStorage;"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"    private List\u003cTask\u003e allTasks;"},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"     * Creates an empty TaskList."},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"    public TaskList() {"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"        this.savedStorage \u003d new Storage();"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"        this.allTasks \u003d this.savedStorage.getSavedTasks();"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"    public int getNumberOfTasks() {"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"        return this.allTasks.size();"},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":"     * Adds task to the current list of tasks."},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param toAdd Task to add"},{"lineNumber":33,"author":{"gitId":"Nikhilalalalala"},"content":"     * @return response to User."},{"lineNumber":34,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Nikhilalalalala"},"content":"    public String addTask(Task toAdd) {"},{"lineNumber":36,"author":{"gitId":"Nikhilalalalala"},"content":"        this.allTasks.add(toAdd);"},{"lineNumber":37,"author":{"gitId":"Nikhilalalalala"},"content":"        String printTask \u003d \"Alright, its in your list now!\\n\\t\" + toAdd"},{"lineNumber":38,"author":{"gitId":"Nikhilalalalala"},"content":"                + \"\\nNow you have \" + this.allTasks.size() + \" tasks.\";"},{"lineNumber":39,"author":{"gitId":"Nikhilalalalala"},"content":"        return Ui.printMessage(printTask);"},{"lineNumber":40,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":42,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Nikhilalalalala"},"content":"     * Retrieves all the tasks currently stored."},{"lineNumber":44,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"Nikhilalalalala"},"content":"     * @return the tasks currently stored in a List"},{"lineNumber":46,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Nikhilalalalala"},"content":"    public List\u003cTask\u003e getAllTasks() {"},{"lineNumber":48,"author":{"gitId":"Nikhilalalalala"},"content":"        return this.allTasks;"},{"lineNumber":49,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":51,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Nikhilalalalala"},"content":"     * Prints the output of all tasks in store currently."},{"lineNumber":53,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"Nikhilalalalala"},"content":"     * @return response to User."},{"lineNumber":55,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"Nikhilalalalala"},"content":"    public String printStore() {"},{"lineNumber":57,"author":{"gitId":"Nikhilalalalala"},"content":"        String printList;"},{"lineNumber":58,"author":{"gitId":"Nikhilalalalala"},"content":"        if (this.allTasks.size() \u003d\u003d 0) {"},{"lineNumber":59,"author":{"gitId":"Nikhilalalalala"},"content":"            printList \u003d \"There are no tasks added till now.\\nAdd one by just typing its name.\\n\";"},{"lineNumber":60,"author":{"gitId":"Nikhilalalalala"},"content":"        } else {"},{"lineNumber":61,"author":{"gitId":"Nikhilalalalala"},"content":"            printList \u003d \"Please finish these tasks ASAP!\\n\";"},{"lineNumber":62,"author":{"gitId":"Nikhilalalalala"},"content":"            int counter \u003d 1;"},{"lineNumber":63,"author":{"gitId":"Nikhilalalalala"},"content":"            for (Task task : this.allTasks) {"},{"lineNumber":64,"author":{"gitId":"Nikhilalalalala"},"content":"                printList \u003d printList.concat(\"[\" + counter + \"] \" + task + \"\\n\");"},{"lineNumber":65,"author":{"gitId":"Nikhilalalalala"},"content":"                counter++;"},{"lineNumber":66,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"Nikhilalalalala"},"content":"            printList \u003d printList.concat(\"If you\u0027re brave enough to start,\\n\""},{"lineNumber":68,"author":{"gitId":"Nikhilalalalala"},"content":"                    + \"You\u0027re strong enough to finish it!\\n\");"},{"lineNumber":69,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"Nikhilalalalala"},"content":"        return Ui.printMessage(printList);"},{"lineNumber":71,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":73,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"Nikhilalalalala"},"content":"     * Sets the selected task to be completed."},{"lineNumber":75,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param index index of task to be set completed."},{"lineNumber":77,"author":{"gitId":"Nikhilalalalala"},"content":"     * @return response to User."},{"lineNumber":78,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"Nikhilalalalala"},"content":"    public String completeTask(int index) {"},{"lineNumber":80,"author":{"gitId":"Nikhilalalalala"},"content":"        assert index \u003c this.allTasks.size();"},{"lineNumber":81,"author":{"gitId":"Nikhilalalalala"},"content":"        Task toComplete \u003d this.allTasks.get(index);"},{"lineNumber":82,"author":{"gitId":"Nikhilalalalala"},"content":"        return toComplete.finishTask();"},{"lineNumber":83,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":85,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"Nikhilalalalala"},"content":"     * Removes task from current list."},{"lineNumber":87,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param index index of task to be removed."},{"lineNumber":89,"author":{"gitId":"Nikhilalalalala"},"content":"     * @return response to User."},{"lineNumber":90,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"Nikhilalalalala"},"content":"    public String deleteTask(int index) {"},{"lineNumber":92,"author":{"gitId":"Nikhilalalalala"},"content":"        assert index \u003c this.allTasks.size();"},{"lineNumber":93,"author":{"gitId":"Nikhilalalalala"},"content":"        this.allTasks.remove(index);"},{"lineNumber":94,"author":{"gitId":"Nikhilalalalala"},"content":"        return Ui.printDeleteTaskMessage();"},{"lineNumber":95,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":97,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"Nikhilalalalala"},"content":"     * Sends instruction to save the current tasks."},{"lineNumber":99,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"Nikhilalalalala"},"content":"    public void saveIntoHardDisk() {"},{"lineNumber":101,"author":{"gitId":"Nikhilalalalala"},"content":"        this.savedStorage.saveIntoHardDisk();"},{"lineNumber":102,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":104,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"Nikhilalalalala"},"content":"     * Finds and prints matching tasks."},{"lineNumber":106,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param toMatch the word to match with."},{"lineNumber":108,"author":{"gitId":"Nikhilalalalala"},"content":"     * @return response to User."},{"lineNumber":109,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"Nikhilalalalala"},"content":"    public String matchTasks(String toMatch) {"},{"lineNumber":111,"author":{"gitId":"Nikhilalalalala"},"content":"        TaskList.matchingTasks \u003d new HashMap\u003c\u003e();"},{"lineNumber":112,"author":{"gitId":"Nikhilalalalala"},"content":"        checkAllTasksForMatch(toMatch);"},{"lineNumber":113,"author":{"gitId":"Nikhilalalalala"},"content":"        return matchTasksWithOffset(toMatch, 1);"},{"lineNumber":114,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":116,"author":{"gitId":"Nikhilalalalala"},"content":"    private void checkAllTasksForMatch(String toMatch) {"},{"lineNumber":117,"author":{"gitId":"Nikhilalalalala"},"content":"        for (int i \u003d 0; i \u003c this.allTasks.size(); i++) {"},{"lineNumber":118,"author":{"gitId":"Nikhilalalalala"},"content":"            Task task \u003d this.allTasks.get(i);"},{"lineNumber":119,"author":{"gitId":"Nikhilalalalala"},"content":"            if (task.canMatch(toMatch)) {"},{"lineNumber":120,"author":{"gitId":"Nikhilalalalala"},"content":"                TaskList.matchingTasks.put(i, task);"},{"lineNumber":121,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":122,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":125,"author":{"gitId":"Nikhilalalalala"},"content":"    private String printMatchingTasks(String toMatch) {"},{"lineNumber":126,"author":{"gitId":"Nikhilalalalala"},"content":"        String printMatchingTasks;"},{"lineNumber":127,"author":{"gitId":"Nikhilalalalala"},"content":"        if (TaskList.matchingTasks.size() \u003d\u003d 0) {"},{"lineNumber":128,"author":{"gitId":"Nikhilalalalala"},"content":"            printMatchingTasks \u003d \"There are no tasks that match \" + toMatch + \"\\n\";"},{"lineNumber":129,"author":{"gitId":"Nikhilalalalala"},"content":"        } else {"},{"lineNumber":130,"author":{"gitId":"Nikhilalalalala"},"content":"            printMatchingTasks \u003d \"Matching tasks: \\n\";"},{"lineNumber":131,"author":{"gitId":"Nikhilalalalala"},"content":"            for (Task task : TaskList.matchingTasks.values()) {"},{"lineNumber":132,"author":{"gitId":"Nikhilalalalala"},"content":"                printMatchingTasks \u003d printMatchingTasks.concat(task + \"\\n\");"},{"lineNumber":133,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"Nikhilalalalala"},"content":"        return Ui.printMessage(printMatchingTasks);"},{"lineNumber":136,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":138,"author":{"gitId":"Nikhilalalalala"},"content":"    private String matchTasksWithOffset(String toMatch, int offset) {"},{"lineNumber":139,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":140,"author":{"gitId":"Nikhilalalalala"},"content":"            int offsetLimit \u003d 5;"},{"lineNumber":141,"author":{"gitId":"Nikhilalalalala"},"content":"            int substringEndIndex \u003d toMatch.length() - offset;"},{"lineNumber":142,"author":{"gitId":"Nikhilalalalala"},"content":"            String toMatchOffset \u003d toMatch.substring(0, substringEndIndex);"},{"lineNumber":143,"author":{"gitId":"Nikhilalalalala"},"content":"            if (offset \u003d\u003d offsetLimit) {"},{"lineNumber":144,"author":{"gitId":"Nikhilalalalala"},"content":"                return this.printMatchingTasks(toMatch);"},{"lineNumber":145,"author":{"gitId":"Nikhilalalalala"},"content":"            } else {"},{"lineNumber":146,"author":{"gitId":"Nikhilalalalala"},"content":"                checkAllTasksForMatch(toMatchOffset);"},{"lineNumber":147,"author":{"gitId":"Nikhilalalalala"},"content":"                return matchTasksWithOffset(toMatch, offset + 1);"},{"lineNumber":148,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":149,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":150,"author":{"gitId":"Nikhilalalalala"},"content":"            return this.printMatchingTasks(toMatch);"},{"lineNumber":151,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":153}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":" * Represents command to add all forms of tasks into list."},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"public class AddCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"     * Constructs the command with the type of task being added."},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param text type of task being added."},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"    public AddCommand(String text) {"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"        this.commandText \u003d text;"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"     * Adds the task."},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param taskDetails details of task given by user."},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param taskList    current list of tasks."},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":"    public String execute(String taskDetails, TaskList taskList) {"},{"lineNumber":33,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"Nikhilalalalala"},"content":"            if (this.commandText.equals(Types.TODO.text)) {"},{"lineNumber":35,"author":{"gitId":"Nikhilalalalala"},"content":"                Task toAdd \u003d new Task(taskDetails);"},{"lineNumber":36,"author":{"gitId":"Nikhilalalalala"},"content":"                return taskList.addTask(toAdd);"},{"lineNumber":37,"author":{"gitId":"Nikhilalalalala"},"content":"            } else {"},{"lineNumber":38,"author":{"gitId":"Nikhilalalalala"},"content":"                String[] partsOfTask \u003d taskDetails.split(\"/\");"},{"lineNumber":39,"author":{"gitId":"Nikhilalalalala"},"content":"                String description \u003d partsOfTask[0];"},{"lineNumber":40,"author":{"gitId":"Nikhilalalalala"},"content":"                String date \u003d partsOfTask[1].strip();"},{"lineNumber":41,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":42,"author":{"gitId":"Nikhilalalalala"},"content":"                int day \u003d Integer.parseInt(date.substring(0, 2));"},{"lineNumber":43,"author":{"gitId":"Nikhilalalalala"},"content":"                int month \u003d Integer.parseInt(date.substring(2, 4));"},{"lineNumber":44,"author":{"gitId":"Nikhilalalalala"},"content":"                int year \u003d Integer.parseInt(date.substring(4, 8));"},{"lineNumber":45,"author":{"gitId":"Nikhilalalalala"},"content":"                LocalDate actualDate \u003d LocalDate.of(year, month, day);"},{"lineNumber":46,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":47,"author":{"gitId":"Nikhilalalalala"},"content":"                if (this.commandText.equals(Types.DEADLINE.text)) {"},{"lineNumber":48,"author":{"gitId":"Nikhilalalalala"},"content":"                    Task toAdd \u003d new Deadline(description.strip(), actualDate);"},{"lineNumber":49,"author":{"gitId":"Nikhilalalalala"},"content":"                    return taskList.addTask(toAdd);"},{"lineNumber":50,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":51,"author":{"gitId":"Nikhilalalalala"},"content":"                } else if (this.commandText.equals(Types.EVENT.text)) {"},{"lineNumber":52,"author":{"gitId":"Nikhilalalalala"},"content":"                    Task toAdd \u003d new Event(description.strip(), actualDate);"},{"lineNumber":53,"author":{"gitId":"Nikhilalalalala"},"content":"                    return taskList.addTask(toAdd);"},{"lineNumber":54,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":55,"author":{"gitId":"Nikhilalalalala"},"content":"                }"},{"lineNumber":56,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":58,"author":{"gitId":"Nikhilalalalala"},"content":"            return Ui.printErrorMessage(\"Please key in again with a valid date\\n\");"},{"lineNumber":59,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Nikhilalalalala"},"content":"        return \"\";"},{"lineNumber":61,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":63,"author":{"gitId":"Nikhilalalalala"},"content":"    enum Types {"},{"lineNumber":64,"author":{"gitId":"Nikhilalalalala"},"content":"        TODO(\"todo\"),"},{"lineNumber":65,"author":{"gitId":"Nikhilalalalala"},"content":"        DEADLINE(\"deadline\"),"},{"lineNumber":66,"author":{"gitId":"Nikhilalalalala"},"content":"        EVENT(\"event\");"},{"lineNumber":67,"author":{"gitId":"Nikhilalalalala"},"content":"        private String text;"},{"lineNumber":68,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":69,"author":{"gitId":"Nikhilalalalala"},"content":"        Types(String text) {"},{"lineNumber":70,"author":{"gitId":"Nikhilalalalala"},"content":"            this.text \u003d text;"},{"lineNumber":71,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":73}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":" * Represents command to leave conversation."},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"public class ByeCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"    public ByeCommand() {"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"        this.commandText \u003d \"bye\";"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"     * Leaves the conversation after saving the current state of tasks."},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param text     unused argument."},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param taskList current list of tasks to be saved into hard disk."},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"    public String execute(String text, TaskList taskList) {"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"        taskList.saveIntoHardDisk();"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"        return Ui.printByeMessage();"},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":26}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"public abstract class Command {"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"    protected String commandText;"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"    public abstract String execute(String text, TaskList taskList);"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":9}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":" * Represents command to delete a specific task."},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"    public DeleteCommand() {"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"        this.commandText \u003d \"delete\";"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"     * Deletes the particular task."},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param text     index of task to delete."},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param taskList current list of tasks."},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"    public String execute(String text, TaskList taskList) {"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"        int index \u003d Integer.parseInt(text);"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"        return taskList.deleteTask(index);"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":25}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":" * Represents command to mark a specific task complete."},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"public class DoneCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"    public DoneCommand() {"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"        this.commandText \u003d \"done\";"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"     * Marks the particular task complete."},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param text     index of task to mark complete."},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param taskList current list of tasks."},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"    public String execute(String text, TaskList taskList) {"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"        int index \u003d Integer.parseInt(text);"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"        return taskList.completeTask(index);"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":25}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"public class FindCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"    public FindCommand() {"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"        this.commandText \u003d \"find\";"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"    public String execute(String text, TaskList taskList) {"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"        return taskList.matchTasks(text);"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":14}},{"path":"src/main/java/duke/command/HelloCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":" * Represents command to leave conversation."},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"public class HelloCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"    public HelloCommand() {"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"        this.commandText \u003d \"hello\";"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"     * Leaves the conversation after saving the current state of tasks."},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param text     unused argument."},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param taskList current list of tasks to be saved into hard disk."},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"    public String execute(String text, TaskList taskList) {"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"        return Ui.printHelloMessage();"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":25}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":" * Represents command to list all current tasks."},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"    public ListCommand() {"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"        this.commandText \u003d \"list\";"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"     * Lists all current tasks."},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param text     unused argument."},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param taskList current list of tasks."},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"    public String execute(String text, TaskList taskList) {"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"        return taskList.printStore();"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":24}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":" * Represents deadline which is a modified form of task."},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"    protected LocalDate date;"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"     * Constructs an deadline with the description of the deadline and the date of the deadline."},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param description description of the deadline."},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param date        date of the deadline."},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"    public Deadline(String description, LocalDate date) {"},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"        this.date \u003d date;"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"     * Constructs a deadline with the description of the deadline, date of the deadline and status of completion."},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param description of the deadline."},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param date        date of the deadline."},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param isDone      boolean value of whether it is completed."},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":"    public Deadline(String description, LocalDate date, boolean isDone) {"},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":"        super(description, isDone);"},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":"        this.date \u003d date;"},{"lineNumber":33,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":35,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Nikhilalalalala"},"content":"     * Returns the type of task, which is deadline."},{"lineNumber":37,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"Nikhilalalalala"},"content":"     * @return type of task, which is deadline."},{"lineNumber":39,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"Nikhilalalalala"},"content":"    public String getTypeOfTask() {"},{"lineNumber":42,"author":{"gitId":"Nikhilalalalala"},"content":"        return \"deadline\";"},{"lineNumber":43,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":45,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":46,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"Nikhilalalalala"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitId":"Nikhilalalalala"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy MM dd E\");"},{"lineNumber":49,"author":{"gitId":"Nikhilalalalala"},"content":"        String dateText \u003d this.date.format(formatter);"},{"lineNumber":50,"author":{"gitId":"Nikhilalalalala"},"content":"        return \"[D] [\" + this.getStatusIcon() + \"] \" + this.description + \" ----- By: \" + dateText;"},{"lineNumber":51,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":53,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"Nikhilalalalala"},"content":"     * Returns the representation of deadline to be stored in hard disk."},{"lineNumber":55,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"Nikhilalalalala"},"content":"     * @return String representation of the deadline for storage."},{"lineNumber":57,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"Nikhilalalalala"},"content":"    public String getStoreRepresentation() {"},{"lineNumber":60,"author":{"gitId":"Nikhilalalalala"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"ddMMyyyy\");"},{"lineNumber":61,"author":{"gitId":"Nikhilalalalala"},"content":"        String dateText \u003d this.date.format(formatter);"},{"lineNumber":62,"author":{"gitId":"Nikhilalalalala"},"content":"        String doneStatus \u003d this.isDone ? \"D,\" : \"N,\";"},{"lineNumber":63,"author":{"gitId":"Nikhilalalalala"},"content":"        return \"D,\" + doneStatus + this.description + \",\" + dateText;"},{"lineNumber":64,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":65,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":66}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":" * Represents event which is a modified form of task."},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"    protected LocalDate date;"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"     * Constructs an event with the description of the event and the date of the event."},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param description description of the event."},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param date        date of the event."},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"    public Event(String description, LocalDate date) {"},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"        this.date \u003d date;"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"     * Constructs an event with the description of the event, date of the event and status of completion."},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param description description of the event."},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param date        date of the event."},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param isDone      boolean value of whether it is completed."},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":"    public Event(String description, LocalDate date, boolean isDone) {"},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":"        super(description, isDone);"},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":"        this.date \u003d date;"},{"lineNumber":33,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":35,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Nikhilalalalala"},"content":"     * Returns the type of task, which is event."},{"lineNumber":37,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"Nikhilalalalala"},"content":"     * @return type of task, which is event."},{"lineNumber":39,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"Nikhilalalalala"},"content":"    public String getTypeOfTask() {"},{"lineNumber":42,"author":{"gitId":"Nikhilalalalala"},"content":"        return \"event\";"},{"lineNumber":43,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":45,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"Nikhilalalalala"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"Nikhilalalalala"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy MM dd E\");"},{"lineNumber":48,"author":{"gitId":"Nikhilalalalala"},"content":"        String dateText \u003d this.date.format(formatter);"},{"lineNumber":49,"author":{"gitId":"Nikhilalalalala"},"content":"        return \"[E] [\" + this.getStatusIcon() + \"] \" + this.description + \" ----- When: \" + dateText;"},{"lineNumber":50,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":52,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Nikhilalalalala"},"content":"     * Returns the representation of event to be stored in hard disk."},{"lineNumber":54,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"Nikhilalalalala"},"content":"     * @return String representation of the event for storage."},{"lineNumber":56,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"Nikhilalalalala"},"content":"    public String getStoreRepresentation() {"},{"lineNumber":59,"author":{"gitId":"Nikhilalalalala"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"ddMMyyyy\");"},{"lineNumber":60,"author":{"gitId":"Nikhilalalalala"},"content":"        String dateText \u003d this.date.format(formatter);"},{"lineNumber":61,"author":{"gitId":"Nikhilalalalala"},"content":"        String doneStatus \u003d this.isDone ? \"D,\" : \"N,\";"},{"lineNumber":62,"author":{"gitId":"Nikhilalalalala"},"content":"        return \"E,\" + doneStatus + this.description + \",\" + dateText;"},{"lineNumber":63,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":64}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":" * Represents a Task that user wishes to add."},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"public class Task {"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"     * Constructs task with the description of the task."},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param description description of the task."},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"    public Task(String description) {"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"        this.isDone \u003d false;"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"     * Constructs task with the description of the task and status of whether it is completed."},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param description description of the task."},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param isDone      boolean of whether the task is completed."},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"        this.description \u003d description;"},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":33,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Nikhilalalalala"},"content":"     * Marks the task complete."},{"lineNumber":35,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Nikhilalalalala"},"content":"    public String finishTask() {"},{"lineNumber":37,"author":{"gitId":"Nikhilalalalala"},"content":"        if (!this.isDone) {"},{"lineNumber":38,"author":{"gitId":"Nikhilalalalala"},"content":"            this.isDone \u003d true;"},{"lineNumber":39,"author":{"gitId":"Nikhilalalalala"},"content":"            return Ui.printDoneMessage(false);"},{"lineNumber":40,"author":{"gitId":"Nikhilalalalala"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"Nikhilalalalala"},"content":"            return Ui.printDoneMessage(true);"},{"lineNumber":42,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":45,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Nikhilalalalala"},"content":"     * Returns the tick and cross symbol for a complete and incomplete task respectively."},{"lineNumber":47,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"Nikhilalalalala"},"content":"     * @return unicode character for tick and cross"},{"lineNumber":49,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"Nikhilalalalala"},"content":"    public String getStatusIcon() {"},{"lineNumber":51,"author":{"gitId":"Nikhilalalalala"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":52,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":54,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"Nikhilalalalala"},"content":"     * Returns the type of task."},{"lineNumber":56,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"Nikhilalalalala"},"content":"     * @return type of task."},{"lineNumber":58,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"Nikhilalalalala"},"content":"    public String getTypeOfTask() {"},{"lineNumber":60,"author":{"gitId":"Nikhilalalalala"},"content":"        return \"todo\";"},{"lineNumber":61,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":63,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"Nikhilalalalala"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitId":"Nikhilalalalala"},"content":"        return \"[T] [\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":66,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":68,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"Nikhilalalalala"},"content":"     * Returns the representation of task to be stored in hard disk."},{"lineNumber":70,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"Nikhilalalalala"},"content":"     * @return String representation of the task for storage."},{"lineNumber":72,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Nikhilalalalala"},"content":"    public String getStoreRepresentation() {"},{"lineNumber":74,"author":{"gitId":"Nikhilalalalala"},"content":"        String doneStatus \u003d this.isDone ? \"D,\" : \"N,\";"},{"lineNumber":75,"author":{"gitId":"Nikhilalalalala"},"content":"        return \"T,\" + doneStatus + this.description;"},{"lineNumber":76,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":78,"author":{"gitId":"Nikhilalalalala"},"content":"    public boolean canMatch(String toMatch) {"},{"lineNumber":79,"author":{"gitId":"Nikhilalalalala"},"content":"        return this.description.contains(toMatch);"},{"lineNumber":80,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":81}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/views/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"Nikhilalalalala"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"Nikhilalalalala"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":38,"author":{"gitId":"Nikhilalalalala"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"Nikhilalalalala"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":42,"author":{"gitId":"Nikhilalalalala"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":43,"author":{"gitId":"Nikhilalalalala"},"content":"        return new DialogBox(text, img);"},{"lineNumber":44,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":46,"author":{"gitId":"Nikhilalalalala"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":47,"author":{"gitId":"Nikhilalalalala"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":48,"author":{"gitId":"Nikhilalalalala"},"content":"        db.flip();"},{"lineNumber":49,"author":{"gitId":"Nikhilalalalala"},"content":"        return db;"},{"lineNumber":50,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":52,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Nikhilalalalala"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":54,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Nikhilalalalala"},"content":"    private void flip() {"},{"lineNumber":56,"author":{"gitId":"Nikhilalalalala"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":57,"author":{"gitId":"Nikhilalalalala"},"content":"        Collections.reverse(tmp);"},{"lineNumber":58,"author":{"gitId":"Nikhilalalalala"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":59,"author":{"gitId":"Nikhilalalalala"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":60,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":61,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":62}},{"path":"src/main/java/duke/ui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/views/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":33,"author":{"gitId":"Nikhilalalalala"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"Nikhilalalalala"},"content":"    public void stop() {"},{"lineNumber":35,"author":{"gitId":"Nikhilalalalala"},"content":"        duke.getTaskList().saveIntoHardDisk();"},{"lineNumber":36,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":38,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":38}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.Parser;"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/assets/Duke.png\"));"},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/assets/User.png\"));"},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":"    public void initialize() {"},{"lineNumber":33,"author":{"gitId":"Nikhilalalalala"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":34,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":36,"author":{"gitId":"Nikhilalalalala"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":37,"author":{"gitId":"Nikhilalalalala"},"content":"        duke \u003d d;"},{"lineNumber":38,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":40,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Nikhilalalalala"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":42,"author":{"gitId":"Nikhilalalalala"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":43,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Nikhilalalalala"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"Nikhilalalalala"},"content":"    private void handleUserInput() {"},{"lineNumber":46,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":47,"author":{"gitId":"Nikhilalalalala"},"content":"        String input \u003d userInput.getText().strip();"},{"lineNumber":48,"author":{"gitId":"Nikhilalalalala"},"content":"        if (input.length() \u003e 0) {"},{"lineNumber":49,"author":{"gitId":"Nikhilalalalala"},"content":"            String response \u003d this.getResponse(input);"},{"lineNumber":50,"author":{"gitId":"Nikhilalalalala"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":51,"author":{"gitId":"Nikhilalalalala"},"content":"                    DialogBox.getUserDialog(input, userImage)"},{"lineNumber":52,"author":{"gitId":"Nikhilalalalala"},"content":"            );"},{"lineNumber":53,"author":{"gitId":"Nikhilalalalala"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":54,"author":{"gitId":"Nikhilalalalala"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":55,"author":{"gitId":"Nikhilalalalala"},"content":"            );"},{"lineNumber":56,"author":{"gitId":"Nikhilalalalala"},"content":"            userInput.clear();"},{"lineNumber":57,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":59,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":61,"author":{"gitId":"Nikhilalalalala"},"content":"    private String getResponse(String input) {"},{"lineNumber":62,"author":{"gitId":"Nikhilalalalala"},"content":"        return Parser.understandText(input, duke.getTaskList());"},{"lineNumber":63,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":64}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":" * Prints necessary output to user."},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"     * Introduces bot with welcome message."},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"    public static String printWelcomeMessage() {"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"        String logo \u003d \" ____        _\\n\""},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"                + \"|  _ \\\\ _   _| | _____\\n\""},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"        String initialPrinting \u003d logo + \"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\\n\""},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"                + \"____________________________________________________________\\n\";"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"        return (initialPrinting);"},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"     * Signs off with Bye message."},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"    public static String printByeMessage() {"},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"        return (\"Byeeeee see you later!\\n\");"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"     * Prints message to user."},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":"     * @param message the message to be printed."},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Nikhilalalalala"},"content":"    public static String printMessage(String message) {"},{"lineNumber":34,"author":{"gitId":"Nikhilalalalala"},"content":"        return message;"},{"lineNumber":35,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":37,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Nikhilalalalala"},"content":"     * Prints message that signals the deletion of a task."},{"lineNumber":39,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Nikhilalalalala"},"content":"    public static String printDeleteTaskMessage() {"},{"lineNumber":41,"author":{"gitId":"Nikhilalalalala"},"content":"        return (\"I have removed the task from your list.\");"},{"lineNumber":42,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":44,"author":{"gitId":"Nikhilalalalala"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Nikhilalalalala"},"content":"     * Prints message that signals the completion of a task."},{"lineNumber":46,"author":{"gitId":"Nikhilalalalala"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Nikhilalalalala"},"content":"    public static String printDoneMessage(boolean isDone) {"},{"lineNumber":48,"author":{"gitId":"Nikhilalalalala"},"content":"        if (isDone) {"},{"lineNumber":49,"author":{"gitId":"Nikhilalalalala"},"content":"            return (\"Task is already done!\\n\");"},{"lineNumber":50,"author":{"gitId":"Nikhilalalalala"},"content":"        } else {"},{"lineNumber":51,"author":{"gitId":"Nikhilalalalala"},"content":"            return (\"Congratulations! I have marked this task done.\\n\");"},{"lineNumber":52,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":55,"author":{"gitId":"Nikhilalalalala"},"content":"    public static String printErrorMessage(String message) {"},{"lineNumber":56,"author":{"gitId":"Nikhilalalalala"},"content":"        return (message);"},{"lineNumber":57,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":59,"author":{"gitId":"Nikhilalalalala"},"content":"    public static String printHelloMessage() {"},{"lineNumber":60,"author":{"gitId":"Nikhilalalalala"},"content":"        return \"Hello! What do you wanna do?\";"},{"lineNumber":61,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":62}},{"path":"src/main/resources/views/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: B7B3A1;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-radius: 10; -fx-label-padding: 5; -fx-background-color: #D1CA98;\" text\u003d\"Label\"\u003e"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"         \u003c/HBox.margin\u003e"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"         \u003copaqueInsets\u003e"},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"            \u003cInsets /\u003e"},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"         \u003c/opaqueInsets\u003e"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"         \u003cfont\u003e"},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"            \u003cFont name\u003d\"Book Antiqua\" size\u003d\"12.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"         \u003c/font\u003e\u003c/Label\u003e"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"96.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"            \u003cInsets /\u003e"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"    \u003c/children\u003e"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"    \u003cpadding\u003e"},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":"    \u003c/padding\u003e"},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"   \u003copaqueInsets\u003e"},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":"      \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":"   \u003c/opaqueInsets\u003e"},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Nikhilalalalala":32}},{"path":"src/main/resources/views/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"         \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"         \u003c/padding\u003e\u003c/TextField\u003e"},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: EDBF85; -fx-border-radius: 100;\" text\u003d\"Send\" /\u003e"},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"            \u003ccontent\u003e"},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"391.0\" style\u003d\"-fx-background-color: B7B3A1;\" /\u003e"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"            \u003c/content\u003e"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"    \u003c/children\u003e"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Nikhilalalalala":23}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.Parser;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.TaskList;"},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"public class ParserTest {"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"    public void discontinueConversation() {"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"        boolean result \u003d Parser.understandText(\"bye\", taskList);"},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"        assertFalse(result);"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"    public void addTask() {"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"            File savedFile \u003d new File(\"./data/save.txt\");"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"            if (savedFile.exists()) {"},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"                FileWriter writer \u003d new FileWriter(\"./data/save.txt\", false);"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"                writer.write(\"\");"},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":"                writer.close();"},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":33,"author":{"gitId":"Nikhilalalalala"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":34,"author":{"gitId":"Nikhilalalalala"},"content":"        boolean result \u003d Parser.understandText(\"todo sample task\", taskList);"},{"lineNumber":35,"author":{"gitId":"Nikhilalalalala"},"content":"        assertEquals(1, taskList.getAllTasks().size());"},{"lineNumber":36,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":37}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.task.Task;"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":"import duke.TaskList;"},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"public class TaskListTest {"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"    public void addTask() {"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"            File savedFile \u003d new File(\"./data/save.txt\");"},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"            if (savedFile.exists()) {"},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"                FileWriter writer \u003d new FileWriter(\"./data/save.txt\", false);"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"                writer.write(\"\");"},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"                writer.close();"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (IOException e) {"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"            e.printStackTrace();"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"        Task newTask \u003d new Task(\"sample task\");"},{"lineNumber":27,"author":{"gitId":"Nikhilalalalala"},"content":"        taskList.addTask(newTask);"},{"lineNumber":28,"author":{"gitId":"Nikhilalalalala"},"content":"        assertEquals(1, taskList.getAllTasks().size());"},{"lineNumber":29,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Nikhilalalalala"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"Nikhilalalalala"},"content":"    public void finishTask() {"},{"lineNumber":32,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"Nikhilalalalala"},"content":"            File savedFile \u003d new File(\"./data/save.txt\");"},{"lineNumber":34,"author":{"gitId":"Nikhilalalalala"},"content":"            if (savedFile.exists()) {"},{"lineNumber":35,"author":{"gitId":"Nikhilalalalala"},"content":"                FileWriter writer \u003d new FileWriter(\"./data/save.txt\", false);"},{"lineNumber":36,"author":{"gitId":"Nikhilalalalala"},"content":"                writer.write(\"\");"},{"lineNumber":37,"author":{"gitId":"Nikhilalalalala"},"content":"                writer.close();"},{"lineNumber":38,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (IOException e) {"},{"lineNumber":40,"author":{"gitId":"Nikhilalalalala"},"content":"            e.printStackTrace();"},{"lineNumber":41,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Nikhilalalalala"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":43,"author":{"gitId":"Nikhilalalalala"},"content":"        Task newTask \u003d new Task(\"sample task\");"},{"lineNumber":44,"author":{"gitId":"Nikhilalalalala"},"content":"        taskList.addTask(newTask);"},{"lineNumber":45,"author":{"gitId":"Nikhilalalalala"},"content":"        taskList.completeTask(0);"},{"lineNumber":46,"author":{"gitId":"Nikhilalalalala"},"content":"        assertEquals(\"\\u2713\", newTask.getStatusIcon());"},{"lineNumber":47,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Nikhilalalalala"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"Nikhilalalalala"},"content":"    public void deleteTask() {"},{"lineNumber":50,"author":{"gitId":"Nikhilalalalala"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"Nikhilalalalala"},"content":"            File savedFile \u003d new File(\"./data/save.txt\");"},{"lineNumber":52,"author":{"gitId":"Nikhilalalalala"},"content":"            if (savedFile.exists()) {"},{"lineNumber":53,"author":{"gitId":"Nikhilalalalala"},"content":"                FileWriter writer \u003d new FileWriter(\"./data/save.txt\", false);"},{"lineNumber":54,"author":{"gitId":"Nikhilalalalala"},"content":"                writer.write(\"\");"},{"lineNumber":55,"author":{"gitId":"Nikhilalalalala"},"content":"                writer.close();"},{"lineNumber":56,"author":{"gitId":"Nikhilalalalala"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"Nikhilalalalala"},"content":"        } catch (IOException e) {"},{"lineNumber":58,"author":{"gitId":"Nikhilalalalala"},"content":"            e.printStackTrace();"},{"lineNumber":59,"author":{"gitId":"Nikhilalalalala"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Nikhilalalalala"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":61,"author":{"gitId":"Nikhilalalalala"},"content":"        Task newTask \u003d new Task(\"sample task\");"},{"lineNumber":62,"author":{"gitId":"Nikhilalalalala"},"content":"        taskList.addTask(newTask);"},{"lineNumber":63,"author":{"gitId":"Nikhilalalalala"},"content":"        taskList.deleteTask(0);"},{"lineNumber":64,"author":{"gitId":"Nikhilalalalala"},"content":"        assertEquals(0, taskList.getAllTasks().size());"},{"lineNumber":65,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":66,"author":{"gitId":"Nikhilalalalala"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":68,"author":{"gitId":"Nikhilalalalala"},"content":"}"}],"authorContributionMap":{"Nikhilalalalala":68}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Nikhilalalalala"},"content":"hello"},{"lineNumber":2,"author":{"gitId":"Nikhilalalalala"},"content":"wrong command"},{"lineNumber":3,"author":{"gitId":"Nikhilalalalala"},"content":"todo"},{"lineNumber":4,"author":{"gitId":"Nikhilalalalala"},"content":"deadline"},{"lineNumber":5,"author":{"gitId":"Nikhilalalalala"},"content":"event"},{"lineNumber":6,"author":{"gitId":"Nikhilalalalala"},"content":"todo something"},{"lineNumber":7,"author":{"gitId":"Nikhilalalalala"},"content":"todo with 2 words"},{"lineNumber":8,"author":{"gitId":"Nikhilalalalala"},"content":"deadline wrong"},{"lineNumber":9,"author":{"gitId":"Nikhilalalalala"},"content":"deadline right / 12122020"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"deadline wrong / 121332020"},{"lineNumber":11,"author":{"gitId":"Nikhilalalalala"},"content":"deadline wrong / 12132020"},{"lineNumber":12,"author":{"gitId":"Nikhilalalalala"},"content":"deadline right more that 2 words/ 12122020"},{"lineNumber":13,"author":{"gitId":"Nikhilalalalala"},"content":"event wrong"},{"lineNumber":14,"author":{"gitId":"Nikhilalalalala"},"content":"event right / 12122020"},{"lineNumber":15,"author":{"gitId":"Nikhilalalalala"},"content":"event wrong / 121332020"},{"lineNumber":16,"author":{"gitId":"Nikhilalalalala"},"content":"event wrong / 12132020"},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"event wrong more that 2 words/ 12122020"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"list"},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":"done two invalid"},{"lineNumber":20,"author":{"gitId":"Nikhilalalalala"},"content":"done invalid"},{"lineNumber":21,"author":{"gitId":"Nikhilalalalala"},"content":"done 2"},{"lineNumber":22,"author":{"gitId":"Nikhilalalalala"},"content":"list"},{"lineNumber":23,"author":{"gitId":"Nikhilalalalala"},"content":"delete invalid"},{"lineNumber":24,"author":{"gitId":"Nikhilalalalala"},"content":"delete 1"},{"lineNumber":25,"author":{"gitId":"Nikhilalalalala"},"content":"delete 12"},{"lineNumber":26,"author":{"gitId":"Nikhilalalalala"},"content":"bye"}],"authorContributionMap":{"Nikhilalalalala":26}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"Nikhilalalalala"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"Nikhilalalalala"},"content":"set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"},{"lineNumber":18,"author":{"gitId":"Nikhilalalalala"},"content":"set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"},{"lineNumber":19,"author":{"gitId":"Nikhilalalalala"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":21,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":24,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":20,"Nikhilalalalala":4}}]
