[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private char type \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private final String BY \u003d \"best consumed by: \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    Deadline(String task, String date) throws DateTimeParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return String.format(\"[%c]%s %s%s\", type, super.toString(), BY,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public String saveToString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return String.format(\"%c | %s | %s\", type, super.saveToString(), date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gan-jw": 26
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private static final String PATH \u003d \"data\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private static final String FILENAME \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        boolean userInput \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        ArrayList\u003cTask\u003e storedItems \u003d getTaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        String border \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        String logo \u003d \" ____        ____\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                + \"|  _ \\\\  ___ |  _ \\\\\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                + \"| | | |/ _ \\\\| | | |\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                + \"| |_| || __/| |_| |\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                + \"|____/ \\\\___||____/\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        //greets"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        System.out.println(\"Hello I am\\n\" + logo + \"\\n\" + \"Feed me some stuff! :3\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        while (userInput) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            String arr[] \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            String command \u003d arr[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            System.out.println(command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    System.out.println(border);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    for (int i \u003d 0; i \u003c storedItems.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        System.out.println(String.format(\"%d. %s\", i + 1, storedItems.get(i)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    System.out.println(border);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                } else if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    if (arr.length \u003c 2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        throw new DukeException(\"The description of a done cannot be empty!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    int taskNum \u003d Integer.parseInt(arr[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    if (taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d storedItems.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        Task task \u003d storedItems.get(taskNum - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        task.doTask();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        System.out.println(border + \"\\n\" + \"Nice I\u0027ve digested the following:\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                                + task + \"\\n\" + \"Now I\u0027m hungry again! FEED ME MORE :3\\n\" + border);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        throw new DukeException(\"What are you done with? Gotta specify a valid task number!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                } else if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    if (arr.length \u003c 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        throw new DukeException(\"The description of a delete cannot be empty!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    int deleteNum \u003d Integer.parseInt(arr[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    if (deleteNum \u003e 0 \u0026\u0026 deleteNum \u003c\u003d storedItems.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        Task task \u003d storedItems.get(deleteNum - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        storedItems.remove((deleteNum - 1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        System.out.println(border + \"\\n\" + \"Nooo you can\u0027t take away what you\u0027ve already given me...\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                                + \"Okay fine. It\u0027s in my stomach tho... ASDFGUUVHHH!!\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                                + \"The following has been removed:\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                                + task + \"\\n\" + \"Now I\u0027m feeling sick :( there\u0027s \" + storedItems.size()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                                + \" thing(s) in my belly now...HUNGRY!\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                                + border);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        throw new DukeException(\"What are you deleting? Gotta specify a valid task number!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                } else if (command.equals(\"uwu\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    System.out.println(border + \"\\n\" + \"owo\\n\" + border);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                } else if (command.equals(\"owo\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    System.out.println(border + \"\\n\" + \"uwu\\n\" + border);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                } else if (command.equals(\"exit\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    System.out.println(border + \"\\n\" + \"bb cya again!\\n\" + border);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    check \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                } else if (command.equals(\"todo\") || command.equals(\"deadline\") || command.equals(\"event\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    if (arr.length \u003c 2) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        throw new DukeException(\"The description of a task cannot be empty!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    Task newTask;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    if (!command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        if (!arr[1].contains(\" /by \") \u0026\u0026 !arr[1].contains(\" /at \")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                            throw new DukeException(\"The date has to be specified!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                            String temp[] \u003d arr[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                            newTask \u003d new Deadline(temp[0], temp[1].replace(\u0027/\u0027, \u0027-\u0027));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                            String temp[] \u003d arr[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                            newTask \u003d new Event(temp[0],  temp[1].replace(\u0027/\u0027, \u0027-\u0027));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        newTask \u003d new Todo(arr[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    storedItems.add(newTask);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    System.out.println(border + \"\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                            + \"*Gobble gobble* the following has been eated OwO:\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                            + newTask.toString() + \"\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                            + \"I now have \" + storedItems.size() + \" thing(s) in my belly\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                            + border);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        throw new DukeException(\"I don\u0027t understand what you\u0027re saying HMM...\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                System.out.println(border + \"\\n\" + e + \"\\n\" + border);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                System.out.println(\"☹ OOPSIE!! \" + \"Time format should be yyyy/mm/dd or yyyy-mm-dd.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private static void saveTaskList(String taskToAdd) throws IOException{"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        File directory \u003d new File(PATH);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            directory.mkdirs();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        File file \u003d new File(PATH + \"/\" + FILENAME);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        FileWriter fw \u003d new FileWriter(PATH + \"/\" + FILENAME, true);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        fw.write(taskToAdd + \"\\n\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private static void editTaskList(String newTask, int taskNum, boolean delete) throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        ArrayList\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(PATH + \"/\" + FILENAME)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        if (delete) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            fileContent.remove(taskNum - 1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            fileContent.set(taskNum - 1, newTask);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        Files.write(Paths.get(PATH + \"/\" + FILENAME), fileContent);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private static ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        File file \u003d new File(PATH + \"/\" + FILENAME);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                String[] currLine \u003d scanner.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                String typeOfTask \u003d currLine[0];"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                switch (typeOfTask) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    Task todo \u003d new Todo(currLine[2]);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    if (Integer.parseInt(currLine[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        todo.doTask();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    list.add(todo);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    Task deadline \u003d new Deadline(currLine[2], currLine[3]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    if (Integer.parseInt(currLine[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        deadline.doTask();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    list.add(deadline);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    Task event \u003d new Event(currLine[2], currLine[3]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    if (Integer.parseInt(currLine[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                        event.doTask();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    list.add(event);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gan-jw": 182,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return \"☹ OOPSIE!! \" + super.getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gan-jw": 12
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private char type \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private final String AT \u003d \"bought at: \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    Event(String task, String date) throws DateTimeParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return String.format(\"[%c]%s %s%s\", type, super.toString(), AT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "                date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public String saveToString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return String.format(\"%c | %s | %s\", type, super.saveToString(), date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gan-jw": 26
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    Task(String task) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public void doTask() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        String check \u003d isDone ? \"✓\" : \"✗\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return String.format(\"[%s] %s\", check, task);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public String saveToString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        int check \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return String.format(\"%d | %s\", check, task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gan-jw": 27
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    private char type \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    Todo(String task) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return String.format(\"[%c]%s\", type, super.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gan-jw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    public String saveToString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "        return String.format(\"%c | %s\", type, super.saveToString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gan-jw": 18
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "todo pork"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "todo beef"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "todo veggies"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "deadline milk /by yesterday"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "event bread /at today"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "gan-jw": 10
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gan-jw"
        },
        "content": "java -classpath ../bin main.java.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "gan-jw": 1,
      "-": 37
    }
  }
]
