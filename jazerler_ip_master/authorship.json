[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "jazerler": 2,
      "-": 24
    }
  },
  {
    "path": "data.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "[T],, 1,, yumegatari,, "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": "[D],, 1,, mitsukiyo,, Oct 15 2019,, "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "[E],, 0,, bruh,, Aug 3 2020,, "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "[T],, 1,, todo,,"
      }
    ],
    "authorContributionMap": {
      "jazerler": 4
    }
  },
  {
    "path": "src/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeExecutionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String PATH \u003d \"data.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        run();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private static void run() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            Ui.showWelcome();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            // TODO: clean up storage exceptions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            Storage storage \u003d new Storage(PATH);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            boolean isExit \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            while (!isExit) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    String input \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    Command command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    command.execute(storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    isExit \u003d command.shouldExit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                } catch (DukeArgumentException dae) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    Ui.wrapText(dae.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                } catch (DukeExecutionException dee) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    Ui.wrapText(dee.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (DukeIOException die) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            Ui.wrapText(die.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Ui.showExit();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 43,
      "-": 4
    }
  },
  {
    "path": "src/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeExecutionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an action input by the user to be executed by the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Returns true only if the program should terminate upon receiving this Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Default: false"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return true if the program should exit, false otherwise."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Attempts to carry out the operation as written in the respective subclass\u0027s implementation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object to perform the operations on."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeExecutionException if the program was unable to execute the action."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public abstract void execute(Storage storage) throws DukeExecutionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 27
    }
  },
  {
    "path": "src/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeExecutionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an request by the user to add a Deadline object to the list of Tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    Deadline deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a DeadlineCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param input the input string to be parsed into the arguments for constructing a Deadline object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeArgumentException if the arguments from the input string are invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public DeadlineCommand(String input) throws DukeArgumentException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] args \u003d input.split(\"/by \", 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            this.deadline \u003d new Deadline(args[0].trim(), LocalDate.parse(args[1].trim()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ae) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeArgumentException(\"Insufficient arguments provided for duke.Tasks.Deadline.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (DateTimeParseException de) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeArgumentException(\"duke.Tasks.Deadline date/time could not be parsed.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return super.shouldExit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Attempts to add the Deadline object to the storage."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object to take in the new Deadline object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeExecutionException if an IOException occurs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void execute(Storage storage) throws DukeExecutionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            storage.add(deadline);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            Ui.showTaskAddition(deadline);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeExecutionException(\"Could not execute command due to IO exception.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 55
    }
  },
  {
    "path": "src/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeExecutionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an request by the user to delete a Task object at the given index from the list of Tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param args the input string to be parsed for the index of the list to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeArgumentException if the index provided in the input string is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public DeleteCommand(String args) throws DukeArgumentException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            int index \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (NumberFormatException ne) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeArgumentException(\"Invalid index\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return super.shouldExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Attempts to delete the Task object at the index of the Storage object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object in which to delete the Task at the index given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeExecutionException if the index is out of range, or the program runs into an IOException"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void execute(Storage storage) throws DukeExecutionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            Ui.showTaskDeletion(storage.delete(index));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeExecutionException(String.format(\"Could not execute command due to the index %d being out \" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    \"of range\", index));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (DukeIOException die) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeExecutionException(\"Could not execute command due to IO exception.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 52
    }
  },
  {
    "path": "src/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeExecutionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an request by the user to mark a Task object at the given index from the list of Tasks as completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a DoneCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param args the input string to be parsed for the index of the list to be marked as complete."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeArgumentException if the index provided in the input string is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public DoneCommand(String args) throws DukeArgumentException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            int index \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            this.index \u003d index - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (NumberFormatException ne) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeArgumentException(\"Invalid index\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return super.shouldExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Attempts to mark the Task object at the index of the Storage object as completed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object in which to mark the Task at the index given as complete."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeExecutionException if the index is out of range, or the program runs into an IOException"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void execute(Storage storage) throws DukeExecutionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            Ui.showTaskCompletion(storage.complete(index));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeExecutionException(String.format(\"Could not execute command due to the index %d being out \" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    \"of range\", index));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (DukeIOException die) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeExecutionException(\"Could not execute command due to IO exception.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 52
    }
  },
  {
    "path": "src/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeExecutionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an request by the user to add a Event object to the list of Tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    Event event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a EventCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param input the input string to be parsed into the arguments for constructing a Event object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeArgumentException if the arguments from the input string are invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public EventCommand(String input) throws DukeArgumentException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] args \u003d input.split(\"/at \", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            this.event \u003d new Event(args[0].trim(), LocalDate.parse(args[1].trim()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ae) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeArgumentException(\"Insufficient arguments provided for duke.Tasks.Event.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (DateTimeParseException de) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeArgumentException(\"duke.Tasks.Event date/time could not be parsed.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return super.shouldExit();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Attempts to add the Event object to the storage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object to take in the new Event object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeExecutionException if an IOException occurs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void execute(Storage storage) throws DukeExecutionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            storage.add(event);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            Ui.showTaskAddition(event);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeExecutionException(\"Could not execute command due to IO exception.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 56
    }
  },
  {
    "path": "src/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an request by the user to tell the program to terminate."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object to perform the operations on."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void execute(Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        // Do nothing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Returns true to tell the program to terminate."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 27
    }
  },
  {
    "path": "src/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeExecutionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents a request from the user to find tasks containing a keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a FindCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param input the text to search for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public FindCommand(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        keyword \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return super.shouldExit();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Attempts to find all Tasks containing the keyword within the Storage\u0027s list,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * then uses Ui to print the list out."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object to search for the keyword in."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void execute(Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        TaskList list \u003d storage.find(keyword);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Ui.wrapText(list.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 39
    }
  },
  {
    "path": "src/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an request by the user to print out the list of Tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Prints out the entire list in the storage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The duke.storage.Storage object from which to print the list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void execute(Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Ui.wrapText(storage.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 21
    }
  },
  {
    "path": "src/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeExecutionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an request by the user to add a Todo object to the list of Tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    Todo todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a TodoCommand/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param name The name of the Todo object to be created"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public TodoCommand(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.todo \u003d new Todo(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return super.shouldExit();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Attempts to add the Todo object to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param storage The Storage object to take in the new Todo object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeExecutionException if an IOException occurs"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void execute(Storage storage) throws DukeExecutionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            storage.add(todo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            Ui.showTaskAddition(todo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeExecutionException(\"Could not execute command due to IO exception.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 44
    }
  },
  {
    "path": "src/duke/exception/DukeArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DukeArgumentException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public DukeArgumentException(String error) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 7
    }
  },
  {
    "path": "src/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    DukeException(String error) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 7
    }
  },
  {
    "path": "src/duke/exception/DukeExecutionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DukeExecutionException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public DukeExecutionException(String error) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 7
    }
  },
  {
    "path": "src/duke/exception/DukeIOException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DukeIOException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public DukeIOException(String error) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 7
    }
  },
  {
    "path": "src/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Utility class for reading input and files"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public final class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    final static String REGEX_SEPARATOR \u003d \",, \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String FIND \u003d \"find\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String DONE \u003d \"done\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Reads a String and splits it to create a new duke.Tasks.Task based on its type and values."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Format: Type | Completed | Name | Time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Example: \"[D],, 1,, deadline,, 23-08-2020\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param line the String from the csv to be parsed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return A duke.Tasks.Task object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeException if the line does not follow the given regex."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static Task parseLine(String line) throws DukeIOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] values \u003d line.split(REGEX_SEPARATOR);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        switch (values[0]) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case \"[T]\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return new Todo(values[2], values[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case \"[E]\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return new Event(values[2], LocalDate.parse(values[3], DateTimeFormatter.ofPattern(\"MMM d yyyy\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                    values[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case \"[D]\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return new Deadline(values[2], LocalDate.parse(values[3], DateTimeFormatter.ofPattern(\"MMM d yyyy\")), values[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeIOException(String.format(\"The line \u0027%s\u0027 could not be parsed.\", line));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Converts a Task into a String format for writing to disk."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param task the Task to be converted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return the String representation of the Task to be used in the data file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static String convertTask(Task task) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] args \u003d task.toArray();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        for (String s : args) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            result \u003d result.concat(String.format(\"%s%s\", s, REGEX_SEPARATOR));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return result + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Converts input text into the appropriate command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param text the input text from the user"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return the Command to be executed"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeArgumentException if the input text did not match any existing Command types."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static Command parseCommand(String text) throws DukeArgumentException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] parsedInput \u003d text.split(\" \", 2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        switch (parsedInput[0].toLowerCase()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return new FindCommand(parsedInput[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return new DoneCommand(parsedInput[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return new DeleteCommand(parsedInput[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return new TodoCommand(parsedInput[1]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return new EventCommand(parsedInput[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return new DeadlineCommand(parsedInput[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeArgumentException(\"Command did not match any known commands\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 100
    }
  },
  {
    "path": "src/duke/storage/ResultsList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents a list of Tasks found from finding by a keyword."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class ResultsList extends TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a ResultsList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    ResultsList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return \"No results found.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            String result \u003d \"Your search results:\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            for (Task t : tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                result \u003d result.concat(t.toString()).concat(\"\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 29
    }
  },
  {
    "path": "src/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Class that encapsulates the saving and reading of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    File file;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a Storage object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param path The path to read/write the file to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws IOException if it is unable to create the file or if an IO error occurs"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Storage(String path) throws DukeIOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            file \u003d new File(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            file.createNewFile(); // makes new file only if not already existing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            BufferedReader csvReader \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            // Add all the parsed lines to the ArrayList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            while ((line \u003d csvReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                tasks.add(Parser.parseLine(line));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeIOException(\"Could not create duke.storage.Storage object due to IO error.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Adds the given Task to the list of tasks and appends the new task to the data file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param task the Task to be added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws IOException if an IOException occurs during writing"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void add(Task task) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        // TODO: Catch IOException into DukeIOException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String taskString \u003d Parser.convertTask(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        BufferedWriter bw \u003d new BufferedWriter(new FileWriter(file, true));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        bw.append(taskString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        bw.flush();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        bw.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Removes the task at the given index from the TaskList,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * then clears the existing file and rewrites the contents of the list back to it."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param index The index of the task to be removed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return The deleted task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeIOException if an IOException occurs during writing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException if the given index is out of range."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Task delete(int index) throws DukeIOException, ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Task deleted \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        rewrite();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return deleted;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Marks the task at the given index of the TaskList as completed,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * then clears the existing file and rewrites the contents of the list back to it."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws DukeIOException"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws ArrayIndexOutOfBoundsException"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Task complete(int index) throws DukeIOException, ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Task completed \u003d tasks.complete(index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        rewrite();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return completed;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Returns the list of Tasks whose name contains the given keyword."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param keyword the keyword in lower-case to be searched for"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return TaskList containing only matching tasks"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public ResultsList find(String keyword) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        ResultsList results \u003d new ResultsList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        for (Task t : tasks.list()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            if (t.name.toLowerCase().contains(keyword)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                results.add(t);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Clears the existing file and rewrites the contents of the list to the file."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @throws IOException if there are issues with the IO operations"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private void rewrite() throws DukeIOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            new FileWriter(file, false).close();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(file));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            for (Task t : tasks.list()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                bw.append(Parser.convertTask(t));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                bw.flush();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            throw new DukeIOException(\"IO Exception when writing to file. \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return tasks.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 125
    }
  },
  {
    "path": "src/duke/storage/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Represents an ArrayList of Tasks"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    protected final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Constructor for a TaskList object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Removes the object from the ArrayList at the given index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param index the index to delete from"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return the Task that was removed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Adds the Task to the ArrayList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param task the task to be added"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Returns the ArrayList of tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return the ArrayList of all the tasks stored"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public ArrayList\u003cTask\u003e list() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Returns whether or not the list is currently empty."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return true if tasks is empty, false otherwise"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Marks the Task in the ArrayList at the given index as completed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param index the index to mark as complete"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @return the Task that was completed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Task complete(int index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Task toComplete \u003d tasks.get(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        toComplete.setCompleted();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return toComplete;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return \"The list is empty.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            String result \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            for (Task t : tasks) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jazerler"
        },
        "content": "                result \u003d result.concat(t.toString()).concat(\"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 77
    }
  },
  {
    "path": "src/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    LocalDate time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Deadline(String name, LocalDate time) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Deadline(String name, LocalDate time, String completed) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(name, completed);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return String.format(\"[D] %s (by: %s)\", super.toString(), time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String[] toArray() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] strings \u003d new String[4];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[0] \u003d \"[D]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[1] \u003d completed ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[2] \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[3] \u003d time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return strings;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 34
    }
  },
  {
    "path": "src/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    LocalDate time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Event(String name, LocalDate time) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Event(String name, LocalDate time, String completed) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(name, completed);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return String.format(\"[E] %s (at: %s)\", super.toString(), time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String[] toArray() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] strings \u003d new String[4];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[0] \u003d \"[E]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[1] \u003d completed ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[2] \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[3] \u003d time.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return strings;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 35
    }
  },
  {
    "path": "src/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Boolean completed;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    Task(String name) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.completed \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    Task(String name, String completed) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        this.completed \u003d completed.equals(\"1\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        if (completed) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return String.format(\"[✓] %s\", name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            return String.format(\"[✗] %s\", name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void setCompleted() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        completed \u003d !completed;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String[] toArray() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        String[] strings \u003d new String[3];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[0] \u003d \"[T]\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[1] \u003d completed ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        strings[2] \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return strings;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 39
    }
  },
  {
    "path": "src/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Todo(String name) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public Todo(String name, String completed) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        super(name, completed);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        return String.format(\"[T] %s\", super.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 18
    }
  },
  {
    "path": "src/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": " * Utility class containing String formatting and printing"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public final class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String STRING_TOP_LINE \u003d \"_____________________________________________________DUKE___\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String STRING_BOTTOM_LINE \u003d \"------------------------------------------------------------\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String STRING_GREETING \u003d \"Hello, this is Duke.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    private final static String STRING_EXIT \u003d \"Goodbye.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static void printStartLine() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        System.out.println(STRING_TOP_LINE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static void printEndLine() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        System.out.println(STRING_BOTTOM_LINE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * Prints text between the start and end lines."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     * @param text the text to be printed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static void wrapText(String text) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        printStartLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        System.out.println(text.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        printEndLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static void showWelcome() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        wrapText(STRING_GREETING);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static void showExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        wrapText(STRING_EXIT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static void showTaskAddition(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        wrapText(String.format(\"Added: %s\", task.toString()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static void showTaskDeletion(Task task) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        wrapText(String.format(\"Deleted: %s\", task.toString()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public static void showTaskCompletion(Task task) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        wrapText(String.format(\"Completed: %s\", task.toString()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 54
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 12
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.exception.DukeIOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import org.junit.jupiter.api.DisplayName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jazerler"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @DisplayName(\"parseLine called on \u0027[T],, 1,, todo\u0027\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void parseLineFromFile_validTodo_todoReturned() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            assertEquals(\"[T] [✓] todo\", Parser.parseLine(\"[T],, 1,, todo\").toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        } catch (DukeIOException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jazerler"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    @DisplayName(\"convertTask called on a todo called todo\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    public void convertTaskForFile_validTodo_todoReturned() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        Todo todo \u003d new Todo(\"todo\", \"1\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jazerler"
        },
        "content": "        assertEquals(\"[T],, 1,, todo,, \\n\", Parser.convertTask(todo));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jazerler"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jazerler"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jazerler": 33
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jazerler"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jazerler"
        },
        "content": "todo duke.task.Todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jazerler"
        },
        "content": "deadline duke.task.Deadline /by deadline"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jazerler"
        },
        "content": "event duke.task.Event /at event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jazerler"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jazerler"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jazerler"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jazerler"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jazerler"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jazerler": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jazerler"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jazerler"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jazerler"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jazerler"
        },
        "content": "cmd /k"
      }
    ],
    "authorContributionMap": {
      "jazerler": 4,
      "-": 19
    }
  }
]
