[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "# duke.duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.duke.java` file, right-click it, and choose `Run duke.duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    mainClassName \u003d \"duke.Main\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 27,
      "-": 45
    }
  },
  {
    "path": "src/main/java/duke/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The Deadline class to store deadline information"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Deadline constructor to initialize a deadline object with the name and time"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param name name of deadline"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param time date and time of deadline in the form of a string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    Deadlines(String name, String time) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        super(name, time);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String[] by \u003d time.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.date \u003d parseDate(by[1]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.time \u003d parseTime(by[2]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * parseDate method which takes in a date in string form and converts it to a LocalDate object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param dateString date in string format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the LocalDate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public LocalDate parseDate(String dateString) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return LocalDate.parse(dateString, format);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * parseTime method which takes in a time in string form and converts it to a LocalTime object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param timeString time in string format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the LocalTime"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public LocalTime parseTime(String timeString) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return LocalTime.parse(timeString, format);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * printDateTime method which takes in the date and time and converts it to String"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns String of date and time"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String printDateTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter formatDate \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter formatTime \u003d DateTimeFormatter.ofPattern(\"h:mma\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return String.format(\"%s, %s\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                formatDate.format(date),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                formatTime.format(time));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * toString method which converts the object to a String"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (super.getDone()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[D]\" + \"[\" + \"C\" + \"] \" + super.getName() + \"(by: \" + printDateTime() + \")\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[D]\" + \"[\" + \"X\" + \"] \" + super.getName() + \"(by: \" + printDateTime() + \")\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 74
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 48
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The Duke program can record down todos, deadlines and events and save it on your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private JavafxUi javafxUi;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Duke constructor to initialize a Duke object, initializes a Ui, Storage and TaskList object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @exception DukeException On input error and file path error."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Duke() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String logo \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                \" ____        _        \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                        + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                        + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                        + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                        + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        javafxUi \u003d new JavafxUi();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        ui.drawLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList \u003d new TaskList(storage.loadFile());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void start(Stage stage) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        // The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        // Formatting the window to look as expected"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        // adding functionality to handle user input."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            assert !input.isBlank();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String response \u003d javafxBot(input);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            assert !response.isBlank();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Main method which runs the bot"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param args user input"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException if bot does not understand user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Bot method which handles the inputs and responds to the user while calling the appropriate classes"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @exception DukeException On input error and file path error."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void bot() throws DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            // splits the input into the different words in order to understand what the user wants"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String first \u003d input.split(\" \")[0];"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            // user exits the program"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                ui.bye();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            // user sees the list of tasks"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                ui.printList(taskList.getList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            // user sets a specific task as completed"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else if (input.split(\" \")[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                ui.doneTask(taskList.done(Integer.parseInt(input.split(\" \")[1])));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                ui.listCount(taskList.countList());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                ui.drawLine();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                storage.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            // user creates a new task"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else if (first.equals(\"todo\") || first.equals(\"deadline\") || first.equals(\"event\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                ui.addTask(taskList.add(input));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                ui.listCount(taskList.countList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                ui.drawLine();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                storage.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            // user deletes a task"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else if (first.equals(\"delete\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                ui.deleteTask(taskList.delete(input));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                ui.listCount(taskList.countList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                ui.drawLine();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                storage.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            // user searches for a keyword"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else if (first.equals(\"find\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                ui.foundWord(taskList.findWord(input));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            // user types something the bot does not understand"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Sorry I don\u0027t know what you mean\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * javafxBot method which handles the inputs and responds to the user while calling the appropriate classes"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * in the javafx interface"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @exception DukeException On input error and file path error."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String javafxBot(String input) throws DukeException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        // String to output"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        // splits the input into the different words in order to understand what the user wants"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String first \u003d input.split(\" \")[0];"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        // user exits the program"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d javafxUi.bye();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        // user sees the list of tasks"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d javafxUi.printList(taskList.getList());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d javafxUi.drawLine();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        // user sets a specific task as completed"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else if (input.split(\" \")[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d javafxUi.doneTask(taskList.done(Integer.parseInt(input.split(\" \")[1])));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d javafxUi.listCount(taskList.countList());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d javafxUi.drawLine();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            storage.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        // user creates a new task"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else if (first.equals(\"todo\") || first.equals(\"deadline\") || first.equals(\"event\")) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d javafxUi.addTask(taskList.add(input));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d javafxUi.listCount(taskList.countList());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d javafxUi.drawLine();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            storage.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        // user deletes a task"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else if (first.equals(\"delete\")) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d javafxUi.deleteTask(taskList.delete(input));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d javafxUi.listCount(taskList.countList());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d javafxUi.drawLine();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            storage.saveFile(taskList.getList());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        // user searches for a keyword"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else if (first.equals(\"find\")) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            output +\u003d javafxUi.foundWord(taskList.findWord(input));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        // user types something the bot does not understand"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Sorry I don\u0027t know what you mean\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 235
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The DukeException class which handles all the exceptions in the Duke program"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 14
    }
  },
  {
    "path": "src/main/java/duke/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The event class to store event information"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Event constructor to initialize a event object with the name and time"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param name name of event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param time date and time of event in the form of a string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    Events(String name, String time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        super(name, time);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String[] at \u003d time.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.date \u003d parseDate(at[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String[] timeArray \u003d at[2].split(\"-\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.startTime \u003d parseTime(timeArray[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.endTime \u003d parseTime(timeArray[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * parseDate method which takes in a date in string form and converts it to a LocalDate object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param dateString date in string format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the LocalDate"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public LocalDate parseDate(String dateString) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return LocalDate.parse(dateString, format);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * parseTime method which takes in a time in string form and converts it to a LocalTime object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param timeString time in string format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the LocalTime"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public LocalTime parseTime(String timeString) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return LocalTime.parse(timeString, format);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * printDateTime method which takes in the date and time and converts it to String"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns String of date and time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String printDateTime() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter formatDate \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        DateTimeFormatter formatTime \u003d DateTimeFormatter.ofPattern(\"h:mma\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return String.format(\"%s, %s to %s\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                formatDate.format(date),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                formatTime.format(startTime),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                formatTime.format(endTime));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * toString method which converts the object to a String"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (super.getDone()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[E]\" + \"[\" + \"C\" + \"] \" + super.getName() + \"(at: \" + printDateTime() + \")\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[E]\" + \"[\" + \"X\" + \"] \" + super.getName() + \"(at: \" + printDateTime() + \")\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 81
    }
  },
  {
    "path": "src/main/java/duke/JavafxUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The JavafxUi class to handle user interface methods for the javajx interface"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class JavafxUi {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    final String outputLine \u003d \"--------------------------\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * JavafxUi constructor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    JavafxUi() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * drawLine method which returns a line"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String drawLine() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return outputLine;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * addTask method which returns the task information"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return \"added: \" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * deleteTask method which returns the task information"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String deleteTask(Task task) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return deleteAll();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"Noted. I\u0027ve removed this task: \" + \"\\n\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * doneTask method which returns the task information"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String doneTask(Task task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done: \\n\" + task.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * listCount method which returns the number of tasks"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String listCount(int count) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return \"Now you have \" + count + \" tasks in the list. \\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "               + drawLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * bye method which returns a message when the user exits"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String bye() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return \"Bye. Hope to see you again soon! \\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + drawLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * deleteAll method which returns a message when the user deletes all tasks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String deleteAll() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return \"All tasks have been deleted!\" + \"\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * printList method which returns all the tasks in the list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param list list of tasks"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String printList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String temp \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        int tempIndex \u003d 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        for (Task x: list) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            temp +\u003d tempIndex + \".\" + x.toString() + \"\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            tempIndex +\u003d 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        temp +\u003d drawLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * foundWord method which returns all the tasks in the list that contain the word"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param list list of tasks in the list that contain the word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String foundWord(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return \"Here are the matching tasks in your list:\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                + printList(list);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 101
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The main class to bypass JavaFX runtime components are missing error"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   8/9/2020"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public static void main(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        Duke.main(args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 15
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The Storage class to save the data on the computer"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    // file path to direct the program where to save the file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Storage constructor to initialize a storage object which directs the path and creates a file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * if no file exists"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when the program is unable to create a new file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Storage() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String fp \u003d \"/save.txt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        path \u003d Paths.get(home, fp);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (Files.notExists(path)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            File newDir \u003d new File(path.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                newDir.createNewFile();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Failed to create new file\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * saveFile method which saves the list of tasks as a file on the computer"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param list takes in the list of tasks"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when the file path cannot be found"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void saveFile(List\u003cTask\u003e list) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            FileWriter fw \u003d new FileWriter(String.valueOf(path));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String contents \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            for (Task x : list) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                if (x.getClass().getSimpleName().equals(\"ToDo\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    String temp \u003d \"ToDo\\n\" + x.getDone() + \"\\n\" + x.getName() + \"\\n\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    contents +\u003d temp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                } else if (x.getClass().getSimpleName().equals(\"Deadlines\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    String temp \u003d \"Deadlines\\n\" + x.getDone() + \"\\n\" + x.getName() + \"\\n\" + x.getTime() + \"\\n\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    contents +\u003d temp;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    String temp \u003d \"Events\\n\" + x.getDone() + \"\\n\" + x.getName() + \"\\n\" + x.getTime() + \"\\n\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    contents +\u003d temp;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            fw.write(contents);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"File cannot be located or opened\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * loadFile method which retrieves the file from the path and returns the data"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the list of tasks retrieved from the file on the computer"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when it is unable to load file from file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public List\u003cTask\u003e loadFile() throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            Scanner sc \u003d new Scanner(path);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                String type \u003d sc.nextLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                String done \u003d sc.nextLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                String name \u003d sc.nextLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                if (type.equals(\"ToDo\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    sc.nextLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    Task temp \u003d new ToDo(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    if (done.equals(\"true\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                        temp.completeTask();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    list.add(temp);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                } else if (type.equals(\"Deadlines\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    String time \u003d sc.nextLine();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    sc.nextLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    Task temp \u003d new Deadlines(name, time);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    if (done.equals(\"true\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                        temp.completeTask();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    list.add(temp);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    String time \u003d sc.nextLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    sc.nextLine();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    Task temp \u003d new Events(name, time);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    if (done.equals(\"true\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                        temp.completeTask();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    list.add(temp);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Unable to find load file\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hoperawr": 123
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The Task class to store task information"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Task constructor to initialize a task object with the name"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    Task(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Task constructor to initialize a task object with the name and time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param time date and time of task in the form of a string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    Task(String name, String time) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * completedTask method which marks the task as completed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return the completed task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task completeTask() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 54
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The TaskList class to handle task list functions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * TaskList constructor to initialize a TaskList object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param list list of tasks from the load file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * add method which takes in the user input and adds the appropriate task to the list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param input user input where the user specifies what he wants to add"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when there is an error with the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task add(String input) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (input.split(\" \")[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] temp \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (temp.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Description of todo cannot be empty!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            Task newTask \u003d new ToDo(temp[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            list.add(newTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return newTask;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else if (input.split(\" \")[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] temp \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (temp.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Description of deadline cannot be empty!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] temp2 \u003d temp[1].split(\"/by\", 2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (temp2.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"You need to specify a time!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            Task newTask \u003d new Deadlines(temp2[0], temp2[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            list.add(newTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return newTask;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else if (input.split(\" \")[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] temp \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (temp.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"Description of event cannot be empty!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] temp2 \u003d temp[1].split(\"/at\", 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (temp2.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                throw new DukeException(\"You need to specify a time!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            Task newTask \u003d new Events(temp2[0], temp2[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            list.add(newTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return newTask;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Sorry I don\u0027t know what you mean by that\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * delete method which takes in the user input and deletes the appropriate task from the list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param input user input where the user specifies what he wants to delete"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the task deleted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @throws DukeException when there is an error with the user input"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task delete(String input) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String num \u003d input.split(\" \")[1];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            if (num.equals(\"all\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                deleteAll();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                int intNum \u003d Integer.parseInt(num);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                Task temp \u003d list.get(intNum - 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                list.remove(intNum - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                return temp;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"Please key in a number\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } catch (IndexOutOfBoundsException r) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            throw new DukeException(\"The task does not exist\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * done method which sets a task as done"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param num the integer of the task which the user wants to set as done"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the completed task"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public Task done(int num) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return list.set(num - 1, list.get(num - 1).completeTask());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * getList method which returns the list of tasks"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the list of tasks"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * countList method which returns the number of tasks in the list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns the number of tasks in the list"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public int countList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * deleteAll method which deletes all tasks in the list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void deleteAll() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * findWord method that goes through all the tasks in the list and returns a new list of tasks that contain the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * word specified by the user"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param input input of user"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return returns a new list of tasks that contain specifed word"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public List\u003cTask\u003e findWord(String input) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String[] inputArray \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        String word \u003d inputArray[1];"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assert !word.isBlank();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        List\u003cTask\u003e findArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        for (Task x: list) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            String[] nameArray \u003d x.getName().split(\" \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            inner:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            for (String y: nameArray) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                if (word.equals(y)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    findArray.add(x);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                    break inner;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        return findArray;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 153
    }
  },
  {
    "path": "src/main/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void testAddToDo() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"todo eat\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(taskList.countList(), 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void testAddDeadline() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"deadline /by 27/08/2020 2359\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(taskList.countList(), 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void testAddEvent() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"event sleep /at 28/08/2020 0000-0800\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(taskList.countList(), 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void delete() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"event sleep /at 28/08/2020 0000-0800\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"deadline /by 27/08/2020 2359\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.delete(\"delete 1\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(taskList.countList(), 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void deleteAll() throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"event sleep /at 28/08/2020 0000-0800\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"deadline /by 27/08/2020 2359\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.add(\"todo eat\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        taskList.delete(\"delete all\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        assertEquals(taskList.countList(), 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 58
    }
  },
  {
    "path": "src/main/java/duke/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The todo class to store todo information"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * ToDo constructor to initialize a ToDo object with the name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param name name of ToDo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    ToDo(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * toString method which converts the object to a String"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (super.getDone()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[T]\" + \"[\" + \"C\" + \"] \" + super.getName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            return \"[T]\" + \"[\" + \"X\" + \"] \" + super.getName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 32
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * The Ui class to handle user interface methods"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @author  Hope Leong"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @version 0.1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " * @since   27/8/2020"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    final String outputLine \u003d \"--------------------------------------------------\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * Ui constructor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    Ui() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * drawLine method which outputs a line"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void drawLine() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(outputLine);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * addTask method which outputs the task information"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param task the task added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(\"added: \" + task.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * deleteTask method which outputs the task information"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param task the task deleted"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void deleteTask(Task task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            deleteAll();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task: \" + \"\\n\" + task.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * doneTask method which outputs the task information"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param task the task done"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void doneTask(Task task) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(task.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * listCount method which outputs the number of tasks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param count the size of the list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void listCount(int count) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(\"Now you have \" + count + \" tasks in the list.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        drawLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * bye method which outputs a message when the user exits"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void bye() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        drawLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * deleteAll method which outputs a message when the user deletes all tasks"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void deleteAll() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(\"All tasks have been deleted!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * printList method which outputs all the tasks in the list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param list list of tasks"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void printList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        int tempIndex \u003d 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        for (Task x: list) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            System.out.println(tempIndex + \".\" + x.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "            tempIndex +\u003d 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        drawLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * foundWord method which outputs all the tasks in the list that contain the word"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     * @param list list of tasks in the list that contain the word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    public void foundWord(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "        printList(list);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 104
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "todo CS2103"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "deadline ip /by 27/08/2020 2359"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "event tutorial /at 28/08/2020 1600-1800"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "delete all"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 13
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "set JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hoperawr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hoperawr"
        },
        "content": "java -classpath ..\\bin duke.duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "hoperawr": 4,
      "-": 19
    }
  }
]
