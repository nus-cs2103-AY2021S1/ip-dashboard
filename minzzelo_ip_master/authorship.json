[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 16,
      "-": 45
    }
  },
  {
    "path": "src/main/java/data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "T | 0 | borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "D | 0 | return book | 06-06-2020 11:00"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 2
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a Duke bot."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The Storage associated with the Duke object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The TaskList associated with the Duke object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The Ui associated with the Duke object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a Duke object with attributes defined"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Initializes the Ui, Storage and TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param filePath Path of the file where the data is written to."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            ui.print(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a Duke object with"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * a predefined file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Initializes the Ui, Storage and TaskList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            ui.print(e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Runs the bot."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Operations are executed based on the input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        boolean isRunning \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        while (isRunning) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                isRunning \u003d c.isRunning();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                ui.print(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Gets response for a user input."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns a Duke response as a String."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return ui.print(e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Runs the program."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Duke duke \u003d new Duke(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 100,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 33
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.command.UpdateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.command.UpdateDateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.command.UpdateDescCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeEmptyInputException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeInvalidKeywordException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Responsible for parsing user inputs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Parses the user input and returns a Command based on the input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param fullCommand User input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeEmptyInputException If input is empty."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeInvalidDateTimeException If date and time input is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeInvalidCommandException If command is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    static Command parse(String fullCommand) throws DukeEmptyInputException, DukeInvalidDateTimeException,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            DukeInvalidCommandException, DukeInvalidKeywordException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String[] commands \u003d fullCommand.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        switch(commands[0]) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return new DoneCommand(Integer.parseInt(commands[1]));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(commands[1]));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        case \"update\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return parseUpdate(commands[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            if (commands.length \u003c 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                throw new DukeInvalidKeywordException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return parseFind(commands[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            if (commands.length \u003c 2) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                throw new DukeEmptyInputException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return parseToDo(commands[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            if (commands.length \u003c 2) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                throw new DukeEmptyInputException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return parseDeadline(commands[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            if (commands.length \u003c 2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                throw new DukeEmptyInputException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return parseEvent(commands[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeInvalidCommandException(\"Unknown command.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Parses a UpdateCommand."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param command Command given by user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns a UpdateCommand associated with the task to be updated."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    static UpdateCommand parseUpdate(String command) throws DukeEmptyInputException, DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String[] details;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            if (command.contains(\" /date\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                details \u003d command.split(\" /date \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                if (details.length \u003c 2) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    throw new DukeEmptyInputException(\"You have not entered a new date for your task!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                int taskNo \u003d Integer.parseInt(details[0]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                return new UpdateDateCommand(taskNo, details[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                details \u003d command.split(\" /desc \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                if (details.length \u003c 2) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    throw new DukeEmptyInputException(\"You have not entered a new description for your task!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                int taskNo \u003d Integer.parseInt(details[0]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                return new UpdateDescCommand(taskNo, details[1]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeInvalidDateTimeException(\"The new date for your task cannot be parsed.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Parses an FindCommand associated with a keyword."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param keyword Search keyword."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns an FindCommand associated with the search keyword."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    static FindCommand parseFind(String keyword) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new FindCommand(keyword);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Parses an AddCommand associated with a Todo."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param description Description of the Todo."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns an AddCommand associated with the Todo to be added."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeEmptyInputException If input is empty."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    static AddCommand parseToDo(String description) throws DukeEmptyInputException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (description.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeEmptyInputException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new AddCommand(new Todo(description));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Parses an AddCommand associated with a Deadline task."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param description Description of the Deadline task."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns an AddCommand associated with the Deadline task to be added."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeEmptyInputException If input is empty."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeInvalidDateTimeException If date and time input is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    static AddCommand parseDeadline(String description) throws DukeEmptyInputException, DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String[] details \u003d description.split(\" /by \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (details[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeEmptyInputException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (details.length \u003c\u003d 1 || details[1].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeEmptyInputException(\"The due date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return new AddCommand(new Deadline(details[0], details[1]));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeInvalidDateTimeException(\"The date for your deadline cannot be parsed.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Parses an AddCommand associated with an Event task."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param description Description of the Event task."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns an AddCommand associated with the Event task to be added."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeEmptyInputException If input is empty."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeInvalidDateTimeException If date and time input is invalid."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    static AddCommand parseEvent(String description) throws DukeEmptyInputException, DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String[] details \u003d description.split(\" /at \");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (details[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeEmptyInputException(\"The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (details.length \u003c\u003d 1 || details[1].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeEmptyInputException(\"The date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return new AddCommand(new Event(details[0], details[1]));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeInvalidDateTimeException(\"The date for your event cannot be parsed.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 177
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeFileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeLoadingErrorException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Responsible for local disk file-related operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Path associated with the file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a Storage object with attributes defined"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param filePath Path associated with the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            this.path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            if (!Files.exists((path))) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                // If .txt file does not exist, create the file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                Path directory \u003d file.getParentFile().toPath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                if (!Files.exists(directory)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    Files.createDirectory(directory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Loads the task list in the file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns a {@code List\u003cTask\u003e}that corresponds to the file data."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeFileNotFoundException If file is not found."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    List\u003cTask\u003e load() throws DukeFileNotFoundException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        File f \u003d new File(String.valueOf(path));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                String[] task \u003d s.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                switch (task[0]) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    taskList.add(new Todo(task[2], task[1].equals(\"1\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    taskList.add(new Event(task[2], task[3], task[1].equals(\"1\")));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    taskList.add(new Deadline(task[2], task[3], task[1].equals(\"1\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    assert false : \"Local data cannot be interpreted!\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeFileNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Parses the Task into a string stored in the file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns a String that corresponds to the Task attributes."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    String parseTaskAsText(Task task) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (task instanceof Todo) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return \"T | \" + (task.getStatus() ? \"1\" : \"0\") + \" | \" + task.getDescription();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return \"E | \" + (task.getStatus() ? \"1\" : \"0\") + \" | \" + task.getDescription() + \" | \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    + ((Event) task).getDate();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return \"D | \" + (task.getStatus() ? \"1\" : \"0\") + \" | \" + task.getDescription() + \" | \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    + ((Deadline) task).getDate();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Saves the task list in the file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskList TaskList to be saved."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeLoadingErrorException If I/O operation fails."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void saveTasks(TaskList taskList) throws DukeLoadingErrorException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            FileWriter fw \u003d new FileWriter(String.valueOf(path));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            String content \u003d \"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            for (Task task : taskList.getList()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                content +\u003d parseTaskAsText(task) + \"\\n\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            fw.write(content);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeLoadingErrorException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 127
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeInvalidUpdateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Contains a list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Responsible for any task related operations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The list of tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a TaskList object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a TaskList object with attributes defined"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param tasks The list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Retrieves the task according to the index given."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param index Index of the task in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Retrieves the size of the task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns the size."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Retrieves the task list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns the list of tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Marks a task in the task list as complete."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskNo Index of the task to be completed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns the task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Task completeTask(int taskNo) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Task task \u003d tasks.get(taskNo - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Removes a task in the task list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskNo Index of the task to be removed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns the removed task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Task deleteTask(int taskNo) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Task task \u003d tasks.get(taskNo - 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        tasks.remove(task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Edits a task\u0027s description in the task list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskNo Index of the task to be edited."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param description New description of the task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns the edited task."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Task updateTaskDesc(int taskNo, String description) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Task task \u003d tasks.get(taskNo - 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        task.updateDesc(description);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Edits a task\u0027s date in the task list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskNo Index of the task to be edited."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param date New date of the task."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns the edited task."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeInvalidUpdateException when attempting to update an invalid detail."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Task updateTaskDate(int taskNo, String date) throws DukeInvalidUpdateException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Task task \u003d tasks.get(taskNo - 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (task instanceof Event) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            event.updateDate(date);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            Deadline deadline \u003d (Deadline) task;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            deadline.updateDate(date);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeInvalidUpdateException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Finds the tasks related to keyword."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param keyword Keyword used to find the related tasks."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns a list of related tasks."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public List\u003cTask\u003e findRelatedTasks(String keyword) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        List\u003cTask\u003e relatedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        tasks.stream().filter(task -\u003e task.getDescription().contains(keyword))"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                .forEach(task -\u003e relatedTasks.add(task));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return relatedTasks;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Retrieves a string describing the task size."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns the string."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String getTaskSizeMessage() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return \"Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 158
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Responsible for interactions with the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Scanner used for operations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Scanner s;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a Ui object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    Ui() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        s \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Prints a greeting message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    void greet() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Prints an exit message."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String exit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String exitMessage \u003d \"Bye. Hope to see you soon!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        System.out.println(exitMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return exitMessage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Prints a string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param s Message to be printed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String print(String s) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Parses and prints the task list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskList TaskList to be printed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String printList(TaskList taskList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String s \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            Task task \u003d taskList.get(i - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            String message \u003d i + \".\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            message +\u003d task;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            s +\u003d message + \"\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Parses the list of tasks and prints the search result."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param searchResult Search result for task list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String printSearchResult(List\u003cTask\u003e searchResult) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        if (searchResult.size() \u003c 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            s +\u003d \"There are no matching results!\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            s +\u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d searchResult.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                Task task \u003d searchResult.get(i - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                String message \u003d i + \".\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                message +\u003d task;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                System.out.println(message);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                s +\u003d message + \"\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Reads the user input."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    String readCommand() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return s.nextLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 97
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeLoadingErrorException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a command that adds a task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The Task allocated to the Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of an AddCommand with attributes defined"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param task Task to be allocated."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Executes an addTask operation."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskList TaskList that the task is added to."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param ui Ui responsible for the operation."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param storage Storage where the changes are written to."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeLoadingErrorException If I/O operation fails during Storage#save."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeLoadingErrorException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String uiMessage \u003d String.format("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                \"Got it. I\u0027ve added this task:\\n%s\\n%s\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                task.toString(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                taskList.getTaskSizeMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return ui.print(uiMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 49
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a command which ends operation."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Indicates whether operation should continue running."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Ends the current operation."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskList TaskList associated with the operation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param ui Ui responsible for the operation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param storage Storage associated with the operation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return ui.exit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 32
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeInvalidUpdateException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeLoadingErrorException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Executes an operation."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskList TaskList associated with the operation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param ui Ui responsible for the operation."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param storage Storage associated with the operation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @returns Response to user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeLoadingErrorException If I/O operation fails during Storage#save."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeInvalidUpdateException when attempting to update an invalid detail."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeInvalidIndexException If invalid index is given."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public abstract String execute(TaskList taskList, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throws DukeLoadingErrorException, DukeInvalidUpdateException, DukeInvalidIndexException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Indicates whether operation should continue running."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 38
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeLoadingErrorException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a command that deletes a task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The number of the task to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private int taskNo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a DeleteCommand with attributes defined"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskNo number of the task to be deleted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public DeleteCommand(int taskNo) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.taskNo \u003d taskNo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Executes a deleteTask operation."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskList TaskList that the task is deleted from."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param ui Ui responsible for the operation."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param storage Storage where the changes are written to."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeLoadingErrorException If I/O operation fails during Storage#save."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeInvalidIndexException If invalid index is given."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throws DukeLoadingErrorException, DukeInvalidIndexException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            Task deletedTask \u003d taskList.deleteTask(taskNo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            String uiMessage \u003d String.format("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    \"Noted. I\u0027ve removed this task:\\n%s\\n%s\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    deletedTask.toString(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    taskList.getTaskSizeMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return ui.print(uiMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeInvalidIndexException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 55
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeLoadingErrorException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a command that marks a task as completed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The number of the task to be completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private int taskNo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a DoneCommand with attributes defined"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskNo number of the task to be completed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public DoneCommand(int taskNo) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.taskNo \u003d taskNo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Executes a completeTask operation."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskList TaskList that the task is completed in."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param ui Ui responsible for the operation."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param storage Storage where the changes are written to."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeLoadingErrorException If I/O operation fails during Storage#save."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeInvalidIndexException If invalid index is given."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throws DukeLoadingErrorException, DukeInvalidIndexException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            Task completedTask \u003d taskList.completeTask(taskNo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            String uiMessage \u003d String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\", completedTask.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return ui.print(uiMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeInvalidIndexException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 52
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Executes a findTasks operation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskList TaskList to do the search operation on."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param ui Ui responsible for the operation."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param storage Storage associated with the operation."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        List\u003cTask\u003e relatedTasks \u003d taskList.findRelatedTasks(keyword);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return ui.printSearchResult(relatedTasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 29
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a command that lists all tasks in the taskList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Executes a list operation."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskList TaskList that the tasks are listed from."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param ui Ui responsible for the operation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param storage Storage associated with the operation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return ui.printList(taskList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 21
    }
  },
  {
    "path": "src/main/java/duke/command/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeInvalidUpdateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeLoadingErrorException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public abstract class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The number of the task to be updated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    protected int taskNo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Abstract constructor for UpdateCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskNo number of the task to be updated."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    protected UpdateCommand(int taskNo) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.taskNo \u003d taskNo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Executes a updateTask operation."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskList TaskList that the task is edited from."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param ui Ui responsible for the operation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param storage Storage where the changes are written to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeLoadingErrorException If I/O operation fails during Storage#save."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeInvalidUpdateException when attempting to update an invalid detail."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeInvalidIndexException If invalid index is given."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public abstract String execute(TaskList taskList, Ui ui, Storage storage) throws DukeLoadingErrorException,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            DukeInvalidUpdateException, DukeInvalidIndexException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 37
    }
  },
  {
    "path": "src/main/java/duke/command/UpdateDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeInvalidUpdateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeLoadingErrorException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class UpdateDateCommand extends UpdateCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The new date of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a UpdateDateCommand with attributes defined"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskNo number of the task to be updated."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param date new date of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public UpdateDateCommand(int taskNo, String date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(taskNo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Executes a updateDate operation."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskList TaskList that the task is edited from."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param ui Ui responsible for the operation."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param storage Storage where the changes are written to."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeLoadingErrorException If I/O operation fails during Storage#save."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeInvalidUpdateException when attempting to update an invalid detail."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeInvalidIndexException If invalid index is given."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throws DukeLoadingErrorException, DukeInvalidUpdateException, DukeInvalidIndexException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            Task updatedTask \u003d taskList.updateTaskDate(super.taskNo, this.date);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            String uiMessage \u003d String.format("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    \"Noted. I\u0027ve updated this task:\\n%s\\n%s\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    updatedTask.toString(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    taskList.getTaskSizeMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return ui.print(uiMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeInvalidIndexException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 55
    }
  },
  {
    "path": "src/main/java/duke/command/UpdateDescCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeInvalidIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeInvalidUpdateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.exception.DukeLoadingErrorException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class UpdateDescCommand extends UpdateCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The new description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a UpdateDescCommand with attributes defined"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskNo number of the task to be updated."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param description new description of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public UpdateDescCommand(int taskNo, String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(taskNo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Executes a updateDesc operation."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param taskList TaskList that the task is edited from."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param ui Ui responsible for the operation."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param storage Storage where the changes are written to."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeLoadingErrorException If I/O operation fails during Storage#save."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeInvalidUpdateException when attempting to update an invalid detail."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @throws DukeInvalidIndexException If invalid index is given."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throws DukeLoadingErrorException, DukeInvalidIndexException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            Task updatedTask \u003d taskList.updateTaskDesc(super.taskNo, this.description);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            storage.saveTasks(taskList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            String uiMessage \u003d String.format("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    \"Noted. I\u0027ve updated this task:\\n%s\\n%s\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    updatedTask.toString(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                    taskList.getTaskSizeMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            return ui.print(uiMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            throw new DukeInvalidIndexException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 56
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeEmptyInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a DukeException in which the input is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class DukeEmptyInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param message string representing the exception"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public DukeEmptyInputException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents an exception associated with Duke-related operations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param message string representing the exception"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeFileNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a DukeException in which the file is not found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class DukeFileNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public DukeFileNotFoundException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(\"File not found!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a DukeException in which the command is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class DukeInvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param message string representing the exception"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public DukeInvalidCommandException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a DukeException in which the DateTime object is invalid"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class DukeInvalidDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param message string representing the exception"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public DukeInvalidDateTimeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a DukeException in which the index is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class DukeInvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public DukeInvalidIndexException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(\"Please enter a valid index!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class DukeInvalidKeywordException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public DukeInvalidKeywordException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(\"Please enter a valid keyword!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeInvalidUpdateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a DukeException in which an update does not match the task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class DukeInvalidUpdateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public DukeInvalidUpdateException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(\"You are trying to update something that does not exist!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeLoadingErrorException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a DukeException in which a loading error has occurred."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class DukeLoadingErrorException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public DukeLoadingErrorException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(\"Loading error!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 13
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a deadline task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The due date associated with the Task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a Deadline object with attributes defined"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param description Description of the deadline task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param date Date that the task is due by."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Deadline(String description, String date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.date \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a Deadline object with attributes defined"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Overloaded constructor which specifies the completion status of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param date Date that the task is due by."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param isDone Completion status of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Deadline(String description, String date, boolean isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.date \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Retrieves the due date of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns the date."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Overloaded method, updates a deadline\u0027s date."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param date New date of the deadline."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void updateDate(String date) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.date \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Overrides the default toString() method in the Task class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns a String describing the attributes of the deadline task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                + this.date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, hh:mm a\")) + \")\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 68
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents an event task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The date associated with the Event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of an Event object with attributes defined"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param description Description of the event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param date Date that the event is on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Event(String description, String date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.date \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of an Event object with attributes defined"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Overloaded constructor which specifies the completion status of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param description Description of the event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param date Date that the event is on."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param isDone Completion status of the event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Event(String description, String date, boolean isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.date \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Retrieves the date of the event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns the date."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this.date.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Overloaded method, updates a event\u0027s date."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param date New date of the event."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void updateDate(String date) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.date \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Overrides the default toString() method in the Task class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns a String describing the attributes of the event."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                + this.date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy, hh:mm a\")) + \")\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 69
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The description of the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * The completion status of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a Task object with attributes defined"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a Task object with attributes defined"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Overloaded constructor which specifies the completion status of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param isDone Completion status of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Retrieves the completion status of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns the completion status."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Retrieves the description of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns the description."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Updates a task\u0027s description."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param description New description of the event."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void updateDesc(String description) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Overrides the default toString() method in the Object class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns a String describing the attributes of the task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return this.isDone ? \"[✓] \" + this.description : \"[✗] \" + this.description;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 83
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Represents a todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a Todo object with attributes defined"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param description Description of the todo."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates a new instance of a Todo object with attributes defined"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * in the parameters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Overloaded constructor which specifies the completion status of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param description Description of the todo."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @param isDone Completion status of the todo."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Overrides the default toString() method in the Task class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * @return Returns a String describing the attributes of the todo."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 38
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 61
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.JPG\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.JPG\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /** Initializes the main window. **/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                DialogBox.getDukeDialog(WELCOME_MESSAGE, dukeImage)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 60
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Duke duke \u003d new Duke(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 11
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    public void initTaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        // Initialize an empty task list before each test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    void addTodo_normalInput_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Todo todo \u003d new Todo(\"borrow book\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        taskList.addTask(todo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(taskList.get(0).toString(), \"[T][✗] borrow book\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //    void addEvent_normalInput_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //        Event event \u003d new Event(\"project meeting\", \"06-06-2020 11:00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //        taskList.addTask(event);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //        assertEquals(taskList.get(0).toString(), \"[E][✗] project meeting (at: 6 Jun 2020, 11:00 am)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //    void addDeadline_normalInput_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //        Deadline deadline \u003d new Deadline(\"return book\", \"06-08-2020 12:00\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //        assertEquals(taskList.get(0).toString(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //                \"[D][✗] return book (by: 6 Aug 2020, 12:00 pm)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    void size_normalInput_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", \"06-08-2020 12:00\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Event event \u003d new Event(\"project meeting\", \"06-06-2020 11:00\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(taskList.getSize(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    void completeTask_normalInput_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", \"06-08-2020 12:00\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        taskList.completeTask(1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(deadline.getStatus(), true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    void deleteTask_normalInput_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", \"06-08-2020 12:00\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Event event \u003d new Event(\"project meeting\", \"06-06-2020 11:00\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        taskList.deleteTask(1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        List\u003cTask\u003e expectedTaskList \u003d Arrays.asList(event);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(taskList.getList(), expectedTaskList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 77
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    void constructTodo_normalInput_success() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Todo todo \u003d new Todo(\"borrow book\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(todo.toString(),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "                \"[T][✗] borrow book\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //    void constructEvent_normalInput_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //        Event event \u003d new Event(\"project meeting\", \"06-06-2020 11:00\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //        assertEquals(event.toString(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //                \"[E][✗] project meeting (at: 6 Jun 2020, 11:00 am)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //    void constructDeadline_normalInput_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //        Deadline deadline \u003d new Deadline(\"return book\", \"06-08-2020 12:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //        assertEquals(deadline.toString(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //                \"[D][✗] return book (by: 6 Aug 2020, 12:00 pm)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minzzelo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    void completeTask_normalInput_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", \"06-08-2020 12:00\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "        assertEquals(deadline.getStatus(), true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 36
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "deadline return book /by 06-06-2020 12:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "event project meeting /at 08-08-2020 15:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 9
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/exception/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minzzelo"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "minzzelo": 2,
      "-": 36
    }
  }
]
