[
  {
    "path": "src/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Task newTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public AddCommand(Task newTask) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.newTask \u003d newTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        storage.append(newTask);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String output \u003d \"\\t Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \"\\t   \" + newTask + \"\\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \"\\t Now you have \" + tasks.size() + \" tasks in the list.\\n\" ;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ui.showMessage(output);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 30
    }
  },
  {
    "path": "src/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class ByeCommand extends Command{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String byeMessage \u003d \"\\t Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ui.showMessage(byeMessage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 20
    }
  },
  {
    "path": "src/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "abstract public class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 13
    }
  },
  {
    "path": "src/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class DeleteCommand extends Command{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (this.taskIndex \u003c 0 || this.taskIndex \u003e tasks.size() - 1) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"\\tThere is no such task.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task toDelete \u003d tasks.get(this.taskIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        tasks.remove(this.taskIndex);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        storage.overwrite(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String output \u003d \"\\t Noted. I\u0027ve removed this task:\\n\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \"\\t   \" + toDelete + \"\\n\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \"\\t Now you have \" + tasks.size() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ui.showMessage(output);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 32
    }
  },
  {
    "path": "src/duke/command/DoNothingCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class DoNothingCommand extends Command{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 18
    }
  },
  {
    "path": "src/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class DoneCommand extends Command{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (this.taskIndex \u003c 0 || this.taskIndex \u003e tasks.size() - 1) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(\"\\tThere is no such task.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task toChange \u003d tasks.get(this.taskIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        toChange.markAsDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        storage.overwrite(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String output \u003d \"\\t Nice! I\u0027ve marked this task as done:\\n\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                \"\\t  \" + toChange + \"\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ui.showMessage(output);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 31
    }
  },
  {
    "path": "src/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            ui.showMessage(\"\\tYay! You have nothing to do at the moment! :-)\\n\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            StringBuilder output \u003d new StringBuilder(\"\\t Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                Task theTask \u003d tasks.get(i - 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                output.append(\"\\t \").append(i).append(\".\").append(theTask).append(\"\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            ui.showMessage(output.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 29
    }
  },
  {
    "path": "src/duke/command/TasksOnCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class TasksOnCommand extends Command{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public TasksOnCommand(LocalDate date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String formattedDate \u003d date.format(formatter);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\"\\t Here are the tasks on \")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                .append(formattedDate).append(\":\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        int numbering \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean isFree \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (task.hasSameDate(this.date)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                if (isFree) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    isFree \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                output.append(\"\\t \").append(numbering).append(\".\").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                numbering++;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (isFree) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            ui.showMessage(\"\\tYay! You have nothing to do on \" + formattedDate + \"! :-)\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            ui.showMessage(output.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 50
    }
  },
  {
    "path": "src/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 8
    }
  },
  {
    "path": "src/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this(description, by, false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Deadline(String description, LocalDateTime by, boolean isDone) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \"D\" + \"~\" + super.saveFormat() + \"~\" + this.by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean hasSameDate(LocalDate theDate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return by.toLocalDate().equals(theDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(this.DATE_FORMAT) + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 32
    }
  },
  {
    "path": "src/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this(description, at, false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Event(String description, LocalDateTime at, boolean isDone) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \"E\" + \"~\" + super.saveFormat() + \"~\" + this.at;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean hasSameDate(LocalDate theDate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return at.toLocalDate().equals(theDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at.format(this.DATE_FORMAT) + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 33
    }
  },
  {
    "path": "src/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "abstract public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    protected final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return isDone + \"~\" + description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    abstract public boolean hasSameDate(LocalDate theDate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 38
    }
  },
  {
    "path": "src/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this(description,false);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \"T\" + \"~\" + super.saveFormat();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public boolean hasSameDate(LocalDate theDate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 29
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 40,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String input \u003d command.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        if (input.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (input.length() \u003d\u003d 4 || input.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                throw new DukeException(\"\\tNo task number specified.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            int idx;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                idx \u003d Integer.parseInt(input.substring(5).trim()) - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                throw new DukeException(\"\\tTask number format invalid, \" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                        \"must be a number.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new DoneCommand(idx);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (input.length() \u003d\u003d 6 || input.substring(7).isBlank()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                throw new DukeException(\"\\tNo task number specified.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            int idx;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                idx \u003d Integer.parseInt(input.substring(7).trim()) - 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                throw new DukeException(\"\\tTask number format invalid, \" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                        \"must be a number.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new DeleteCommand(idx);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (input.startsWith(\"tasks on\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (input.length() \u003d\u003d 8 || input.substring(9).isBlank()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                throw new DukeException(\"\\tNeed to specify the date of the tasks\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            String dateOn \u003d input.substring(9).trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            LocalDate date;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                date \u003d LocalDate.parse(dateOn, format);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                throw new DukeException(\"\\tDate should be in format dd/mm/yyyy\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new TasksOnCommand(date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } else if (!input.isBlank()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Task newTask;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            String desc;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            LocalDateTime time;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                if (input.length() \u003d\u003d 4 || input.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    throw new DukeException(\"\\tThe description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                desc \u003d input.substring(5).trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                newTask \u003d new Todo(desc);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } else if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                String[] components \u003d input.split(\" /by \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                if (components[0].length() \u003d\u003d 8 || components[0].substring(9).isBlank()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    throw new DukeException(\"\\tThe description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                if (components.length \u003d\u003d 1 || components[1].isBlank()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    throw new DukeException(\"\\tThe date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                desc \u003d components[0].substring(9).trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    time \u003d LocalDateTime.parse(components[1].trim(), format);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    throw new DukeException(\"\\tDate should be in format dd/mm/yyyy hh:mm\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                newTask \u003d new Deadline(desc, time);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                String[] components \u003d input.split(\" /at \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                if (components[0].length() \u003d\u003d 5 || components[0].substring(6).isBlank()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    throw new DukeException(\"\\tThe description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                if (components.length \u003d\u003d 1 || components[1].isBlank()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    throw new DukeException(\"\\tThe date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                desc \u003d components[0].substring(6).trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    time \u003d LocalDateTime.parse(components[1].trim(), format);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    throw new DukeException(\"\\tDate should be in format dd/mm/yyyy hh:mm\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                newTask \u003d new Event(desc, time);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                throw new DukeException(\"\\tI don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            return new AddCommand(newTask);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return new DoNothingCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 116
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private File taskFile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Storage(String filepath) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.taskFile \u003d new File(filepath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            taskFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            boolean doesNotExist \u003d taskFile.createNewFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            if (doesNotExist) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                throw new DukeException(\"Database file does not exist\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Scanner loadedData \u003d new Scanner(taskFile);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            while (loadedData.hasNextLine()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                String[] taskParts \u003d loadedData.nextLine().split(\"~\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                String identifier \u003d taskParts[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                String desc \u003d taskParts[2];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                LocalDateTime timing \u003d taskParts.length \u003d\u003d 3 ? null : LocalDateTime.parse(taskParts[3]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                boolean isDone \u003d Boolean.parseBoolean(taskParts[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                Task savedTask;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                if (identifier.equals(\"T\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    savedTask \u003d new Todo(desc, isDone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                } else if (identifier.equals(\"D\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    savedTask \u003d new Deadline(desc, timing, isDone);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                    savedTask \u003d new Event(desc, timing, isDone);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                tasks.add(savedTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void append(Task task) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            FileWriter fw \u003d new FileWriter(taskFile.getPath(), true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fw.write(task.saveFormat() + System.lineSeparator());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException((e.getMessage()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void overwrite(TaskList todos) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            FileWriter fw \u003d new FileWriter(taskFile.getPath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Task todo;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            for (int i \u003d 0; i \u003c todos.size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                todo \u003d todos.get(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                fw.write(todo.saveFormat() + System.lineSeparator());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 82
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void remove(int idx) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        this.tasks.remove(idx);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public Task get(int idx) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return tasks.get(idx);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 33
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        System.out.println(\"Failed to load from saved data\\n\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void showError(String err) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        System.out.printf(\"\\t%s\\n\", err);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        System.out.print(message);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 37
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void canExitDuke_bye_byeCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"bye\") instanceof ByeCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void markTestAsDone_done1_DoneCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"done 1\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void invalidDoneNumber_doneA_throwException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"done A\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tTask number format invalid, must be a number.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void emptyDoneNumber_done_throwException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"done          \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tNo task number specified.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void deleteTask_delete1_DeleteCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"delete 1\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void invalidDeleteNumber_deleteA_throwException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"delete A\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tTask number format invalid, must be a number.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void emptyDeleteNumber_delete_throwException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"delete          \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tNo task number specified.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void listTasks_list_ListCommand() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch(DukeException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void listTasksOnDate_tasksOn30082001_TasksOnCommand() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"tasks on 30/08/2001\") instanceof TasksOnCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void invalidDateFormat_tasksOn3082001_throwException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"tasks on 30/8/2001\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tDate should be in format dd/mm/yyyy\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void emptyDate_tasksOn_throwException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"tasks on          \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tNeed to specify the date of the tasks\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void addTodo_todoWashCar_AddCommand() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"todo wash car\") instanceof AddCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void todoNoDescription_todo_throwException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"todo       \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tThe description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void addDeadline_deadlineReturnBookTiming_AddCommand() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"deadline return book /by 22/08/2020 18:00\") instanceof AddCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void deadlineNoDescription_deadlineTiming_throwException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"deadline          /by 22/08/2020 18:00\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tThe description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void deadlineNoTiming_deadlineReturnBook_throwException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"deadline return book /by         \");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tThe date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void deadlineDateInvalid_deadlineReturnBookInvalidTiming_throwException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"deadline return book /by 22/8/2020 1800\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tDate should be in format dd/mm/yyyy hh:mm\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void addEvent_eventReturnBookTiming_AddCommand() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"event return book /at 22/08/2020 18:00\") instanceof AddCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void eventNoDescription_deadlineTiming_throwException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"event          /at 22/08/2020 18:00\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tThe description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void eventNoTiming_eventReturnBook_throwException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"event return book /at         \");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tThe date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void eventDateInvalid_eventReturnBookInvalidTiming_throwException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"event return book /at 22/8/2020 1800\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tDate should be in format dd/mm/yyyy hh:mm\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void randomCommand_Hello_throwException() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            Parser.parse(\"Hello\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertEquals(e.getMessage(), \"\\tI don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void pressEnter_enter_DoNothingCommand() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            assertTrue(Parser.parse(\"\\n\") instanceof DoNothingCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FH-30"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 218
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import main.java.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void addTask_todo_sizeOne() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task todo \u003d new Todo(\"Eat Breakfast\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void getTask_todo_todoEqualToString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task todo \u003d new Todo(\"Do CS2103T iP\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(tasks.get(0).toString(), todo.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    public void removeTask_todo_sizeZero() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        Task todo \u003d new Todo(\"Eat Dinner\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FH-30"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(tasks.size(), 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        tasks.remove(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FH-30"
        },
        "content": "        assertEquals(tasks.size(), 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FH-30"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FH-30"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FH-30": 38
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FH-30"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FH-30"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FH-30"
        },
        "content": "deadline return book /by 22/08/2020 18:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FH-30"
        },
        "content": "event project meeting /at 22/10/2020 18:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FH-30"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FH-30"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FH-30"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FH-30"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FH-30"
        },
        "content": "todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FH-30"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FH-30"
        },
        "content": "event"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FH-30"
        },
        "content": "Hello"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FH-30"
        },
        "content": "deadline          /by Monday 4PM"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FH-30"
        },
        "content": "deadline Wash Car"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FH-30"
        },
        "content": "deadline Wash Car /by"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FH-30"
        },
        "content": "event /at Monday 6-8 PM"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FH-30"
        },
        "content": "event Wedding Party"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FH-30"
        },
        "content": "event Wedding Party /at"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FH-30"
        },
        "content": "done"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FH-30"
        },
        "content": "done a"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FH-30"
        },
        "content": "done 10000"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FH-30"
        },
        "content": "delete"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FH-30"
        },
        "content": "delete a"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FH-30"
        },
        "content": "delete 10000"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FH-30"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FH-30"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FH-30"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "FH-30": 27
    }
  }
]
