[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Entry point of the Duke application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        new Duke().run(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /** Runs the program until termination.  */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void run(String[] args) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        start(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        runCommandLoopUntilExitCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Sets up the required objects, loads up the data from the storage file, and prints the welcome message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param args arguments supplied by the user at program launch"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private void start(String[] args) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.storage \u003d initializeStorage(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            this.taskList \u003d storage.load();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (Storage.StorageOperationException | FileNotFoundException | IllegalValueException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            ui.showInitFailedMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /** Prints the Goodbye message and exits. */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            ui.showGoodbyeMessage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            storage.save(taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (Storage.StorageOperationException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            ui.showToUser(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /** Reads the user command and executes it, until the user issues the exit command.  */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private void runCommandLoopUntilExitCommand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            String userCommandText \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            command \u003d new Parser().parseCommand(userCommandText);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            CommandResult result \u003d executeCommand(command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            ui.showResultToUser(result);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } while (!ExitCommand.isExit(command));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param command user command"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return result of the command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private CommandResult executeCommand(Command command) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            command.setData(taskList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            storage.save(taskList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            ui.showToUser(e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Creates the Storage object based on the user specified path (if any) or the default storage path."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param args arguments supplied by the user at program launch"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws Storage.InvalidStorageFilePathException if the target file path is incorrect."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Storage initializeStorage(String[] args) throws Storage.InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        boolean isStorageFileSpecifiedByUser \u003d args.length \u003e 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return isStorageFileSpecifiedByUser ? new Storage(args[0]) : new Storage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 98,
      "-": 3
    }
  },
  {
    "path": "src/main/java/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents an add command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"\\t%1$s\\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"Now you have %2$d tasks in the list.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 13
    }
  },
  {
    "path": "src/main/java/commands/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Adds a Deadline to the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class AddDeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a deadline to the task list.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"\\tParameters: DESCRIPTION /by DATE TIME\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"\\tExample: \" + COMMAND_WORD + \" return book /by 23/09/2020 1800\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    protected final Deadline toAdd;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public AddDeadlineCommand(String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.toAdd \u003d new Deadline(description, deadline);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        taskList.add(toAdd);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd, taskList.size()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 34
    }
  },
  {
    "path": "src/main/java/commands/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Adds an Event to the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the task list.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"\\tParameters: DESCRIPTION /at DATE TIME\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"\\tExample: \" + COMMAND_WORD + \" project meeting /at 05/09/2020 1430\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public AddEventCommand(String description, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.toAdd \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Event getEvent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        taskList.add(toAdd);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd, taskList.size()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 34
    }
  },
  {
    "path": "src/main/java/commands/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Adds a Todo to the task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class AddTodoCommand extends AddCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a todo to the task list.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"\\tParameters: DESCRIPTION\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"\\tExample: \" + COMMAND_WORD + \" read book\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final Todo toAdd;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public AddTodoCommand(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.toAdd \u003d new Todo(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Todo getTodo() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        taskList.add(toAdd);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd, taskList.size()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 32
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import utils.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private int targetIndex \u003d -1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Command(int targetIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    protected Command() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Supplies the data the command will operate on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void setData(TaskList taskList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param taskList used to generate summary"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return summary message for tasks displayed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static String getMessageForTaskListSummary(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return String.format(Messages.MESSAGE_TASK_LISTED_OVERVIEW_FORMAT, taskList.size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Extracts the the target task in the last shown list from the given arguments."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws IndexOutOfBoundsException if the target index is out of bounds of the last viewed listing"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    protected Task getTargetTask() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return taskList.get(this.targetIndex - Ui.DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    abstract public CommandResult execute();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 55
    }
  },
  {
    "path": "src/main/java/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /** The feedback message to be shown to the user. Contains a description of the execution result. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /** The resulted list of tasks that was produced by the command. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public final List\u003c? extends Task\u003e taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.taskList \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult(String feedbackToUser, List\u003c? extends Task\u003e taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns a list of tasks relevant to the command\u0027s command result, if any."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Optional\u003cList\u003c? extends Task\u003e\u003e getRelevantTasks() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Optional.ofNullable(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 36
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import utils.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Deletes a task identified using it\u0027s last displayed index from the task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \": Deletes the task identified by the index number used.\\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"\\tParameters: INDEX\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"\\tExample: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Got it. I\u0027ve deleted this task:\\n\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"\\t%1$s\\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"Now you have %2$d tasks in the list.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public DeleteCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            final Task target \u003d getTargetTask();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            taskList.remove(target);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, target, taskList.size()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 37
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import utils.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Marks a task identified done using it\u0027s last displayed index from the task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \": Marks the task identified by the index number used as done.\\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"\\tParameters: INDEX\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"\\tExample: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"Nice! I\u0027ve marked this task as done:\\n\\t%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public DoneCommand(int targetVisibleIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(targetVisibleIndex);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            final Task target \u003d getTargetTask();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            target.markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DONE_TASK_SUCCESS, target));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 35
    }
  },
  {
    "path": "src/main/java/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"\\tExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGMENT \u003d \"Exiting Task List as requested...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGMENT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return command instanceof ExitCommand; // instanceof returns false if it is null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 24
    }
  },
  {
    "path": "src/main/java/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import utils.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose description contain any of \" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"the specified keywords (case-sensitive) and \\n\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"displays them as a list with index numbers.\\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"\\tParameters: KEYWORD [MORE_KEYWORDS]...\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"\\tExample: \" + COMMAND_WORD + \" book return meeting\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"We have found %1$d task(s) related to your keyword(s).\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public FindCommand(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns a copy of keywords in this command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Set\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final List\u003cTask\u003e tasksFound \u003d getTasksWithNameContainingAnyKeyword(keywords);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new CommandResult(getMessageForFindingTaskSummary(tasksFound), tasksFound);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static String getMessageForFindingTaskSummary(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return String.format(MESSAGE_SUCCESS, taskList.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Retrieves all persons in the address book whose names contain some of the specified keywords."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param keywords for searching"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return list of persons found"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private List\u003cTask\u003e getTasksWithNameContainingAnyKeyword(Set\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final List\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (Task task : super.taskList.getList()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            final Set\u003cString\u003e wordsInName \u003d new HashSet\u003c\u003e(task.getWordsInDescription());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            if (!Collections.disjoint(wordsInName, keywords)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                matchedTasks.add(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return matchedTasks;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 60
    }
  },
  {
    "path": "src/main/java/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Shows help instructions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"\\tExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new CommandResult(\"Commands [todo, deadline, event, done, delete, find, list, exit]\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                AddTodoCommand.MESSAGE_USAGE + \"\\n\\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                AddDeadlineCommand.MESSAGE_USAGE + \"\\n\\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                AddEventCommand.MESSAGE_USAGE + \"\\n\\n\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                DoneCommand.MESSAGE_USAGE + \"\\n\\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE + \"\\n\\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                FindCommand.MESSAGE_USAGE + \"\\n\\n\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                ListCommand.MESSAGE_USAGE + \"\\n\\n\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                ExitCommand.MESSAGE_USAGE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 27
    }
  },
  {
    "path": "src/main/java/commands/IncorrectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents an incorrect command. Upon execution, produces some feedback to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public IncorrectCommand(String feedbackToUser) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new CommandResult(feedbackToUser);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 19
    }
  },
  {
    "path": "src/main/java/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Lists all the tasks in the task list to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \": Displays all the tasks in the task list as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            + \"\\tExample: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        List\u003cTask\u003e allTasks \u003d super.taskList.getList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new CommandResult(Command.getMessageForTaskListSummary(allTasks), allTasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 24
    }
  },
  {
    "path": "src/main/java/data/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents the entire task list. Contains the data of all the tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public TaskList() {}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.taskList.addAll(list);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Task get(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void remove(Task targetTask) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.taskList.remove(targetTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 41
    }
  },
  {
    "path": "src/main/java/data/exception/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package data.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 10
    }
  },
  {
    "path": "src/main/java/data/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "//  Deadlines: data.tasks that need to be done before a specific date/time"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "//  e.g., submit report by 11/10/2019 5pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents a Deadline task in the task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    protected String deadlineStr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Deadline(String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.deadlineStr \u003d deadline.format(super.formatter);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Deadline(boolean isDone, String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.deadlineStr \u003d deadline.format(super.formatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return String.format(\"[D]%1$s (by: %2$s)\", super.toString(), this.deadlineStr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String fileFormat() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return String.format(\"%1$s/%2$s/%3$s/%4$s\", \"D\", super.getStatusIcon(), super.description, this.deadlineStr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 38
    }
  },
  {
    "path": "src/main/java/data/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "//  Events: data.tasks that start at a specific time and ends at a specific time"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "//  e.g., team project meeting on 2/10/2019 2-4pm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents an Event task in the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    protected LocalDateTime dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    protected String dateTimeStr;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Event(String description, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.dateTimeStr \u003d dateTime.format(super.formatter);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Event(boolean isDone, String description, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.dateTimeStr \u003d dateTime.format(super.formatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String fileFormat() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return String.format(\"%1$s/%2$s/%3$s/%4$s\", \"E\", super.getStatusIcon(), super.description, this.dateTimeStr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return String.format(\"[E]%1$s (at: %2$s)\", super.toString(), this.dateTimeStr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 38
    }
  },
  {
    "path": "src/main/java/data/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents a Task in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    protected DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy hh:mm a\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Task(boolean isDone, String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns the status icon of the task. \"O\" for completed task, \"X\" for uncompleted task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return The status icon of the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Retrieves a listing of every word in the description, in order."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public List\u003cString\u003e getWordsInDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Arrays.asList(description.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return (isDone ? \"O\" : \"X\"); //return O or X symbols"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns the string of the task to be added into the local storage file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return The string of the task in the local storage file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public abstract String fileFormat();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return String.format(\"[%1$s] %2$s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 64
    }
  },
  {
    "path": "src/main/java/data/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "//  ToDos: data.tasks without any date/time attached to it"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "//  e.g., visit new theme park"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents a Todo task in the task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Todo(boolean isDone, String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String fileFormat() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return String.format(\"%1$s/%2$s/%3$s\", \"T\", super.getStatusIcon(), super.description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return String.format(\"[T]%1$s\", super.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 29
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import commands.AddEventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import commands.AddTodoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import commands.IncorrectCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import utils.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static utils.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Pattern ADD_TODO_FORMAT \u003d Pattern.compile(\"(?\u003cdescription\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Pattern ADD_DEADLINE_FORMAT \u003d Pattern.compile(\"(?\u003cdescription\u003e[^/]+)/by(?\u003cdeadline\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Pattern ADD_EVENT_FORMAT \u003d Pattern.compile(\"(?\u003cdescription\u003e[^/]+)/at(?\u003cdateTime\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Pattern TASK_INDEX_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctargetIndex\u003e[0-9]+)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final Pattern KEYWORDS_ARGS_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            Pattern.compile(\"(?\u003ckeywords\u003e\\\\S+(?:\\\\s+\\\\S+)*)\"); // one or more keywords separated by whitespace"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Signals that the user input could not be parsed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static class ParseException extends Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        ParseException(String message) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\").trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case AddTodoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return prepareAddTodo(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case AddDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return prepareAddDeadline(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return prepareAddEvent(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return prepareDone(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return prepareDelete(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return prepareFind(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case HelpCommand.COMMAND_WORD: // Fallthrough"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses arguments in the context of the add todo command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Command prepareAddTodo(String args) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final Matcher matcher \u003d ADD_TODO_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    AddTodoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (matcher.group(\"description\").isBlank()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new IncorrectCommand(Messages.MESSAGE_INVALID_BLANK_STRING);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new AddTodoCommand(matcher.group(\"description\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses arguments in the context of the add deadline command."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Command prepareAddDeadline(String args) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final Matcher matcher \u003d ADD_DEADLINE_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    AddDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            LocalDateTime deadline \u003d getLocalDateTime(matcher.group(\"deadline\").trim());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new AddDeadlineCommand(matcher.group(\"description\"), deadline);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new IncorrectCommand(Messages.MESSAGE_INVALID_DATE_TIME);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses arguments in the context of the add event command."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Command prepareAddEvent(String args) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final Matcher matcher \u003d ADD_EVENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            LocalDateTime dateTime \u003d getLocalDateTime(matcher.group(\"dateTime\").trim());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new AddEventCommand(matcher.group(\"description\"), dateTime);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new IncorrectCommand(Messages.MESSAGE_INVALID_DATE_TIME);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns the date and time of tasks in a LocalDateTime object."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param dateTimeStr date time string"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return the LocalDateTime object"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws DateTimeParseException when date time string format is incorrect"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private LocalDateTime getLocalDateTime(String dateTimeStr) throws DateTimeParseException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String newDateTimeStr \u003d dateTimeStr.replace(\u0027/\u0027,\u0027-\u0027);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (dateTimeStr.length() \u003c 11) { // no timing specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            newDateTimeStr +\u003d \" 23:59\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder(newDateTimeStr);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            sb.insert(newDateTimeStr.length() - 2, \":\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            newDateTimeStr \u003d sb.toString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return LocalDateTime.parse(newDateTimeStr, formatter);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses arguments in the context of the done task command."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Command prepareDone(String args) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args.trim());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new DoneCommand(targetIndex);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new IncorrectCommand(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses arguments in the context of the delete task command."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Command prepareDelete(String args) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            final int targetIndex \u003d parseArgsAsDisplayedIndex(args.trim());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new DeleteCommand(targetIndex);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new IncorrectCommand(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses arguments in the context of the find person command."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param args full command args string"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private Command prepareFind(String args) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "                    FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // keywords delimited by whitespace"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final String[] keywords \u003d matcher.group(\"keywords\").split(\"\\\\s+\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final Set\u003cString\u003e keywordSet \u003d new HashSet\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new FindCommand(keywordSet);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Parses the given arguments string as a single index number."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param args arguments string to parse as index number"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return the parsed index number"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws ParseException if no region of the args string could be found for the index"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws NumberFormatException the args string region is not a valid number"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private int parseArgsAsDisplayedIndex(String args) throws ParseException, NumberFormatException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final Matcher matcher \u003d TASK_INDEX_ARGS_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new ParseException(\"Could not find index number to parse.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return Integer.parseInt(matcher.group(\"targetIndex\"));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 254
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.exception.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Represents the file used to store task list data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /** Default file path used if the user doesn\u0027t provide the file name. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final String DEFAULT_STORAGE_FILEPATH \u003d \"src/storageData/duke.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy hh:mm a\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static class InvalidStorageFilePathException extends IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        public InvalidStorageFilePathException(String message) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static class StorageOperationException extends Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws InvalidStorageFilePathException if the default path is invalid"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Storage() throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws InvalidStorageFilePathException if the given file path is invalid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Storage(String filePath) throws InvalidStorageFilePathException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!this.file.exists()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new InvalidStorageFilePathException(\"File not found.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Loads the {@code TaskList} data from this storage file, and then returns it."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns an empty {@code TaskList} if the file does not exist, or is not a regular file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws StorageOperationException if there were errors reading and/or converting data from file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public TaskList load() throws StorageOperationException, FileNotFoundException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!this.file.exists()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return TaskListDecoder.decodeTaskList(this.file);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Saves the {@code taskList} data to the storage file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void save(TaskList taskList) throws StorageOperationException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            List\u003cString\u003e encodedTaskList \u003d TaskListEncoder.encodeTaskList(taskList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            StringBuilder textToAdd \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            encodedTaskList.forEach(encodedTask -\u003e textToAdd.append(encodedTask).append(\"\\n\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            fw.write(textToAdd.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 86
    }
  },
  {
    "path": "src/main/java/storage/TaskListDecoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Decodes the storage data file into an {@code TaskList} object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class TaskListDecoder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy hh:mm a\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final Pattern TASK_DATA_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003ctaskType\u003e[TDE]+)/(?\u003cisDone\u003e[XO])/(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final Pattern TODO_DATA_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003cdescription\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final Pattern DEADLINE_DATA_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003cdescription\u003e[^/]+)/(?\u003cdeadline\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final Pattern EVENT_DATA_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003cdescription\u003e[^/]+)/(?\u003cdateTime\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Decodes {@code encodedTaskList} into a {@code TaskList} containing the decoded tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param file the storage file containing all the saved tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return a {@code TaskList object}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws FileNotFoundException if the file is not found"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws Storage.StorageOperationException if the {@code encodedTaskList} is in an invalid format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static TaskList decodeTaskList(File file) throws FileNotFoundException, Storage.StorageOperationException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        List\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            String encodedTask \u003d s.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            tasksList.add(decodeTaskFromString(encodedTask));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new TaskList(tasksList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Decodes {@code encodedTask} into a {@code Todo}, {@code Deadline} or {@code Event}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws Storage.StorageOperationException if {@code encodedTask} is in an invalid format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static Task decodeTaskFromString(String encodedTask) throws Storage.StorageOperationException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final Matcher matcher \u003d TASK_DATA_ARGS_FORMAT.matcher(encodedTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new Storage.StorageOperationException(\"Encoded task in invalid format. Unable to decode.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final String taskType \u003d matcher.group(\"taskType\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final boolean isDone \u003d isDonePrefix(matcher.group(\"isDone\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return decodeTodo(isDone, arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return decodeDeadline(isDone, arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            return decodeEvent(isDone, arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new Storage.StorageOperationException(\"Encoded data.task in invalid format. Unable to decode.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if {@code matchedPrefix} is equal to the prefix for completed task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static boolean isDonePrefix(String matchedPrefix) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return \"O\".equals(matchedPrefix);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Decodes {@code encodedTodo} into a {@code Todo}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws Storage.StorageOperationException if {@code encodedTodo} is in an invalid format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static Todo decodeTodo(boolean isDone, String arguments) throws Storage.StorageOperationException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final Matcher matcher \u003d TODO_DATA_ARGS_FORMAT.matcher(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new Storage.StorageOperationException(\"Encoded todo in invalid format. Unable to decode.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new Todo(isDone, matcher.group(\"description\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Decodes {@code encodedDeadline} into a {@code Deadline}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws Storage.StorageOperationException if {@code encodedDeadline} is in an invalid format."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static Deadline decodeDeadline(boolean isDone, String arguments) throws Storage.StorageOperationException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final Matcher matcher \u003d DEADLINE_DATA_ARGS_FORMAT.matcher(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new Storage.StorageOperationException(\"Encoded deadline in invalid format. Unable to decode\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new Deadline(isDone, matcher.group(\"description\"), getLocalDateTime(matcher.group(\"deadline\")));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Decodes {@code encodedEvent} into a {@code Event}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @throws Storage.StorageOperationException if {@code encodedEvent} is in an invalid format."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static Event decodeEvent(boolean isDone, String arguments) throws Storage.StorageOperationException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final Matcher matcher \u003d EVENT_DATA_ARGS_FORMAT.matcher(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            throw new Storage.StorageOperationException(\"Encoded event in invalid format. Unable to decode\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return new Event(isDone, matcher.group(\"description\"), getLocalDateTime(matcher.group(\"dateTime\")));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static LocalDateTime getLocalDateTime(String dateStr) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return LocalDateTime.parse(dateStr, DATE_FORMAT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 130
    }
  },
  {
    "path": "src/main/java/storage/TaskListEncoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Encodes the {@code TaskList} object into a data file for storage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class TaskListEncoder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Encodes all the {@code Task} in the {@code toSave} into a list of decodable and readable string presentation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * for storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static List\u003cString\u003e encodeTaskList(TaskList toSave) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final List\u003cString\u003e encodedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        toSave.getList().forEach(task -\u003e encodedTasks.add(task.fileFormat()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return encodedTasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 23
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import data.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import utils.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * UI of the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /** A platform independent line separator. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /** A decorative prefix added to the beginning of lines printed by AddressBook */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final String LINE_PREFIX \u003d \"| \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final String DIVIDER \u003d \"------------------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /** Format of indexed list item */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static final String MESSAGE_INDEXED_LIST_ITEM \u003d \"\\t%1$d. %2$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Returns true if the user input line should be ignored."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Input should be ignored if it is parsed as a comment, is only whitespace, or is empty."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param rawInputLine full raw user input line."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return true if the entire user input line should be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private boolean shouldIgnore(String rawInputLine) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return rawInputLine.trim().isEmpty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Prompts for the command and reads the text entered by the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Ignores empty, pure whitespace, and comment lines."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Echos the command back to the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @return command (full line) entered by the user"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        out.print(LINE_PREFIX + \"Enter command or type \u0027help\u0027: \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        String fullInputLine \u003d in.nextLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        // silently consume all ignored lines"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        while (shouldIgnore(fullInputLine)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            fullInputLine \u003d in.nextLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        showToUser(\"[Command entered: \" + fullInputLine + \"]\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return fullInputLine;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /** Shows message(s) to the user */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void showToUser(String... message) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            out.println(LINE_PREFIX + m.replace(\"\\n\", LS + LINE_PREFIX));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Generates and prints the failed message if the application fails to start."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void showInitFailedMessage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        showToUser(Messages.MESSAGE_INIT_FAILED, DIVIDER, DIVIDER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Generates and prints the welcome message upon the start of the application."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        showToUser(DIVIDER, Messages.MESSAGE_WELCOME, DIVIDER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Generates and prints the goodbye message upon the end of the application."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void showGoodbyeMessage() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        showToUser(Messages.MESSAGE_GOODBYE, DIVIDER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Shows a list of tasks to the user, formatted as an indexed list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void showTaskListView(List\u003c? extends Task\u003e taskList) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final List\u003cString\u003e formattedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            formattedTasks.add(task.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        showToUsersAsIndexedList(formattedTasks);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Shows the result of a command execution to the user. Includes additional formatting to demarcate different"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * command execution segments."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public void showResultToUser(CommandResult result) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final Optional\u003cList\u003c? extends Task\u003e\u003e tasks \u003d result.getRelevantTasks();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        tasks.ifPresent(this::showTaskListView);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        showToUser(result.feedbackToUser, DIVIDER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /** Shows a list of strings to the user, formatted as an indexed list. */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private void showToUsersAsIndexedList(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        showToUser(getIndexedListForViewing(list), DIVIDER);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /** Formats a list of strings as a viewable indexed list. */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static String getIndexedListForViewing(List\u003cString\u003e listItems) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        final StringBuilder formatted \u003d new StringBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        int displayIndex \u003d DISPLAYED_INDEX_OFFSET;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        for (String listItem : listItems) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            formatted.append(getIndexedListItem(displayIndex, listItem)).append(\"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            displayIndex++;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return formatted.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * Formats a string as a viewable indexed list item."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     * @param visibleIndex visible index for this listing"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    private static String getIndexedListItem(int visibleIndex, String listItem) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        return String.format(MESSAGE_INDEXED_LIST_ITEM, visibleIndex, listItem);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 149
    }
  },
  {
    "path": "src/main/java/utils/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_INIT_FAILED \u003d \"Failed to initialise task list application. Exiting...\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \" ____        _        \\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"|  _ \\\\ _   _| | _____ \\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"| | | | | | | |/ / _ \\\\\\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"| |_| | |_| |   \u003c  __/\\n\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_GOODBYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_TASK_LISTED_OVERVIEW_FORMAT \u003d \"Now you have %1$d tasks in the list.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_INVALID_BLANK_STRING \u003d \"Invalid format! Type something after the command.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_TIME \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"Invalid date and time format! It should be in this format: [DD/MM/YYYY HHmm].\\n\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "            \"\\tExample: 12/12/2020 0945\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 26
    }
  },
  {
    "path": "src/storageData/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "T/O/read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "D/O/return book/Tue, 25 Aug 2020 10:00 AM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "E/X/project meeting/Sun, 18 Oct 2020 02:30 PM"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "T/X/join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "T/O/walk dog"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "D/X/submit assignment/Mon, 07 Sep 2020 11:59 PM"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "T/X/book reading"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "T/X/buy a book"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 8
    }
  },
  {
    "path": "src/test/java/data/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    final LocalDateTime dateTime \u003d LocalDateTime.parse(\"2020-10-18T14:30\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    final Deadline deadline \u003d new Deadline(\"return book\", dateTime);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    final Deadline completeDeadline \u003d new Deadline(true,\"return book\", dateTime);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void fileFormat() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"D/X/return book/Sun, 18 Oct 2020 02:30 PM\", deadline.fileFormat());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"D/O/return book/Sun, 18 Oct 2020 02:30 PM\", completeDeadline.fileFormat());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"[D][X] return book (by: Sun, 18 Oct 2020 02:30 PM)\", deadline.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"[D][O] return book (by: Sun, 18 Oct 2020 02:30 PM)\", completeDeadline.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 27
    }
  },
  {
    "path": "src/test/java/data/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    final LocalDateTime dateTime \u003d LocalDateTime.parse(\"2020-10-18T14:30\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    final Event event \u003d new Event(\"project meeting\", dateTime);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    final Event completedEvent \u003d new Event(true,\"project meeting\", dateTime);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void fileFormat() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"E/X/project meeting/Sun, 18 Oct 2020 02:30 PM\", event.fileFormat());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"E/O/project meeting/Sun, 18 Oct 2020 02:30 PM\", completedEvent.fileFormat());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"[E][X] project meeting (at: Sun, 18 Oct 2020 02:30 PM)\", event.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"[E][O] project meeting (at: Sun, 18 Oct 2020 02:30 PM)\", completedEvent.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 26
    }
  },
  {
    "path": "src/test/java/data/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    final LocalDateTime dateTime \u003d LocalDateTime.parse(\"2020-10-18T14:30\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    final Todo todo \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    final Deadline deadline \u003d new Deadline(\"return book\", dateTime);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    final Event event \u003d new Event(\"project meeting\", dateTime);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    final Todo completedTodo \u003d new Todo(true,\"read book\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    final Deadline completeDeadline \u003d new Deadline(true,\"return book\", dateTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    final Event completedEvent \u003d new Event(true,\"project meeting\", dateTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void getStatusIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"X\", todo.getStatusIcon());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"X\", deadline.getStatusIcon());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"X\", event.getStatusIcon());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"O\", completedTodo.getStatusIcon());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"O\", completeDeadline.getStatusIcon());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"O\", completedEvent.getStatusIcon());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 29
    }
  },
  {
    "path": "src/test/java/data/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "package data.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    final Todo todo \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    final Todo completedTodo \u003d new Todo(true,\"read book\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void fileFormat() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"T/X/read book\", todo.fileFormat());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"T/O/read book\", completedTodo.fileFormat());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"[T][X] read book\", todo.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "        assertEquals(\"[T][O] read book\", completedTodo.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "help"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "deadline return book /by 12/09/2020 2200"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "event project meeting /at 22/08/2020 1300"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "done 7"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "delete 9"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "delete 8"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "done 20"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "delete"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "delete 20"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "todo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "deadline /by 12/12/2020"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "deadline return book /by 53/12/2020"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "event"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "event project meeting"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "event /at 12/05/2020 1300"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "event project meeting /at 12/06/2020 9800"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 26
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 1,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "## convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "#dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Nijnxw"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Nijnxw": 5,
      "-": 33
    }
  }
]
