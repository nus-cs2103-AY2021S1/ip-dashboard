[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    mainClassName \u003d \"focus.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    archiveBaseName \u003d \"focus\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    toolVersion \u003d \u00278.32\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 18,
      "-": 43
    }
  },
  {
    "path": "src/main/java/focus/Focus.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents Focus. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class Focus {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Storage created for user. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Task list created for user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** UI created to interact with user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final UI ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Creates Focus to set up the things needed. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Focus() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Storage.createFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (storage.retrieveTextFile()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            taskList \u003d new TaskList(storage.loadData());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Gets response from Pocus based on user\u0027s input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Pocus\u0027 response."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        boolean isExit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (isExit) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return ui.exitFocus();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return command.execute(input, taskList, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 49,
      "-": 1
    }
  },
  {
    "path": "src/main/java/focus/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents a launcher class to workaround classpath issues. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Entry point to run Focus."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param args Args."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 15
    }
  },
  {
    "path": "src/main/java/focus/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents a GUI for Focus using FXML. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Stage object to allow MainWindow class to access. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private static Stage stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Creates Focus. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Focus focus \u003d new Focus();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Gets the stage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Stage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static Stage getStage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return stage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Overrides start method of JavaFX."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param stage Stage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Main.stage \u003d stage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            stage.setTitle(\"focus.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            stage.getIcons().add(new Image(\"/images/planner.jpg\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setFocus(focus);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 50
    }
  },
  {
    "path": "src/main/java/focus/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents the AddCommand to add tasks into task list. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Represents the type of task. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final String taskType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates AddCommand with the given task type."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param taskType Type of task (to-do, deadline or event)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public AddCommand(String taskType) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns false since AddCommand is not an ExitCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Executes AddCommand to add To-Do, Deadline or Event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param taskList Task list created for user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of added task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws FocusException If input does not meet criteria."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String execute(String input, TaskList taskList, Storage storage) throws FocusException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (\"todo\".equals(taskType)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return addToDo(input, taskList, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (\"deadline\".equals(taskType)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return addDeadline(input, taskList, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (\"event\".equals(taskType)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return addEvent(input, taskList, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Adds To-Do tasks into task list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param taskList Task list created for user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of added To-Do."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws FocusException If input does not meet criteria."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private String addToDo(String input, TaskList taskList, Storage storage) throws FocusException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String information;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try { // user did not input description of to-do task"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            information \u003d input.split(\"todo\")[1];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tThe description of a todo cannot be empty!\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\ttodo week 3 quiz\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (information.isBlank()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tThe description of a todo cannot be empty!\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\ttodo week 3 quiz\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String description \u003d information.substring(1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return taskList.addToDo(description, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Adds Deadline tasks into task list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param taskList Task list created for user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of added Deadline."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws FocusException If input does not meet criteria."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private String addDeadline(String input, TaskList taskList, Storage storage) throws FocusException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String information;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try { // user did not input description of deadline task"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            information \u003d input.split(\"deadline\")[1];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease input an appropriate description!\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tdeadline return book /by 2020-01-30 08:00\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (information.isBlank()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease input an appropriate description!\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tdeadline return book /by 2020-01-30 08:00\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        int end \u003d information.indexOf(\"/\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (end \u003d\u003d -1) { // user did not input correct command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease input the appropriate command!\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tdeadline return book /by 2020-01-30 08:00\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String description \u003d information.substring(1, end - 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String by;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try { // user did not input date of deadline task"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            by \u003d information.substring(end + 4);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease input the date!\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tdeadline return book /by 2020-01-30 08:00\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (by.isBlank()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease input the date!\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tdeadline return book /by 2020-01-30 08:00\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String formattedBy \u003d by.replace(\u0027 \u0027, \u0027T\u0027);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDateTime date;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try { // user did not input correct format of date of deadline task"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            date \u003d LocalDateTime.parse(formattedBy);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease input the correct date format!\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tdeadline return book /by 2020-01-30 08:00\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return taskList.addDeadline(description, date, storage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Adds Event tasks into task list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param taskList Task list created for user."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of added Event."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws FocusException If input does not meet criteria."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private String addEvent(String input, TaskList taskList, Storage storage) throws FocusException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String information;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try { // user did not input description of event task"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            information \u003d input.split(\"event\")[1];"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease input an appropriate description!\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tevent Christmas party /at 2020-12-25 17:00\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (information.isBlank()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease input an appropriate description!\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tevent Christmas party /at 2020-12-25 17:00\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        int end \u003d information.indexOf(\"/\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (end \u003d\u003d -1) { // user did not input correct command"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease input the appropriate command!\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tevent Christmas party /at 2020-12-25 17:00\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String description \u003d information.substring(1, end - 1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String at;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try { // user did not input date of event task"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            at \u003d information.substring(end + 4);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease input the date!\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tevent Christmas party /at 2020-12-25 17:00\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (at.isBlank()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease input the date!\\n\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tevent Christmas party /at 2020-12-25 17:00\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String formattedAt \u003d at.replace(\u0027 \u0027, \u0027T\u0027);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        LocalDateTime date;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try { // user did not input correct format of date of event task"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            date \u003d LocalDateTime.parse(formattedAt);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease input the correct date format!\\n\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tevent Christmas party /at 2020-12-25 17:00\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return taskList.addEvent(description, date, storage);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 195
    }
  },
  {
    "path": "src/main/java/focus/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents all the commands to allow different command classes to inherit. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns true or false depending on the type of command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return True or false."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param taskList Task list created for user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws FocusException If input does not meet criteria."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public abstract String execute(String input, TaskList taskList, Storage storage)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throws FocusException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 27
    }
  },
  {
    "path": "src/main/java/focus/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents the DeleteCommand to delete tasks from task list. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns false since DeleteCommand is not an ExitCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Executes DeleteCommand to delete tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param taskList Task list created for user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of deleted task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws FocusException If input does not meet criteria."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String execute(String input, TaskList taskList, Storage storage) throws FocusException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String indexString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            indexString \u003d input.substring(7);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease enter a task number you wish to delete!\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tYou have \" + taskList.getSize() + \" tasks on your list now.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (indexString.isBlank()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease enter a task number you wish to delete!\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tYou have \" + taskList.getSize() + \" tasks on your list now.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        int index \u003d Integer.parseInt(indexString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if ((index \u003c\u003d 0) || (index \u003e taskList.getSize())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tThere is no such task number.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tPlease enter a valid one!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return taskList.deleteTask(index, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 47
    }
  },
  {
    "path": "src/main/java/focus/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents the DoneCommand to mark tasks done on task list. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns false since DoneCommand is not an ExitCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Executes DoneCommand to mark tasks done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param taskList Task list created for user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of done task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws FocusException If input does not meet criteria."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String execute(String input, TaskList taskList, Storage storage) throws FocusException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String indexString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            indexString \u003d input.substring(5);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease enter a task number you wish to mark done!\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tYou have \" + taskList.getSize() + \" tasks on your list now.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (indexString.isBlank()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease enter a task number you wish to mark done!\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tYou have \" + taskList.getSize() + \" tasks on your list now.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        int index \u003d Integer.parseInt(indexString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if ((index \u003c\u003d 0) || (index \u003e taskList.getSize())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tThere is no such task number.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tPlease enter a valid one!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return taskList.markTaskDone(index, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 47
    }
  },
  {
    "path": "src/main/java/focus/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents the ExitCommand to exit Focus. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns true since ExitCommand is an ExitCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return True."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Executes ExitCommand to exit Focus."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param input User\u0027s input (not used here)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param taskList Task list created for user (not used here)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user (not used here)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Empty string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String execute(String input, TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 28
    }
  },
  {
    "path": "src/main/java/focus/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents the FindCommand to find tasks based on user\u0027s input. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns false since FindCommand is not an ExitCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Executes FindCommand to find tasks based on user\u0027s input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param taskList Task list created for user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of found tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws FocusException If input does not meet criteria."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String execute(String input, TaskList taskList, Storage storage) throws FocusException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String keyword;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            keyword \u003d input.split(\"find\")[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease enter a keyword you wish to find!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (keyword.isBlank()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tPlease enter a keyword you wish to find!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return taskList.findTasks(keyword.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 39
    }
  },
  {
    "path": "src/main/java/focus/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents the HelpCommand to help first-time users about the commands. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns false since HelpCommand is not an ExitCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Executes HelpCommand help users with the commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param taskList Task list created for user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of list of commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws FocusException If input does not meet criteria."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String execute(String input, TaskList taskList, Storage storage) throws FocusException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String checker;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (input.length() \u003d\u003d 4) { // user\u0027s input is \"help\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return UI.listCommands();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            checker \u003d input.split(\"help\")[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tDid you meant the command \u0027help\u0027?\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (!checker.isBlank()) { // user\u0027s input is \"help me\" for example"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tDid you meant the command \u0027help\u0027?\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else { // user\u0027s input is \"help \" with spacings"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return UI.listCommands();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 44
    }
  },
  {
    "path": "src/main/java/focus/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents the InvalidCommand to deal with invalid inputs by user. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns false since InvalidCommand is not an ExitCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Executes InvalidCommand to notify user that the inputs are not recognised."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param taskList Task list created for user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of invalid command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws FocusException Always since input is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String execute(String input, TaskList taskList, Storage storage) throws FocusException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        throw new FocusException(\"\\tOops! I\u0027m not sure what you meant!\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\tPlease try again!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 31
    }
  },
  {
    "path": "src/main/java/focus/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents the ListCommand to list all the tasks on task list. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns false since ListCommand is not an ExitCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Executes ListCommand to list the tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param taskList Task list created for user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @throws FocusException If task list has no tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String execute(String input, TaskList taskList, Storage storage) throws FocusException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            throw new FocusException(\"\\tThere are currently no tasks on your list!\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tStart adding one now!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return taskList.listTasks();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 35
    }
  },
  {
    "path": "src/main/java/focus/exception/FocusException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents the exceptions for Focus. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class FocusException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates FocusException for methods to throw."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param message Error message."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public FocusException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 13
    }
  },
  {
    "path": "src/main/java/focus/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.InvalidCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.ToDo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * Allows Focus to make sense of user\u0027s commands and parsing of"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * text files to convert them to Tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Parses user\u0027s inputs to Command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Different commands depending on user\u0027s input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (input.startsWith(\"help\")) { // list out the commands"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            command \u003d new HelpCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (input.startsWith(\"todo\")) { // add to-do tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            command \u003d new AddCommand(\"todo\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (input.startsWith(\"deadline\")) { // add deadline tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            command \u003d new AddCommand(\"deadline\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (input.startsWith(\"event\")) { // add event tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            command \u003d new AddCommand(\"event\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (input.startsWith(\"delete\")) { // delete tasks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            command \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (input.startsWith(\"done\")) { // mark tasks done"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            command \u003d new DoneCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (input.equals(\"list\")) { // list out the tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            command \u003d new ListCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (input.startsWith(\"find\")) { // find the tasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            command \u003d new FindCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (input.equals(\"bye\")) { // exit the bot"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else { // handle invalid inputs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            command \u003d new InvalidCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Parses strings from text file to different types of Task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param text Task in string form in text file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Different types of Task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static Task textToTask(String text) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String[] task \u003d text.split(\"\\\\|\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task existingTask \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (\"T\".equals(task[0])) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            existingTask \u003d new ToDo(task[2]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (task[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                existingTask.markAsDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (\"D\".equals(task[0])) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            DateTimeFormatter deadlineFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            LocalDateTime by \u003d LocalDateTime.parse(task[3], deadlineFormatter);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            existingTask \u003d new Deadline(task[2], by);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (task[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                existingTask.markAsDone();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else if (\"E\".equals(task[0])) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            DateTimeFormatter eventFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            LocalDateTime at \u003d LocalDateTime.parse(task[3], eventFormatter);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            existingTask \u003d new Event(task[2], at);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (task[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                existingTask.markAsDone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return existingTask;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 88
    }
  },
  {
    "path": "src/main/java/focus/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Allows Focus to load and save data in user\u0027s files. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Represents the path for the task list to be saved at. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Creates a storage to allow loading and saving of tasks. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.path \u003d System.getProperty(\"user.dir\") + \"/data/focus.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Creates a folder to store text file. If present, it will not create. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static void createFolder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String folderPath \u003d System.getProperty(\"user.dir\") + \"/data\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        File folder \u003d new File(folderPath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        boolean isSuccessful \u003d folder.mkdir();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (isSuccessful) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            System.out.println(\"Folder created successfully.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            System.out.println(\"Folder already exists.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates or retrieves the text file from user\u0027s files."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return True if user has an existing text file,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * false if user does not have an existing text file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public boolean retrieveTextFile() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        boolean hasTextFile \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            File data \u003d new File(path);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (data.createNewFile()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                System.out.println(\"Text file created: \" + data.getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                hasTextFile \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                System.out.println(\"Text file already exists.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (IOException e) { // creation or retrieving data has errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            System.out.println(\"An error occurred.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return hasTextFile;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Loads the data from user\u0027s text file if it already exists."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Arraylist of tasks in string format."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public ArrayList\u003cString\u003e loadData() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String task;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ArrayList\u003cString\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            File data \u003d new File(path);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            Scanner sc \u003d new Scanner(data);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                task \u003d sc.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                taskList.add(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            System.out.println(\"An error occurred.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Adds the data to user\u0027s text file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param item Item to be added to text file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void addData(Task item) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(path, true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            String task \u003d item.taskToText() + \"\\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            fileWriter.write(task);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            System.out.println(\"An error occurred.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Updates the data in user\u0027s text file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param tasks Task list to be updated."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void updateData(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(path);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            for (Task item : tasks) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                String task \u003d item.taskToText() + \"\\n\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                fileWriter.write(task);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            System.out.println(\"An error occurred.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 115
    }
  },
  {
    "path": "src/main/java/focus/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents task with a type of Deadline. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Represents the deadline of Deadline task. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final LocalDateTime by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates Deadline with user provided description and deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param description Description of Deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param by Deadline of Deadline task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Converts Deadline to string form to be saved in user\u0027s files."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String format of Deadline task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String taskToText() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return \"D|\" + super.completed + \"|\" + super.taskDescription + \"|\" + by;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns string format of Deadline."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return A string representation of Deadline."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + by.format(DateTimeFormatter.ofPattern(\"E, d MMM yyyy, h.mm a\")) + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 42
    }
  },
  {
    "path": "src/main/java/focus/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents task with a type of Event. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Represents the date and time of Event task. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final LocalDateTime at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates Event with user provided description, date and time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param description Description of Event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param at Date and time of Event task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Converts Event to string form to be saved in user\u0027s files."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String format of Event task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String taskToText() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return \"E|\" + super.completed + \"|\" + super.taskDescription + \"|\" + at;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns string format of Event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return A string representation of Event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + at.format(DateTimeFormatter.ofPattern(\"E, d MMM yyyy, h.mm a\")) + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 42
    }
  },
  {
    "path": "src/main/java/focus/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents a Task to allow different types of tasks to inherit. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Description of task. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    protected String taskDescription;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Checks if task is completed or not. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** \u00270\u0027 to represent incomplete, \u00271\u0027 to represent completed. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    protected String completed;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates a Task with a given task name, with it being not done yet."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param taskDescription Description of task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public Task(String taskDescription) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.completed \u003d \"0\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns the description of task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Task\u0027s description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this.taskDescription;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns a tick or a cross based on whether the task is done or not done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Tick or cross symbols."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return isDone"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                ? \"\\u2713\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                : \"\\u2718\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Marks the task as done. */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.completed \u003d \"1\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Converts Task to string form to be saved in user\u0027s files."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Empty string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String taskToText() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns string format of Task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return A string representation of Task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.taskDescription;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 55,
      "-": 12
    }
  },
  {
    "path": "src/main/java/focus/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents the task list of user. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Arraylist for the task list. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Creates an empty task list if user does not have existing data in files. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates a task list with user\u0027s existing data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param tasks String representation of tasks in user\u0027s data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public TaskList(ArrayList\u003cString\u003e tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        for (String task : tasks) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            taskList.add(Parser.textToTask(task));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns number of tasks in task list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return number of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Adds To-Do tasks into task list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param description Description of To-Do."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of added To-Do."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String addToDo(String description, Storage storage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task toDo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        taskList.add(toDo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        storage.addData(toDo);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String printing \u003d \"\\tGotcha! I\u0027ve added this task:\\n\\t\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + toDo + \"\\n\\t\" + \"You have \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + taskList.size() + \" tasks on your list now.\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return printing;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Adds Deadline tasks into task list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param description Description of Deadline."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param date Deadline of Deadline task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of added Deadline."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String addDeadline(String description, LocalDateTime date, Storage storage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task deadline \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        taskList.add(deadline);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        storage.addData(deadline);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String printing \u003d \"\\tGotcha! I\u0027ve added this task:\\n\\t\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + deadline + \"\\n\\t\" + \"You have \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + taskList.size() + \" tasks on your list now.\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return printing;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Adds Event tasks into task list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param description Description of Event."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param date Date and time of Event."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of added Event."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String addEvent(String description, LocalDateTime date, Storage storage) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task event \u003d new Event(description, date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        taskList.add(event);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        storage.addData(event);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String printing \u003d \"\\tGotcha! I\u0027ve added this task:\\n\\t\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + event + \"\\n\\t\" + \"You have \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + taskList.size() + \" tasks on your list now.\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return printing;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Deletes tasks from task list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param index Index of task user wants to remove."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of deleted task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String deleteTask(int index, Storage storage) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task taskToBeDeleted \u003d taskList.get(index - 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        taskList.remove(index - 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        storage.updateData(taskList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String deletedTask \u003d \"\\tRoger that! I\u0027ve removed this task:\\n\\t\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + taskToBeDeleted"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\tYou have \" + taskList.size()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \" tasks on your list now.\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return deletedTask;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Marks tasks done on task list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param index Index of task user wants to mark as done."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param storage Storage created for user."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of done task."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String markTaskDone(int index, Storage storage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Task finishedTask \u003d taskList.get(index - 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        finishedTask.markAsDone();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        storage.updateData(taskList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String doneTask \u003d \"\\t\\\\(^O^)/ Good job! I\u0027ve marked this task as done:\\n\\t\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + finishedTask + \"\\n\\tKeep going!\\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return doneTask;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Lists all the tasks on task list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of list of tasks."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String listTasks() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String printing \u003d \"\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        printing +\u003d \"\\tHere are the tasks on your list:\\n\\t\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            int number \u003d i + 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (i \u003d\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                printing +\u003d \"\" + number + \". \" + taskList.get(i);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                printing +\u003d \"\" + number + \". \" + taskList.get(i) + \"\\n\\t\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return printing;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Finds the tasks according to the keyword user input."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param keyword Keyword provided by user."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String representation of found tasks."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String findTasks(String keyword) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        boolean canFind \u003d false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String printing \u003d \"\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (task.getTaskName().contains(keyword)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                canFind \u003d true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (canFind) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            printing +\u003d \"\\tHere are the matching tasks on your list:\\n\\t\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                if (task.getTaskName().contains(keyword)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    printing +\u003d \"\" + index + \". \" + task + \"\\n\\t\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            return \"\\tSorry, there are no tasks that match your keyword!\\n\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return printing;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 175
    }
  },
  {
    "path": "src/main/java/focus/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents task with a type of To-Do. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates To-Do with user provided description."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param description Description of To-Do."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Converts To-Do to string form to be saved in user\u0027s files."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return String format of To-Do task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String taskToText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return \"T|\" + super.completed + \"|\" + super.taskDescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Returns string format of To-Do."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return A string representation of To-Do."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 34
    }
  },
  {
    "path": "src/main/java/focus/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * A custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * This control represents a dialog box consisting of a Circle to be filled by images to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " * represent the speaker\u0027s face and a label containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Dialog label for text. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Circle for speaker\u0027s images. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private ImageView imageView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Constructor for a DialogBox."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param text Inputs and responses."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param image Speaker\u0027s image."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private DialogBox(String text, Image image, boolean isUser) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (isUser) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            dialog.getStyleClass().remove(\"focus\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            dialog.getStyleClass().add(\"user\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        imageView.setImage(image);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Flips the dialog box such that the Circle is on the left and text on the right. */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates a new DialogBox for user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param image Image of user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return DialogBox for user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static DialogBox getUserDialog(String input, Image image) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return new DialogBox(\"You:\\n\\t\" + input, image, true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates a new DialogBox for Pocus."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param response Pocus\u0027 response."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param image Image of Pocus."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return DialogBox for Pocus."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static DialogBox getPocusDialog(String response, Image image) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        DialogBox dialogBox \u003d new DialogBox(\"Pocus:\\n\" + response, image, false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        dialogBox.flip();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 84
    }
  },
  {
    "path": "src/main/java/focus/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.Focus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Controller for MainWindow. Provides the layout for the other controls. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Scroll pane for conservations. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Dialog container for conversations. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** User\u0027s input. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Send button for user. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Focus. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private Focus focus;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Number of times user has input their name. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private int numberOfTimes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Gets the image for User. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/koya.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Gets the image for Focus. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Image focusImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/rj.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /** Initialises the main window. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                DialogBox.getPocusDialog(UI.greetUser(), focusImage)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Sets Focus."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param focus Focus."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void setFocus(Focus focus) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        this.focus \u003d focus;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Pocus\u0027 reply,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * and appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * If user inputs \"bye\", Focus will close automatically after 5 seconds."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        if (numberOfTimes \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    DialogBox.getPocusDialog(UI.addressUser(input), focusImage)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            numberOfTimes++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            String response \u003d focus.getResponse(input);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    DialogBox.getPocusDialog(response, focusImage)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                PauseTransition delay \u003d new PauseTransition(Duration.seconds(5));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                delay.setOnFinished(event -\u003e Main.getStage().close());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                delay.play();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 84
    }
  },
  {
    "path": "src/main/java/focus/ui/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "/** Represents the interactions between Pocus and user. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Greets the user upon entering Focus."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Greetings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static String greetUser() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String logo \u003d \"\\t  __\\n\\t\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"/ _|   ___   ___  _   _  _ __\\n\\t\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"| |_  / _ \\\\ / __|  | | | | / __|\\n\\t\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"|  _|| (_) | | (__  | |_| | \\\\__ \\\\  _\\n\\t\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"|_|   \\\\___/ \\\\___| \\\\__,_||___/(_)\\n\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String greetings \u003d \"\\tWelcome to\\n\" + logo + \"\\t\\\"\\\\(*^O^*) I am Pocus, your personal assistant!\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\tBefore we start, may I know your name?\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return greetings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Addresses the user with the name provided."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @param name Name of user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Addressing of user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static String addressUser(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String address \u003d \"\\tHello there, \" + name + \"! How can I help you today?\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\tNote: If you are a first time user,\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\ttype \u0027help\u0027 for the list of commands to get started!\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Lists out the commands that the user can use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return List of commands."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public static String listCommands() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String commands \u003d \"\\tHere are the commands you can use:\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\t\\tTo add tasks:\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\t\\t\\t- todo \u003ctodo task name\u003e\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\t\\t\\t- deadline \u003cdeadline task name\u003e /by \u003cYYYY-MM-DD HH:mm\u003e\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\t\\t\\t- event \u003cevent task name\u003e /at \u003cYYYY-MM-DD HH:mm\u003e\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\t\\tTo delete tasks:\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\t\\t\\t- delete \u003cindex of task\u003e\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\t\\tTo mark tasks as done:\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\t\\t\\t- done \u003cindex of task\u003e\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\t\\tTo list the tasks on your task list:\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\t\\t\\t- list\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\t\\tTo find tasks on your task list:\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\t\\t\\t- find \u003ckeyword\u003e\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\t\\tTo exit Focus:\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\n\\t\\t\\t- bye\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return commands;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * Exits Focus."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     * @return Exit output."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public String exitFocus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        String exit \u003d \"\\tHopefully I have helped you today. Byeee! (*^O^*)/\\\"\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                + \"\\tNote: This window close in 5 seconds.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 68
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"650.0\" stylesheets\u003d\"@../stylesheets/styles.css\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" styleClass\u003d\"focus\" text\u003d\"LABEL\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003cImageView fx:id\u003d\"imageView\" fitHeight\u003d\"135.0\" fitWidth\u003d\"135.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"704.0\" prefWidth\u003d\"650.0\" stylesheets\u003d\"@../stylesheets/styles.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"focus.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"555.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"568.0\" promptText\u003d\"Type here...\" AnchorPane.bottomAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"568.0\" layoutY\u003d\"661.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"82.0\" text\u003d\"SEND\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"661.0\" prefWidth\u003d\"650.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"660.0\" prefWidth\u003d\"634.0\" stylesheets\u003d\"@../stylesheets/styles.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 26
    }
  },
  {
    "path": "src/test/java/focus/command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testIsExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(new AddCommand(\"todo\").isExit());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(new AddCommand(\"deadline\").isExit());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(new AddCommand(\"event\").isExit());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testExecuteTodo() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(\"todo\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            addCommand.execute(\"todo\", taskList, storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tThe description of a todo cannot be empty!\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\ttodo week 3 quiz\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testExecuteDeadline() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(\"deadline\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            addCommand.execute(\"deadline \", taskList, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tPlease input an appropriate description!\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tdeadline return book /by 2020-01-30 08:00\", e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(\"deadline\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            addCommand.execute(\"deadline return book\", taskList, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tPlease input the appropriate command!\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tdeadline return book /by 2020-01-30 08:00\", e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(\"deadline\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            addCommand.execute(\"deadline return book /by \", taskList, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tPlease input the date!\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tdeadline return book /by 2020-01-30 08:00\", e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(\"deadline\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            addCommand.execute(\"deadline return book /by 2020-02-28\", taskList, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tPlease input the correct date format!\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tdeadline return book /by 2020-01-30 08:00\", e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testExecuteEvent() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(\"event\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            addCommand.execute(\"event\", taskList, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tPlease input an appropriate description!\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tevent Christmas party /at 2020-12-25 17:00\", e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(\"event\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            addCommand.execute(\"event party \", taskList, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tPlease input the appropriate command!\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tevent Christmas party /at 2020-12-25 17:00\", e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(\"event\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            addCommand.execute(\"event party /at\", taskList, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tPlease input the date!\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tevent Christmas party /at 2020-12-25 17:00\", e.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(\"event\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            addCommand.execute(\"event party /at 2020-20-09 1200\", taskList, storage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tPlease input the correct date format!\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tAn example would be:\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tevent Christmas party /at 2020-12-25 17:00\", e.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 106
    }
  },
  {
    "path": "src/test/java/focus/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final DeleteCommand deleteCommand \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testIsExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(deleteCommand.isExit());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            deleteCommand.execute(\"delete \", taskList, storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tPlease enter a task number you wish to delete!\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tYou have \" + taskList.getSize() + \" tasks on your list now.\", e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            deleteCommand.execute(\"delete 0\", taskList, storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tThere is no such task number.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tPlease enter a valid one!\", e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            deleteCommand.execute(\"delete 5\", taskList, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tThere is no such task number.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tPlease enter a valid one!\", e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 43
    }
  },
  {
    "path": "src/test/java/focus/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final DoneCommand doneCommand \u003d new DoneCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testIsExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(doneCommand.isExit());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            doneCommand.execute(\"done\", taskList, storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tPlease enter a task number you wish to mark done!\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tYou have \" + taskList.getSize() + \" tasks on your list now.\", e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            doneCommand.execute(\"done 0\", taskList, storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tThere is no such task number.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tPlease enter a valid one!\", e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            doneCommand.execute(\"done 5\", taskList, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tThere is no such task number.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tPlease enter a valid one!\", e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 43
    }
  },
  {
    "path": "src/test/java/focus/command/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final ExitCommand exitCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testIsExit() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(exitCommand.isExit());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 14
    }
  },
  {
    "path": "src/test/java/focus/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final FindCommand findCommand \u003d new FindCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testIsExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(findCommand.isExit());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            findCommand.execute(\"find\", taskList, storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tPlease enter a keyword you wish to find!\", e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            findCommand.execute(\"find \", taskList, storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tPlease enter a keyword you wish to find!\", e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 35
    }
  },
  {
    "path": "src/test/java/focus/command/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final HelpCommand helpCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testIsExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(helpCommand.isExit());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            helpCommand.execute(\"help me\", taskList, storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tDid you meant the command \u0027help\u0027?\", e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 30
    }
  },
  {
    "path": "src/test/java/focus/command/InvalidCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class InvalidCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final InvalidCommand invalidCommand \u003d new InvalidCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testIsExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(invalidCommand.isExit());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            invalidCommand.execute(\"blah\", taskList, storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tOops! I\u0027m not sure what you meant!\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tPlease try again!\", e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 31
    }
  },
  {
    "path": "src/test/java/focus/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.exception.FocusException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testIsExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertFalse(listCommand.isExit());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testExecute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            listCommand.execute(\"blah\", taskList, storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        } catch (FocusException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "            assertEquals(\"\\tThere are currently no tasks on your list!\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                    + \"\\tStart adding one now!\", e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 31
    }
  },
  {
    "path": "src/test/java/focus/exception/FocusExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class FocusExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testFocusException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(\"This is an error.\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                new FocusException(\"This is an error.\").getMessage());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(\"This is also an error.\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                new FocusException(\"This is also an error.\").getMessage());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 15
    }
  },
  {
    "path": "src/test/java/focus/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.InvalidCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import focus.task.ToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testParse() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(HelpCommand.class, Parser.parse(\"help\").getClass());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(AddCommand.class, Parser.parse(\"todo iP\").getClass());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(AddCommand.class, Parser.parse(\"deadline tP /by 2020-08-23 23:59\").getClass());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(AddCommand.class, Parser.parse(\"event meeting /at 2020-08-25 14:00\").getClass());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(DeleteCommand.class, Parser.parse(\"delete 1\").getClass());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(DoneCommand.class, Parser.parse(\"done 2\").getClass());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(ListCommand.class, Parser.parse(\"list\").getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(ExitCommand.class, Parser.parse(\"bye\").getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(InvalidCommand.class, Parser.parse(\"invalid command\").getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testTextToTask() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(ToDo.class, Parser.textToTask(\"T|0|iP\").getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(Deadline.class, Parser.textToTask(\"D|1|tP|2020-08-23T23:59\").getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(Event.class, Parser.textToTask(\"E|0|meeting|2020-08-25T14:00\").getClass());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 38
    }
  },
  {
    "path": "src/test/java/focus/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testTaskToText() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(\"D|0|tP|2020-08-23T23:59\", new Deadline(\"tP\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                LocalDateTime.parse(\"2020-08-23T23:59\")).taskToText());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 15
    }
  },
  {
    "path": "src/test/java/focus/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testTaskToText() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(\"E|0|meeting|2020-08-25T14:00\", new Event(\"meeting\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "                LocalDateTime.parse(\"2020-08-25T14:00\")).taskToText());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 15
    }
  },
  {
    "path": "src/test/java/focus/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testGetSize() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(0, taskList.getSize());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 14
    }
  },
  {
    "path": "src/test/java/focus/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Task incompleteTask \u003d new Task(\"incomplete task\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    private final Task completedTask \u003d new Task(\"completed task\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testGetTaskName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(\"incomplete task\", incompleteTask.getTaskName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(\"completed task\", completedTask.getTaskName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testGetStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        completedTask.markAsDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(\"\\u2718\", incompleteTask.getStatusIcon());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(\"\\u2713\", completedTask.getStatusIcon());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testMarkAsDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        completedTask.markAsDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertTrue(completedTask.isDone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(\"1\", completedTask.completed);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testTaskToText() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(\"\", incompleteTask.taskToText());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(\"\", completedTask.taskToText());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 37
    }
  },
  {
    "path": "src/test/java/focus/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "package focus.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    public void testTaskToText() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "        assertEquals(\"T|0|iP\", new ToDo(\"iP\").taskToText());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 12
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "sampleName"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "help"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "deadline return book /by 2020-08-27 18:00"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "event project meeting /at 2020-09-25 10:00"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "done"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "find book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "help me"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "find"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "event interview /at 2020-20-20"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 17
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "SET MY_PATH\u003dC:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "SET JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "if not exist \"%MY_PATH%\\bin\" mkdir \"%MY_PATH%\\bin\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "dir /s /B ..\\src\\main\\java\\*.java \u003e sources.txt"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "javac  -cp \"%MY_PATH%\\src\\main\\java\" -Xlint:none -d \"%MY_PATH%\\bin\" \"%MY_PATH%\\src\\main\\java\\Duke.java\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "java -classpath \"%MY_PATH%\\bin\" Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 7,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus.Focus.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\command\\AddCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\command\\Command.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\command\\DeleteCommand.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\command\\DoneCommand.java"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\command\\ExitCommand.java"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\command\\FindCommand.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\command\\HelpCommand.java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\command\\InvalidCommand.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\command\\ListCommand.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\exception\\DukeException.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\parser\\Parser.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\storage\\Storage.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\task\\Deadline.java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\task\\Event.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\task\\Task.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\task\\TaskList.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\task\\ToDo.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruilingk"
        },
        "content": "C:\\Users\\Rui Ling\\Desktop\\uni y2s1\\cs2103t\\ip\\src\\main\\java\\focus\\ui\\UI.java"
      }
    ],
    "authorContributionMap": {
      "ruilingk": 19
    }
  }
]
