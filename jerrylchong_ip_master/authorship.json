[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 16,
      "-": 45
    }
  },
  {
    "path": "data/list.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "todo this"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 1
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline this /by 2020-09-09 1111"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 1
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new DialogBox(\"You:\\n\" + text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        var db \u003d new DialogBox(\"Bob say word:\\n\\n\" + text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 61
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static String DEFAULT_SAVE_PATH \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Creates a Duke chat bot."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param filePath The file path of the Duke save file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this(DEFAULT_SAVE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Runs the Duke chat bot"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ui.say(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    String getResponse(String fullCommand) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return (e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 79,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 9
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            stage.setTitle(\"Bob\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 29
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Usericon.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Bobicon.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 49
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Command parseDone(String input) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String pattern \u003d \"(done\\\\s)(.+)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (input.trim().matches(pattern)) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String number \u003d input.substring(5);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                int index \u003d parseInt(number) - 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                return new DoneCommand(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new EmptyDescriptionException(\"done\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new TypeMismatchException(\"done\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Command handleToDo(String input) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern \u003d \"(todo\\\\s)(.+)\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (input.trim().matches(pattern)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String task \u003d input.replaceAll(pattern, \"$2\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new ToDoCommand(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new EmptyDescriptionException(\"todo\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Command handleDeadline(String input) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String basePattern \u003d \"(deadline\\\\s)(.+)\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String almostCompletePattern \u003d \"(deadline\\\\s)(.+)\\\\s(/by\\\\s)(.+)\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String dateTimePattern \u003d \"(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d\\\\s\\\\d\\\\d\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String completePattern \u003d \"(deadline\\\\s)(.+)\\\\s(/by\\\\s)\" + dateTimePattern;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String missingTaskPattern \u003d \"(deadline\\\\s/by)((\\\\s(.*))*)\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (!input.trim().matches(basePattern)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new EmptyDescriptionException(\"deadline\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else if (input.trim().matches(missingTaskPattern)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new MissingTaskException());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else if (!input.trim().matches(almostCompletePattern)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new MissingTimeException(\"by\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else if (input.trim().matches(completePattern)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String task \u003d input.replaceAll(completePattern, \"$2\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                LocalDateTime dateTime \u003d extractDateTime(input.replaceAll(completePattern, \"$4\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                return new DeadlineCommand(task, dateTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new WrongDateTimeFormatException());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Command handleEvent(String input) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String basePattern \u003d \"(event\\\\s)(.+)\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String almostCompletePattern \u003d \"(event\\\\s)(.+)\\\\s(/at\\\\s)(.+)\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String dateTimePattern \u003d \"(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d\\\\s\\\\d\\\\d\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String completePattern \u003d \"(event\\\\s)(.+)\\\\s(/at\\\\s)\" + dateTimePattern;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String missingTaskPattern \u003d \"(event\\\\s)(/at)((\\\\s(.*))*)\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (!input.trim().matches(basePattern)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new EmptyDescriptionException(\"event\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else if (input.trim().matches(missingTaskPattern)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new MissingTaskException());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else if (!input.trim().matches(almostCompletePattern)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new MissingTimeException(\"at\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else if (input.trim().matches(completePattern)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String task \u003d input.replaceAll(completePattern, \"$2\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                LocalDateTime dateTime \u003d extractDateTime(input.replaceAll(completePattern, \"$4\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                return new EventCommand(task, dateTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new WrongDateTimeFormatException());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (e);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Command delete(String input) throws DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String pattern \u003d \"(delete\\\\s)(.+)\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (input.trim().matches(pattern)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String number \u003d input.substring(7);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                int index \u003d parseInt(number) - 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new EmptyDescriptionException(\"delete\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new TypeMismatchException(\"delete\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new OutOfBoundsException());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns the LocalDateTime extracted from the input String."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param input The given input."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return LocalDateTime of specified dateTime."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws InvalidDateTimeException If dateTime in input is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static LocalDateTime extractDateTime(String input) throws InvalidDateTimeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String pattern \u003d \"(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d)\\\\s(\\\\d\\\\d)(\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String date \u003d input.replaceAll(pattern, \"$1\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String hours \u003d input.replaceAll(pattern, \"$2\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String minutes \u003d input.replaceAll(pattern, \"$3\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String time \u003d hours + \":\" + minutes;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return LocalDateTime.parse(date + \"T\" + time);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new InvalidDateTimeException());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Command handleDueIn(String input) throws DukeException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String basePattern \u003d \"(due in\\\\s)(.+)\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String hourPattern \u003d \"(due in\\\\s)(\\\\d+)\\\\s(hours)\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String dayPattern \u003d \"(due in\\\\s)(\\\\d+)\\\\s(days)\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (!input.trim().matches(basePattern)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new EmptyDescriptionException(\"due in\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else if (input.trim().matches(hourPattern)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                long time \u003d parseInt(input.replaceAll(hourPattern, \"$2\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                return new DueInCommand(time, true);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else if (input.trim().matches(dayPattern)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                long time \u003d parseInt(input.replaceAll(dayPattern, \"$2\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                return new DueInCommand(time, false);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                throw (new WrongDueInFormatException());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new TypeMismatchException(\"due in\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new OutOfBoundsException());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Command handleFind(String input) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern \u003d \"(find\\\\s)(.+)\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (input.trim().matches(pattern)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String keyword \u003d input.replaceAll(pattern, \"$2\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new FindCommand(keyword);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new EmptyDescriptionException(\"find\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static Command handleRepeat(String input) throws DukeException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String basePattern \u003d \"(repeat\\\\s)(.+)\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String noRecurrencePattern \u003d \"repeat\\\\s(\\\\d+)\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String noTaskPattern \u003d \"repeat\\\\s(\\\\D+)\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String dateTimePattern \u003d \"(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d\\\\s\\\\d\\\\d\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String dayPattern \u003d \"(repeat\\\\s)(\\\\d+)\\\\s(\\\\d+)\\\\s(day\\\\suntil\\\\s)\" + dateTimePattern;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String weekPattern \u003d \"(repeat\\\\s)(\\\\d+)\\\\s(\\\\d+)\\\\s(week\\\\suntil\\\\s)\" + dateTimePattern;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String monthPattern \u003d \"(repeat\\\\s)(\\\\d+)\\\\s(\\\\d+)\\\\s(month\\\\suntil\\\\s)\" + dateTimePattern;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String yearPattern \u003d \"(repeat\\\\s)(\\\\d+)\\\\s(\\\\d+)\\\\s(year\\\\suntil\\\\s)\" + dateTimePattern;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (!input.trim().matches(basePattern)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new EmptyDescriptionException(\"repeat\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.trim().matches(noRecurrencePattern)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new NoRecurrenceException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.trim().matches(noTaskPattern)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new MissingTaskIndexException();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.trim().matches(dayPattern)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            int index \u003d parseInt(input.replaceAll(dayPattern, \"$2\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            long recurrence \u003d parseInt(input.replaceAll(dayPattern, \"$3\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            LocalDateTime end \u003d extractDateTime(input.replaceAll(dayPattern, \"$5\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new RepeatCommand(index, end, recurrence, RecurrenceType.DAY);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.trim().matches(weekPattern)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            int index \u003d parseInt(input.replaceAll(weekPattern, \"$2\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            long recurrence \u003d parseInt(input.replaceAll(weekPattern, \"$3\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            LocalDateTime end \u003d extractDateTime(input.replaceAll(weekPattern, \"$5\"));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new RepeatCommand(index, end, recurrence, RecurrenceType.WEEK);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.trim().matches(monthPattern)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            int index \u003d parseInt(input.replaceAll(monthPattern, \"$2\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            long recurrence \u003d parseInt(input.replaceAll(monthPattern, \"$3\"));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            LocalDateTime end \u003d extractDateTime(input.replaceAll(monthPattern, \"$5\"));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new RepeatCommand(index, end, recurrence, RecurrenceType.MONTH);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.trim().matches(yearPattern)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            int index \u003d parseInt(input.replaceAll(yearPattern, \"$2\"));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            long recurrence \u003d parseInt(input.replaceAll(yearPattern, \"$3\"));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            LocalDateTime end \u003d extractDateTime(input.replaceAll(yearPattern, \"$5\"));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new RepeatCommand(index, end, recurrence, RecurrenceType.YEAR);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new WrongRecurrenceFormatException();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns a command to respond to the user input."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return Command responding to the input."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException If user input is not recognized as a command."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (input.trim().equals(\"help\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.trim().equals(\"list\")) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return parseDone(input);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return handleToDo(input);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return handleDeadline(input);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return handleEvent(input);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return delete(input);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"due in\")) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return handleDueIn(input);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return handleFind(input);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"repeat\")) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return handleRepeat(input);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else if (input.startsWith(\"sort\")) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new UnknownCommandException());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 235
    }
  },
  {
    "path": "src/main/java/duke/RecurrenceType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public enum RecurrenceType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    DAY,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    MONTH,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    WEEK,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    YEAR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 8
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.LoadingErrorException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.StorageIoException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Creates a Storage object with the given file path."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param filePath The file path where save files are stored."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private void createTask(String s) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Task next;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (s.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                assert s.matches(\"(todo\\\\s)(.+)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                next \u003d new ToDo(s.substring(5));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else if (s.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String dateTimePattern \u003d \"(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d\\\\s\\\\d\\\\d\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String pattern \u003d \"(deadline\\\\s)(.+)\\\\s(/by\\\\s)\" + dateTimePattern;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                assert s.matches(pattern);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String task \u003d s.replaceAll(pattern, \"$2\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                LocalDateTime dateTime \u003d Parser.extractDateTime(s.replaceAll(pattern, \"$4\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                next \u003d new Deadline(task, dateTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String dateTimePattern \u003d \"(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d\\\\s\\\\d\\\\d\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String pattern \u003d \"(event\\\\s)(.+)\\\\s(/at\\\\s)(.+)\" + dateTimePattern;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                assert s.matches(pattern);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String task \u003d s.replaceAll(pattern, \"$2\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                LocalDateTime dateTime \u003d Parser.extractDateTime(s.replaceAll(pattern, \"$4\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                next \u003d new Event(task, dateTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            list.add(next);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns an arraylist which has been filled with tasks from the saved file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return Arraylist of tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException If saved file does not exist."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Scanner listScanner \u003d new Scanner(f);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            while (listScanner.hasNext()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                String command \u003d listScanner.nextLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                if (command.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    createTask(command.substring(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    list.get(index).setDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    createTask(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new LoadingErrorException(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Saves the tasks in the TaskList to a text file that can be loaded by the Storage class."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList to be saved."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException If save file path does not exist."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void save(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        File saveFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        File parentDirectory \u003d saveFile.getParentFile();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (null !\u003d parentDirectory) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            parentDirectory.mkdirs();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            FileWriter fw \u003d new FileWriter(saveFile);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String data \u003d tasks.extractListData();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            fw.write(data);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new StorageIoException(e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 114
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "@SuppressWarnings(\"ALL\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns the contents of the ArrayList in a String."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return Contents of the ArrayList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException If ArrayList is empty."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String listContents() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (list.size() \u003e 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String text \u003d \"Here is your list:\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                text \u003d text + \"\\n\" + i + \".\" + list.get(i - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return text;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new EmptyListException());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Adds the specified task to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param task The task description."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param dateTime The date and time of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param type The task type."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void add(String task, LocalDateTime dateTime, TaskType type) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Task nextDeadline \u003d new Deadline(task, dateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            list.add(nextDeadline);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Task nextEvent \u003d new Event(task, dateTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            list.add(nextEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Task nextToDo \u003d new ToDo(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            list.add(nextToDo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new SomethingWentWrongException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Deletes the specified task from the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param index The index of the task to be deleted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return The description of the deleted task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException If there is no task with the given index."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String delete(int index) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Task task \u003d list.get(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            list.remove(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return task.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw(new OutOfBoundsException());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Marks the specified task as done."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param index The index of the task to be marked."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return The description of the marked task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException If there is no task with the given index."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String done(int index) throws DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            list.get(index).setDone();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return list.get(index).toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new OutOfBoundsException());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns the tasks in the list in a format readable by the Storage when it is loading the save file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return Tasks in a Storage readable format."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String extractListData() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int len \u003d list.size();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (len \u003e 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String text \u003d list.get(0).toCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            for (int i \u003d 1; i \u003c len; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                Task t \u003d list.get(i);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                text \u003d text + \"\\n\" + t.toCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return text;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns a list of tasks due in the given number of hours from current time."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param hours Given number of hours."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return A list of tasks due."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String extractDueTasksHours(long hours) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String text \u003d \"These tasks are due in \" + hours + \" hour(s):\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (t.compareTime(LocalDateTime.now(), hours)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                text +\u003d \"\\n\" + i + \". \" + t;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        text +\u003d \"\\nCount: \" + i;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns a list of tasks due in the given number of days from current time."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param days Given number of days."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return A list of tasks due."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String extractDueTasksDays(long days) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String text \u003d \"These tasks are due in \" + days + \" day(s):\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (t.compareTime(LocalDateTime.now(), days * 24)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                text +\u003d \"\\n\" + i + \". \" + t;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        text +\u003d \"\\nCount: \" + i;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Finds tasks matching the given keyword."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param keyword"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @SuppressWarnings(\"checkstyle:Regexp\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String findMatches(String keyword) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String text \u003d \"These tasks contains the keyword: \" + keyword;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            if (t.find(keyword)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                text +\u003d \"\\n\" + i + \". \" + t;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        text +\u003d \"\\nCount: \" + i;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Sets the given task to repeat for the given duration and recurrence."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param index The task index."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param end The end dateTime of the duration."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param recurrence How often the recurrence is."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Task repeatTask(int index, LocalDateTime end, long recurrence,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                           RecurrenceType recurType) throws DukeException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Task task \u003d list.get(index - 1);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String desc \u003d task.getText();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        LocalDateTime start \u003d task.getDateTime();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        TaskType type \u003d task.getType();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new CannotRepeatException();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            LocalDateTime date \u003d incrementDate(start, recurrence, recurType);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            while (date.isBefore(end) || date.isEqual(end)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                add(desc, date, type);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                date \u003d incrementDate(date, recurrence, recurType);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private LocalDateTime incrementDate(LocalDateTime current, long recurrence,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                                        RecurrenceType recurType) throws SomethingWentWrongException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        switch (recurType) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case DAY:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return current.plusDays(recurrence);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case WEEK:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return current.plusWeeks(recurrence);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case MONTH:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return current.plusMonths(recurrence);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        case YEAR:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return current.plusYears(recurrence);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw new SomethingWentWrongException();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void sortList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        list.sort(new TaskComparator());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 221
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private static final String BORDER \u003d \"_____________________________________________________________\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Prints the given String with borders above and below it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param s The given String"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void say(String s) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        System.out.println(BORDER);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        System.out.println(BORDER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Prints a loading error."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        say(\"Unable to load tasks.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Prints the welcome text."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String logo \u003d \"█████████████████████████████\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"████████████████████████████████\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"█░░░░░░░░░░░░░░███░░░░░░░░░░░░░\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"░░░░░░░░░░░░█░░░░░░░░░░░░░░███\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"█░░▄▀▄▀▄▀▄▀▄▀░░███░░▄▀▄▀▄▀▄▀▄▀▄\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"▀▄▀▄▀▄▀▄▀▄░░█░░▄▀▄▀▄▀▄▀▄▀░░███\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"█░░▄▀░░░░░░▄▀░░███░░▄▀░░░░░░░░░\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"░░░░░░░░▄▀░░█░░▄▀░░░░░░▄▀░░███\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"█░░▄▀░░██░░▄▀░░███░░▄▀░░███████\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"██████░░▄▀░░█░░▄▀░░██░░▄▀░░███\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"█░░▄▀░░░░░░▄▀░░░░█░░▄▀░░███████\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"██████░░▄▀░░█░░▄▀░░░░░░▄▀░░░░█\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"█░░▄▀▄▀▄▀▄▀▄▀▄▀░░█░░▄▀░░█░░█░██\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"█░█░░█░░▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░█\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"█░░▄▀░░░░░░░░▄▀░░█░░▄▀░░█████░░\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"░█████░░▄▀░░█░░▄▀░░░░░░░░▄▀░░█\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"█░░▄▀░░████░░▄▀░░█░░▄▀░░███████\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"██████░░▄▀░░█░░▄▀░░████░░▄▀░░█\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"█░░▄▀░░░░░░░░▄▀░░█░░▄▀░░░░░░░░░\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"░░░░░░░░▄▀░░█░░▄▀░░░░░░░░▄▀░░█\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"█░░▄▀▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀▄\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"▀▄▀▄▀▄▀▄▀▄░░█░░▄▀▄▀▄▀▄▀▄▀▄▀░░█\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"█░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"░░░░░░░░░░░░█░░░░░░░░░░░░░░░░█\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"███████████████████████████████\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"██████████████████████████████\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String welcome \u003d \"Hello I am\\n\" + logo + \"\\nPlease say something.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        say(welcome);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns the user input as a String."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return User input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Prints Goodbye and closes the scanner."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void end() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        say(\"Goodbye!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 83
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Saves the TaskList into a save file and ends the Ui."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            ui.end();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return \"Goodbye!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof ByeCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 37
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns true if the program should exit."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Otherwise, the program should continue and returns false."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return True or False."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 21
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.PastDateTimeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Creates a DeadlineCommand with the given description and date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param task The given description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param dateTime The given date."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public DeadlineCommand(String task, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Adds a Deadline task with task and dateTime to the TaskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @returns Duke response."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws PastDateTimeException If the dateTime has already passed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (LocalDateTime.now().isBefore(dateTime)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            tasks.add(task, dateTime, TaskType.DEADLINE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return (\"Added Deadline \u0027\" + task + \"\u0027 to your list!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new PastDateTimeException());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof DeadlineCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 49
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Deletes the task with index from the TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String task \u003d tasks.delete(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return (\"Deleted this task:\\n\" + task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof DeleteCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 32
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Marks the task with index in the TaskList as done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String task \u003d tasks.done(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return (\"Marked this task as done:\\n\" + task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof DoneCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 32
    }
  },
  {
    "path": "src/main/java/duke/command/DueInCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DueInCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private long time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private boolean hours;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Creates a DueInCommand with the given time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param time The given time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param hours Boolean to check if time is in hours or days."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public DueInCommand(long time, boolean hours) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Provides the user with a list of tasks in the TaskList that are due in time hours."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (hours) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return(tasks.extractDueTasksHours(time));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return(tasks.extractDueTasksDays(time));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof DueInCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 43
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.PastDateTimeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Creates a EventCommand with the given description and date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param task The given description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param dateTime The given date."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public EventCommand(String task, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Adds an Event task with task and dateTime to the TaskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws PastDateTimeException If the dateTime has already passed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        if (LocalDateTime.now().isBefore(dateTime)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            tasks.add(task, dateTime, TaskType.EVENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return (\"Added Event \u0027\" + task + \"\u0027 to your list!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (new PastDateTimeException());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof EventCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 48
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return (tasks.findMatches(keyword));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 19
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Provides the user with a list of commands available for them."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String help \u003d \"These are the available commands:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"bye - exits the program\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"deadline \u003cdescription\u003e /by \u003cdue date and time in YYYY-MM-DD HH:MM format\u003e - \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"adds a deadline with the given description and due date to the task list\\n\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"delete \u003ctask number\u003e - deletes the task corresponding to the number from the task list\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"due in \u003cnumber\u003e hours - shows a list of tasks due in the given number of hours\\n\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"due in \u003cnumber\u003e days - shows a list of tasks due in the given number of days\\n\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"done \u003ctask number\u003e - marks the task corresponding to the number as done\\n\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"event \u003cdescription\u003e /at \u003cdue date and time in YYYY-MM-DD HH:MM format\u003e - \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"adds an event with the given description and due date to the task list\\n\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"find \u003ckeyword\u003e - shows a list of tasks containing the given keyword\\n\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"help - shows this list of commands\\n\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"list - shows the contents of the task list\\n\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"repeat \u003ctask number\u003e \u003cnumber\u003e \u003c\u0027day\u0027/\u0027week\u0027/\u0027month\u0027/\u0027year\u0027\u003e until \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"\u003cdate and time in YYYY-MM-DD HH:MM format\u003e - sets the given task to \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"repeat with the given recurrence until the provided end date\\n\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"sort - sorts the task list according to time\\n\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                + \"todo \u003cdescription\u003e - adds a todo task with the given description to the task list\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return (help);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof HelpCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 44
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Provides the user with a list of tasks in the TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String text \u003d tasks.listContents();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            return (text);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            throw (e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 31
    }
  },
  {
    "path": "src/main/java/duke/command/RepeatCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.RecurrenceType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class RepeatCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private long recurrence;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private RecurrenceType recurType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public RepeatCommand(int index, LocalDateTime end, long recurrence,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                         RecurrenceType recurType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.recurrence \u003d recurrence;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.recurType \u003d recurType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        Task task \u003d tasks.repeatTask(index, end, recurrence, recurType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return String.format(\"%s has been added and set to repeat.\", task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof RepeatCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 36
    }
  },
  {
    "path": "src/main/java/duke/command/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tasks.sortList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return \"Your task list has been sorted.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof SortCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 19
    }
  },
  {
    "path": "src/main/java/duke/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public ToDoCommand(String task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Adds a ToDo task with task to the TaskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param tasks The TaskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param ui The Ui."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param storage The Storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        tasks.add(task, LocalDateTime.now(), TaskType.TODO);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return (\"Added ToDo \u0027\" + task + \"\u0027 to your list!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return obj instanceof ToDoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 35
    }
  },
  {
    "path": "src/main/java/duke/exception/CannotRepeatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class CannotRepeatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public CannotRepeatException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! ToDo tasks cannot be repeated.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public static DukeException storageIoException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return new DukeException(\"Error! \" + message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class EmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public EmptyDescriptionException(String taskType) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! \u0027\" + taskType + \"\u0027 description cannot be empty.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class EmptyListException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public EmptyListException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Your list is empty.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class InvalidDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public InvalidDateTimeException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! Date/time is invalid.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/LoadingErrorException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class LoadingErrorException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public LoadingErrorException(String path) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! No file found at path: \" + path);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class MissingTaskException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public MissingTaskException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! No task description provided.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingTaskIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class MissingTaskIndexException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public MissingTaskIndexException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! No task index provided.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class MissingTimeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public MissingTimeException(String byOrAt) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! \u0027/\" + byOrAt + \"\u0027 date not found.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/NoRecurrenceException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class NoRecurrenceException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public NoRecurrenceException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! No recurrence provided.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/OutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class OutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public OutOfBoundsException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! Enter a valid task number.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/PastDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class PastDateTimeException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public PastDateTimeException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! Date/time has already passed.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/SomethingWentWrongException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class SomethingWentWrongException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public SomethingWentWrongException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Something went wrong here.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/StorageIoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class StorageIoException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public StorageIoException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! \" + message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/TypeMismatchException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class TypeMismatchException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public TypeMismatchException(String command) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! Integer should follow \u0027\" + command + \"\u0027 command.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public UnknownCommandException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Sorry, I don\u0027t understand what you just said.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/WrongDateTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class WrongDateTimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public WrongDateTimeFormatException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! Date/time is in the wrong format.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/WrongDueInFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class WrongDueInFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public WrongDueInFormatException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! \u0027due in\u0027 command is in the wrong format.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/WrongRecurrenceFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class WrongRecurrenceFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public WrongRecurrenceFormatException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(\"Error! Recurrence is in the wrong format.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Creates a Deadline task with the given description and due date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param s The description of the Deadline task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param dateTime The due date of the Deadline task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Deadline(String s, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String minute \u003d dateTime.getMinute() \u003c 10"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"0\" + dateTime.getMinute()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : String.format(\"%d\", dateTime.getMinute());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String hour \u003d dateTime.getHour() \u003c 10"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"0\" + dateTime.getHour()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : String.format(\"%d\", dateTime.getHour());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.time \u003d String.format(\"%s:%s\", hour, minute);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String month \u003d dateTime.getMonth().getDisplayName(TextStyle.FULL, Locale.ENGLISH);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int day \u003d dateTime.getDayOfMonth();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int year \u003d dateTime.getYear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String dueDate \u003d String.format(\"%s %d %d, %s\", month, day, year, time);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"[D][O] \" + text + \" (by: \" + dueDate + \")\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"[D][X] \" + text + \" (by: \" + dueDate + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean compareTime(LocalDateTime givenDateTime, long hours) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return givenDateTime.plusHours(hours).isAfter(dateTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String rawDateTime \u003d dateTime.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern \u003d \"(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d)T(\\\\d\\\\d):(\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String date \u003d rawDateTime.replaceAll(pattern, \"$1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String hours \u003d rawDateTime.replaceAll(pattern, \"$2\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String minutes \u003d rawDateTime.replaceAll(pattern, \"$3\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String newDateTime \u003d date + \" \" + hours + minutes;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"done deadline \" + text + \" /by \" + newDateTime"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"deadline \" + text + \" /by \" + newDateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public TaskType getType() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return TaskType.DEADLINE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 67
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Creates a Event task with the given description and date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param s The description of the Event task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param dateTime The date of the Event task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Event(String s, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String minute \u003d dateTime.getMinute() \u003c 10"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"0\" + dateTime.getMinute()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : String.format(\"%d\", dateTime.getMinute());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String hour \u003d dateTime.getHour() \u003c 10"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"0\" + dateTime.getHour()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : String.format(\"%d\", dateTime.getHour());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.time \u003d String.format(\"%s:%s\", hour, minute);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String month \u003d dateTime.getMonth().getDisplayName(TextStyle.FULL, Locale.ENGLISH);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int day \u003d dateTime.getDayOfMonth();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        int year \u003d dateTime.getYear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String dueDate \u003d String.format(\"%s %d %d, %s\", month, day, year, time);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"[E][O] \" + text + \" (at: \" + dueDate + \")\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"[E][X] \" + text + \" (at: \" + dueDate + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean compareTime(LocalDateTime givenDateTime, long hours) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return givenDateTime.plusHours(hours).isAfter(dateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String rawDateTime \u003d dateTime.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern \u003d \"(\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d)T(\\\\d\\\\d):(\\\\d\\\\d)\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String date \u003d rawDateTime.replaceAll(pattern, \"$1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String hours \u003d rawDateTime.replaceAll(pattern, \"$2\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String minutes \u003d rawDateTime.replaceAll(pattern, \"$3\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String newDateTime \u003d date + \" \" + hours + minutes;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"done event \" + text + \" /at \" + newDateTime"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"event \" + text + \" /at \" + newDateTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public TaskType getType() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return TaskType.EVENT;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 67
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    protected final String text;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    protected boolean done \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public Task(String text) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns the task in a format readable by Storage when loading a save file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return The task in a Storage readable format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public abstract String toCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns true if the dateTime of the task is within the the given time frame."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Otherwise, returns false."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param givenDateTime Given start date and time of the time frame."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param hours The duration of the time frame in hours."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return True or False."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public abstract boolean compareTime(LocalDateTime givenDateTime, long hours);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns true if the keyword is in the Task description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * Returns false otherwise."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @param keyword The given keyword to search for."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     * @return True or False."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean find(String keyword) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        String pattern \u003d \"(.*)\" + keyword + \"(.*)\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return text.matches(pattern);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return LocalDateTime.now();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public abstract TaskType getType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 58
    }
  },
  {
    "path": "src/main/java/duke/task/TaskComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class TaskComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public int compare(Task o1, Task o2) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        LocalDateTime first \u003d o1.getDateTime();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        LocalDateTime second \u003d o2.getDateTime();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return first.isBefore(second)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? -1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : first.isEqual(second)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    ? 0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                    : 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 18
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    EVENT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    TODO"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 7
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public ToDo(String s) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"[T][O] \" + text"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"[T][X] \" + text;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return done"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                ? \"done todo \" + text"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                : \"todo \" + text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean compareTime(LocalDateTime givenDateTime, long hours) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public TaskType getType() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return TaskType.TODO;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 34
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-border-width: 1; -fx-border-color: black; -fx-border-insets: 5; -fx-background-color: #a0a0a0; -fx-background-insets: 5;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            \u003cFont name\u003d\"Lato Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"4.0\" layoutY\u003d\"562.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"35.0\" prefWidth\u003d\"315.0\" style\u003d\"-fx-background-color: #a0a0a0;\" AnchorPane.bottomAnchor\u003d\"3.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            \u003cFont name\u003d\"Lato Regular\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"325.0\" layoutY\u003d\"562.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"35.0\" prefWidth\u003d\"70.0\" style\u003d\"-fx-background-color: #a0a0a0;\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            \u003cFont name\u003d\"Lato Bold\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "               \u003c/padding\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 30
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_unknownCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"unknown\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Sorry, I don\u0027t understand what you just said.\", e.getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_doneWithNoTaskIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"done \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Error! \u0027done\u0027 description cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_doneWithNonIntegerValue_exceptionThrown() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_todoWithNoDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"todo \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Error! \u0027todo\u0027 description cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_deadlineWithNoDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"deadline \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Error! \u0027deadline\u0027 description cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_deadlineWithNoTaskDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"deadline /by 2020-12-12 1000\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Error! No task description provided.\", e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_deadlineWithNoDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"deadline this\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Error! \u0027/by\u0027 date not found.\", e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_deadlineWithWrongDateTimeFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"deadline this /by 2020/12/12 10:00\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Error! Date/time is in the wrong format.\", e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void parse_deadlineWithInvalidDateTime_exceptionThrown() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            Parser.parse(\"deadline this /by 2020-13-12 3300\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Error! Date/time is invalid.\", e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 87
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void listContents_emptyList_exceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            tasks.listContents();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(\"Your list is empty.\", e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public void listContents_nonEmptyList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            list.add(new ToDoStub(\"test\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            TaskList tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            String expected \u003d \"Here is your list:\\n1.test\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            assertEquals(tasks.listContents(), expected);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 40
    }
  },
  {
    "path": "src/test/java/duke/ToDoStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "public class ToDoStub extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public ToDoStub(String text) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        super(text);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return \"test\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public String toCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    public boolean compareTime(LocalDateTime now, long hours) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 26
    }
  },
  {
    "path": "text-ui-test/data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline test /by 2021-08-23 0000"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "test"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "help"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "todo that"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline /by 2021-08-23 0000"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline cs2103 ip"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline cs2103 ip /by august 23"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline cs2103 ip /by 2019-08-23 0000"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "deadline cs2103 ip /by 2021-08-23 0000"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event /at 2021-08-23 0001"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event rest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event rest /at august 23"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event rest /at 2019-08-23 0001"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "event rest /at 2021-08-23 0001"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "due in 1 hours"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "due in 366 days"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "find rest"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 28
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jerrylchong"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\command\\*.java ..\\src\\main\\java\\duke\\task\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "jerrylchong": 1,
      "-": 20
    }
  }
]
