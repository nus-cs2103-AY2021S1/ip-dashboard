[
  {
    "path": "data/Duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "T, 1, read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "D, 1, return book, 2020-06-06"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "T, 1, join sports club"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "T, 0, meet zeling tomorrow"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "D, 0, iP , 2020-08-25"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "E, 0, CS2103 Tut , 2020-08-26 3PM"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 6
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String storageForm() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"D\" + \", \"  + (isDone ? \"1\" : \"0\") + \", \" + description + \", \" + by.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 22
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    enum Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ADD,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        DONE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        SAVE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        DELETE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        LIST,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        FIND,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ERROR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // Introduction"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String nextLine \u003d ui.readCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        while (!nextLine.equals(\"bye\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            Command c \u003d Parser.parse(nextLine);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            switch(c) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                case ADD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        Task curr \u003d tasks.addItem(nextLine);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        ui.addedItem(curr, tasks.getListSize());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    } catch (DukeException ex1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        ui.showError(ex1.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    nextLine \u003d ui.readCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                case DONE:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        Task curr \u003d tasks.doneItem(nextLine);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        ui.doneItem(curr);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    } catch (DukeException ex1){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        ui.showError(ex1.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    nextLine \u003d ui.readCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                case DELETE:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        Task curr \u003d tasks.deleteItem(nextLine);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        ui.deleteItem(curr);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    }  catch(DukeException ex1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        ui.showError(ex1.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    nextLine \u003d ui.readCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                case LIST:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    ui.returnList(tasks.getList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    nextLine \u003d ui.readCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                case SAVE:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        storage.overwriteData(tasks.getList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        ui.save();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    } catch (IOException ex1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        ui.showError(ex1.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    nextLine \u003d ui.readCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                case FIND:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    ui.returnList(tasks.find(nextLine));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    nextLine \u003d ui.readCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                case ERROR:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    ui.defaultError();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    nextLine \u003d ui.readCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        // Ending the bot"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ui.bye();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        new Duke(\"data/Duke.txt\").run();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 92,
      "-": 6
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public DukeException(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"Sorry (not sorry)!!\" + description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 12
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Event(String description, LocalDate date, String time) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String storageForm() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"E\" + \", \"  + (isDone ? \"1\" : \"0\") + \", \" + description + \", \" + date.toString() + \" \" + time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            + \" \" + time + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 25
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Parses the String input into the YYYY/MM/DD format."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param input String input from user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return LocalDate in the correct format"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @throws DukeException Throws exception if the input is invalid or in an unrecognisable format."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static LocalDate dateParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            input \u003d input.replace(\"/\", \"-\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            LocalDate ret \u003d LocalDate.parse(input);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return ret;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } catch (DateTimeParseException ex1) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DukeException(\"Wrong formatting!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Converts the 24Hour into AM/PM format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param input String that represents time in 24Hour."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return String that represents time in AM/PM."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static String timeParser(String input) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String ret \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        int hour \u003d Integer.valueOf(input)/100;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (hour \u003e\u003d 12) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            ret \u003d \"PM\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            ret \u003d Integer.toString(hour \u003d\u003d 12 ? 12 : hour - 12).concat(ret);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            ret \u003d \"AM\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            ret \u003d Integer.toString(hour \u003d\u003d 0 ? 12 : hour).concat(ret);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns the first word a String"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param text any String"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return the first word in the string."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private static String getFirstWord(String text) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        int index \u003d text.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (index \u003e -1) { // Check if there is more than one word."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return text.substring(0, index).trim(); // Extract first word."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return text; // Text is the first word itself."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a enum class item stored in Duke based on the first word of the input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param input Command from user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return Duke Command to indicate which switch to enter"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public static Duke.Command parse(String input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (getFirstWord(input).equals(\"todo\") || getFirstWord(input).equals(\"deadline\") ||"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                getFirstWord(input).equals(\"event\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return Duke.Command.ADD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (getFirstWord(input).equals(\"done\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return Duke.Command.DONE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (getFirstWord(input).equals(\"delete\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return Duke.Command.DELETE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return Duke.Command.LIST;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (input.equals(\"save\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return Duke.Command.SAVE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (input.contains(\"find\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return Duke.Command.FIND;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return Duke.Command.ERROR;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 82
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private ArrayList\u003cTask\u003e txtData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.txtData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            File dir \u003d new File(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (dir.exists()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                Scanner data \u003d new Scanner(dir);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                while (data.hasNextLine()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    String curr \u003d data.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    String[] info \u003d curr.split(\", \", 4);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    if (info[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        ToDo tobeAdded \u003d new ToDo(info[2]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        if (info[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            tobeAdded.markAsDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        txtData.add(tobeAdded);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    } else if (info[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        Deadline tobeAdded \u003d new Deadline(info[2], Parser.dateParser(info[3]));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        if (info[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            tobeAdded.markAsDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        txtData.add(tobeAdded);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    } else if (info[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        String[] t \u003d info[3].split(\" \", 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        Event tobeAdded \u003d new Event(info[2], Parser.dateParser(t[0]), t[1]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        if (info[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                            tobeAdded.markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                        txtData.add(tobeAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            return txtData;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } catch (FileNotFoundException ex1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DukeException(\"Saved Data not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } catch (DateTimeParseException ex2) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DukeException(\"Date/Time incorrect format\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void overwriteData(ArrayList\u003cTask\u003e data) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            FileWriter fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            String newData \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            for (Task k : data) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                String textToAdd \u003d k.storageForm();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                newData +\u003d textToAdd + System.lineSeparator();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            fw.write(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } catch (IOException ex1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            System.out.println(\"Something went wrong... \" + ex1.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 72
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a special character based on the state of the Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return a Tick if the task is marked as done or a cross if not."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return isDone? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Marks the Task as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns a String to be written into saved data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return a String that contains the necessary information in the correct format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String storageForm() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"[\"+getStatusIcon()+\"] \" + this.description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 37
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " * TaskList Class stores the list of tasks and modifies the list according to commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Default constructor that initialises an empty ArrayList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Initialises an Arraylist of Tasks if there is saved data present."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param savedData an ArrayList of tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e savedData) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.list \u003d savedData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Adds a new subclass of Task based on a String input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param input Command from user"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return a Task that is either a ToDo, a Deadline or an Event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @throws DukeException Throws exception if command is invalid due to missing information."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Task addItem(String input) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String arr[] \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Task curr \u003d new Task(\"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (arr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DukeException(\"The description of a \" + arr[0] + \" cannot be empty!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (arr[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            curr \u003d new ToDo(arr[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            list.add(curr);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (arr[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            String info[] \u003d arr[1].split(\"/by \", 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (info.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                throw new DukeException(\"Deadline not provided!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                curr \u003d new Deadline(info[0], Parser.dateParser(info[1]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                list.add(curr);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else if (arr[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            String info[] \u003d arr[1].split(\"/at \", 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (info.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                throw new DukeException(\"Time not provided!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                String[] t \u003d info[1].split(\" \", 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                curr \u003d new Event(info[0], Parser.dateParser(t[0]), Parser.timeParser(t[1]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                list.add(curr);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return curr;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Deletes an item based on the number"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param input Command from user"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return the Task that was deleted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @throws DukeException Throws exception if command is invalid due to missing or wrong information."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Task deleteItem(String input) throws DukeException{"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String info[] \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Task toBeDeleted \u003d new Task(\"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (info.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DukeException(\"Which item???\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                int index \u003d Integer.parseInt(info[1]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                if (index \u003e list.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    throw new DukeException(\"Excuse Moi???\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    toBeDeleted \u003d list.get(index - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    list.remove(index - 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                    return toBeDeleted;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } catch (NumberFormatException ex1){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                throw new DukeException(\"Excuse Meee? number pls.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Marks an item as done based on the number"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @param input Command from user"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return the Task that was marked as done after it has been marked."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @throws DukeException Throws exception if command is invalid due to missing or wrong information."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Task doneItem(String input) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String info[] \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        Task toBeRet \u003d new Task(\"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        if (info.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            throw new DukeException(\"Which item???\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            int index \u003d Integer.parseInt(info[1]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (index \u003e list.size() || index \u003c\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                throw new DukeException(\"Excuse Moi???\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                list.get(index-1).markAsDone();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                toBeRet \u003d list.get(index-1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return toBeRet;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ArrayList\u003cTask\u003e find(String input) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        String[] info \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        ArrayList\u003cTask\u003e ret \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (Task k: list) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            if (k.description.contains(info[1])) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "                ret.add(k);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns the number of tasks on the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return integer representing the number of tasks on the list"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Returns the current list of Tasks."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return an ArrayList of Tasks"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 138
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String storageForm() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"T\" + \", \"  + (isDone ? \"1\" : \"0\") + \", \" + description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 17
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String line \u003d \"-------------------------------------\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String addedMsg \u003d \"Alright, I\u0027ve added a new order: \";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String doneMsg \u003d \"Great choice! I have taken your order: \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String deleteMsg \u003d \"Too bad. I\u0027ll remove the following order: \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String saveMsg \u003d \"Aright, I have remembered your sins :)\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String retListMsg \u003d \"Here\u0027s what you have ordered...\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    final private String defaultError \u003d \"Wat talking you?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    private Scanner s;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        this.s \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * Reads the next line of input by user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     * @return the next command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        return s.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(\"Welcome to mel\u0027s drive-in!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(\"What would you like to have?\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void addedItem(Task curr, int size) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(addedMsg);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(curr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(\"You have ordered \" + size + \" items.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void showError(String ex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(ex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void doneItem(Task curr) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(doneMsg);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(curr);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void deleteItem(Task curr) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(deleteMsg);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(curr);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void returnList(ArrayList\u003cTask\u003e curr) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(retListMsg);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        for (int k \u003d 0; k \u003c curr.size(); k++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "            System.out.println((k + 1) + \": \" + curr.get(k));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println((line));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void save() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(saveMsg);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void defaultError() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(defaultError);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void bye() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(\"Bye! Please come again!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(\"Sorry, I forgot you existed!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "        System.out.println(line);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 99
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//public class ParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    @DynamicTest"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    public void testDateParser() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"2020-08-04\", Parser.dateParser(\"2020/08/04\"));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"2020/08/04\", Parser.dateParser(\"2020/08/04\"));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    public void testTimeParser() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"12PM\", Parser.timeParser(\"1200\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"12AM\", Parser.timeParser(\"0000\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    public void testGetFirstWord() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"This\", Parser.getFirstWord(\"This is me.\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"Chicken\", Parser.getFirstWord(\"Chicken came first.\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    public void testParse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"ADD\", String.valueOf(Parser.parse(\"todo read book\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"ADD\", String.valueOf(Parser.parse(\"deadline finish iP /by 2020/08/25\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"ADD\", String.valueOf(Parser.parse(\"event meeting /at 2020/08/31 1400\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"DONE\", String.valueOf(Parser.parse(\"done 1\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"DELETE\", String.valueOf(Parser.parse(\"delete 2\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"LIST\", String.valueOf(Parser.parse(\"list\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"SAVE\", String.valueOf(Parser.parse(\"save\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//        assertEquals(\"ERROR\", String.valueOf(Parser.parse(\"hello\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 34
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "delete"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "even"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "delete a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "deadline return book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 14
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hazel1603"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Hazel1603": 1,
      "-": 37
    }
  }
]
