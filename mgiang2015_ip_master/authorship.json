[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    static String SYMBOL \u003d \"[D]\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public Deadline(String name, String deadline) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        super(name, TaskType.Deadline);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String tick \u003d this.isDone() ? \"[✓]\" : \"[✗]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return String.format(\"%s%s %s (by: %s)\", SYMBOL, tick, name, deadline);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 20
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * get_input() is in charge of asking for input from user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * and return the input as a string to be used for something else."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @param sc Scanner object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @return a string representing user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static String get_input(Scanner sc) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String user_input \u003d sc.nextLine().trim(); // Read user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return user_input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * get_output(String) decides what Hal\u0027s output should be"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * based on user\u0027s input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @param user_input input from user as String"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @return output by Hal9000"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public String get_output(Task taskInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return String.format(\"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in the list.\\n\", taskInput.toString(), this.tasks.size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static String format_response(String output_msg) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        \"____________________________________________________________\\n\"+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        output_msg +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public String summarize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String all_tasks \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            Task t \u003d tasks.get(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            all_tasks +\u003d String.format(\"%d.%s\\n\", i+1, t.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return all_tasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public String mark_done(int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (!this.tasks.get(index).isDone()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            this.tasks.get(index).done();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return String.format(\"Nice! I\u0027ve marked this task as done:\\n[✓] %s\\n\", this.tasks.get(index).getName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return String.format(\"Task %d already done!\\n\", index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public String deleteTask(int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (tasks.size() \u003c\u003d index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return \"No such task\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Task t \u003d this.tasks.get(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.tasks.remove(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return String.format(\"Noted. I\u0027ve removed this task:\\n  %s\\nNow you have %d tasks in the list.\\n\", t.toString(), this.tasks.size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static TaskType categorize(String[] input_parts) throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (input_parts[0].compareTo(\"todo\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return TaskType.ToDo;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else if (input_parts[0].compareTo(\"deadline\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return TaskType.Deadline;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else if (input_parts[0].compareTo(\"event\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return TaskType.Event;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            throw new UndefinedWordException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    // Can be used to get the details too"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static String extractTask(String[] input_parts) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String task \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        for (int i \u003d 1; i \u003c input_parts.length; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            task +\u003d input_parts[i] + \" \";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return task.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static Task getTask(String input) throws Exception { // catch duke exception from extractTask and categorize, throw to op()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String[] parts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        TaskType type;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            type \u003d categorize(parts);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } catch (UndefinedWordException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (type \u003d\u003d TaskType.ToDo) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            parts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            if (parts.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                throw new NoDescriptionException(\"☹ OOPS!!! The description of a todo cannot be empty.\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            } // if not, chillax and continue"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            String name \u003d extractTask(parts);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return new ToDo(name);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else if (type \u003d\u003d TaskType.Deadline) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            if (input.split(\"/\").length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                throw new NoDescriptionException(\"☹ OOPS!!! The description of a deadline cannot be empty.\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            } // if not, chillax and continue"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            String name \u003d extractTask(input.split(\"/\")[0].split(\" \"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            String deadline \u003d extractTask(input.split(\"/\")[1].split(\" \"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return new Deadline(name, deadline); "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            if (input.split(\"/\").length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                throw new NoDescriptionException(\"☹ OOPS!!! The description of an event cannot be empty.\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            } // if not, chillax and continue"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            String name \u003d extractTask(input.split(\"/\")[0].split(\" \"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            String details \u003d extractTask(input.split(\"/\")[1].split(\" \"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return new Event(name, details);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void op() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        boolean end \u003d false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        while (!end) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            String input \u003d get_input(sc);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            String[] parts \u003d input.split(\" \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            if (input.compareTo(\"bye\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                end \u003d true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            } else if (input.compareTo(\"list\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                System.out.println(format_response(this.summarize()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            } else if (parts[0].compareTo(\"done\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                System.out.println(format_response(this.mark_done(Integer.parseInt(parts[1]) - 1))); "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            } else if (parts[0].compareTo(\"delete\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                System.out.println(format_response(this.deleteTask(Integer.parseInt(parts[1]) - 1))); "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                Task taskInput;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                    taskInput \u003d getTask(input); // catch duke exception from getTask(input)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                    System.out.println(format_response(e.getMessage()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                // add task to list of tasks"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                this.tasks.add(taskInput);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                String output_string \u003d format_response(get_output(taskInput));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                System.out.println(output_string);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        System.out.println(format_response(\"Bye. Hope to see you again soon!\\n\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String logo \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "\"   __ _____   __  ___  ___  ___  ___\\n\" +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "\"  / // / _ | / / / _ \\\\/ _ \\\\/ _ \\\\/ _ \\\\\\n\" +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "\" / _  / __ |/ /__\\\\_, / // / // / // /\\n\" +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "\"/_//_/_/ |_/____/___/\\\\___/\\\\___/\\\\___/\\n\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                                     "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // Intro message"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        System.out.println(format_response("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            \"Hello! I\u0027m Hal9000\\nWhat can I do for you?\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Duke hal9000 \u003d new Duke();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        hal9000.op();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "/*"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "*/"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 170,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    static String SYMBOL \u003d \"[E]\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public Event(String name, String details) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        super(name, TaskType.Event);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String tick \u003d this.isDone() ? \"[✓]\" : \"[✗]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return String.format(\"%s%s %s (at: %s)\", SYMBOL, tick, name, details);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 20
    }
  },
  {
    "path": "src/main/java/NoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class NoDescriptionException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public NoDescriptionException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 5
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "enum TaskType {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    ToDo,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    Deadline,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    Event"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private TaskType type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public Task(String name, TaskType type) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public TaskType getType() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void done() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 35
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    static String SYMBOL \u003d \"[T]\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public ToDo(String name) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        super(name, TaskType.ToDo);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String tick \u003d this.isDone() ? \"[✓]\" : \"[✗]\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return String.format(\"%s%s %s\", SYMBOL, tick, name);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 13
    }
  },
  {
    "path": "src/main/java/UndefinedWordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class UndefinedWordException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public UndefinedWordException(String msg) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 5
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 5
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "# convert to UNIX format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "# dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 3,
      "-": 35
    }
  }
]
