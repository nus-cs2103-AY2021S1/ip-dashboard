[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "shawn-nyk": 2
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[T]|0|read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[E]|1|meeting|10pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[D]|1|homework|2020-08-23T23:59:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[D]|0|write essay|2020-08-27T13:30:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[D]|0|send email|2020-09-21T09:30:00"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 5
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Serves as a chat bot. duke.Duke can keep a record of user\u0027s inputs as a list of"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * tasks, mark them as completed when they are done, and show the user the list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * of tasks upon request."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String memoryFilePath \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (FileNotFoundException | WrongFormatException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        new Duke(memoryFilePath).run();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        while (!isExit) { // duke.Duke takes in user input indefinitely until the user says \"bye\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                isExit \u003d c.isExit;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "shawn-nyk": 48
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.UnknownCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public static Command parse(String fullCommand) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String[] splitCommand \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (fullCommand.equals(\"bye\")) { // Exit the program"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else if (fullCommand.equals(\"list\")) { // List out task list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else if (splitCommand[0].equals(\"done\")) { // Done with a task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new DoneCommand(splitCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else if (splitCommand[0].equals(\"delete\")) { // Delete a task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new DeleteCommand(splitCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else if (splitCommand[0].equals(\"todo\")) { // Add To-Do task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new AddTodoCommand(fullCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else if (splitCommand[0].equals(\"event\")) { // Add duke.task.Event task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new AddEventCommand(fullCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else if (splitCommand[0].equals(\"deadline\")) { // Add duke.task.Deadline task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new AddDeadlineCommand(fullCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } else { // Unknown command entered"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return new UnknownCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 35
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Storage (String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public List\u003cString\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        File memoryFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (!memoryFile.exists()) { // If file is non-existent, either the .txt file or a directory in the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // filePath does not exist"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            boolean areExistentDirectories \u003d true; // Check if all directories specified in filePath exist"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            String[] splitPath \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            String testPath \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            String nonExistentDirectory \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            for (int i \u003d 0; i \u003c splitPath.length - 1; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                testPath +\u003d splitPath[i] + \"/\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                if (!new File(testPath).exists()) { // A directory specified in filePath does not exist"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    areExistentDirectories \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    nonExistentDirectory \u003d splitPath[i]; // The directory specified in filePath that does not"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    // exist"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            if (areExistentDirectories) { // All directories specified in memoryFilePath exists, only the .txt file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                // does not exist"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    Files.createFile(Path.of(filePath)); // Create the .txt file with location as stated in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    // filePath"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                throw new FileNotFoundException(\"ERROR: Could not load last save.\\nThe save file \\\"\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        + splitPath[splitPath.length - 1] + \"\\\" does not exist.\\nNow loading a new, empty task list\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        \".\\nA new save file \\\"\" + splitPath[splitPath.length - 1] + \"\\\" has been created with the\\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        \"following path: \\\"\" + filePath + \"\\\".\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            } else { // A directory specified in filePath does not exist so we should create it (and all its"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                // subdirectories if any)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    String fullPath \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    for (int i \u003d 0; i \u003c splitPath.length - 1; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        fullPath +\u003d splitPath[i] + \"/\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    Files.createDirectories(Path.of(fullPath)); // Create missing directory (and all its"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    // subdirectories if any) as specified by filePath"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    Files.createFile(Path.of(filePath)); // Create .txt file in newly created path"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                throw new FileNotFoundException(\"ERROR: Could not load last save.\\nPath specified for save file: \" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        \"\\\"\" + filePath + \"\\\"\\nThe directory \\\"\" + nonExistentDirectory + \"\\\"\\n(and hence all \" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        \"subdirectories of it, if any)\\ndoes not exist.\\nNow loading a new, empty task list.\\nA new \" +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        \"save file \\\"\" + splitPath[splitPath.length - 1] + \"\\\" has been created with the\\nfollowing \" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        \"path: \\\"\" + filePath + \"\\\".\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        // If the save file exists, we load the task list with tasks as specified in the save file"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        Scanner sc \u003d new Scanner(memoryFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            result.add(sc.nextLine());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Writes to save file as specified by memoryFilePath. Writing to save occurs every time the task list changes."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void writeToFile(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fw.write(task.stringToSaveInMemory() + \"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 95
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public TaskList() {}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public TaskList(List\u003cString\u003e listOfTasks) throws WrongFormatException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        initiateTaskList(listOfTasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private void initiateTaskList(List\u003cString\u003e listOfTasks) throws WrongFormatException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        for (String s : listOfTasks) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            String[] splitLine \u003d s.split(\"\\\\|\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            switch (splitLine[0]) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            case \"[T]\": // To-Do"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                taskList.add(new ToDo(splitLine[2], !splitLine[1].equals(\"0\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            case \"[E]\": // duke.task.Event"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                taskList.add(new Event(splitLine[2], splitLine[3], !splitLine[1].equals(\"0\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            case \"[D]\": // duke.task.Deadline"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                taskList.add(new Deadline(splitLine[2], LocalDateTime.parse(splitLine[3]).format(DateTimeFormatter"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                        .ofPattern(\"yyyy-MM-dd HHmm\")), !splitLine[1].equals(\"0\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                System.err.println(\"Error in last save. Now loading a new, empty task list.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Task getTask(int taskIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return taskList.get(taskIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Task removeTask(int taskIndex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return taskList.remove(taskIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public int getNumberOfTasks() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return taskList.isEmpty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            result.append(\"\\n\").append(index++).append(\".\").append(task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 78
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Star Bot\u0027s logo shown upon start up"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String LOGO \u003d \"     _______.___________.    ___     \" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \" .______      \\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"    /       |           |   /   \\\\     |   _  \\\\     \\n\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"   |   (----`---|  |----`  /  ^  \\\\    |  |_)  |    \\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"    \\\\   \\\\       |  |      /  /_\\\\  \\\\   |      /     \\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \".----)   |      |  |     /  _____  \\\\  |  |\\\\  \\\\----.\\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"|_______/       |__|    /__/     \\\\__\\\\ | _| `._____|\\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"                                                   \\n\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"         .______     ______   .___________.        \\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"         |   _  \\\\   /  __  \\\\  |           |        \\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"         |  |_)  | |  |  |  | `---|  |----`        \\n\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"         |   _  \u003c  |  |  |  |     |  |             \\n\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"         |  |_)  | |  `--\u0027  |     |  |             \\n\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"         |______/   \\\\______/      |__|             \\n\" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"                                                   \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Divider that delineates Star Bot\u0027s replies"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final String DIVIDER \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            \"------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private static final Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        System.out.println(LOGO + \"\\nHello, I\u0027m Star Bot! What can I do for \" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"you?\\nSay \\\"bye\\\" to exit.\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        showReply(\"Goodbye, see you again soon! :)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showError(Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        showReply(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Standardises the look of Star Bot\u0027s replies by wrapping it in"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * dividers"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showReply(String reply) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        System.out.println(DIVIDER + reply + \"\\n\" + DIVIDER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showReplyForAddTask(Task newTask, TaskList tasks) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        showReply(\"Got it. I\u0027ve added this task:\\n\" + newTask + \"\\nNow \" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"you have \" + tasks.getNumberOfTasks() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showReplyForDoneTask(Task doneTask) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        showReply(\"Nice! I\u0027ve marked this task as done:\\n\" + doneTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void showReplyForDeleteTask(Task removedTask, TaskList tasks) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        showReply(\"Noted. I\u0027ve removed this task:\\n\" + removedTask +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"\\nNow you have \" + tasks.getNumberOfTasks() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     * Formats the task list to be shown to the user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String showTaskList(TaskList tasks) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            return \"Your list is empty! Let\u0027s add some tasks!\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return \"Here are the tasks in your list:\" + tasks.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 83
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 4
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.DeadlineWrongFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class AddDeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public AddDeadlineCommand(String fullCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DeadlineWrongFormatException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            String[] splitLineIntoTwo \u003d fullCommand.split(\"/by\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task newTask \u003d new Deadline(splitLineIntoTwo[0]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    .substring(9).trim(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    splitLineIntoTwo[1].trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            tasks.addTask(newTask);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            ui.showReplyForAddTask(newTask, tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (IndexOutOfBoundsException | WrongFormatException | DateTimeException | NumberFormatException e)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        { // duke.command.Command is in a wrong format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new DeadlineWrongFormatException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 41
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.EventWrongFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public AddEventCommand(String fullCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws EventWrongFormatException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            String[] splitLineIntoTwo \u003d fullCommand.split(\"/at\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task newTask \u003d new Event(splitLineIntoTwo[0]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    .substring(6).trim(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                    splitLineIntoTwo[1].trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            tasks.addTask(newTask);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            ui.showReplyForAddTask(newTask, tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (IndexOutOfBoundsException | WrongFormatException e)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        { // duke.command.Command is in a wrong format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new EventWrongFormatException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 40
    }
  },
  {
    "path": "src/main/java/duke/command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.TodoWrongFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class AddTodoCommand extends AddCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public AddTodoCommand(String fullCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws TodoWrongFormatException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task newTask \u003d new ToDo(fullCommand.substring(5).trim());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            tasks.addTask(newTask);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            ui.showReplyForAddTask(newTask, tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (IndexOutOfBoundsException | WrongFormatException e)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        { // duke.command.Command is in a wrong format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new TodoWrongFormatException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 37
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public boolean isExit \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 15
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.DeleteWrongFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.TaskIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String[] splitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public DeleteCommand(String[] splitCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.splitCommand \u003d splitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DeleteWrongFormatException,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            TaskIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            if (splitCommand.length !\u003d 2) { // If command is in a wrong format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                throw new DeleteWrongFormatException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(splitCommand[1]) - 1; // Index of task in the task list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task removedTask \u003d tasks.removeTask(taskIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            ui.showReplyForDeleteTask(removedTask, tasks);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (NumberFormatException e) { // Second argument of"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // command was not a number, e.g. \"delete X\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new DeleteWrongFormatException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (IndexOutOfBoundsException e) { // User requests"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // for a task with an index not within the current"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // task list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new TaskIndexOutOfBoundsException(splitCommand[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 43
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.DoneWrongFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.TaskIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String[] splitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public DoneCommand(String[] splitCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.splitCommand \u003d splitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DoneWrongFormatException,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            TaskIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            if (splitCommand.length !\u003d 2) { // If command is in a wrong format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                throw new DoneWrongFormatException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(splitCommand[1]) - 1; // Index of task in the task list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task completedTask \u003d tasks.getTask(taskIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            completedTask.markAsDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            ui.showReplyForDoneTask(completedTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (NumberFormatException e) { // Second argument of command was not a number, e.g. \"done X\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new DoneWrongFormatException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (IndexOutOfBoundsException e) { // User requests for a task with an index not within the current task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            // list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new TaskIndexOutOfBoundsException(splitCommand[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 43
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 17
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ui.showReply(ui.showTaskList(tasks));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 13
    }
  },
  {
    "path": "src/main/java/duke/command/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class UnknownCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        ui.showError(new UnknownCommandException());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/DeadlineWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DeadlineWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public DeadlineWrongFormatException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"deadline\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \"description of a task in the \" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"following format:\\ntask /by YYYY-MM-DD hhmm\\nwhere hh is hours and mm is minutes.\\nPlease ensure \" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"that the date and time are valid.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/DeleteWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DeleteWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public DeleteWrongFormatException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"delete\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \"single whitespace and an integer\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/DoneWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DoneWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public DoneWrongFormatException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"done\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \"single whitespace and an integer\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return \"OOPS!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/EventWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class EventWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public EventWrongFormatException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"event\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \"description of a task in the \" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"following format:\\nevent /at time.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskIndexOutOfBoundsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class TaskIndexOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public TaskIndexOutOfBoundsException(String index) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \" There is no task no. \" + index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 14
    }
  },
  {
    "path": "src/main/java/duke/exception/TodoWrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class TodoWrongFormatException extends WrongFormatException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public TodoWrongFormatException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(\"todo\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \"description of a task.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 13
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \" I\u0027m sorry, but I \" +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"don\u0027t know what that means :(\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 10
    }
  },
  {
    "path": "src/main/java/duke/exception/WrongFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class WrongFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    String commandName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public WrongFormatException(String commandName) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.getMessage() + \" The \" + commandName + \" \" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                \"command has to be followed by a\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 15
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected LocalDateTime dateAndTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Deadline(String description, String by) throws WrongFormatException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(description, \"[D]\", \"deadline\", false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String[] bySplit \u003d by.split(\" \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String byDate \u003d bySplit[0];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String byTime \u003d bySplit[1];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.date \u003d LocalDate.parse(byDate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.dateAndTime \u003d this.date.atTime(Integer.parseInt(byTime.substring(0,2)),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                Integer.parseInt(byTime.substring(2,4)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) throws WrongFormatException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(description, \"[D]\", \"deadline\", isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String[] bySplit \u003d by.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String byDate \u003d bySplit[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        String byTime \u003d bySplit[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.date \u003d LocalDate.parse(byDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.dateAndTime \u003d this.date.atTime(Integer.parseInt(byTime.substring(0,2)),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                Integer.parseInt(byTime.substring(2,4)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String stringToSaveInMemory() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.stringToSaveInMemory() + \"|\" + dateAndTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.toString() + \" (by: \" + dateAndTime.format(DateTimeFormatter.ofPattern(\"d MMM yyyy @ hh:mma\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 44
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Event(String description, String at) throws WrongFormatException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(description, \"[E]\", \"event\", false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Event(String description, String at, boolean isDone) throws WrongFormatException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(description, \"[E]\", \"event\", isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String stringToSaveInMemory() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.stringToSaveInMemory() + \"|\" + at;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 28
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * Encapsulates a to-do list type of task for the duke.Duke program. A task is"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * inclusive of a textual description and a boolean flag to mark whether it has"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " * been completed or not."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected String description; // Describes the task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected boolean isDone; // Marks whether the task is completed or not"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected String taskTypeSymbol; // [T], [D] or [E]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    protected String taskTypeName; // To-Do, duke.task.Deadline or duke.task.Event task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public Task(String description, String taskTypeSymbol, String taskTypeName, boolean isDone)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throws WrongFormatException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            throw new WrongFormatException(taskTypeName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.taskTypeSymbol \u003d taskTypeSymbol;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        this.taskTypeName \u003d taskTypeName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return (isDone ? \"✓\" : \"✘\"); //return tick or X symbols"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String stringToSaveInMemory() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return taskTypeSymbol + \"|\" + (isDone ? 1 : 0) + \"|\" + description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        return taskTypeSymbol + \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 43
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public ToDo(String description) throws WrongFormatException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(description, \"[T]\", \"todo\", false);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public ToDo(String description, boolean isDone) throws WrongFormatException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        super(description, \"[T]\", \"todo\", isDone);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 14
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.command.UnknownCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validByeCommand_exitCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidByeCommandWrongCasing_unknownCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"Bye\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validListCommand_listCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidListCommandWrongCasing_unknownCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"LIST\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validDoneCommand_doneCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"done 2\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDoneCommandWithExtraWhitespaces_doneCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"done    4\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDoneCommandNoTaskIndex_doneCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"done\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDoneCommandWrongCasing_unknownCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"Done 3\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDoneCommandNoWhitespace_unknownCommand() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"done3\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validDeleteCommand_deleteCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"delete 1\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeleteCommandWithExtraWhitespaces_deleteCommand() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"delete    4\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeleteCommandNoTaskIndex_deleteCommand() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"delete\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeleteCommandWrongCasing_unknownCommand() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"Delete 5\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeleteCommandNoWhitespace_unknownCommand() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"delete3\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validTodoCommand_addTodoCommand() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"todo read book\") instanceof AddTodoCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validTodoCommandExtraWhitespaces_addTodoCommand() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"todo     read book    \") instanceof AddTodoCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidTodoCommandNoDescription_addTodoCommand() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"todo\") instanceof AddTodoCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidTodoCommandDescriptionIsWhitespace_addTodoCommand() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"todo      \") instanceof AddTodoCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidTodoCommandWrongCasing_unknownCommand() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"Todo read book\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidTodoCommandNoWhitespace_unknownCommand() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"todoread book\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validEventCommand_addEventCommand() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event this /at there\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validEventCommandExtraWhitespaces_addEventCommand() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event    this     /at    there\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validEventCommandNoWhitespacesAroundAt_addEventCommand() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event this/atthere\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidEventCommandNoDescription_addEventCommand() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidEventCommandDescriptionNoAt_addEventCommand() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event this there\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidEventCommandDescriptionNoAt2_addEventCommand() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event this /by there\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidEventCommandDescriptionNoVenue_addEventCommand() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event this /at\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidEventCommandDescriptionNoTask_addEventCommand() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"event /at there\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidEventCommandWrongCasing_unknownCommand() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"Event this /at there\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidEventCommandNoWhitespace_unknownCommand() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"eventthis /at there\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validDeadlineCommand_addDeadlineCommand() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline this /by then\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validDeadlineCommandExtraWhitespaces_addDeadlineCommand() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline    this     /by    then\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_validDeadlineCommandNoWhitespacesAroundAt_addDeadlineCommand() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline this/bythen\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeadlineCommandNoDescription_addDeadlineCommand() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeadlineCommandDescriptionNoBy_addDeadlineCommand() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline this then\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeadlineCommandDescriptionNoBy2_addDeadlineCommand() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline this /at then\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeadlineCommandDescriptionNoVenue_addDeadlineCommand() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline this /by\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeadlineCommandDescriptionNoTask_addDeadlineCommand() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadline /by then\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeadlineCommandWrongCasing_unknownCommand() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"Deadline this /by then\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void parse_invalidDeadlineCommandNoWhitespace_unknownCommand() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        assertTrue(Parser.parse(\"deadlinethis /by then\") instanceof UnknownCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 218
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_validInput_deadlineObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"homework\", \"2020-09-10 2359\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_invalidInputWrongDateFormat_dateTimeExceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"homework\", \"10-09-2020 2359\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException | DateTimeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(e instanceof DateTimeException);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_invalidInputWrongTimeFormat_numberFormatExceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"homework\", \"2020-09-10 11:59pm\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException | NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(e instanceof NumberFormatException);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_invalidInputWrongDateTimeFormat_dateTimeExceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"homework\", \"tomorrow 9pm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException | DateTimeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(e instanceof DateTimeException);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_invalidInputNoDateTimeSpecified_arrayIndexOutOfBoundsExceptionThrown() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"homework\", \"then\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(e instanceof ArrayIndexOutOfBoundsException);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_invalidInputNoDescription_wrongFormatExceptionThrown() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"\", \"2020-09-10 11:59pm\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_invalidInputNoDateTime_arrayIndexOutOfBoundsExceptionThrown() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"homework\", \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(e instanceof ArrayIndexOutOfBoundsException);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newDeadline_invalidInputNoDescriptionNorDateTime_wrongFormatExceptionThrown() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Deadline(\"\", \"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 92
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newEvent_validInput_eventObject() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Event(\"meeting\", \"NUS\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newEvent_invalidInputNoDescription_wrongFormatExceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Event(\"\", \"NUS\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newEvent_invalidInputNoVenue_eventObject() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Event(\"meeting\", \"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newEvent_invalidInputNoDescriptionNorVenue_wrongFormatExceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Event(\"\", \"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 50
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newTask_validInput_taskObject() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Task(\"do homework\", \"[T]\", \"todo\", false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newTask_invalidInputNoDescription_taskObject() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new Task(\"\", \"[T]\", \"todo\", false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void getStatusIcon_taskNotDone_getCross() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task task \u003d new Task(\"do homework\", \"[T]\", \"todo\", false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertEquals(\"✘\", task.getStatusIcon());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void getStatusIcon_taskDone_getTick() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task task \u003d new Task(\"do homework\", \"[T]\", \"todo\", true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertEquals(\"✓\", task.getStatusIcon());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void testMarkAsDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task task \u003d new Task(\"do homework\", \"[T]\", \"todo\", false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertEquals(\"✓\", task.getStatusIcon());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void testStringToSaveInMemory() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task task \u003d new Task(\"do homework\", \"[T]\", \"todo\", false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertEquals(\"[T]|0|do homework\", task.stringToSaveInMemory());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            Task task \u003d new Task(\"do homework\", \"[T]\", \"todo\", false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertEquals(\"[T][✘] do homework\", task.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 80
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import duke.exception.WrongFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newToDo_validInput_toDoObject() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new ToDo(\"read book\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    public void newToDo_invalidInputNoDescription_wrongFormatExceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            new ToDo(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        } catch (WrongFormatException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 30
    }
  },
  {
    "path": "text-ui-test/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "[T]|0|first task"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "blah"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todooo"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event disco"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event /at"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event disco /at"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event /at Orchard Rd"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "event disco /at Orchard Rd"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework /by"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline /by tomorrow"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework /by tomorrow"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework /by 2020-8-23 2359"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework /by 2020-08-23 1370"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework /by 23 Aug 2020 2359"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "deadline homework /by 2020-08-23 2359"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "done 99"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 21"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "todo first task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "shawn-nyk": 45
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Command\\*.java ..\\src\\main\\java\\duke\\Exception\\*.java ..\\src\\main\\java\\duke\\Task\\*.java ..\\src\\main\\java\\duke\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shawn-nyk"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "shawn-nyk": 5
    }
  }
]
