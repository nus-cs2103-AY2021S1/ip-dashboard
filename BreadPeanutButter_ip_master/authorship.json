[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.0.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "run {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 18,
      "-": 47
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Represents a task which has a deadline."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private LocalDate deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected Deadline(String task, LocalDate deadline) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Returns the task description of this Deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @return String of task description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected String getTask() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                super.isDone() ? \"\\u2713\" : \"\\u2717\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                getTask(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                deadline.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 35
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Label label;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final static Image USER_IMAGE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            new Image(new File(\"src/main/resources/images/user.png\").toURI().toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final static Image PEANUT_IMAGE \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            new Image(new File(\"src/main/resources/images/peanut.png\").toURI().toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public DialogBox(String text, Image img, Color backgroundColor) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        label.setText(text);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        displayPicture.setClip(new Circle(50, 50, 50));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.setBackground(new Background(new BackgroundFill(backgroundColor,null,null)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static DialogBox getUserDialog(String text) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, USER_IMAGE, Color.NAVAJOWHITE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static DialogBox getDukeDialog(String text) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new DialogBox(text, PEANUT_IMAGE, Color.DODGERBLUE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 71
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Represents a Personal Assistant Chatbot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * It keeps track of various tasks to be done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/Duke.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public Duke() throws FileNotFoundException{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.storage \u003d new Storage(FILE_PATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.taskList \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.parser \u003d new Parser(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected String getResponseForGui(String input) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String response \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            Ui ui \u003d parser.parseUserInput(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            response \u003d ui.getMessage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } catch (DukeException | IOException error) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            response \u003d Ui.makeErrorUi(error).getMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected void checkFilePath() throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (!Files.exists(Paths.get(\"data\"))) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            Files.createDirectory(Paths.get(\"data\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (!Files.exists(Paths.get(FILE_PATH))) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            Files.createFile(Paths.get(FILE_PATH));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Initiates and runs the main programme."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void run() throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        checkFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Ui.makeStartUi().printMessage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                Ui ui \u003d parser.parseUserInput(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                ui.printMessage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            } catch (DukeException | IOException error) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                Ui.makeErrorUi(error).printMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Ui.makeEndUi().printMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 77,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Represents a class for all specialised Duke exceptions."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 9
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Represents an event task at a certain time."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected Event(String task, String time) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Returns the task description of this Event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @return String of task description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected String getTask() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s)\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                super.isDone() ? \"\\u2713\" : \"\\u2717\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                getTask(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                time);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 32
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 9
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public Main() throws FileNotFoundException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void start(Stage stage) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        duke.checkFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            FXMLLoader fxmlLoader \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 35
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                DialogBox.getDukeDialog(Ui.makeStartUi().getMessage())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            String response \u003d duke.getResponseForGui(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    DialogBox.getUserDialog(input),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    DialogBox.getDukeDialog(response)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 55
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Represents a parser to make sense of user input and saved data."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private TaskList list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected Parser(){}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected Parser(TaskList list) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Parses a String and creates a task based on the String."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Used to recreate tasks from previously saved data upon start up."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param line The line which is to be parsed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @return Task object as described by the line."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected Task parseFileData(String line) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        char taskType \u003d line.charAt(3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        boolean isDone \u003d line.charAt(6) \u003d\u003d \u0027\\u2713\u0027;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (taskType \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            task \u003d new ToDo(line.substring(9));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } else if (taskType \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            int index \u003d line.indexOf(\" (at: \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            String time \u003d line.substring(index + 6, line.length() - 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            task \u003d new Event(line.substring(9, index), time);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        } else if (taskType \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            int index \u003d line.indexOf(\" (by: \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            String date \u003d line.substring(index + 6, line.length() - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            LocalDate localDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"d MMM yyyy\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            task \u003d new Deadline(line.substring(9, index), localDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            task.markDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Parses a String and performs actions based on the String."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Used to process user input and commands."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param input The user input which is to be parsed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected Ui parseUserInput(String input) throws DukeException, IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String uiMessage \u003d \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                uiMessage +\u003d \"Here are your tasks:\\n\" + list;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            } else if (input.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    int listIndex \u003d Integer.parseInt(input.substring(5));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    uiMessage +\u003d list.markTaskDone(listIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                } catch (Exception error) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please choose a valid task index to mark as done.\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            } else if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                if (input.equals(\"todo\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                ToDo toDoTask \u003d new ToDo(input.substring(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                uiMessage +\u003d list.addTask(toDoTask);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            } else if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                if (input.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                int index \u003d input.indexOf(\"/by\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                String task \u003d input.substring(9, index - 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                LocalDate deadline \u003d LocalDate.parse(input.substring(index + 4),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                Deadline deadlineTask \u003d new Deadline(task, deadline);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                uiMessage +\u003d list.addTask(deadlineTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                if (input.equals(\"event\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    throw new DukeException(\"OOPS!!! The description of an event cannot be empty.\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                int index \u003d input.indexOf(\"/at\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                String task \u003d input.substring(6, index - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                String time \u003d input.substring(index + 4);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                Event eventTask \u003d new Event(task, time);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                uiMessage +\u003d list.addTask(eventTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            } else if (input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    int listIndex \u003d Integer.parseInt(input.substring(7));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    uiMessage +\u003d list.deleteTask(listIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                } catch (Exception error) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please choose a valid task index to delete.\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            } else if (input.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                if (input.equals(\"find\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please give me a keyword to search.\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                uiMessage +\u003d list.findTask(input.substring(5));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                //unrecognised command"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return Ui.makeUi(uiMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 110
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Represents a storage object used to manage saved data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected Storage(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Loads the saved content from the filePath."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @return Scanner object that can be used to read the file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected Scanner load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new Scanner(file);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Saves the updated tasks into the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param tasks The String of updated tasks to be saved."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected void saveTasks(String tasks) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        fw.write(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 40
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Represents an abstract task object with basic task properties."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    abstract protected String getTask();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Marks the task object as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected void markDone() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Checks if the task is done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected boolean isDone() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 25
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Represents a list of tasks to keep track of."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * A task is represented as a Task object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    TaskList(Storage storage) throws FileNotFoundException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Scanner scanner \u003d storage.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            String taskString \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            Task task \u003d parser.parseFileData(taskString);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            list.add(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Adds task to the task list and saves it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected String addTask(Task task) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        //System.out.println(\"Added: \" + task + \"\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        storage.saveTasks(toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return \"Added: \" + task + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param listIndex Index of the task in the list to be marked as done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected String markTaskDone(int listIndex) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            Task task \u003d list.get(listIndex - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            task.markDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            //System.out.printf(\"Hurray! %s is now done.\\n\", task.getTask());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            //System.out.println(task + \"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            storage.saveTasks(toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return String.format(\"Hurray! %s is now done.\\n%s\\n\", task.getTask(), task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Deletes a task from the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param listIndex Index of the task in the list to be marked deleted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected String deleteTask(int listIndex) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            Task task \u003d list.get(listIndex - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            list.remove(listIndex - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            //System.out.printf(\"Okay %s has been deleted.\\n\", task.getTask());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            //System.out.println(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            //System.out.println(\"You now have \" + list.size() + \" tasks.\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            storage.saveTasks(toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            return String.format(\"Okay %s has been deleted.\\n\", task.getTask())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    + task + \"\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    + \"You now have \" + list.size() + \" tasks.\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Finds tasks that match a specified keyword."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @param keyword The keyword to be matched."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected String findTask(String keyword) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String uiMessage \u003d \"Here are the matching tasks I could find:\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            String description \u003d task.getTask();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            if (description.contains(keyword)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                uiMessage +\u003d count++ + \".\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        if (count \u003d\u003d 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            uiMessage \u003d \"Sorry, I could not find any matching tasks :(\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return uiMessage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            message +\u003d String.format(\"%d.%s\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                    , count++, task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 101
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Represents a todo task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private final String task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected ToDo(String task) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * Returns the task description of this ToDo."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     * @return String of task description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected String getTask() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return String.format(\"[T][%s] %s\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                super.isDone() ? \"\\u2713\" : \"\\u2717\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                getTask());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 28
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " * Represents the user interface that deals with user interactions."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    private Ui(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected static Ui makeStartUi() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new Ui(\"Hi there! I\u0027m Peanut.\\nHow can I be of assistance?\\n\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected static Ui makeEndUi() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new Ui(\"\\nBye! Sad to see you go :(\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected static Ui makeErrorUi(Exception exception) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new Ui(exception.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected static Ui makeUi(String message) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return new Ui(message);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected void printMessage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    protected String getMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 36
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"5000.000\" maxWidth\u003d\"1.7976931348623157E308\" fillHeight\u003d\"true\" prefWidth\u003d\"400.0\" spacing\u003d\"10.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        \u003cLabel fx:id\u003d\"label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    void getTaskTest() throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2030, 8, 27);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Dummy Task\", date);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(\"Dummy Task\", deadline.getTask());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    void toStringTest() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2030, 8, 7);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Dummy Task\", date);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(\"[D][\\u2717] Dummy Task (by: 07 Aug 2030)\" , deadline.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    void toStringDoneTest() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        LocalDate date \u003d LocalDate.of(1990, 1, 14);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Birthday\", date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        deadline.markDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(\"[D][\\u2713] Birthday (by: 14 Jan 1990)\" , deadline.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 39
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    void loadDataToDoStringTest(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Task task \u003d parser.parseFileData(\"4.[T][\\u2713] Watch TV\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(\"[T][\\u2713] Watch TV\", task.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    void loadDataDeadlineTaskTest(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Task task \u003d parser.parseFileData(\"4.[D][\\u2713] Assignment 3 (by: 12 Apr 1826)\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(\"Assignment 3\", task.getTask());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    void loadDataDeadlineStringTest(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Task task \u003d parser.parseFileData(\"4.[D][\\u2717] Watch TV (by: 05 Dec 2090)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(\"[D][\\u2717] Watch TV (by: 05 Dec 2090)\", task.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    void loadDataEventTaskTest(){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Task task \u003d parser.parseFileData(\"4.[E][\\u2713] Hackathon (at: Saturday whole day)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(\"Hackathon\", task.getTask());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    void loadDataEventStringTest(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        Task task \u003d parser.parseFileData(\"4.[E][\\u2713] Big Event (at: Friday 4-6pm)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "        assertEquals(\"[E][\\u2713] Big Event (at: Friday 4-6pm)\", task.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 47
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "todo My Task"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "event Big Event /at Tuesday 3pm-9pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "deadline Homework /by Wednesday"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "todo More Tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "delete"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "event"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "rubbish"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "deadline Essay /by Friday"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "event Small Event /at Thursday 12pm-12am"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "delete 5"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 26
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BreadPeanutButter"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "BreadPeanutButter": 3,
      "-": 37
    }
  }
]
