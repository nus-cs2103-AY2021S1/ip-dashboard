[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    mainClassName \u003d \"botbot.Botbot\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    archiveBaseName \u003d \"botbot\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 3,
      "-": 43
    }
  },
  {
    "path": "src/main/java/botbot/Botbot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.exceptions.BotbotException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents the chatbot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Botbot {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a chatbot."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param filePath Filepath where data of the chat is stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Botbot(String filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Runs the chatbot."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        boolean isRunning \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        while (isRunning) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                String input \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                c.execute(storage, tasks, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                isRunning \u003d !ExitCommand.isExit(c);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            } catch (BotbotException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                ui.printStatus(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        new Botbot(\"data/botbot.txt\").run();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 45,
      "-": 2
    }
  },
  {
    "path": "src/main/java/botbot/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.InvalidCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.commands.MarkAsDoneCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.exceptions.EmptySearchException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.exceptions.EmptyTaskException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.exceptions.EmptyTaskNumberException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.exceptions.NoSuchCommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Todo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents a parser."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static final String NO_TIME_FLAG \u003d String.format(\" 0%.0f\", Math.PI * Math.pow(10, 13));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Parses the given user input into a command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param input Input to be parsed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Command parsed from input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws EmptyTaskException If no task description is provided when adding task to task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws EmptyTaskNumberException If no task number is provided when deleting or marking task as done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws InvalidFormatException If input is of an invalid format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws NoSuchCommandException If input does not match any command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    static Command parseCommand(String input) throws EmptyTaskException, EmptyTaskNumberException,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            InvalidFormatException, NoSuchCommandException, EmptySearchException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (input.length() \u003e\u003d 8 \u0026\u0026 input.startsWith(\"delete \")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                int id \u003d parseCommandId(input, \"delete \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                return new DeleteCommand(id);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                return new InvalidCommand(\"    oops! invalid task number!\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (input.equals(\"delete\") || (input.length() \u003e\u003d 7 \u0026\u0026 input.startsWith(\"delete \"))) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new EmptyTaskNumberException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (input.length() \u003e\u003d 6 \u0026\u0026 input.startsWith(\"done \")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                int id \u003d parseCommandId(input, \"done \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                return new MarkAsDoneCommand(id);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                return new InvalidCommand(\"    oops! invalid task number!\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (input.equals(\"done\") || (input.length() \u003e\u003d 5 \u0026\u0026 input.startsWith(\"done \"))) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new EmptyTaskNumberException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (input.length() \u003e\u003d 6 \u0026\u0026 input.startsWith(\"todo \")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new AddCommand(new Todo(input));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (input.equals(\"todo\") || (input.length() \u003e\u003d 5 \u0026\u0026 input.startsWith(\"todo \"))) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new EmptyTaskException(\"a todo\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (input.length() \u003e\u003d 10 \u0026\u0026 input.startsWith(\"deadline \")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (!input.contains(\" /by \")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                throw new InvalidFormatException(Deadline.FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new AddCommand(new Deadline(input));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (input.equals(\"deadline\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                || (input.length() \u003e\u003d 9 \u0026\u0026 input.startsWith(\"deadline \"))) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new EmptyTaskException(\"a deadline\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (input.length() \u003e\u003d 7 \u0026\u0026 input.startsWith(\"event \")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (!input.contains(\" /at \")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                throw new InvalidFormatException(Event.FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new AddCommand(new Event(input));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (input.equals(\"event\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                || (input.length() \u003e\u003d 6 \u0026\u0026 input.startsWith(\"event \"))) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new EmptyTaskException(\"an event\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (input.length() \u003e\u003d 6 \u0026\u0026 input.startsWith(\"find \")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            String keyword \u003d input.substring(5);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return new FindCommand(keyword);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else if (input.equals(\"find\") || (input.length() \u003e\u003d 5 \u0026\u0026 input.startsWith(\"find \"))) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new EmptySearchException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new NoSuchCommandException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Parses the input for a task ID."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param input Input to be parsed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param command Command parsed from input."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Task ID parsed from input."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    static int parseCommandId(String input, String command) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return Integer.parseInt(input.substring(command.length())) - 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Parses the input for a date (and a time)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param input Input to be parsed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param identifier Identifier which comes before the date."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Date (and time) parsed from input."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws DateTimeParseException If input does not follow expected datetime format."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static LocalDateTime parseDateTime(String input, String identifier) throws DateTimeParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        int index \u003d input.indexOf(identifier) + identifier.length() + 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String dateStr \u003d input.substring(index).strip();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (dateStr.length() \u003c 13) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            dateStr +\u003d NO_TIME_FLAG;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return LocalDateTime.parse(dateStr, DateTimeFormatter.ofPattern(\"d-M-yyyy HHmm[ssn]\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 121
    }
  },
  {
    "path": "src/main/java/botbot/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents the storage of data from the chatbot."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a storage at the specified filepath."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param filePath Filepath where storage is created."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    Storage(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Loads any existing data at the filepath."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * If there is no existing data, a new file is created at the filepath."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return List of existing tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    List\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (!file.isFile()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                return new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return read();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Reads the existing data at the filepath."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return List of existing tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    List\u003cTask\u003e read() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        List\u003cTask\u003e list \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            FileInputStream file \u003d new FileInputStream(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                String data \u003d sc.nextLine();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                String[] dataArr \u003d data.split(\"\\\\|\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                char taskType \u003d dataArr[0].charAt(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                boolean isDone \u003d dataArr[1].equals(\"1\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                String description \u003d dataArr[2];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                if (taskType \u003d\u003d Todo.TYPE_CODE) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    list.add(new Todo(description, isDone));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                } else if (taskType \u003d\u003d Deadline.TYPE_CODE) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    String by \u003d dataArr[3];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    list.add(new Deadline(description, isDone, by));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                } else if (taskType \u003d\u003d Event.TYPE_CODE) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    String at \u003d dataArr[3];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    list.add(new Event(description, isDone, at));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            System.out.println(\"    oops! your data file is missing!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Saves the current task list in the storage."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list to be saved."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void save(TaskList tasks) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                List\u003cString\u003e temp \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                temp.add(String.valueOf(task.getType()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                temp.add(task.getStatus());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                temp.add(task.getDescription());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    temp.add(task.getBy());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    temp.add(task.getAt());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                String data \u003d String.join(\"|\", temp);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                fw.write(data + \"\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 114
    }
  },
  {
    "path": "src/main/java/botbot/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents the task list in the chatbot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class TaskList extends LinkedList\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a task list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Tasks in task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public TaskList(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Deletes a task in the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param id ID of task to be deleted."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void delete(int id) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        remove(id);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (int i \u003d 0; i \u003c size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            result +\u003d String.format(\"      %s. %s\\n\", i + 1, this.get(i));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 45
    }
  },
  {
    "path": "src/main/java/botbot/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents the UI of the chatbot."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates the UI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    Ui() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Prints the welcome message to the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    void greet() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String logo \u003d \"\\n.-. .-\u0027)                .-\u0027) _  .-. .-\u0027)                .-\u0027) _\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + \"\\\\  ( OO )              (  OO) ) \\\\  ( OO )              (  OO) )\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + \" ;-----.\\\\  .-\u0027),-----. /     \u0027._ ;-----.\\\\  .-\u0027),-----. /     \u0027._\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + \" | .-.  | ( OO\u0027  .-.  \u0027|\u0027--...__)| .-.  | ( OO\u0027  .-.  \u0027|\u0027--...__)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + \" | \u0027-\u0027 /_)/   |  | |  |\u0027--.  .--\u0027| \u0027-\u0027 /_)/   |  | |  |\u0027--.  .--\u0027\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + \" | .-. `. \\\\_) |  | |  |   |  |   | .-. `. \\\\_) |  | |  |   |  |\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + \" | |  \\\\  |  \\\\ |  | |  |   |  |   | |  \\\\  |  \\\\ |  | |  |   |  |\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + \" | \u0027--\u0027  /   `\u0027  \u0027-\u0027  \u0027   |  |   | \u0027--\u0027  /   `\u0027  \u0027-\u0027  \u0027   |  |\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + \" `------\u0027      `-----\u0027    `--\u0027   `------\u0027      `-----\u0027    `--\u0027\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        System.out.println(\"helluu! I\u0027m\\n\" + logo + \"\\nwhat would you like me to do?\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Prints the exit message to the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        System.out.println(\"    bye! see you soon!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Reads the next command from the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Input by user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    String getUserInput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Prints the status of a command\u0027s execution."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param status Status of command execution."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void printStatus(String status) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        System.out.println(status);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 58
    }
  },
  {
    "path": "src/main/java/botbot/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Adds a task to the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an add command to add the specified task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the add command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage to save updated task list to."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list to add task to."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to print status of execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        int numOfTasks \u003d tasks.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ui.printStatus(String.format(\"    ok! I\u0027ve added this task:\\n      %s\\n    you now have %d task\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                + (numOfTasks \u003e 1 ? \"s\" : \"\") + \" in your list\\n\", task, numOfTasks));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 38
    }
  },
  {
    "path": "src/main/java/botbot/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents a command with the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage to save task list to."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list to execute command on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to print status of execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public abstract void execute(Storage storage, TaskList tasks, Ui ui);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 19
    }
  },
  {
    "path": "src/main/java/botbot/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Deletes a task from the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a delete command to delete the specified task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param id ID of task to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public DeleteCommand(int id) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the delete command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage to save updated task list to."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list to delete task from."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to print status of execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Task task \u003d tasks.get(id);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            tasks.delete(id);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            int numOfTasks \u003d tasks.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            ui.printStatus(String.format(\"    ok! I\u0027ve removed this task:\\n      %s\\n    you now have \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                    + \"%d task\" + (numOfTasks \u003e 1 ? \"s\" : \"\") + \" in your list\\n\", task, numOfTasks));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            ui.printStatus(\"    oops! invalid task number!\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 43
    }
  },
  {
    "path": "src/main/java/botbot/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Terminates the bot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the exit command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage to save task list to."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list of the bot."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to exit from."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ui.exit();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns true if the given command is an exit command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param command Command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return True if given command is exit command, false otherwise."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return command instanceof ExitCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 32
    }
  },
  {
    "path": "src/main/java/botbot/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        TaskList matches \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                matches.add(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ui.printStatus(\"    here are the matches in your list:\\n\" + matches);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 25
    }
  },
  {
    "path": "src/main/java/botbot/commands/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents an invalid command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private String error;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an invalid command to alert the user of an error."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param error Error to be printed to user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public InvalidCommand(String error) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the invalid command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage of the bot."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list of the bot."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to print error message."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        ui.printStatus(error);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 33
    }
  },
  {
    "path": "src/main/java/botbot/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Lists all tasks in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the list command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage of the bot."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list to list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to print list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (tasks.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            ui.printStatus(\"    your list is empty!\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            ui.printStatus(\"    here\u0027s your list:\\n\" + tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 26
    }
  },
  {
    "path": "src/main/java/botbot/commands/MarkAsDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Marks a task in the task list as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class MarkAsDoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a mark as done command to mark the specified task as done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param id ID of task to be marked as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public MarkAsDoneCommand(int id) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Executes the mark as done command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param storage Storage to save updated task list to."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param tasks Task list to mark task as done from."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param ui Ui to print status of execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void execute(Storage storage, TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            Task task \u003d tasks.get(id);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            ui.printStatus(\"    nice! I\u0027ve marked this task as done:\\n      \" + task + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            ui.printStatus(\"    oops! invalid task number!\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 41
    }
  },
  {
    "path": "src/main/java/botbot/exceptions/BotbotException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents an error specific to the bot."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class BotbotException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a botbot exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param e Error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public BotbotException(String e) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(\"    oops! \" + e + \"\\n\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 15
    }
  },
  {
    "path": "src/main/java/botbot/exceptions/EmptySearchException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class EmptySearchException extends BotbotException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public EmptySearchException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(\"the search keyword cannot be empty!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 7
    }
  },
  {
    "path": "src/main/java/botbot/exceptions/EmptyTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents an error when a task description is not provided."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class EmptyTaskException extends BotbotException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an empty task exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param e Type of task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public EmptyTaskException(String e) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(\"the description of \" + e + \" cannot be empty!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 15
    }
  },
  {
    "path": "src/main/java/botbot/exceptions/EmptyTaskNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents an error when a task number is not provided when deleting or marking a task as done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class EmptyTaskNumberException extends BotbotException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an empty task number exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public EmptyTaskNumberException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(\"the task number to be marked as done cannot be empty!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 13
    }
  },
  {
    "path": "src/main/java/botbot/exceptions/InvalidFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents an error when an invalid format is used when adding a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class InvalidFormatException extends BotbotException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an invalid format exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param e Valid format for type of task to be added."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public InvalidFormatException(String e) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(\"invalid format! please follow \u0027\" + e + \"\u0027!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 15
    }
  },
  {
    "path": "src/main/java/botbot/exceptions/NoSuchCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents an error when the provided command does not exist."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class NoSuchCommandException extends BotbotException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a no such command exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public NoSuchCommandException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(\"sorry, I don\u0027t know what that means!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 13
    }
  },
  {
    "path": "src/main/java/botbot/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents a deadline with a description, deadline and completion status."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final char TYPE_CODE \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String FORMAT \u003d \"deadline \u003cdescription\u003e /by \u003cD-M-YYYY HHmm\u003e (eg. 17-3-2020 0945 \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"or 3-4-2020 with no time specified)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private LocalDateTime by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param command Command to create deadline."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws InvalidFormatException If command is of invalid format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Deadline(String command) throws InvalidFormatException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(TYPE_CODE, extractNameFromCommand(command));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            by \u003d Parser.parseDateTime(command, \"/by\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new InvalidFormatException(FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a deadline."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param isDone Completion status of deadline."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param by Deadline of deadline."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Deadline(String description, boolean isDone, String by) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(TYPE_CODE, description, isDone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.by \u003d LocalDateTime.parse(by);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    static String extractNameFromCommand(String command) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        int index \u003d command.indexOf(\" /by \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return command.substring(9, index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the time of the deadline."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the deadline of the deadline."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Deadline of deadline."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return by.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String format \u003d \"d MMM yyyy\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (by.getHour() !\u003d 3 || by.getMinute() !\u003d 14 || by.getSecond() !\u003d 15 || by.getNano() !\u003d 926535898) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (by.getMinute() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                format +\u003d \" ha\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                format +\u003d \" h.mma\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String byStr \u003d by.format(DateTimeFormatter.ofPattern(format));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return String.format(\"[%c] [%s] %s (by: %s)\", TYPE_CODE, getStatusIcon(), description, byStr);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 84
    }
  },
  {
    "path": "src/main/java/botbot/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents an event with a description, time and completion status."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final char TYPE_CODE \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final String FORMAT \u003d \"event \u003cdescription\u003e /at \u003cD-M-YYYY HHmm\u003e (eg. 17-3-2020 0945 \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            + \"or 3-4-2020 with no time specified)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private LocalDateTime at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param command Command to create event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @throws InvalidFormatException If command is of invalid format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Event(String command) throws InvalidFormatException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(TYPE_CODE, extractNameFromCommand(command));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            at \u003d Parser.parseDateTime(command, \"/at\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            throw new InvalidFormatException(FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates an event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param isDone Completion status of event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param at Time of event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Event(String description, boolean isDone, String at) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(TYPE_CODE, description, isDone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.at \u003d LocalDateTime.parse(at);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    static String extractNameFromCommand(String command) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        int index \u003d command.indexOf(\" /at \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return command.substring(6, index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the time of the event."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Time of event."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return at.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the deadline of the event."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String format \u003d \"d MMM yyyy\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        if (at.getHour() !\u003d 3 || at.getMinute() !\u003d 14 || at.getSecond() !\u003d 15 || at.getNano() !\u003d 926535898) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            if (at.getMinute() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                format +\u003d \" ha\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "                format +\u003d \" h.mma\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        String atStr \u003d at.format(DateTimeFormatter.ofPattern(format));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return String.format(\"[%c] [%s] %s (at: %s)\", TYPE_CODE, getStatusIcon(), description, atStr);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 84
    }
  },
  {
    "path": "src/main/java/botbot/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents a task with a description and completion status."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    protected final char type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param type Type of task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Task(char type, String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param type Type of task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param isDone Completion status of task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Task(char type, String description, boolean isDone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the type of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Type of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public char getType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Description of task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the completion status of the task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return 1 if task is done, 0 otherwise."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return isDone ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the icon representing the completion status of the task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Tick if task is done, cross otherwise."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    String getStatusIcon() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return isDone ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the time of the task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Time of task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public abstract String getAt();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the deadline of the task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Deadline of task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public abstract String getBy();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 92
    }
  },
  {
    "path": "src/main/java/botbot/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " * Represents a to-do with a description and completion status."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public static final char TYPE_CODE \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a to-do."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param command Command to create to-do."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Todo(String command) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(TYPE_CODE, extractNameFromCommand(command));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Creates a to-do."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param description Description of to-do."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @param isDone Completion status of to-do."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        super(TYPE_CODE, description, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    private static String extractNameFromCommand(String command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return command.substring(5);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the time of the to-do."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * Returns the deadline of the to-do."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     * @return Null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        return String.format(\"[%c] [%s] %s\", TYPE_CODE, getStatusIcon(), description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 56
    }
  },
  {
    "path": "src/test/java/botbot/tasks/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import botbot.exceptions.InvalidFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void getType() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\u0027D\u0027, new Deadline(\"deadline test /by 1-1-2020\").getType());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\u0027D\u0027, new Deadline(\"test\", true, \"2020-01-01T03:14:15.926535898\").getType());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\u0027E\u0027, new Event(\"event sample /at 31-12-2020 2359\").getType());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\u0027E\u0027, new Event(\"sample\", false, \"2020-12-31T00:00\").getType());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\u0027T\u0027, new Todo(\"todo test\").getType());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\u0027T\u0027, new Todo(\"test\", true).getType());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (InvalidFormatException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"test\", new Deadline(\"deadline test /by 1-1-2020\").getDescription());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"test\", new Deadline(\"test\", true, \"2020-01-01T03:14:15.926535898\").getDescription());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"sample\", new Event(\"event sample /at 31-12-2020 2359\").getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"sample\", new Event(\"sample\", false, \"2020-12-31T00:00\").getDescription());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"test\", new Todo(\"todo test\").getDescription());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"test\", new Todo(\"test\", true).getDescription());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (InvalidFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void getStatus() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"0\", new Deadline(\"deadline test /by 1-1-2020\").getStatus());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"1\", new Deadline(\"test\", true, \"2020-01-01T03:14:15.926535898\").getStatus());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"0\", new Event(\"event sample /at 31-12-2020 2359\").getStatus());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"0\", new Event(\"sample\", false, \"2020-12-31T00:00\").getStatus());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"0\", new Todo(\"todo test\").getStatus());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            assertEquals(\"1\", new Todo(\"test\", true).getStatus());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        } catch (InvalidFormatException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 52
    }
  },
  {
    "path": "src/test/java/botbot/tasks/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "package botbot.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void getAt() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNull(new Todo(\"todo test\").getAt());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNull(new Todo(\"test\", true).getAt());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNull(new Todo(\"test\", false).getAt());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void getBy() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNull(new Todo(\"todo test\").getBy());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNull(new Todo(\"test\", true).getBy());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertNull(new Todo(\"test\", false).getBy());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wakululuu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(\"[T] [\\u2718] test\", new Todo(\"todo test\").toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(\"[T] [\\u2713] sample\", new Todo(\"sample\", true).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "        assertEquals(\"[T] [\\u2718] test\", new Todo(\"test\", false).toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 29
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "blah"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "event "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "delete"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "delete 100"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 19
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "export LC_ALL\u003den_GB.UTF-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/botbot.Botbot.java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wakululuu"
        },
        "content": "java -classpath ../bin botbot.Botbot \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "wakululuu": 3,
      "-": 36
    }
  }
]
