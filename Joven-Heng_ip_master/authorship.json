[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "# duke.Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11, update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version, as follows:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `OK`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the project into Intellij as follows:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Click `Open or Import`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Select the project directory, and click `OK`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   1. If there are any further prompts, accept the defaults."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 2,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.6.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    sourceSets.test.java.srcDirs \u003d [\u0027test\u0027]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    systemProperty \"file.encoding\", \"utf-8\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 14,
      "-": 45
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * The Duke program implements a chatbot application that would take in the input from"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * the user as a todo list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Parser that makes sense of the user\u0027s inputs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static Parser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * The main method that runs the chatbot application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        File f \u003d new File(\"D:\\\\24092014\\\\Joven\\\\UNI STUFF\\\\CS2103\\\\IP\\\\task.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Storage storage \u003d new Storage(f);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        TaskList taskList \u003d new TaskList(storage.loadFile());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        UI ui \u003d new UI(taskList, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        parser \u003d new Parser(ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String welcome() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return parser.welcome();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static String getResponse(String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return parser.listen(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 37,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Parent class of exceptions that are thrown by the Duke program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Constructor of the Duke exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param message Contains the message that would be shown to the user when the exception is thrown"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return this.getMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 21
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeIncorrectTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class DukeIncorrectTimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public DukeIncorrectTimeFormatException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return \"☹ OOPS!!! Ensure that the datetime input is in the format YYYY-MM-DD HH:MM\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 14
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeKeywordMissingException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class DukeKeywordMissingException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public DukeKeywordMissingException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return \"☹ OOPS!!! Please include \" + this.getMessage() + \" in your input.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 13
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeTaskNonExistException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class DukeTaskNonExistException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public DukeTaskNonExistException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return \"☹ OOPS!!! This task does not exist!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 14
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/DukeUnknownInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class DukeUnknownInputException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public DukeUnknownInputException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 13
    }
  },
  {
    "path": "src/main/java/duke/dukeexception/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.dukeexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class EmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public EmptyDescriptionException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return \"☹ OOPS!!! The description of a \" + getMessage() + \" cannot be empty.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 13
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private Circle displayCircle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Constructor for DialogBox that will be used."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param text The input message that will be shown as the text"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param img The display picture"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        displayCircle.setFill(new ImagePattern(img));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 63
    }
  },
  {
    "path": "src/main/java/duke/gui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 9
    }
  },
  {
    "path": "src/main/java/duke/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            fxmlLoader.setLocation(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 31
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Initializes the stage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        showWelcomeMessage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private void showWelcomeMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        String response \u003d duke.welcome();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        if (response.equals(\"CYA PAL. Hope to see you again!\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            userInput.setDisable(true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            sendButton.setDisable(true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 70
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.dukeexception.DukeKeywordMissingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.dukeexception.DukeTaskNonExistException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.dukeexception.DukeUnknownInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.dukeexception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * This class deals with the interpretation of the user\u0027s inputs by the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final UI ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Constructor for the parser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param ui UI which deals with interactions with the user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Parser(UI ui) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String welcome() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return ui.welcome();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Method that takes in different commands by the user and calls the relevant methods in the UI to deal with them."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003ch3\u003e Userinput \u003d bye\u003c/h3\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Stops the entire program"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003ch3\u003e UserInput \u003d list\u003c/h3\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Prints out a list of the tasks in the TaskList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003ch3\u003e UserInput \u003d find xxx task\u003c/h3\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Finds the tasks that match the keyword provided by the user and prints it out as a list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003ch3\u003e UserInput \u003d delete xxx task\u003c/h3\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Triggers the UI to delete the task and converts the one-based index given by the user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * to a zero-based index."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003ch3\u003e UserInput \u003d done\u003c/h3\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Triggers the UI to mark the task as done and converts the one-based index given by the user"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * to a zero-based index."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003ch3\u003e UserInput \u003d create Event/Deadline/Todo \u003c/h3\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Triggers the UI to create the corresponding task object and separates the user\u0027s input to"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * show the name of the task, type of task and the duedate of the task(only applicable for deadline and events)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * It may throw an error if the description is empty, keywords are missing or the dates are in the wrong format."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param response String response which represents the user\u0027s input"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String listen(String response) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            int taskIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            if (response.equals(\"bye\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                return ui.replyBye();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            } else if (response.equals(\"list\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                return ui.replyList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            } else if (response.indexOf(\"find \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                if (response.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    throw new EmptyDescriptionException(\"find query\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                return ui.replyFind(response.substring(5));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            } else if (response.indexOf(\"delete\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                taskIndex \u003d Integer.parseInt(response.replaceAll(\"\\\\D+\", \"\")) - 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                return ui.replyDelete(taskIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            } else if (response.indexOf(\"done \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                taskIndex \u003d Integer.parseInt(response.replaceAll(\"\\\\D+\", \"\")) - 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                return ui.replyDone(taskIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            } else if (response.indexOf(\"todo \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                if (response.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    throw new EmptyDescriptionException(\"todo\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                return ui.addTodo(response.substring(4));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            } else if (response.indexOf(\"deadline \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                if (response.length() \u003c\u003d 9) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    throw new EmptyDescriptionException(\"deadline\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                if (!response.contains(\"/by \")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    throw new DukeKeywordMissingException(\"/by \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                String date \u003d response.substring(response.indexOf(\"/by \") + 4);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                response \u003d response.substring(response.indexOf(\"deadline \") + 8, response.indexOf(\"/by \"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                return ui.addDeadline(response, date);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            } else if (response.indexOf(\"event \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                if (response.length() \u003c\u003d 6) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    throw new EmptyDescriptionException(\"event\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                if (!response.contains(\"/at \")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    throw new DukeKeywordMissingException(\"/at \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                String date \u003d response.substring(response.indexOf(\"/at \") + 4);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                response \u003d response.substring(response.indexOf(\"event \") + 5, response.indexOf(\"/at \"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                return ui.addEvent(response, date);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                throw new DukeUnknownInputException(\"error\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        } catch (IOException | DukeTaskNonExistException | EmptyDescriptionException"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                | DukeKeywordMissingException | DukeUnknownInputException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            return ui.showError(e);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            return \"☹ OOPS!!! Ensure that the datetime input is in the format YYYY-MM-DD HH:MM\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 124
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.task.deadline.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.task.eventtask.EventTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.task.todo.ToDo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Storage class that deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private Scanner lineReader;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Constructor for creating a storage variable. It will create a new tasklist.txt if it does not exist, or"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * use existing one if it is pressent."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param file Contains the filepath to wear the tasklist.txt will be stored"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Storage(File file) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            this.lineReader \u003d new Scanner(file);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            System.out.println(\"File is not found\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * If a tasklist.txt file exists, this method would load it into the TaskList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @return A TaskList that is loaded with the tasks recorded on the txt file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFile() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        while (lineReader.hasNextLine()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            String data \u003d lineReader.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            tasks.add(taskCreator(data));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Updates the Tasklist.txt file with the existing tasks and states in the tasklist."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param shelf the TaskList that we are updating"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @throws IOException if the file cannot be found"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void updateFile(TaskList shelf) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        FileWriter fw \u003d new FileWriter(file.getAbsolutePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        for (int i \u003d 0; i \u003c shelf.getSize(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            fw.write(shelf.getTask(i).toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            fw.write(System.lineSeparator());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Creates a different type of task based on the response given"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param task input by the user"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @return a new task child object that is the type that is indicated in the response."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private Task taskCreator(String task) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        switch (task.charAt(1)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        case \u0027T\u0027:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            return new ToDo(task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        case \u0027D\u0027:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            return new Deadline(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            return new EventTask(task);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 92
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Task class that is used to store the different tasks that the user decides to store in the tasklist."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    protected final String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    protected LocalDateTime createdDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    protected DateTimeFormatter formatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Constructor for a new task object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param name Name of the task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param time Time when the task is created"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    protected Task(String name, LocalDateTime time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.createdDateTime \u003d time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Overloaded constructor for the task object. This is mainly used when the Storage class would have to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * update the tasklist based on the txt file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param line input from the text file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    protected Task(String line) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.isDone \u003d line.charAt(4) \u003d\u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.name \u003d line.substring(7, line.indexOf(\"[created on\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.createdDateTime \u003d LocalDateTime.parse(line.substring(line.indexOf(\"[created on \") + 12,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                line.lastIndexOf(\"]\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Getter for the name of the task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @return name of the task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Getter for the date and time ."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @return the date and time in MMM d yyyy HH:MM format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return createdDateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Setter to set the boolean flag from an uncomplete task(false) to a complete one(true)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void complete() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Get the status icon to indicate whether a task is incomplete or complete"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @return tick or cross icon"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    protected String getStatusIcon() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return (isDone ? \"[D]\" : \"[-]\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return this.getStatusIcon() + \" \" + this.getName() + \" [created on \" + this.getDateTime()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + \"] \";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 83
    }
  },
  {
    "path": "src/main/java/duke/task/deadline/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.task.deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * A subclass of task that deals with deadlines."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final LocalDateTime dueDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Constructor for the deadline task object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param name    name of the deadline task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param date    Date when the deadline task is created"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param dueDate Date indicated by the user on when the deadline is due."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Deadline(String name, LocalDateTime date, String dueDate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        super(name, date);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.dueDate \u003d LocalDateTime.parse(dueDate, formatter);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Overloaded constructor when the deadline task object is re-created from a tasklist.txt file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param line input from the tasklist.txt file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Deadline(String line) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        super(line);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.dueDate \u003d LocalDateTime.parse(line.substring(line.indexOf(\"(by: \") + 5, line.lastIndexOf(\")\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private String getdueDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return dueDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + this.getdueDate() + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 45
    }
  },
  {
    "path": "src/main/java/duke/task/eventtask/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.task.eventtask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * A subclass of task that deals with events."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final LocalDateTime eventDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Constructor for the event task object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param name      name of the event task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param date      Date when the entry for this event task is created"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param eventDate Date indicated by the user on when the event will happen."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public EventTask(String name, LocalDateTime date, String eventDate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        super(name, date);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.eventDate \u003d LocalDateTime.parse(eventDate, formatter);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Overloaded constructor when the event task object is re-created from a tasklist.txt file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param line input from the tasklist.txt file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public EventTask(String line) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        super(line);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.eventDate \u003d LocalDateTime.parse(line.substring(line.indexOf(\"(at: \") + 5, line.lastIndexOf(\")\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private String getEventDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return eventDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + this.getEventDate() + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 47
    }
  },
  {
    "path": "src/main/java/duke/task/todo/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.task.todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Todo Task class which contains the information for a todo task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Constructor for a todo task object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param name name of the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param date date where the task is created."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public ToDo(String name, LocalDateTime date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        super(name, date);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Overloaded constructor when the todo task object is re-created from a tasklist.txt file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param line input from the tasklist.txt file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public ToDo(String line) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        super(line);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 37
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.dukeexception.DukeTaskNonExistException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * The TaskList class is responsible for storing the different tasks in an ArrayList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * The arraylist that is used to store the tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Constructor for the TaskList object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param tasks An ArrayList that encapsulates Tasks objects"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Getter to get a task from the arraylist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param index Zero-based index to get the task from the arraylist"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @return Returns the Task that is gotten from the arraylist"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * This method adds a task to the back of the arraylist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param task Task object to be added to the arraylist"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Marks a task in the Arraylist as complete."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param index Zero-based index on where the task is in the Arraylist"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @return the task in the index that is completed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @throws DukeTaskNonExistException if the index provided is out of range of the arraylist"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public Task completeTask(int index) throws DukeTaskNonExistException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        if (index \u003c 0 | index \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            throw new DukeTaskNonExistException(\"error\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Task book \u003d this.tasks.get(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        book.complete();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return book;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Getter for the size of the arraylist"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @return the size of the arraylist"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * A method that iterates through the arraylist, starting from the oldest first, and printing them, indicating the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * id of the task. The first task would be id 1, second task would be id 2 and so on."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String iterate() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Iterator\u003cTask\u003e iter \u003d tasks.iterator();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Here are the tasks in your list: \").append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            sb.append(counter).append(\". \").append(iter.next()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * A method that deletes a given task from the arraylist based on the index given."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param index Zero-based index of the task in the arraylist"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @throws DukeTaskNonExistException if the index provided is out of range of the arraylist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void delete(int index) throws DukeTaskNonExistException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        if (index \u003c 0 | index \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            throw new DukeTaskNonExistException(\"error\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.tasks.remove(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * A method that finds a given task from the arraylist based on the respomse given."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * It will return all tasks that contains the keyword that was specified."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param response The string that will be identified from the tasks"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String find(String response) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Iterator\u003cTask\u003e iter \u003d tasks.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            Task book \u003d iter.next();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            if (book.getName().contains(response)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                temp.add(book);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        iter \u003d temp.iterator();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Here are the matching tasks in your list: \").append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            sb.append(counter).append(\". \").append(iter.next()).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 126
    }
  },
  {
    "path": "src/main/java/duke/ui/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.dukeexception.DukeTaskNonExistException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.task.deadline.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.task.eventtask.EventTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.task.todo.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " * Class that deals with interactions with the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Empty line to be printed after each command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private static final String LINE \u003d \"************************************\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Constructor for the UI object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param taskList   Tasklist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public UI(TaskList taskList, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * This method shows the welcome message for the chatbot. It is what users see when they launch the chatbot."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String welcome() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(LINE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        sb.append(\"Hello from \\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        sb.append(logo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        sb.append(\"What can I do for you pal? :D\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        sb.append(LINE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Method that prints the goodbye statement"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String replyBye() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return \"CYA PAL. Hope to see you again!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Method that would invoke the iterate statement from the Tasklist."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * This iterates through the entire list and prints out each task with a 1-based index position"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * of where the task is on the Tasklist."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String replyList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return taskList.iterate();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Method that would invoke the find statement from the TaskList."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param response Input from the user"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String replyFind(String response) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return taskList.find(response);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * method that deletes a task from the tasklist given the one-based index provided by the user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * It also updates the txt file based on the updated tasklist."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param index one-based integer index indicating the position of the task in the TaskList"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @throws IOException               if there is an error while updating the txt file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @throws DukeTaskNonExistException if the task does not exist"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String replyDelete(int index) throws IOException, DukeTaskNonExistException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Noted. I\u0027ve removed this task: \").append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        taskList.delete(index);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        storage.updateFile(taskList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        sb.append(\"Now you have \").append(taskList.getSize()).append(\" in the list.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Method that marks a task from the tasklist as done given the one-based index provided by the user."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * It also updates the txt file based on the updated tasklist"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param index one-based integer index indicating the position of the task in the TaskList"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @throws DukeTaskNonExistException if there is an error while updating the txt file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @throws IOException               if there is an error while updating the txt file"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String replyDone(int index) throws DukeTaskNonExistException, IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        if (index \u003e\u003d taskList.getSize() || index \u003c 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            throw new DukeTaskNonExistException(\"error\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"Nice! I\u0027ve marked this task as done: \").append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Task book \u003d taskList.completeTask(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        storage.updateFile(taskList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        sb.append(book.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Method that adds a new todo task into the tasklist."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * It will create the todo task with the current time."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * It also updates the txt file based on the updated tasklist."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param response input from the user to create a todo task"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @throws IOException if there is an error while updating the txt file"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String addTodo(String response) throws IOException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Task book \u003d new ToDo(response, LocalDateTime.now());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        taskList.addTask(book);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        storage.updateFile(taskList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return \"Got it. I\u0027ve added this task: \" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + \"  \" + book + \u0027\\n\u0027"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + \"Now you have \" + taskList.getSize() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Method that adds a new deadline task into the tasklist."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * It will create the deadline task with the current time and due date indicated in the user\u0027s input."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * It also updates the txt file based on the updated tasklist."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param response input given by the user for the name of the task"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param duedate  input given by the user indicating the duedate of the task"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @throws IOException if there is an error while updating the txt file"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String addDeadline(String response, String duedate) throws IOException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Task book \u003d new Deadline(response, LocalDateTime.now(), duedate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        taskList.addTask(book);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        storage.updateFile(taskList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return \"Got it. I\u0027ve added this task: \" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + \"  \" + book + \u0027\\n\u0027"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + \"Now you have \" + taskList.getSize() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Method that adds a new event task into the tasklist."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * It will create the event task with the current time and event date indicated in the user\u0027s input."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * It also updates the txt file based on the updated tasklist."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param response input given by the user for the name of the task"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param duedate  input given by the user indicating the eventdate of the task"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @throws IOException if there is an error while updating the txt file"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String addEvent(String response, String duedate) throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        Task book \u003d new EventTask(response, LocalDateTime.now(), duedate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        taskList.addTask(book);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        storage.updateFile(taskList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return \"Got it. I\u0027ve added this task: \" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + \"  \" + book + \u0027\\n\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                + \"Now you have \" + taskList.getSize() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * Prints the exception."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     * @param except indicates the exception"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public String showError(Exception except) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        return except.toString();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 177
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            \u003cInsets bottom\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            \u003cInsets right\u003d\"20.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "      \u003cCircle fx:id\u003d\"displayCircle\" fill\u003d\"DODGERBLUE\" radius\u003d\"40.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            \u003cInsets right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Circle\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 25
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 18
    }
  },
  {
    "path": "task.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "[T][D]  2  [created on Sep 1 2020 18:43] "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "[T][-]  asb [created on Sep 1 2020 18:52] "
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 2
    }
  },
  {
    "path": "test/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import org.junit.jupiter.api.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static TaskList shelf;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static Parser parser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static UI ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static DateTimeFormatter formatter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        File f \u003d new File(\"D:\\\\24092014\\\\Joven\\\\UNI STUFF\\\\CS2103\\\\IP\\\\task.txt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        storage \u003d new Storage(f);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        shelf \u003d new TaskList(storage.loadFile());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ui \u003d new UI(shelf, storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        parser \u003d new Parser(ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void testBye() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        ui.replyBye();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(\"CYA PAL. Hope to see you again!\\r\\n\", outContent.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void testAddDeadLine_deadlineInput_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            ui.addDeadline(\"finish homework!\", \"2020-10-02 11:44\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            String currentTime \u003d LocalDateTime.now().format(formatter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            assertEquals(\"Got it. I\u0027ve added this task: \\r\\n  [D][-] finish homework! [created on \" +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                            currentTime +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                            \"] (by: Oct 2 2020 11:44)\\r\\nNow you have 1 tasks in the list.\\r\\n\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    outContent.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void testAddDeadLine_emptyDescription_exceptionThrow() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        parser.listen(\"deadline \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        assertEquals(\"☹ OOPS!!! The description of a deadline cannot be empty.\\r\\n\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                outContent.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    public void testDelete() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            ui.replyDelete(0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            assertEquals(\"Noted. I\u0027ve removed this task: \\r\\nNow you have 0 in the list.\\r\\n\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "                    outContent.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 90
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "todo cs1010s"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "event watch ndp /at 7pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "deadline study the science of happiness /by 8pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "todo intended typo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "todo "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "event watch POOPOOPEEPEE /by 7pm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "deadline fly /at 9years"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 15
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "    PAUSE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joven-Heng"
        },
        "content": "PAUSE"
      }
    ],
    "authorContributionMap": {
      "Joven-Heng": 6,
      "-": 19
    }
  }
]
