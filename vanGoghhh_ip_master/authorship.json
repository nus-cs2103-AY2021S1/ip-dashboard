[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 15,
      "-": 45
    }
  },
  {
    "path": "src/main/java/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class for the command to exit the bot."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Returns a string to indicate the exiting of the bot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    void execute(TaskList tasks, UI ui) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        System.out.println(\"Bye! Have a nice day!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Return a boolean to indicate the exiting of the bot."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return true to exit the command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 26
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Abstract class for handling users command to the bot."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Abstract method which would be implemented in the subclasses."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param ui"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    abstract void execute(TaskList tasks, UI ui) throws DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Abstract method which would be implemented in the subclasses."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return a boolean to indicate whether or not to exit the bot."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    abstract boolean isExit();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 21
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to represent a deadline object."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private LocalDate by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructor for deadline class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param description description of the deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param by date that the deadline is dued."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Returns the duedate of the deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return duedate of the deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected LocalDate getBy() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Prints the deadline object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return string representation of a deadline."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                + by.format(DateTimeFormatter.ofPattern(\"d MMM uuuu\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 41
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to handle commands to add a deadline to the bot\u0027s list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructor for a deadlinecommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param command Complete line of the deadline command entered by user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public DeadlineCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Method to execute entirely when a deadline command is entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param tasks Tasklist containing all the tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param dukeUI UI to print string responses by the bot."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws InvalidTaskDescriptionException when an inaccurate task description is entered."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws WrongDateFormatException when the date is not typed in the correct format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void execute(TaskList tasks, UI dukeUI)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throws InvalidTaskDescriptionException, WrongDateFormatException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            String[] taskDetails \u003d this.command.split(\"/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            LocalDate taskDate \u003d LocalDate.parse(taskDetails[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            String[] taskDetailsWithoutDate \u003d taskDetails[0].split(\" \", 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            Deadline newDeadline \u003d new Deadline(taskDetailsWithoutDate[1], taskDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            tasks.addTask(newDeadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            dukeUI.addTask(tasks, newDeadline);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new InvalidTaskDescriptionException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new WrongDateFormatException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Method to tell bot whether to end the current session."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return false to not exit the system."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 53
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to handle delete commands entered by the user."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructor for delete command object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param command Complete line of delete command entered by user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public DeleteCommand(String command) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Method to execute entirely when a delete command is entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param tasks Tasklist containing all the tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param dukeUI UI to print string responses by the bot."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws InvalidTaskNumberException when an inaccurate task number is entered."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void execute(TaskList tasks, UI dukeUI) throws InvalidTaskNumberException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            String[] deleteCommand \u003d this.command.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(deleteCommand[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            if (taskIndex \u003e 0 \u0026\u0026 taskIndex \u003c\u003d tasks.getTaskList().size()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                Task deletedTask \u003d tasks.getTaskList().get(taskIndex-1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                tasks.deleteTask(deletedTask);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                dukeUI.deleteTask(tasks, deletedTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new NumberFormatException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Method to tell bot whether to end the current session."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return false to not exit the system."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 50
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 59
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to handle delete commands entered by the user."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructor for done command object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param command Complete line of done command entered by user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public DoneCommand(String command) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Method to execute entirely when a done command is entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param tasks Tasklist containing all the tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param dukeUI UI to print string responses by the bot."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws InvalidTaskNumberException when an inaccurate task number is entered."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void execute(TaskList tasks, UI dukeUI) throws InvalidTaskNumberException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int taskIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            String[] doneCommand \u003d this.command.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            taskIndex \u003d Integer.parseInt(doneCommand[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            if (taskIndex \u003e 0 \u0026\u0026 taskIndex \u003c\u003d tasks.getTaskList().size()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                Task completedTask \u003d tasks.getTaskList().get(taskIndex-1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                if (!completedTask.getStatus()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    tasks.markTaskDone(completedTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                dukeUI.doneTask(completedTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } catch (InvalidTaskNumberException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new InvalidTaskNumberException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new NumberFormatException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Method to tell bot whether to end the current session."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return false to not exit the session."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 53
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class which represents the duke bot."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Initiates the bot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private static void startBot() throws DukeException, IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Storage storage \u003d new Storage(\"data\" + File.separator + \"duke.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        TaskList dukeTaskList \u003d new TaskList(storage.loadData());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        UI dukeUI \u003d new UI();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Parser dukeParser \u003d new Parser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        dukeUI.greetUser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            String userCommand \u003d dukeUI.readCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            Command cmd \u003d dukeParser.parseCommand(userCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            cmd.execute(dukeTaskList, dukeUI);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            isExit \u003d cmd.isExit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            storage.writeData(dukeTaskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public static void main(String[] args) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        startBot();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 34,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class for custom exceptions."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public DukeException(String error) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 10
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to represent an event object."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private LocalDate at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructor for event class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param description description of the event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param at duedate of the event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public Event(String description, LocalDate at) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Returns the duedate of the event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected LocalDate getAt() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return this.at;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Prints the event object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return string representation of the event object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                + at.format(DateTimeFormatter.ofPattern(\"d MMM uuuu\")) + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 39
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to handle event commands entered by the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class EventCommand extends Command{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructor for the event command object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param command Complete line of command entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public EventCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Method to execute entirely when a done command is entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param tasks Tasklist containing all the tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param dukeUI UI to print string responses by the bot."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws InvalidTaskDescriptionException when an invalid task description is entered."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws WrongDateFormatException when an invalid date format is entered."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void execute(TaskList tasks, UI dukeUI) throws InvalidTaskDescriptionException, WrongDateFormatException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            String[] taskDetails \u003d this.command.split(\"/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            LocalDate taskDate \u003d LocalDate.parse(taskDetails[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            String[] taskDetailsWithoutDate \u003d taskDetails[0].split(\" \", 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            Event newEvent \u003d new Event(taskDetailsWithoutDate[1], taskDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            tasks.addTask(newEvent);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            dukeUI.addTask(tasks, newEvent);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new InvalidTaskDescriptionException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new WrongDateFormatException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Method to tell bot whether or not to end the current session."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return false to not exit the session."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 51
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to handle a find command entered by user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructor for findcommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param command Complete line of user command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public FindCommand(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Method to execute when a find command is entered."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param tasks TaskList containing all the tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param dukeUI UI to print string responses by the bot."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    void execute(TaskList tasks, UI dukeUI) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            String[] keywords \u003d this.command.split(\" \", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            String keyword \u003d keywords[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            ArrayList\u003cTask\u003e foundTasks \u003d tasks.findTask(keyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            dukeUI.findTask(foundTasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new InvalidKeywordException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Method to tell bot to end current session or not."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return false to not end session."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 46
    }
  },
  {
    "path": "src/main/java/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to handle cases when an invalid command is entered."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        super(\"Sorry this is an unrecognised command\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 11
    }
  },
  {
    "path": "src/main/java/InvalidKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Custom class to handle class when invalid keyword is entered."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class InvalidKeywordException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public InvalidKeywordException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        super(\"Invalid find keyword!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 11
    }
  },
  {
    "path": "src/main/java/InvalidTaskDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to handle the case where an invalid task description is entered."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class InvalidTaskDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public InvalidTaskDescriptionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        super(\"The task description is invalid or empty!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 12
    }
  },
  {
    "path": "src/main/java/InvalidTaskNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to handle the case where an invalid task number is entered."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class InvalidTaskNumberException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public InvalidTaskNumberException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        super(\"The task number is invalid or empty!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 13
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 7
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to handle list commands entered by the user."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructor for list command object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param command Complete line of command entered by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public ListCommand(String command) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Method to execute entirely when a list command is entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param tasks TaskList containing all the tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param dukeUI UI to print string responses by the bot."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws InvalidCommandException when an invalid command is entered by user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void execute(TaskList tasks, UI dukeUI) throws InvalidCommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.checkCommandValidity();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (tasks.getTaskList().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            System.out.println(\"\\nThere are currently no tasks stored!\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            dukeUI.displayTasks(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Checks whether list command is valid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws InvalidCommandException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void checkCommandValidity() throws InvalidCommandException{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            if (this.command.compareTo(\"list\") !\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Method to tell bot whether to end the current session or not."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return false to not exit the session."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 55
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class MainWindow {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private UI dukeUI;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void setDuke(UI ui) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        dukeUI \u003d ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String response \u003d dukeUI.readCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 48
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to handle user commands."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Sorts user commands and handle them according to their types."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param userCommand input command by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return the types of Command depending on the user\u0027s commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws InvalidCommandException when a non matching command is entered."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected Command parseCommand(String userCommand) throws InvalidCommandException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String[] command \u003d userCommand.split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (command[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return new DoneCommand(userCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else if (command[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return new TodoCommand(userCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else if (command[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return new EventCommand(userCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else if (command[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return new DeadlineCommand(userCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else if (command[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return new DeleteCommand(userCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else if (command[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return new ListCommand(userCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else if (command[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else if (command[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return new FindCommand(userCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 36
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to load and write tasks objects to the local drive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param filepath specified filepath in the user\u0027s local drive."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Loads data from the user\u0027s local files."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return the tasks in the users local files in an arraylist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected ArrayList\u003cTask\u003e loadData() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            Files.createDirectories(Paths.get(\"data\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            File dukeData \u003d new File(this.filepath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            if (dukeData.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                Scanner dukeScanner \u003d new Scanner(dukeData);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                while (dukeScanner.hasNext()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    String txtLine \u003d dukeScanner.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    String[] txtLineArr \u003d txtLine.split(\"//\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    Task task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    if (txtLineArr[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        task \u003d new Todo(txtLineArr[2]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        if (txtLineArr[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                            task.markAsDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    } else if (txtLineArr[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        task \u003d new Event(txtLineArr[2], LocalDate.parse(txtLineArr[3]));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        if (txtLineArr[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                            task.markAsDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        task \u003d new Deadline(txtLineArr[2], LocalDate.parse(txtLineArr[3]));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        if (txtLineArr[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                            task.markAsDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    taskList.add(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                return taskList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                File newDukeData \u003d new File(this.filepath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                newDukeData.createNewFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                return taskList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Writes data to the user\u0027s local files."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param tasks TaskList containing all tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void writeData(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        FileWriter dukeWriter \u003d new FileWriter(\"data/duke.txt\", false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            dukeWriter.write(task.inputInFile() + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        dukeWriter.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 80
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to represent a Task object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructor for Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param description description of the task object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Return icon to indicate whether a task is done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return a \"check\" or a \"cross\" depending on whether the task is done."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Mark a task as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Get the status of a task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Get task status in the form of an integer."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return 1 or 0 depending on status on task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private int getTaskStatus() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return this.isDone ? 1 : 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Prints the task object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return string representation of a task object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Transform the task into a file friendly format."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return string representation of task in file format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected String inputInFile() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (this instanceof Todo) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return \"T//\" + this.getTaskStatus() + \"//\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    + this.description;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (this instanceof Event) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return \"E//\" + this.getTaskStatus() + \"//\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    + this.description + \"//\" + ((Event) this).getAt();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (this instanceof Deadline) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            return \"D//\" + this.getTaskStatus() + \"//\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                    + this.description + \"//\" + ((Deadline) this).getBy();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return \" \";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 79
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to represent all the tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructor for tasklist."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param taskList arraylist containing all the tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Mark a task as completed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param completedTask task to be completed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void markTaskDone(Task completedTask) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        completedTask.markAsDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int indexOfTask \u003d this.taskList.indexOf(completedTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.taskList.get(indexOfTask).markAsDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Adds a task into the tasklist."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param task the task to be added."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void addTask(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Deletes a task from the tasklist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param task the task to be deleted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void deleteTask(Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.taskList.remove(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Gets the tasklist containing all the tasks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return arraylist containing all the tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Returns number of uncompleted tasks in the tasklist."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return number of uncompleted tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected int checkTasksLeft() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        for (Task task: this.taskList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            if (!task.getStatus()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Search and return tasks using keyword."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param keyWord word used to search."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return Tasks withg description matching the keyword."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected ArrayList\u003cTask\u003e findTask(String keyWord) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        for (Task task: this.taskList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            if (task.description.equals(keyWord)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                foundTasks.add(task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return foundTasks;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 83
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class representing a Todo."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructor for Todo."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param description description of the Todo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Prints the Todo object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return string representation of a Todo."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 24
    }
  },
  {
    "path": "src/main/java/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to handle commands to add a Todo to the bot\u0027s list."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class TodoCommand extends Command{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Constructor for a todocommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param command Complete line of the event command entered by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public TodoCommand(String command) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Method to execute entirely when a todo command is entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param tasks TaskList containing all the tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param dukeUI UI to print all string responses by the bot."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @throws InvalidTaskDescriptionException when an inaccurate task description is entered."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void execute(TaskList tasks, UI dukeUI) throws InvalidTaskDescriptionException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            String[] todoDetails \u003d this.command.split(\" \", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            Todo newTodo \u003d new Todo(todoDetails[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            tasks.addTask(newTodo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            dukeUI.addTask(tasks, newTodo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } catch (IndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            throw new InvalidTaskDescriptionException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Method to tell bot whether to end the current session or not."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return false to not exit the session."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 43
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Class to print string responses by the bot."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Reads command entered by user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @return string representation of command entered."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected String readCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String message \u003d sc.nextLine();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Greets the user upon launch."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void greetUser() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String welcome \u003d \"Hello I am Duke!\\nHow can I help you?\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String instructions \u003d \"Leave a single blankspace after each command to \" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \"trigger Duke\u0027s response!\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        String listOfCommand \u003d \"List of Commands \u003d \" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \"event, todo, deadline, delete, done, find, list\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        System.out.println(welcome);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        System.out.println(instructions);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        System.out.println(listOfCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Prints responses when a task is completed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param task the completed task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void doneTask(Task task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (task.getStatus()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            System.out.println(\"\\nNice! I have completed this task!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            System.out.println(\" \" + task + \"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            System.out.println(\"\\nThis task has already been completed!\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Prints responses when a task is added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param tasks TaskList containing all tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param newTask Task to be completed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void addTask(TaskList tasks, Task newTask) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        System.out.println(\"\\nGot it. This task is now added.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        System.out.println(\" \" + newTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int tasksLeft \u003d tasks.checkTasksLeft();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        System.out.println(\"You have \" + tasksLeft"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                + \" tasks left in your list!\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Prints responses when a task is deleted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param tasks TaskList containing all tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param deletedTask Task to be deleted."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void deleteTask(TaskList tasks, Task deletedTask) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        System.out.println(\"\\nGot it. Deleting task.....\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        System.out.println(\" \" + deletedTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        System.out.println(\"You have \" + tasks.getTaskList().size()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                + \" tasks left in your list!\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Prints all the tasks stored."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param taskList TaskList containing all the tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void displayTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        System.out.println(\"Here are the tasks in your tasklist:\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            System.out.println(index + \".\" + task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * Prints tasks found using find command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     * @param foundTasks tasks found with find command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    protected void findTask(ArrayList\u003cTask\u003e foundTasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        if (foundTasks.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            System.out.println(\"\\nNo matching tasks found!\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            System.out.println(\"\\nHere are the tasks in your list!\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            for (Task task : foundTasks) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                System.out.println(index + \".\" + task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 107
    }
  },
  {
    "path": "src/main/java/WrongDateFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * Custom exception to handle the case where a wrong date format is inputed"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " * @author vanGoghhh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class WrongDateFormatException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    public WrongDateFormatException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        super(\"Incorrect input date format\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 11
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    void toStringTest() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Deadline dummyDeadline \u003d new Deadline(\"study for exam\", LocalDate.parse(\"2020-12-12\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(\"[D]\" + \"[\\u2718]\" + \" study for exam\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \"(by: 12 Dec 2020)\", dummyDeadline.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 15
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(2,2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 10
    }
  },
  {
    "path": "src/test/java/EventCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    void executeTest() throws WrongDateFormatException, InvalidTaskDescriptionException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        UI dukeUI \u003d new UI();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e(){});"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        EventCommand dummyEventCmd \u003d new EventCommand(\"event read book/2020-12-12\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        dummyEventCmd.execute(tasks, dukeUI);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(\"[E]\" + \"[\\u2718]\" + \" read book\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "                \" (at: 12 Dec 2020)\", tasks.getTaskList().get(0).toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 16
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    void addTaskTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Deadline dummyDeadline \u003d new Deadline(\"get drunk\", LocalDate.parse(\"2020-12-25\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        tasks.addTask(dummyDeadline);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(dummyDeadline, tasks.getTaskList().get(0));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 16
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    void toStringTest() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        Todo dummyTodo \u003d new Todo(\"go on date with gf\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "        assertEquals(\"[T]\" + \"[\\u2718]\" + \" go on date with gf\", dummyTodo.toString());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 10
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "event walk dog /Monday Morning"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "deadline finish homework /8pm today"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 13
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d \\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 2,
      "-": 20
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "vanGoghhh"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "vanGoghhh": 1,
      "-": 37
    }
  }
]
