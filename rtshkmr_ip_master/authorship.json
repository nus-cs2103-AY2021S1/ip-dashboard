[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Drives the personal assistant using a UI, along with a parser to make sense of user inputs and executing commands on"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * a list of tasks that are read/written from local storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Duke extends Thread {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private boolean canExit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Creates UI and loads saved tasks from hard drive along with Duke"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // save location has been hardcoded into Storage class"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Runtime currentRuntime \u003d Runtime.getRuntime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.ui \u003d new TextUi();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.canExit \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.tasks \u003d Storage.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.ui.displayLoadError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        currentRuntime.addShutdownHook(new Thread(() -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                Storage.save(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.ui.bidFarewell();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Starts the application, invokes UI interaction and execution of Commands"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws IOException If there are issues with reading/writing onto file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void runDuke() throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.ui.greet();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        while (!canExit) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            String userInput \u003d this.ui.readCommand(sc);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                Command command \u003d parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                command.execute(this.tasks, this.ui);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                this.canExit \u003d command.isExit();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                this.ui.displayError(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Storage.save(tasks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // todo: handle the ctrl-c event handling for sudden"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        new Duke().runDuke();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 76,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.CommandWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Parses the user input to determine what command the user intends to make"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String DEADLINE_DELIMITER \u003d \"/by\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String EVENT_DELIMITER \u003d \"/at\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String TIME_DELIMITER \u003d \"-\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns the correct command after parsing the user\u0027s input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param input user\u0027s input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return a Command that represents user\u0027s intended action"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If User\u0027s input can\u0027t be understood or doesn\u0027t follow the correct format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Command parseCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String keyword \u003d words[0].toLowerCase().trim(); // keyword tells us what command to create"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (input.equals(CommandWord.EXIT_CMD.getCmd())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else if (input.equals(CommandWord.LIST_CMD.getCmd())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return new ListCommand(new String[]{input});"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else if (keyword.equals(CommandWord.DONE_CMD.getCmd())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                || keyword.equals(CommandWord.DELETE_CMD.getCmd())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return parseDoneDelete(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else if (words[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return new FindCommand(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else { // parse the command based on the identified keyword:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            switch (keyword) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                return new AddCommand(parseToDo(input));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                return new AddCommand(parseDeadline(input));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                return new AddCommand(parseEvent(input));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                throw new DukeException(Message.ERROR_UNKNOWN_CMD.getMsg());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Parses user input that is related to the done and delete commands"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param input User input related to Done and Delete commands"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Either Done or Delete Command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If the format is wrong or if a non-integer is passed in as argument or  multiple arguments"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *                       are passed in"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private Command parseDoneDelete(String input) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringTokenizer st \u003d new StringTokenizer(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // if there are more than 2 tokens, then it\u0027s wrong format:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (st.countTokens() !\u003d 2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_DONEDELETE_ARGS.getMsg());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String command \u003d st.nextToken();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String taskID \u003d st.nextToken();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!isInteger(taskID)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_DONEDELETE_NOTINT.getMsg());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedInput \u003d new String[]{command, taskID};"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return command.equals(CommandWord.DELETE_CMD.getCmd())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "               ? new DeleteCommand(parsedInput)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "               : new DoneCommand(parsedInput);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Parses user input that is related to the todo"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param input User input related to todo command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return String array of format: {\u003c\"T\"\u003e\u003cdescription of todo\u003e}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If no description is passed in"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String[] parseToDo(String input) throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringTokenizer st \u003d new StringTokenizer(input);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        st.nextToken();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!st.hasMoreTokens()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_TODO_DESC.getMsg());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringBuilder description \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        while (st.hasMoreTokens()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            description.append(st.nextToken()).append(\" \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new String[]{\"T\", description.toString().stripTrailing()};"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Parses user input that is related to the Deadline command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param input User input related to Deadline command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return String array of format: {\u003c\"D\"\u003e\u003cdescription of Deadline\u003e\u003cString representation for the date\u003e}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If the format is wrong or if it lacks proper description"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String[] parseDeadline(String input) throws DukeException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] separatedInput \u003d input.split(DEADLINE_DELIMITER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (separatedInput.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_DEADLINE_FORMAT.getMsg());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String dateString \u003d separatedInput[1];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringTokenizer st \u003d new StringTokenizer(separatedInput[0]);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        st.nextToken();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringBuilder descriptionBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        while (st.hasMoreTokens()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            descriptionBuilder.append(st.nextToken()).append(\" \");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String description \u003d descriptionBuilder.toString().stripTrailing();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_DEADLINE_DESC.getMsg());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new String[]{\"D\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            description,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            dateString};"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Parses user input that is related to the Event command"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param input User input related to Event command"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return String array of format: {\u003c\"E\"\u003e\u003cdescription of Event\u003e\u003cString representation for the date\u003e\u003cstart time\u003e\u003cend"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *         time\u003e}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If the format is wrong or if it lacks proper description"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String[] parseEvent(String input) throws DukeException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] separatedInput \u003d input.split(EVENT_DELIMITER); //  \u003cwords\u003e /at \u003ctimeInfo\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // not enough info in user input:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (separatedInput.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_EVENT_FORMAT.getMsg());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] words \u003d separatedInput[0].split(\" \");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] timeInfo \u003d separatedInput[1].split(\" \");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String duration \u003d timeInfo[timeInfo.length - 1];"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] separatedTime \u003d duration.split(TIME_DELIMITER);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (separatedTime.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_EVENT_TIME.getMsg());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringBuilder dateStringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (int i \u003d 0; i \u003c timeInfo.length - 2; i++) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            dateStringBuilder.append(timeInfo[i]).append(\" \");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        dateStringBuilder.append(timeInfo[timeInfo.length - 2]);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String dateString \u003d dateStringBuilder.toString();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (dateString.isEmpty()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_EVENT_DATE.getMsg());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String startTime \u003d separatedTime[0];"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String endTime \u003d separatedTime[1];"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringBuilder newDescription \u003d new StringBuilder();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (int i \u003d 1; i \u003c words.length - 1; i++) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            newDescription.append(words[i]).append(\" \");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        newDescription.append(words[words.length - 1]);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new String[]{\"E\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            newDescription.toString().stripTrailing(),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            dateString,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            startTime,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                            endTime};"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Checks if input is a string representation of an integer"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param s input string"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return True if input is representing an Integer"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private boolean isInteger(String s) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return s.matches(\"\\\\d+\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 201
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Handles the loading and saving of data onto the local storage by serialising the TaskList object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // hardcoded for now:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    final public static Path ROOT_PATH \u003d Paths.get(\"\").toAbsolutePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    final public static Path DATA_DIR_PATH \u003d Paths.get(ROOT_PATH.toAbsolutePath().toString(), \"data\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    final public static Path SAVE_FILE_PATH \u003d Paths.get(DATA_DIR_PATH.toAbsolutePath().toString(), \"savedData\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Saves the current TaskList object by serialising it and writing onto the default file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param allTasks Current TaskList that represents all the tasks that have been created by the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws IOException If there are errors writing onto the intended file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static void save(TaskList allTasks) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        initStorage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            FileOutputStream fos \u003d new FileOutputStream(SAVE_FILE_PATH.toFile());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ObjectOutputStream oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            oos.writeObject(allTasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            oos.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            fos.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Reads saved data from the default save location and returns TaskList, if it exists, or constructs a new TaskList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * for Duke to use"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return TaskList for Duke to use"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws IOException If there are errors reading from existing file or file doesn\u0027t exist"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static TaskList load() throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        TaskList savedTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            FileInputStream fis \u003d new FileInputStream(SAVE_FILE_PATH.toFile());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ObjectInputStream ois \u003d new ObjectInputStream(fis);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            savedTasks \u003d (TaskList) ois.readObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ois.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            fis.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return savedTasks;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (ClassNotFoundException | IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            initStorage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return savedTasks;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Initialises the Storage location by creating the Data dir and SaveFile, if required"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws IOException If there are errors in file creation"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static void initStorage() throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        createDataDir();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        createSaveFile();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Creates the data directory if that path doesn\u0027t exist"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws IOException If there are errors in directory creation"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static void createDataDir() throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!Files.exists(DATA_DIR_PATH)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Files.createDirectory(DATA_DIR_PATH);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Creates the save file if the directory exists but file doesn\u0027t"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws IOException If there are errors in file creation"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static void createSaveFile() throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert (Files.exists(DATA_DIR_PATH)) : \"data dir doesn\u0027t exist\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (!Files.exists(SAVE_FILE_PATH)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Files.createFile(SAVE_FILE_PATH);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 100
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "// todo: find a better way to assign numbers to the tasks. the current error is that after loading,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "//  Task class is restarting the counter from 0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Holds a Collection of Tasks and has methods to manipulate these Tasks, is serializable as well"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Creates a task and adds it as an entry to the tasklist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param parsedInput The parsed output of the Parser object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param commandTag  A string tag to conveniently identify the type of Task entry it should be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Description of the added Task entry"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If the Task can\u0027t be created"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // side effect: create \u0026 add task + return response"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String addEntry(String[] parsedInput, String commandTag) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        switch (commandTag) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ToDo newToDo \u003d new ToDo(parsedInput[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.taskList.add(newToDo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return newToDo.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Deadline newDeadline \u003d Deadline.createDeadline(parsedInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.taskList.add(newDeadline);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return newDeadline.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            Event newEvent \u003d Event.createEvent(parsedInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.taskList.add(newEvent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return newEvent.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            return \"ugh how did we get here\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Marks a Task as complete and modifies the TaskList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param taskID Selected Task to mark as complete"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Description of the completed task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If it\u0027s an invalid task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String completeTask(int taskID) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        verifyTaskValidity(taskID);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        taskList.set(taskID - 1, taskList.get(taskID - 1).complete());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return taskList.get(taskID - 1).toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Deletes the specified Task and modifies the TaskList by decrementing the IDs of the remaining tasks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param taskID Selected Task to delete"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Description of the deleted task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If it\u0027s an invalid task"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String deleteTask(int taskID) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        verifyTaskValidity(taskID);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Task toDelete \u003d taskList.get(taskID - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        taskList.remove(toDelete);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (int i \u003d taskID - 1; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            taskList.set(i, taskList.get(i).decrementID());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Task.decrementTaskCount();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return toDelete.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Verifies the validity of the task to be handled, whether it exists in the TaskList or not"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param taskID TaskID to be checked"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException Invalid task if it\u0027s more than the current list size or fewer than 1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private void verifyTaskValidity(int taskID) throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (taskID \u003e taskList.size()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(\"invalid task: task id \u003e list size\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else if (taskID \u003c 1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(\"invalid task: task id \u003c 1\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns the String description of the remaining undone tasks in the list"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return String description"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String getCurrentStatus() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        int incompleteTasks \u003d 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            if (!t.isComplete()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                incompleteTasks++;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"Now you have \" + incompleteTasks"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + ((incompleteTasks \u003d\u003d 1)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                   ? \" undone task\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                   : \" undone tasks\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + \" in the list.\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 128
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Adds Tasks to the TaskList and invokes appropriate UI messages about it"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String[] parsedInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String commandTag; // indicates what kind of Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public AddCommand(String[] parsedInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.parsedInput \u003d parsedInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.commandTag \u003d parsedInput[0];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Prints out a confirmation message of the command, adds the entry to TaskList and displays the current status"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * of the TaskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param tasks Current TaskList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param ui Where the User shall receive messages about the command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(Message.CONFIRMATION_MSG.getMsg());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String reply \u003d tasks.addEntry(this.parsedInput, this.commandTag);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(reply);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(tasks.getCurrentStatus());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ui.display(lines);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 44
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * A command can be executed on and can be an Exit Command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void execute(TaskList tasks, Ui ui) throws DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    boolean isExit();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 16
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Deletes Tasks from the TaskList and invokes appropriate UI messages about it"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String[] parsedInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public DeleteCommand(String[] parsedInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.parsedInput \u003d parsedInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Prints out a deletion message of the command, removes the entry from TaskList and displays the current status of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * the TaskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param tasks Current TaskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param ui    Where the User shall receive messages about the command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        int taskID \u003d Integer.parseInt(this.parsedInput[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(Message.DELETE_MSG.getMsg());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(tasks.deleteTask(taskID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(tasks.getCurrentStatus());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ui.display(lines);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 44
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Marks a specific task from the TaskList as completed and invokes appropriate UI messages about it"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String[] parsedInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public DoneCommand(String[] parsedInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.parsedInput \u003d parsedInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Prints out a done message and displays the newly done task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param tasks Current TaskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param ui    Where the User shall receive messages about the command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(Message.DONE_MSG.getMsg());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(tasks.completeTask(Integer.parseInt(this.parsedInput[1])));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ui.display(lines);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 40
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Exits the Duke program"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Initiates the System shutdown for the VM"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param tasks Current TaskList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param ui    Where the User shall receive messages about the command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 29
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String searchTerm;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public FindCommand(String userInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringTokenizer st \u003d new StringTokenizer(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        st.nextToken();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        StringBuilder searchTermBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        while (st.hasMoreTokens()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            searchTermBuilder.append(st.nextToken()).append(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.searchTerm \u003d searchTermBuilder.toString().trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns an appropriate matcher for that exact search term"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param searchTerm User input search term"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Matcher based on the regex with boundaries"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private Matcher getMatcher(String searchTerm) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Pattern p \u003d Pattern.compile(\"\\\\b\" + searchTerm.trim() + \"\\\\b\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return p.matcher(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Displays the tasks that match a specific word/phrase passed in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param tasks Current TaskList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param ui    Where the User shall receive messages about the command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Matcher m \u003d getMatcher(this.searchTerm);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cTask\u003e allTasks \u003d tasks.getAllTasks();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(Message.FOUND_MSG.getMsg());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        AtomicInteger counter \u003d new AtomicInteger();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        allTasks.stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                .filter(task -\u003e this.containsExactWord(task.getDescription(), searchTerm))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                .forEach(foundTask -\u003e lines.add(counter.incrementAndGet() + \". \" + foundTask.toString()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        if (lines.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ui.displayError(Message.ERROR_NO_FIND.getMsg());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            ui.display(lines);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Tests if a word/phrases is exactly present in a text"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param text Text to search within"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param word The search term (word/phrase) to search for"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return True if exact word is within the text"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean containsExactWord(String text, String word) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String regex \u003d \"\\\\b\" + word + \"\\\\b\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Matcher myMatcher \u003d pattern.matcher(text);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return myMatcher.find();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 84
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Lists all the tasks that are in the TaskList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ListCommand(String[] parsedInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Prints out all the tasks in the TaskList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param tasks Current TaskList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param ui    Where the User shall receive messages about the command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void execute(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        // involves making the ui print everything."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d tasks.getAllTasks();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(Message.FETCHING_MSG.getMsg());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (Task t : arr) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            lines.add(t.getID() + \".\" + t.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ui.display(lines);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 41
    }
  },
  {
    "path": "src/main/java/duke/enums/CommandWord.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * An Enumeration of the various command words that shall be use on Duke"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public enum CommandWord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    LIST_MODE(\"list\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ECHO_MODE(\"echo\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    TODO_CMD(\"todo\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DEADLINE_CMD(\"deadline\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    EVENT_CMD(\"event\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    EXIT_CMD(\"bye\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    LIST_CMD(\"list\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DONE_CMD(\"done\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DELETE_CMD(\"delete\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    INVALID;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String cmd;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static Map\u003cString, CommandWord\u003e keyableMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    CommandWord() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    } // constructor for INVALID"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    CommandWord(String cmd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.cmd \u003d cmd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * An Initialisation for the Hashmap that allows us to access keys from their values (command-string pairs)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Map\u003cString, CommandWord\u003e commandLabelMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (CommandWord c : CommandWord.values()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            commandLabelMap.put(c.getCmd(), c);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        CommandWord.keyableMap \u003d commandLabelMap;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns the string representation for that command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Command\u0027s String form"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String getCmd() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.cmd;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 50
    }
  },
  {
    "path": "src/main/java/duke/enums/DateTimeFormat.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * An Enumeration of the various DateTime formatters that Duke shall use to parse the Date and Time from user commands"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public enum DateTimeFormat {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // Add Formats for date and time here as needed..."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DATE_OUTPUT_FORMATTER1(\"MMM dd yyy\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DATE_INPUT_FORMATTER1(\"d/M/yyyy\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DATE_INPUT_FORMATTER2(\"yyyy/M/d\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    TIME_FORMATTER(\"HHmm\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    INVALID;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private DateTimeFormatter formatter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DateTimeFormat() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DateTimeFormat(String format) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.formatter \u003d DateTimeFormatter.ofPattern(format).withResolverStyle(ResolverStyle.SMART);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public DateTimeFormatter getFormat() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.formatter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns a stream of all the Formatters, that can be filtered through to select the correct formatter for the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * user\u0027s input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Stream of DateTimeFormatter objects"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static Stream\u003cDateTimeFormatter\u003e getFormatterStream() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return Arrays.stream(DateTimeFormat.values()).map(DateTimeFormat::getFormat);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 43
    }
  },
  {
    "path": "src/main/java/duke/enums/Message.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * An Enumeration of the various Messages words that shall be used by Duke\u0027s UI"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public enum Message {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    GREETING,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    EXIT_GREETING(\"Bye. Hope to see you again soon!\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DONE_MSG(\"Nice! I\u0027ve marked this task as done\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    DELETE_MSG(\"Noted. I\u0027ve removed this task:\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    CONFIRMATION_MSG(\"Got it. I\u0027ve added this task:\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    FETCHING_MSG(\"Here are the tasks in your list:\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    FOUND_MSG(\"Here are the matching tasks in your list:\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_NO_DATE_FORMATTER(\"Can\u0027t find Date Formatter\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERRR_NO_TIME_FORMATTER(\"Can\u0027t find Time Formatter\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_BAD_TIME_INPUT(\"what kinda date/time is that\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_NO_FIND(\"Couldn\u0027t find anything related to the search term\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_UNKNOWN_CMD(\"upset parser: unknown command\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_DONEDELETE_ARGS(\"invalid done/delete command: do things one at a time pls!\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_DONEDELETE_NOTINT(\"invalid done/delete command: you gotta pass an integer\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_TODO_DESC(\"invalid todo command: do what?\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_DEADLINE_FORMAT(\"invalid deadline command: bad format, try deadline \u003cdesc\u003e /by \u003cdateString\u003e\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_DEADLINE_DESC(\"invalid deadline command: bro, where\u0027s the deadline description at?\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_EVENT_FORMAT(\"invalid event command: bad format, try event \u003cdesc\u003e /at \u003cdateString\u003e \u003cstartTime\u003e-\u003cendTime\u003e\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_EVENT_TIME(\"invalid event command: you need to pass in a start and end time for your event\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    ERROR_EVENT_DATE(\"invalid event command: you didn\u0027t pass in the date!\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    INVALID;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static Map\u003cString, Message\u003e keyableMap;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    Message() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    } // constructor for INVALID"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    Message(String msg) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * An Initialisation for the Hashmap that allows us to access keys from their values (message-label pairs)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Map\u003cString, Message\u003e messageLabelMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (Message m : Message.values()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            messageLabelMap.put(m.getMsg(), m);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Message.keyableMap \u003d messageLabelMap;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Returns the string representation for that Message"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Message\u0027s String form"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String getMsg() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static Message getLabel(String msg) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return keyableMap.getOrDefault(msg, Message.INVALID);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 68
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Customised Exception thrown, specific to the UI and logic errors relating to Duke\u0027s workings"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return super.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "// nb: might have to create children exception classes in the future, avoided"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "//     because it\u0027s simple message passing for now"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 18
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.DateTimeFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Contains information about a Task to be done by a particular date and time along with its description"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String DELIMITER \u003d \"by\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Deadline(String description, String dateString) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        setDateTime(dateString);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Creates a Deadline by extracting out relevant information from the parsed user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param parsedInput Parser\u0027s output"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Deadline"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static Deadline createDeadline(String[] parsedInput) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String description \u003d parsedInput[1];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String dateString \u003d parsedInput[2];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new Deadline(description, dateString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isComplete() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return super.isComplete();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String date \u003d this.date.format(DateTimeFormat.DATE_OUTPUT_FORMATTER1.getFormat());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String time \u003d this.time.format(DateTimeFormat.TIME_FORMATTER.getFormat());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"[D]\" + super.toString()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + \" (\" + DELIMITER + \":\" + date + \", time:\" + time + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Sets the Date and Time attributes of a Deadline by choosing the correct formatter and formatting the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * information for these fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param dateString Unformatted date and time fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If the Date and Time user input is not understandable"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void setDateTime(String dateString) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            dateString \u003d dateString.strip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            String[] dateTimeSeparated \u003d dateString.split(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            String date \u003d dateTimeSeparated[0];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            String time \u003d dateTimeSeparated[1];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            DateTimeFormatter chosenDateFormatter \u003d chooseDateFormatter(date);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            DateTimeFormatter chosenTimeFormatter \u003d chooseTimeFormatter(time);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            LocalDate localDate \u003d LocalDate.parse(date, chosenDateFormatter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            LocalTime localTime \u003d LocalTime.parse(time, chosenTimeFormatter);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.date \u003d localDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            this.time \u003d localTime;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            throw new DukeException(Message.ERROR_BAD_TIME_INPUT.getMsg());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            // todo: send this throwing of exception to the parser"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Filters through the Enumeration for DateTime formatters and selects the correct Formatter based on the format"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * that the user inputs the Date information in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param date String representation for a date"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return DateTimeFormatter that can be used to format this user input for Date"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If the User\u0027s date format isn\u0027t supported by the existing Formatters in the Enumeration"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private DateTimeFormatter chooseDateFormatter(String date) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return DateTimeFormat.getFormatterStream().filter"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                (formatter -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    } catch (DateTimeParseException ignored) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        // ON PURPOSE: ignored because we only want the formatter that handles things properly"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                }).findAny().orElseThrow(() -\u003e new DukeException(Message.ERROR_NO_DATE_FORMATTER.getMsg()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Filters through the Enumeration for DateTime formatters and selects the correct Formatter based on the format"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * that the user inputs the Date information in"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param time String representation for a time"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return DateTimeFormatter that can be used to format this user input for Time"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @throws DukeException If the User\u0027s time format isn\u0027t supported by the existing Formatters in the Enumeration"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private DateTimeFormatter chooseTimeFormatter(String time) throws DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return DateTimeFormat.getFormatterStream().filter"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                (formatter -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        LocalTime.parse(time, formatter);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    } catch (Exception ignored) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                        // ON PURPOSE: ignored because we only want the formatter that handles things properly"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                }).findAny().orElseThrow(() -\u003e new DukeException(Message.ERRR_NO_TIME_FORMATTER.getMsg()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 125
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Contains information about an Event, with when it starts and ends and on what date"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String DELIMITER \u003d \"at\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            TIME_DELIMITER \u003d \"-\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String startTime,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            endTime,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            dateString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Event(String description, String dateString, String startTime, String endTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.dateString \u003d dateString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Creates an Event by extracting out relevant information from the parsed user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param parsedInput Parser\u0027s output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static Event createEvent(String[] parsedInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String description \u003d parsedInput[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String dateString \u003d parsedInput[2];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String startTime \u003d parsedInput[3];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String endTime \u003d parsedInput[4];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return new Event(description, dateString, startTime, endTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isComplete() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return super.isComplete();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"[E]\" + super.toString()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + \" (\" + DELIMITER + \":\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + this.dateString + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                + this.startTime + TIME_DELIMITER + this.endTime + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 45
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Describes the Task stored by Duke; is serializable"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class Task implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static int taskCount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private int taskID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private boolean completed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String TICK \u003d \"\\u2713\", CROSS \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Assigns an ID based on the count of active tasks there currently"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param description A string description for that Task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.taskID \u003d ++taskCount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.completed \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Marks a task as completed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return the completed version of that task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Task complete() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.completed \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Decreases the taskID by 1 when a Task is deleted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Task with a lower ID"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public Task decrementID() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        --this.taskID;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Decreases the taskCount by 1 when a Task is deleted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static void decrementTaskCount() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        --Task.taskCount;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Checks if Task is completed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return True if task is completed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isComplete() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.completed;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public int getID() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return this.taskID;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"[\" + (this.completed"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                      ? TICK"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                      : CROSS) + \"] \" + this.description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 76
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Contains a description of a future task to do"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public boolean isComplete() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return super.isComplete();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 20
    }
  },
  {
    "path": "src/main/java/duke/ui/TextUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class TextUi implements Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    // constant strings:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String LINE_BREAK \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public String readCommand(Scanner sc) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e greeting \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        greeting.add(\"Hello I\u0027m Duke\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        greeting.add(\"What can I do for you?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        display(greeting);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void bidFarewell() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(Message.EXIT_GREETING.getMsg());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.display(lines);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void display(ArrayList\u003cString\u003e lines) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        printResponse(prettify(lines));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void displayError(String message) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        lines.add(message);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        this.display(lines);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void displayLoadError() { //todo: add this error display"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Prints out collection of lines to the Command Line"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param response Collection of confirmed lines"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static void printResponse(ArrayList\u003cString\u003e response) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (String s : response) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            System.out.println(s);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Makes UI message lines pretty by encapsulating in line breaks and indenting them"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param rawResponse Ugly response"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Pretty lines"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static ArrayList\u003cString\u003e prettify(ArrayList\u003cString\u003e rawResponse) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        rawResponse.add(0, LINE_BREAK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        rawResponse.add(rawResponse.size(), LINE_BREAK);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return indentLines(rawResponse);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * Indents a collection of lines"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @param responseLines Collection of the lines to indent"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     * @return Collection of the indented lines"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    private static ArrayList\u003cString\u003e indentLines(ArrayList\u003cString\u003e responseLines) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        for (String current : responseLines) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            current \u003d TextUi.INDENT + current;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            result.add(current);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 90
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * Duke can have UI that can greet users, read commands that they give, display lines and errors and bid the users"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " * farewell upon exiting the program"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void greet();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    String readCommand(Scanner sc);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void bidFarewell();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void display(ArrayList\u003cString\u003e lines);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void displayError(String message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    void displayLoadError();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 22
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "//    public void dukeRun() throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "//        new Duke().run();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 19
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.enums.Message;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.params.provider.ValueSource;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"deadline return book /by 19/02/2020 0900\", \"event project meeting /at Mon 2-4pm\", \"todo \" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            \"join sports club\"})"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void parsingCommand_parameterizedTest_validCommandsCreated(String input) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assert (p.parseCommand(input) !\u003d null); // successful creation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void exceptionHandling_insufficientTodoDescription_dukeExceptionReturned() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String input \u003d \"todo\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expectedMsg \u003d \"invalid todo command: do what?\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        DukeException de \u003d assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "            p.parseCommand(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        });"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(expectedMsg, de.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"tod\", \"blah\",})"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void exceptionHanlding_unknownCommand_dukeExceptionReturned(String s) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expectedMsg \u003d Message.ERROR_UNKNOWN_CMD.getMsg();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        DukeException de \u003d assertThrows(DukeException.class, () -\u003e p.parseCommand(s));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(de.getMessage(), expectedMsg);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"done 4 5 6\", \"delete 4 5 6\"})"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void exceptionHandling_multipleDoneDeleteArguments_dukeExceptionReturned(String s) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expectedMsg \u003d Message.ERROR_DONEDELETE_ARGS.getMsg();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        DukeException de \u003d assertThrows(DukeException.class, () -\u003e p.parseCommand(s));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(de.getMessage(), expectedMsg);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"deadline\", \"deadline a\"})"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void exceptionHandling_badDeadlineFormat_dukeExceptionReturned(String s) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expectedMsg \u003d Message.ERROR_DEADLINE_FORMAT.getMsg();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        DukeException de \u003d assertThrows(DukeException.class, () -\u003e p.parseCommand(s));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(de.getMessage(), expectedMsg);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"deadline /by xxx\", \"deadline /by Sunday\"})"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void exceptionHandling_deadlineNoDateDescription_dukeExceptionReturned(String s) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expectedMsg \u003d Message.ERROR_DEADLINE_DESC.getMsg();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        DukeException de \u003d assertThrows(DukeException.class, () -\u003e p.parseCommand(s));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(de.getMessage(), expectedMsg);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"event /by Sunday\"})"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void exceptionHandling_badEventFormat_dukeExceptionReturned(String s) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expectedMsg \u003d Message.ERROR_EVENT_FORMAT.getMsg();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        DukeException de \u003d assertThrows(DukeException.class, () -\u003e p.parseCommand(s));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(de.getMessage(), expectedMsg);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 77
    }
  },
  {
    "path": "src/test/java/duke/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 5
    }
  },
  {
    "path": "src/test/java/duke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static void initTest() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedInput1 \u003d {\"T\", \"kill me now\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedInput2 \u003d {\"T\", \"i want ice cream\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String commandTag \u003d \"T\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList.addEntry(parsedInput1, commandTag);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList.addEntry(parsedInput2, commandTag);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void modifyTaskList_addEntryTodo_increaseTaskCount() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        TaskListTest.initTest();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedInput1 \u003d {\"T\", \"happy thoughts\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(testTaskList.addEntry(parsedInput1, \"T\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                     \"[T][✘] happy thoughts\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void queryTaskList_getCurrentStatus_returnsString() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        TaskListTest.initTest();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expected \u003d \"Now you have 2 undone tasks in the list.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(testTaskList.getCurrentStatus(), expected);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void modifyTaskList_completeTask_returnsString() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        TaskListTest.initTest();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String expected \u003d \"[T][✓] i want ice cream\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals(testTaskList.completeTask(2), expected);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 42
    }
  },
  {
    "path": "src/test/java/duke/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import org.junit.jupiter.params.provider.ValueSource;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static Ui ui \u003d new TextUi();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public static void initTest() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedInput1 \u003d {\"T\", \"kill me now\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedInput2 \u003d {\"T\", \"i want me ice cream\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedIntput3 \u003d {\"T\", \"i want more\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String[] parsedInput4 \u003d {\"D\", \"i want\", \"19/02/2020 1400\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String commandTag \u003d \"T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList.addEntry(parsedInput1, commandTag);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList.addEntry(parsedInput2, commandTag);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList.addEntry(parsedIntput3, commandTag);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList.addEntry(parsedInput4, \"D\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList.completeTask(2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"find want\", \"find i\", \"find me\", \"find xxx\"})"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void findSuccessfully_queryTaskList_returnsTrue(String s) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        initTest();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        FindCommand cmd \u003d new FindCommand(s);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        cmd.execute(testTaskList, ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    @ValueSource(strings \u003d {\"i\", \"world i\", \"world \", \"hi\"})"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    public void testHelperContains_matchExactSearchTerm_returnsTrue(String query) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        String text \u003d \"hello world i am ritesh hohohehe hi\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        FindCommand command \u003d new FindCommand(\"hello\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "        assertEquals((command.containsExactWord(text, query)),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "                     true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 48
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline return book /by 20/01/1998 1800"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline return book /by 19/02/2020 0900"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "blah"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 4 5 6"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done 0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "done a"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline /by Sunday"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "event"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "event /at Mon"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "event /at 2-4pm"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "delete 7"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline burn book /by 2/12/2019 1800"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline shred book /by 2020/12/2 2359"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "deadline burn house /by 235262346"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 29
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "# shellcheck disable\u003dSC2046"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin $(find ../ *.java)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "# todo create proper testscript"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rtshkmr"
        },
        "content": "#../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "rtshkmr": 4,
      "-": 37
    }
  }
]
