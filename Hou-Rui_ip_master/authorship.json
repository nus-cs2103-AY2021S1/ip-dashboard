[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    id \"application\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "apply plugin: \u0027java-library\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "application {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    mainClassName \u003d \"tickbot.Tickbot\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "test {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    // dependecies"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    implementation group: \u0027net.harawata\u0027, name: \u0027appdirs\u0027, version: \u00271.2.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    implementation group: \u0027com.opencsv\u0027 , name: \u0027opencsv\u0027, version: \u00275.2\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    implementation group: \u0027org.slf4j\u0027, name: \u0027slf4j-jdk14\u0027, version: \u00271.7.25\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    // JUnit supports"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.4.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.4.0\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    // Java FX supports"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "run {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "task fatJar(type: Jar) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    duplicatesStrategy \u003d DuplicatesStrategy.INCLUDE // allow duplicates"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        attributes \\"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            \u0027Implementation-Title\u0027: \u0027Tickbot\u0027,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            \u0027Implementation-Version\u0027: \u00271.0\u0027,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            \u0027Main-Class\u0027: \u0027tickbot.Tickbot\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    archiveBaseName \u003d project.name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    from {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        configurations.compileClasspath.collect {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            it.isDirectory() ? it : zipTree(it)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    with jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 67
    }
  },
  {
    "path": "src/main/java/tickbot/Tickbot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.ui.graphics.GraphicsUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.ui.text.TextUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * The main class of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class Tickbot {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * The main entrance of Tickbot."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (args.length \u003e 1 \u0026\u0026 Objects.equals(args[1], \"--cli\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            ui \u003d new TextUi();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            ui \u003d new GraphicsUi();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        ui.mainLoop(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 25
    }
  },
  {
    "path": "src/main/java/tickbot/exception/CorruptedDataException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * The exception to represent that the data storage is corrupted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class CorruptedDataException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private static final long serialVersionUID \u003d 1L;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public CorruptedDataException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        super(\"CorruptedDataException\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 12
    }
  },
  {
    "path": "src/main/java/tickbot/storage/DataStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.io.OutputStreamWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.opencsv.CSVReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import com.opencsv.CSVWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import net.harawata.appdirs.AppDirs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import net.harawata.appdirs.AppDirsFactory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.exception.CorruptedDataException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.task.Deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.task.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.task.Todo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * The class to represent the data storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class DataStorage {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private static final String DATA_STORAGE_FILE_NAME \u003d \"tasks.csv\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Reads the stored data from the application data directory."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @return A list containing the stored tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @see DataStorage#getDataStoragePath"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public List\u003cTask\u003e read() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            File dataFile \u003d new File(getDataStoragePath(), DATA_STORAGE_FILE_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            dataFile.getParentFile().mkdirs(); // create the data directory if not exists"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            dataFile.createNewFile(); // create the file if not exists"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            FileInputStream inputStream \u003d new FileInputStream(dataFile);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            CSVReader reader \u003d new CSVReader(new InputStreamReader(inputStream));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            for (String[] parts : reader) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                Task task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                boolean completed \u003d Objects.equals(parts[1], \"1\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                switch (parts[0]) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                case \"T\": {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    task \u003d new Todo(completed, parts[2]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                case \"E\": {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    LocalDateTime time \u003d LocalDateTime.parse(parts[3]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    task \u003d new Event(completed, parts[2], time);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                case \"D\": {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    LocalDateTime time \u003d LocalDateTime.parse(parts[3]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    task \u003d new Deadline(completed, parts[2], time);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                default: {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    throw new CorruptedDataException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } catch (SecurityException | IOException err) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            System.err.println(\"Warning: unable to read data storage. \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    + \"Your task list is not loaded.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } catch (DateTimeException | CorruptedDataException | IndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            System.err.println(\"Warning: Corrupted data storage. \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    + \"Your task list may not be fully loaded.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Writes the task list into the application data directory."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param tasks The task list to write."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @see DataStorage#getDataStoragePath"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void update(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            File dataFile \u003d new File(getDataStoragePath(), DATA_STORAGE_FILE_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            FileOutputStream outputStream \u003d new FileOutputStream(dataFile);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            CSVWriter writer \u003d new CSVWriter(new OutputStreamWriter(outputStream));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                String[] line \u003d new String[] {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    task.getTaskType(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    task.isCompleted() ? \"1\" : \"0\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    task.getContent(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    Objects.toString(task.getTime()) // could be null"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                };"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                writer.writeNext(line);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } catch (SecurityException | IOException err) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            System.err.println(\"Warning: unable to write to data storage. \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                + \"Your task list is not saved.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Gets the path of the application data directory."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * \u003cp\u003e The path is OS-specified and can vary among different OS. \u003c/p\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @return The path of the application data directory."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private static String getDataStoragePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        AppDirs appDirs \u003d AppDirsFactory.getInstance();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return appDirs.getUserDataDir(\"tickbot\", null, \"HouRui\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 114
    }
  },
  {
    "path": "src/main/java/tickbot/storage/DataStorageFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class DataStorageFactory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private static class Singleton {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        private static DataStorage instance \u003d new DataStorage();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private DataStorageFactory() { }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Gets a singleton instance of {@code DataStorage}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @return A singleton instance."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static DataStorage getInstance() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return Singleton.instance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 17
    }
  },
  {
    "path": "src/main/java/tickbot/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * The class to represent a deadline task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Deadline(boolean completed, String content, LocalDateTime time) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        super(completed, content, time);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public String getTimeMarker() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return \"by\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 22
    }
  },
  {
    "path": "src/main/java/tickbot/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * The class to represent an event task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Event(boolean completed, String content, LocalDateTime time) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        super(completed, content, time);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public String getTimeMarker() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return \"at\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 22
    }
  },
  {
    "path": "src/main/java/tickbot/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.util.DateTimeFormatterFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * The class to represent an abstract task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final String content;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final LocalDateTime time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private boolean isCompleted;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    Task(boolean isCompleted, String content, LocalDateTime time) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Gets the string to represent the type of the task (e.g. T, D, E, ...)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @return the type string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public abstract String getTaskType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Gets the word used before the time of the task (e.g. by, at, ...)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @return The word used, {@code null} if none."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public abstract String getTimeMarker();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Gets the content of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @return the content string."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Gets the status whether the task is completed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @return the boolean status."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return isCompleted;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Gets the date of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @return A {@LocalDateTime} object if the task contains a time,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     *         {@code null} if none."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setCompleted(boolean status) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        isCompleted \u003d status;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private String getCompleteMark() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return isCompleted() ? \"✔︎\" : \"✘\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        String timeMarker \u003d getTimeMarker();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (timeMarker !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatterFactory.getOutputFormatter();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            String timeString \u003d formatter.format(getTime());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return String.format(\"[%s][%s] %s (%s: %s)\", getTaskType(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    getCompleteMark(), getContent(), timeMarker, timeString);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return String.format(\"[%s][%s] %s\", getTaskType(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    getCompleteMark(), getContent());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 79
    }
  },
  {
    "path": "src/main/java/tickbot/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.storage.DataStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.storage.DataStorageFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * The class to represent a task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private DataStorage storage \u003d DataStorageFactory.getInstance();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private List\u003cTask\u003e tasks \u003d storage.read();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Gets the size of the task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @return The size of the task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Gets a task in the list by the index."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param index The index of the task to get."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @return The corresponding task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Adds a task to the end of the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * \u003cp\u003e The data storage would be updated. \u003c/p\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param task The task to add."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Removes a task from the task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * \u003cp\u003e The data storage would be updated. \u003c/p\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param index The index of the task to be removed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Marks a task in the task list as completed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * \u003cp\u003e The data storage would be updated. \u003c/p\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param index The index of the task to be marked as completed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @return {@code true} if the task is successfully marked;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     *         {@code false} if the task is already completed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public boolean complete(int index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (task.isCompleted()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        task.setCompleted(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 68
    }
  },
  {
    "path": "src/main/java/tickbot/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * The class to represent a TO-DO task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Todo(boolean completed, String content) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        super(completed, content, null);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public String getTimeMarker() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 20
    }
  },
  {
    "path": "src/main/java/tickbot/ui/Output.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.Map.Entry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * The class to represent output in the text UI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class Output {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private static final String TIME_FORMAT \u003d \"\u003cyyyy-MM-dd[ HH:mm[:ss]]\u003e\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private static PrintStream printStream \u003d System.out;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private static String prefix \u003d \"  \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private static Map\u003cString, String\u003e usages \u003d new HashMap\u003c\u003e() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        private static final long serialVersionUID \u003d 1L;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            put(\"help\", \"help \u003ccommand\u003e\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            put(\"bye\", \"bye\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            put(\"done\", \"done \u003cindex\u003e\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            put(\"delete\", \"delete \u003cindex\u003e\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            put(\"list\", \"list\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            put(\"todo\", \"todo \u003ccontent\u003e\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            put(\"deadline\", \"deadline \u003ccontent\u003e /by \" + TIME_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            put(\"event\", \"event \u003ccontent\u003e /at \" + TIME_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    };"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private Output() { } // not meant to be initialized"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Sets the printing stream used by this class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * \u003cp\u003e{@code System.out} will be used if not set.\u003c/p\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param stream The new printing stream."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static void setPrintStream(PrintStream stream) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Output.printStream \u003d stream;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Sets the prefix string while printing out a message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * \u003cp\u003eTwo spaces are used if not set.\u003c/p\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param prefix The new prefix string."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static void setPrefix(String prefix) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Output.prefix \u003d prefix;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Displays a message in text UI."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * \u003cp\u003eA line break will be appended to the message.\u003c/p\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static void printMessage(String message) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        printStream.println(prefix + message);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Lists all available commands in the text UI."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static void printAllUsage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        printMessage(\"All available commands:\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        for (Entry\u003cString, String\u003e entry : usages.entrySet()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            printMessage(entry.getValue());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Displays the usage for a given command."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param commandName The name of the command to look up the usage."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static void printUsage(String commandName) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        String usageString \u003d usages.get(commandName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (usageString !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(usageString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Unknown command \" + commandName + \" .\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 80
    }
  },
  {
    "path": "src/main/java/tickbot/ui/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * The class to represent the command parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private Runner runner \u003d new Runner();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Executes a command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param command the command to execute."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public boolean executeCommand(String command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (command.isBlank()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return true; // empty line, continue inputing"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        String[] args \u003d command.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        switch (args[0]) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        case \"bye\": {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"See you next time!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return false; // end of input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        case \"help\": {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            runner.help(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        case \"done\": {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            runner.done(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        case \"delete\": {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            runner.delete(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        case \"list\": {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            runner.list(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        case \"todo\": {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            runner.todo(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        case \"deadline\": {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            runner.deadline(args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        case \"event\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            runner.event(args);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        case \"find\": {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            runner.find(args);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        default: {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Unknown command \" + args[0] + \".\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return true; // continue inputing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 61
    }
  },
  {
    "path": "src/main/java/tickbot/ui/Runner.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.task.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.task.Todo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.util.DateTimeFormatterFactory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * The class to represent the runner of commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class Runner {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void help(String[] args) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (args.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printAllUsage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            for (int i \u003d 1; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                Output.printMessage(\"Usage of \" + args[i] + \":\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                Output.printUsage(args[i]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void delete(String[] args) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            int index \u003d Integer.parseInt(args[1]) - 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            tasks.remove(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Task removed: \" + task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"You have \" + tasks.size() + \" task(s) in task list.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } catch (NumberFormatException err) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Invalid Syntax.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Usage: delete \u003ctask_index\u003e\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } catch (IndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Sorry, No such task found.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void done(String[] args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            int index \u003d Integer.parseInt(args[1]) - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            tasks.complete(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } catch (NumberFormatException err) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Invalid Syntax.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Usage: done \u003ctask_index\u003e\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } catch (IndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Sorry, no such task found.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void list(String[] args) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Your task list is empty now.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Output.printMessage(\"Task list:\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            String message \u003d String.format(\"%d. %s\", i + 1, tasks.get(i));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(message);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void todo(String[] args) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        addTask(args, \"TO-DO\", (content, _time) -\u003e new Todo(false, content), null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void deadline(String[] args) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        addTask(args, \"Deadline\", (content, time) -\u003e new Deadline(false, content, time), \"/by\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void event(String[] args) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        addTask(args, \"Event\", (content, time) -\u003e new Event(false, content, time), \"/at\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    void find(String[] args) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        String searchText \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        for (int i \u003d 1; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            searchText +\u003d args[i];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        class Entry {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            private int index;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            private Task task;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Entry(int index, Task task) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                this.index \u003d index;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                this.task \u003d task;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        List\u003cEntry\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            if (task.getContent().contains(searchText)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                result.add(new Entry(i + 1, task));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (result.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Sorry, no related tasks found!\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Here are the matching tasks:\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            for (Entry entry : result) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                Output.printMessage(String.format(\"%d. %s\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                        entry.index, entry.task));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private LocalDateTime parseTime(String timeString) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatterFactory.getInputFormatter();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return LocalDateTime.parse(timeString, formatter);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param args The split parts of the commands."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param taskName The human-readable name of the task (e.g. deadline, TO-DO, ...)."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param initializer The initializer function of the task."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param timeMarker The time marker used by the task command (e.g. /by, /at, ...)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private void addTask("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        String[] args,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        String taskName,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        BiFunction\u003cString, LocalDateTime, ? extends Task\u003e initializer,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        String timeMarker"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        if (args.length \u003c 2) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Please input the content of the \" + args[0] + \".\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printUsage(args[0]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        String content \u003d args[1];"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Optional\u003cString\u003e time \u003d Optional.empty();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            for (int i \u003d 2; i \u003c args.length; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                if (time.isPresent()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    time \u003d Optional.of(time.get() + \" \" + args[i]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                } else if (Objects.equals(args[i], timeMarker)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    time \u003d Optional.of(args[++i]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    content +\u003d \" \" + args[i];"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Task task \u003d initializer.apply(content,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    timeMarker \u003d\u003d null ? null : parseTime(time.get()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(taskName + \" added: \" + task);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"You have \" + tasks.size() + \" task(s) in task list.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } catch (IndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Please input valid time after \" + timeMarker + \".\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printUsage(args[0]);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } catch (NoSuchElementException err) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Missing time for the \" + args[0] + \".\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printUsage(args[0]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        } catch (DateTimeException err) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printMessage(\"Bad date format. Please input in correct format.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            Output.printUsage(args[0]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 171
    }
  },
  {
    "path": "src/main/java/tickbot/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Starts the main loop of the UI."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void mainLoop(String[] args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 8
    }
  },
  {
    "path": "src/main/java/tickbot/ui/graphics/Dialog.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.ui.graphics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * The class representing a dislog label."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class Dialog extends Label {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Initializes the dialog with the text on it."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param text The text on the dialog."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public Dialog(String text) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        super(text);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        setWrapText(true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        setMinHeight(50);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 18
    }
  },
  {
    "path": "src/main/java/tickbot/ui/graphics/DialogStream.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.ui.graphics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * The class to represent a dislog print stream."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * \u003cp\u003eThis stream output nothing to the output stream; instead it informs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * the GUI to create a dialog with the output text.\u003c/p\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class DialogStream extends PrintStream {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private GraphicsUi ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Initializes the dialog stream with the GUI it will be used in."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @param ui The GUI the stream will be used in."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public DialogStream(GraphicsUi ui) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        super(new OutputStream() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            public void write(int c) { } // do nothing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        });"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void println(String text) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        super.println(text);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        ui.writeDialog(text);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 30
    }
  },
  {
    "path": "src/main/java/tickbot/ui/graphics/GraphicsUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.ui.graphics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.ui.Output;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.ui.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.ui.Ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * The class to represent the graphics UI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class GraphicsUi extends Application implements Ui {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private AnchorPane mainLayout;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void mainLoop(String[] args) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Application.launch(GraphicsUi.class, args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Performs the basic logic of the main loop."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void performLogic() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        DialogStream stream \u003d new DialogStream(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Output.setPrintStream(stream);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Output.setPrefix(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Output.printMessage(\"Hello, this is Tickbot! How can I help you?\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        EventHandler\u003cMouseEvent\u003e handler \u003d new EventHandler\u003c\u003e() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                String command \u003d userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                boolean running \u003d parser.executeCommand(command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                if (!running) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                    Platform.exit();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        sendButton.addEventHandler(MouseEvent.MOUSE_CLICKED, handler);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Creates a dialog in the main UI."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void writeDialog(String text) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Dialog dialog \u003d new Dialog(text);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        dialogContainer.getChildren().add(dialog);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        // stage styles"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        stage.setTitle(\"Tickbot\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        // elements"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Scene scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        designStyles();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        performLogic();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Designs the styles of the elements."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private void designStyles() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        // main layout styles"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        // scroll pane styles"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        scrollPane.setPrefSize(400.0, 535.0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        // dialog container styles"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        // send button styles"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        sendButton.setPrefSize(58.0, 40.0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        // user input styles"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        userInput.setPrefSize(340.0, 40.0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        // userInput.setPrefHeight(30.0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        // anchor pane styles"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 112
    }
  },
  {
    "path": "src/main/java/tickbot/ui/text/TextUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.ui.text;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.ui.Output;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.ui.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " * The class to represent the text UI."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class TextUi implements Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void mainLoop(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Output.printMessage(\"Hello, this is tickbot! How can I help you?\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Scanner inputScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        boolean running \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        while (running) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            System.out.print(\"\u003d\u003d\u003e \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            if (!inputScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "                break; // end of file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            String command \u003d inputScanner.nextLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            running \u003d parser.executeCommand(command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        inputScanner.close();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 29
    }
  },
  {
    "path": "src/main/java/tickbot/util/DateTimeFormatterFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class DateTimeFormatterFactory {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private DateTimeFormatterFactory() { } // not meant to be initialized"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Gets a {@code DateTimeFormatter} for inputs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @return the {@code DateTimeFormatter} needed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static DateTimeFormatter getInputFormatter() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            .appendPattern(\"yyyy-MM-dd[ HH:mm[:ss]]\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "            .toFormatter();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Gets a {@code DateTimeFormatter} for outputs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * @return the {@code DateTimeFormatter} needed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public static DateTimeFormatter getOutputFormatter() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        return DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 30
    }
  },
  {
    "path": "src/test/java/tickbot/storage/DataStorageFactoryTests.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class DataStorageFactoryTests {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Tests if {@code DataStorage} is implemented as a singleton."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void testSingleton() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        DataStorage s1 \u003d DataStorageFactory.getInstance();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        DataStorage s2 \u003d DataStorageFactory.getInstance();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertEquals(s1, s2); // same instance"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 17
    }
  },
  {
    "path": "src/test/java/tickbot/task/TaskTests.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import tickbot.util.DateTimeFormatterFactory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class TaskTests {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Tests if task can process content with spaces."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void testSpace() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatterFactory.getInputFormatter();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.parse(\"2020-01-01 08:00\", formatter);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Deadline deadline \u003d new Deadline(false, \"with space\", date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertEquals(\"[D][✘] with space (by: 2020-01-01 08:00:00)\", deadline.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Tests if task can process content with commas."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void testComma() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatterFactory.getInputFormatter();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.parse(\"2020-01-01\", formatter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Event event \u003d new Event(false, \"with, comma\", date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertEquals(\"[E][✘] with, comma (at: 2020-01-01 00:00:00)\", event.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Tests if task can process content with back slashes."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void testBackSlash() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Todo todo \u003d new Todo(true, \"with \\\\ backslash\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertEquals(\"[T][✔︎] with \\\\ backslash\", todo.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 43
    }
  },
  {
    "path": "src/test/java/tickbot/ui/ParserTests.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "package tickbot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "public class ParserTests {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    // Redirecting System.out and System.err"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    private final PrintStream originalErr \u003d System.err;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Replaces system output streams with custom ones."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void setUpStreams() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        System.setErr(new PrintStream(errContent));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Restores the system output streams."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void restoreStreams() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        System.setErr(originalErr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     * Tests if the parser works."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    public void testParser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        parser.executeCommand(\"done -1\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        String expected \u003d \"  Sorry, no such task found.\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "        assertEquals(expected, outContent.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 47
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "event Scheduled meeting /at 10:00 tomorrow"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "deadline project work /by Tuesday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "todo complete survey"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "event no time"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "todo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Hou-Rui": 10
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hou-Rui"
        },
        "content": "java -classpath ../bin Tickbot \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "Hou-Rui": 2
    }
  }
]
