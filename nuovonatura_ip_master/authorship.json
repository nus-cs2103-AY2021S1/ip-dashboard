[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"applicationDefaultJvmArgs \u003d [\"-Dfile.encoding\u003dutf-8\"]"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"compileJava.options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"tasks.withType(JavaCompile) {"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"    options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"}"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":52,"author":{"gitId":"nuovonatura"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":56,"author":{"gitId":"nuovonatura"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":60,"author":{"gitId":"nuovonatura"},"content":"    archiveBaseName \u003d \"N Chat Bot\""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":65,"author":{"gitId":"nuovonatura"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":70,"author":{"gitId":"nuovonatura"},"content":"    systemProperty \"file.encoding\", \"utf-8\""},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nuovonatura":28,"-":43}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"# N Chat Bot"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"## Introduction"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"This is a chat bot that helps you to keep track of your todos, deadlines, and events. "},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"### `Delete` - Deletes a task from the to-do list."},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":"### `Done` - Marks a task as done in the to-do list."},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"### `Snooze` - Snoozes or reschedules a task to a new date."},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"### `list` - Shows the complete to-do list."},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"### `on` - Shows all the tasks on a specific date."},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"### `find` - Finds all tasks that contains specific content."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"### `todo` - Creates a new todo task in the to-do list."},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"### `deadline` - Creates a new deadline task in the to-do list."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"### `event` - Creates a new event task in the to-do list."},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"### `bye` - Exits the chat bot. "}],"authorContributionMap":{"nuovonatura":17,"-":9}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import java.io.PrintStream;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"import duke.commands.Command;"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"import duke.parser.Parser;"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"import duke.storage.Storage;"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.TaskList;"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"import duke.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":" * Represents the chat bot Duke."},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"public class Duke {"},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"    private Storage storage;"},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"    private TaskList tasks;"},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":"    private Ui ui;"},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"     * Creates a new Duke chat bot with the specified file path for storage."},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"     * @param filePath A String representation of the target file path."},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"    public Duke(String filePath) {"},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"        ui \u003d new Ui();"},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"        assert filePath !\u003d \"\" : \"Empty file path.\";"},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":"        } catch (DukeException e) {"},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"            ui.showLoadingError();"},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":37,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":40,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"nuovonatura"},"content":"     * Runs the Duke chat bot."},{"lineNumber":42,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"nuovonatura"},"content":"    public void run() {"},{"lineNumber":44,"author":{"gitId":"nuovonatura"},"content":"        ui.showWelcome();"},{"lineNumber":45,"author":{"gitId":"nuovonatura"},"content":"        boolean isExit \u003d false;"},{"lineNumber":46,"author":{"gitId":"nuovonatura"},"content":"        while (!isExit) {"},{"lineNumber":47,"author":{"gitId":"nuovonatura"},"content":"            try {"},{"lineNumber":48,"author":{"gitId":"nuovonatura"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":49,"author":{"gitId":"nuovonatura"},"content":"                ui.showLine();"},{"lineNumber":50,"author":{"gitId":"nuovonatura"},"content":"                Command c \u003d Parser.translate(fullCommand);"},{"lineNumber":51,"author":{"gitId":"nuovonatura"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":52,"author":{"gitId":"nuovonatura"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":53,"author":{"gitId":"nuovonatura"},"content":"            } catch (DukeException e) {"},{"lineNumber":54,"author":{"gitId":"nuovonatura"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":55,"author":{"gitId":"nuovonatura"},"content":"            } finally {"},{"lineNumber":56,"author":{"gitId":"nuovonatura"},"content":"                ui.showLine();"},{"lineNumber":57,"author":{"gitId":"nuovonatura"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":61,"author":{"gitId":"nuovonatura"},"content":"    public static void main(String[] args) {"},{"lineNumber":62,"author":{"gitId":"nuovonatura"},"content":"        new Duke(\"data/tasks.txt\").run();"},{"lineNumber":63,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":65,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"nuovonatura"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":67,"author":{"gitId":"nuovonatura"},"content":"     * Replace this stub with your completed method."},{"lineNumber":68,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"nuovonatura"},"content":"    public String getResponse(String input) throws DukeException {"},{"lineNumber":70,"author":{"gitId":"nuovonatura"},"content":"        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();"},{"lineNumber":71,"author":{"gitId":"nuovonatura"},"content":"        PrintStream dukeDialog \u003d new PrintStream(baos);"},{"lineNumber":72,"author":{"gitId":"nuovonatura"},"content":"        PrintStream old \u003d System.out;"},{"lineNumber":73,"author":{"gitId":"nuovonatura"},"content":"        System.setOut(dukeDialog);"},{"lineNumber":74,"author":{"gitId":"nuovonatura"},"content":"        String fullCommand \u003d input;"},{"lineNumber":75,"author":{"gitId":"nuovonatura"},"content":"        Command c \u003d Parser.translate(fullCommand);"},{"lineNumber":76,"author":{"gitId":"nuovonatura"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":77,"author":{"gitId":"nuovonatura"},"content":"        System.out.flush();"},{"lineNumber":78,"author":{"gitId":"nuovonatura"},"content":"        System.setOut(old);"},{"lineNumber":79,"author":{"gitId":"nuovonatura"},"content":"        return baos.toString();"},{"lineNumber":80,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":81}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import duke.controllers.Main;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"public class Launcher {"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":"    public static void main(String[] args) {"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":13}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":" * Represents a general command/command category."},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"    protected String commandName;"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"    protected boolean isExit;"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"     * Returns if the command exterminate the chat bot."},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"     * @return A boolean representing if the command exterminate the chat bot."},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":"    public boolean isExit() {"},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"        return isExit;"},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"     * Executes the instructions of the command."},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"     * @param list A TaskList object of which the command is executed on."},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"     * @param ui An UI object to interact with the user if required by the command."},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"     * @param storage A Storage object to write/access information to/from a file if required by the command."},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"     * @throws DukeException if any exception is thrown during execution in the format of DukeException."},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"    public abstract void execute(TaskList list, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":34}},{"path":"src/main/java/duke/commands/CreateTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.Task;"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.TaskList;"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.TaskType;"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":"import duke.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":" * Represents a command that creates a new task."},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"public class CreateTaskCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"    private final TaskType type;"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"    private final String description;"},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"    private final LocalDate date;"},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"     * Creates a new CreateTaskCommand object with the given task type, task description, and optionally date."},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"     * @param type The type of the task that will be created."},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"     * @param description A String representation of the description of the task that will be created."},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"     * @param date An optional LocalDate object storing the date information if the task type is deadline or event."},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"    public CreateTaskCommand(TaskType type, String description, LocalDate... date) {"},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"        this.commandName \u003d \"Create\";"},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"        this.type \u003d type;"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"        this.description \u003d description;"},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"        this.date \u003d date.length \u003e 0 ? date[0] : null;"},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":"        this.isExit \u003d false;"},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":37,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"nuovonatura"},"content":"     * Creates a new task with the given type, description, with or without date."},{"lineNumber":39,"author":{"gitId":"nuovonatura"},"content":"     * Adds the new task to the specified TaskList."},{"lineNumber":40,"author":{"gitId":"nuovonatura"},"content":"     * Updates the specified storage with the changed TaskList."},{"lineNumber":41,"author":{"gitId":"nuovonatura"},"content":"     * Shows action feedback to user."},{"lineNumber":42,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"nuovonatura"},"content":"     * @param list A TaskList object of which the command is executed on."},{"lineNumber":44,"author":{"gitId":"nuovonatura"},"content":"     * @param ui An UI object to interact with the user if required by the command."},{"lineNumber":45,"author":{"gitId":"nuovonatura"},"content":"     * @param storage A Storage object to write/access information to/from a file if required by the command."},{"lineNumber":46,"author":{"gitId":"nuovonatura"},"content":"     * @throws DukeException if any DukeException is thrown by the called functions."},{"lineNumber":47,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"nuovonatura"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"nuovonatura"},"content":"    public void execute(TaskList list, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":50,"author":{"gitId":"nuovonatura"},"content":"        Task task \u003d type \u003d\u003d TaskType.TODO ? new Task(type, description) : new Task(type, description, date);"},{"lineNumber":51,"author":{"gitId":"nuovonatura"},"content":"        list.addTask(task);"},{"lineNumber":52,"author":{"gitId":"nuovonatura"},"content":"        storage.write(list.getList());"},{"lineNumber":53,"author":{"gitId":"nuovonatura"},"content":"        ui.showAdd(task);"},{"lineNumber":54,"author":{"gitId":"nuovonatura"},"content":"        list.printList(\"All\");"},{"lineNumber":55,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":56}},{"path":"src/main/java/duke/commands/DateFilterCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":" * Represents a command that filters the list with the given date."},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"public class DateFilterCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"    private LocalDate date;"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"     * Creates a new DateFilterCommand object with the given date."},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"     * @param date A LocalDate object storing the given date."},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":"    public DateFilterCommand(LocalDate date) {"},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"        this.commandName \u003d \"DateFilter\";"},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"        this.date \u003d date;"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"        this.isExit \u003d false;"},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"     * Prints all tasks in the specified TaskList filtered by the given date."},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"     * Shows action feedback to user."},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"     * @param list A TaskList object of which the command is executed on."},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"     * @param ui An UI object to interact with the user if required by the command."},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"     * @param storage A Storage object to write/access information to/from a file if required by the command."},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":"    public void execute(TaskList list, Ui ui, Storage storage) {"},{"lineNumber":37,"author":{"gitId":"nuovonatura"},"content":"        ui.showDateFilterList();"},{"lineNumber":38,"author":{"gitId":"nuovonatura"},"content":"        list.printList(date);"},{"lineNumber":39,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":40}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":" * Represents a command that deletes a task."},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"    private final int taskIndex;"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"     * Creates a new DeleteCommand object with the given task index in the task list."},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"     * @param taskIndex Index of the task in the task list."},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":"    public DeleteCommand(int taskIndex) {"},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"        this.commandName \u003d \"Delete\";"},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"        this.isExit \u003d false;"},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"     * Deletes the task indexed from the specified TaskList."},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"     * Updates the specified storage with the changed TaskList."},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"     * Show action feedback to user."},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"     * @param list A TaskList object of which the command is executed on."},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"     * @param ui An UI object to interact with the user if required by the command."},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":"     * @param storage A Storage object to write/access information to/from a file if required by the command."},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"     * @throws DukeException thrown if any DukeException is thrown by the called functions."},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"nuovonatura"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"nuovonatura"},"content":"    public void execute(TaskList list, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"nuovonatura"},"content":"        Task task \u003d list.getTaskAtIndex(taskIndex);"},{"lineNumber":40,"author":{"gitId":"nuovonatura"},"content":"        list.deleteTask(task);"},{"lineNumber":41,"author":{"gitId":"nuovonatura"},"content":"        storage.write(list.getList());"},{"lineNumber":42,"author":{"gitId":"nuovonatura"},"content":"        ui.showDelete(task);"},{"lineNumber":43,"author":{"gitId":"nuovonatura"},"content":"        list.printList(\"All\");"},{"lineNumber":44,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":45}},{"path":"src/main/java/duke/commands/DoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":" * Represents a command that does a task."},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"public class DoCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"    private final int taskIndex;"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"     * Creates a new DoCommand with the given task index in the task list."},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"     * @param taskIndex Index of the task in the task list."},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":"    public DoCommand(int taskIndex) {"},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"        this.commandName \u003d \"Do\";"},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"        this.isExit \u003d false;"},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"     * Sets the status of the task indexed in the specified TaskList to be done."},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"     * Updates the specified storage with the changed TaskList."},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"     * Shows action feedback to user."},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"     * @param list A TaskList object of which the command is executed on."},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"     * @param ui An UI object to interact with the user if required by the command."},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":"     * @param storage A Storage object to write/access information to/from a file if required by the command."},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"     * @throws DukeException thrown if any DukeException is thrown by the called functions."},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"nuovonatura"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"nuovonatura"},"content":"    public void execute(TaskList list, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"nuovonatura"},"content":"        Task task \u003d list.getTaskAtIndex(taskIndex);"},{"lineNumber":40,"author":{"gitId":"nuovonatura"},"content":"        list.markTaskAsDone(task);"},{"lineNumber":41,"author":{"gitId":"nuovonatura"},"content":"        storage.write(list.getList());"},{"lineNumber":42,"author":{"gitId":"nuovonatura"},"content":"        ui.showDone(task);"},{"lineNumber":43,"author":{"gitId":"nuovonatura"},"content":"        list.printList(\"Undone\");"},{"lineNumber":44,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":45}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":" * Represents a command that exit Duke chat bot."},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"public class ExitCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"     * Creates a new ExitCommand."},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":"    public ExitCommand() {"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"        this.commandName \u003d \"Exit\";"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"        this.isExit \u003d true;"},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":"     * Exits the Duke chat bot."},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"     * Shows action feedback to user."},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"     * @param list A TaskList object of which the command is executed on."},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"     * @param ui An UI object to interact with the user if required by the command."},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"     * @param storage A Storage object to write/access information to/from a file if required by the command."},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"    public void execute(TaskList list, Ui ui, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"        ui.showFarewell();"},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":32}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"public class FindCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"    private String key;"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":"    public FindCommand(String key) {"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"        this.key \u003d key;"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":"    public void execute(TaskList list, Ui ui, Storage storage) {"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"        ui.showFind(key);"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"        list.printList(key);"},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":19}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":" * Represents a command that shows all tasks in the list."},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"     * Creates a new ListCommand."},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":"    public ListCommand() {"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"        this.commandName \u003d \"FullList\";"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"        this.isExit \u003d false;"},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":"     * Prints all tasks in the specified TaskList."},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"     * Shows action feedback to user."},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"     * @param list A TaskList object of which the command is executed on."},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"     * @param ui An UI object to interact with the user if required by the command."},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"     * @param storage A Storage object to write/access information to/from a file if required by the command."},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"    public void execute(TaskList list, Ui ui, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"        ui.showList();"},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"        list.printList(\"All\");"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":33}},{"path":"src/main/java/duke/commands/SnoozeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":" * Represents a command that snooze a deadline or an evnet."},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":"public class SnoozeCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"    private final int taskIndex;"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"    private final LocalDate newDate;"},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"     * Creates a new SnoozeCommand object with the given task index in the task list."},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"     * @param taskIndex Index of the task in the task list."},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"    public SnoozeCommand(int taskIndex, LocalDate newDate) {"},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"        this.commandName \u003d \"Snooze\";"},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"        this.newDate \u003d newDate;"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"        this.isExit \u003d false;"},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"     * Deletes the task indexed from the specified TaskList."},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"     * Updates the specified storage with the changed TaskList."},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":"     * Show action feedback to user."},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":"     * @param list A TaskList object of which the command is executed on."},{"lineNumber":37,"author":{"gitId":"nuovonatura"},"content":"     * @param ui An UI object to interact with the user if required by the command."},{"lineNumber":38,"author":{"gitId":"nuovonatura"},"content":"     * @param storage A Storage object to write/access information to/from a file if required by the command."},{"lineNumber":39,"author":{"gitId":"nuovonatura"},"content":"     * @throws DukeException thrown if any DukeException is thrown by the called functions."},{"lineNumber":40,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"nuovonatura"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"nuovonatura"},"content":"    public void execute(TaskList list, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"nuovonatura"},"content":"        Task task \u003d list.getTaskAtIndex(taskIndex);"},{"lineNumber":44,"author":{"gitId":"nuovonatura"},"content":"        list.deleteTask(task);"},{"lineNumber":45,"author":{"gitId":"nuovonatura"},"content":"        Task newTask \u003d update(task, newDate);"},{"lineNumber":46,"author":{"gitId":"nuovonatura"},"content":"        list.addTask(newTask);"},{"lineNumber":47,"author":{"gitId":"nuovonatura"},"content":"        storage.write(list.getList());"},{"lineNumber":48,"author":{"gitId":"nuovonatura"},"content":"        ui.showSnooze(task);"},{"lineNumber":49,"author":{"gitId":"nuovonatura"},"content":"        list.printList(\"All\");"},{"lineNumber":50,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":52,"author":{"gitId":"nuovonatura"},"content":"    private Task update(Task task, LocalDate newDate) {"},{"lineNumber":53,"author":{"gitId":"nuovonatura"},"content":"        Task newTask \u003d new Task(task.getType(),task.getDescription(), newDate);"},{"lineNumber":54,"author":{"gitId":"nuovonatura"},"content":"        return newTask;"},{"lineNumber":55,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":56}},{"path":"src/main/java/duke/controllers/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.controllers;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":38,"author":{"gitId":"nuovonatura"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"nuovonatura"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":42,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"nuovonatura"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"nuovonatura"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"nuovonatura"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"nuovonatura"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"nuovonatura"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"nuovonatura"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":52,"author":{"gitId":"nuovonatura"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"nuovonatura"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":56,"author":{"gitId":"nuovonatura"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"nuovonatura"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"nuovonatura"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"nuovonatura"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":61}},{"path":"src/main/java/duke/controllers/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.controllers;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"    private Duke duke \u003d new Duke(\"data/tasks.txt\");"},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"            stage.setTitle(\"N Chat Bot\");"},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":33}},{"path":"src/main/java/duke/controllers/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.controllers;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"    private boolean isExit \u003d false;"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"     * Initializes the displayed screen to the specified state."},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":"    public void initialize() {"},{"lineNumber":37,"author":{"gitId":"nuovonatura"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":38,"author":{"gitId":"nuovonatura"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":39,"author":{"gitId":"nuovonatura"},"content":"                DialogBox.getDukeDialog(\"Welcome to N.\", dukeImage)"},{"lineNumber":40,"author":{"gitId":"nuovonatura"},"content":"        );"},{"lineNumber":41,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":43,"author":{"gitId":"nuovonatura"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":44,"author":{"gitId":"nuovonatura"},"content":"        duke \u003d d;"},{"lineNumber":45,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":47,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"nuovonatura"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":49,"author":{"gitId":"nuovonatura"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":50,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"nuovonatura"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"nuovonatura"},"content":"    private void handleUserInput() {"},{"lineNumber":53,"author":{"gitId":"nuovonatura"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":54,"author":{"gitId":"nuovonatura"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":55,"author":{"gitId":"nuovonatura"},"content":"                DialogBox.getUserDialog(input, userImage)"},{"lineNumber":56,"author":{"gitId":"nuovonatura"},"content":"        );"},{"lineNumber":57,"author":{"gitId":"nuovonatura"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"nuovonatura"},"content":"            String response \u003d duke.getResponse(input);"},{"lineNumber":59,"author":{"gitId":"nuovonatura"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":60,"author":{"gitId":"nuovonatura"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":61,"author":{"gitId":"nuovonatura"},"content":"            );"},{"lineNumber":62,"author":{"gitId":"nuovonatura"},"content":"            if (response.contains(\"See you next time!\")) {"},{"lineNumber":63,"author":{"gitId":"nuovonatura"},"content":"                isExit \u003d true;"},{"lineNumber":64,"author":{"gitId":"nuovonatura"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"nuovonatura"},"content":"        } catch (DukeException e) {"},{"lineNumber":66,"author":{"gitId":"nuovonatura"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":67,"author":{"gitId":"nuovonatura"},"content":"                    DialogBox.getDukeDialog(e.getMessage(), dukeImage)"},{"lineNumber":68,"author":{"gitId":"nuovonatura"},"content":"            );"},{"lineNumber":69,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":71,"author":{"gitId":"nuovonatura"},"content":"        if (isExit) {"},{"lineNumber":72,"author":{"gitId":"nuovonatura"},"content":"            Platform.exit();"},{"lineNumber":73,"author":{"gitId":"nuovonatura"},"content":"        } else {"},{"lineNumber":74,"author":{"gitId":"nuovonatura"},"content":"            userInput.clear();"},{"lineNumber":75,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":77}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":" * Represents an exception occured during Duke chat bot operations."},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"public class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"     * Creates a new DukeException with the given message."},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"     * @param message A String representation of the given message."},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"    public DukeException(String message) {"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"        super(message);"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":16}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"import duke.commands.*;"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.TaskType;"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":" * Represents a parser that translate user input into Duke commands."},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"public class Parser {"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"    private static final String DATE_REGEX \u003d \"^(19|20)\\\\d\\\\d-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$\";"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"     * Translates user input into Duke commands."},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"     * Returns the duke command."},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"     * @param userInput A String representation of the user input."},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":"     * @return A Duke command."},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"     * @throws DukeException thrown if the parser does not understand the user input."},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"    public static Command translate(String userInput) throws DukeException {"},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"        Command command;"},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"        String[] commandParaPair \u003d userInput.split(\" \", 2);"},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"        switch (commandParaPair[0]) {"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"        case \"bye\":"},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"            command \u003d createExitCommand();"},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"            break;"},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"        case \"list\":"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"            command \u003d createListCommand();"},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"            break;"},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":"        case \"on\":"},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"            command \u003d createDateFilterCommand(commandParaPair);"},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":"            break;"},{"lineNumber":37,"author":{"gitId":"nuovonatura"},"content":"        case \"done\":"},{"lineNumber":38,"author":{"gitId":"nuovonatura"},"content":"            command \u003d createDoCommand(commandParaPair);"},{"lineNumber":39,"author":{"gitId":"nuovonatura"},"content":"            break;"},{"lineNumber":40,"author":{"gitId":"nuovonatura"},"content":"        case \"snooze\":"},{"lineNumber":41,"author":{"gitId":"nuovonatura"},"content":"            command \u003d createSnoozeCommand(commandParaPair);"},{"lineNumber":42,"author":{"gitId":"nuovonatura"},"content":"            break;"},{"lineNumber":43,"author":{"gitId":"nuovonatura"},"content":"        case \"delete\":"},{"lineNumber":44,"author":{"gitId":"nuovonatura"},"content":"            command \u003d createDeleteCommand(commandParaPair);"},{"lineNumber":45,"author":{"gitId":"nuovonatura"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"nuovonatura"},"content":"        case \"find\":"},{"lineNumber":47,"author":{"gitId":"nuovonatura"},"content":"            command \u003d createFindCommand(commandParaPair);"},{"lineNumber":48,"author":{"gitId":"nuovonatura"},"content":"            break;"},{"lineNumber":49,"author":{"gitId":"nuovonatura"},"content":"        case \"todo\":"},{"lineNumber":50,"author":{"gitId":"nuovonatura"},"content":"            command \u003d createTodoTaskCommand(commandParaPair);"},{"lineNumber":51,"author":{"gitId":"nuovonatura"},"content":"            break;"},{"lineNumber":52,"author":{"gitId":"nuovonatura"},"content":"        case \"deadline\":"},{"lineNumber":53,"author":{"gitId":"nuovonatura"},"content":"        case \"event\":"},{"lineNumber":54,"author":{"gitId":"nuovonatura"},"content":"            command \u003d createDeadlineEventTaskCommand(commandParaPair);"},{"lineNumber":55,"author":{"gitId":"nuovonatura"},"content":"            break;"},{"lineNumber":56,"author":{"gitId":"nuovonatura"},"content":"        default:"},{"lineNumber":57,"author":{"gitId":"nuovonatura"},"content":"            throw new DukeException(\"\\tCannot recognise command.\");"},{"lineNumber":58,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"nuovonatura"},"content":"        return command;"},{"lineNumber":60,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":62,"author":{"gitId":"nuovonatura"},"content":"    private static Command createExitCommand() {"},{"lineNumber":63,"author":{"gitId":"nuovonatura"},"content":"        return new ExitCommand();"},{"lineNumber":64,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":66,"author":{"gitId":"nuovonatura"},"content":"    private static Command createListCommand() {"},{"lineNumber":67,"author":{"gitId":"nuovonatura"},"content":"        return new ListCommand();"},{"lineNumber":68,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":70,"author":{"gitId":"nuovonatura"},"content":"    private static Command createDateFilterCommand(String[] commandParaPair) throws DukeException {"},{"lineNumber":71,"author":{"gitId":"nuovonatura"},"content":"        if (commandParaPair.length \u003c 2 || !commandParaPair[1].matches(DATE_REGEX)) {"},{"lineNumber":72,"author":{"gitId":"nuovonatura"},"content":"            throw new DukeException(\"\\tCannot recognise date.\");"},{"lineNumber":73,"author":{"gitId":"nuovonatura"},"content":"        } else {"},{"lineNumber":74,"author":{"gitId":"nuovonatura"},"content":"            return new DateFilterCommand(LocalDate.parse(commandParaPair[1]));"},{"lineNumber":75,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":78,"author":{"gitId":"nuovonatura"},"content":"    private static Command createDoCommand(String[] commandParaPair) throws DukeException {"},{"lineNumber":79,"author":{"gitId":"nuovonatura"},"content":"        if (commandParaPair.length \u003c 2 || !commandParaPair[1].matches(\"\\\\d+\")) {"},{"lineNumber":80,"author":{"gitId":"nuovonatura"},"content":"            throw new DukeException(\"\\tCannot recognise task number.\");"},{"lineNumber":81,"author":{"gitId":"nuovonatura"},"content":"        } else {"},{"lineNumber":82,"author":{"gitId":"nuovonatura"},"content":"            return new DoCommand(Integer.parseInt(commandParaPair[1]));"},{"lineNumber":83,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":86,"author":{"gitId":"nuovonatura"},"content":"    private static Command createSnoozeCommand(String[] commandParaPair) throws DukeException {"},{"lineNumber":87,"author":{"gitId":"nuovonatura"},"content":"        if (commandParaPair.length \u003c 2) {"},{"lineNumber":88,"author":{"gitId":"nuovonatura"},"content":"            throw new DukeException(\"\\tCannot recognise task number.\");"},{"lineNumber":89,"author":{"gitId":"nuovonatura"},"content":"        } else {"},{"lineNumber":90,"author":{"gitId":"nuovonatura"},"content":"            String[] indexDatePair \u003d commandParaPair[1].split(\" \");"},{"lineNumber":91,"author":{"gitId":"nuovonatura"},"content":"            int taskIndex \u003d Integer.parseInt(indexDatePair[0]);"},{"lineNumber":92,"author":{"gitId":"nuovonatura"},"content":"            LocalDate newDate \u003d LocalDate.parse(indexDatePair[1]);"},{"lineNumber":93,"author":{"gitId":"nuovonatura"},"content":"            return new SnoozeCommand(taskIndex, newDate);"},{"lineNumber":94,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":97,"author":{"gitId":"nuovonatura"},"content":"    private static Command createDeleteCommand(String[] commandParaPair) throws DukeException {"},{"lineNumber":98,"author":{"gitId":"nuovonatura"},"content":"        if (commandParaPair.length \u003c 2 || !commandParaPair[1].matches(\"\\\\d+\")) {"},{"lineNumber":99,"author":{"gitId":"nuovonatura"},"content":"            throw new DukeException(\"\\tCannot recognise task number.\");"},{"lineNumber":100,"author":{"gitId":"nuovonatura"},"content":"        } else {"},{"lineNumber":101,"author":{"gitId":"nuovonatura"},"content":"            return new DeleteCommand(Integer.parseInt(commandParaPair[1]));"},{"lineNumber":102,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":105,"author":{"gitId":"nuovonatura"},"content":"    private static Command createFindCommand(String[] commandParaPair) throws DukeException {"},{"lineNumber":106,"author":{"gitId":"nuovonatura"},"content":"        if (commandParaPair.length \u003c 2) {"},{"lineNumber":107,"author":{"gitId":"nuovonatura"},"content":"            throw new DukeException(\"\\tNothing specified to find.\");"},{"lineNumber":108,"author":{"gitId":"nuovonatura"},"content":"        } else {"},{"lineNumber":109,"author":{"gitId":"nuovonatura"},"content":"            return new FindCommand(commandParaPair[1]);"},{"lineNumber":110,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":113,"author":{"gitId":"nuovonatura"},"content":"    private static Command createTodoTaskCommand(String[] commandParaPair) throws DukeException {"},{"lineNumber":114,"author":{"gitId":"nuovonatura"},"content":"        if (commandParaPair.length \u003c 2) {"},{"lineNumber":115,"author":{"gitId":"nuovonatura"},"content":"            throw new DukeException(\"\\tCannot create todo without description.\");"},{"lineNumber":116,"author":{"gitId":"nuovonatura"},"content":"        } else {"},{"lineNumber":117,"author":{"gitId":"nuovonatura"},"content":"            return new CreateTaskCommand(TaskType.TODO, commandParaPair[1]);"},{"lineNumber":118,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":121,"author":{"gitId":"nuovonatura"},"content":"    private static Command createDeadlineEventTaskCommand(String[] commandParaPair) throws DukeException {"},{"lineNumber":122,"author":{"gitId":"nuovonatura"},"content":"        if (commandParaPair.length \u003c 2) {"},{"lineNumber":123,"author":{"gitId":"nuovonatura"},"content":"            throw new DukeException(\"\\tCannot create deadline / event without description.\");"},{"lineNumber":124,"author":{"gitId":"nuovonatura"},"content":"        } else {"},{"lineNumber":125,"author":{"gitId":"nuovonatura"},"content":"            String[] descriptionDate \u003d commandParaPair[1].split(\" /by | /at \");"},{"lineNumber":126,"author":{"gitId":"nuovonatura"},"content":"            if (descriptionDate.length \u003c 2) {"},{"lineNumber":127,"author":{"gitId":"nuovonatura"},"content":"                throw new DukeException(\"\\tCannot create deadline / event without date.\");"},{"lineNumber":128,"author":{"gitId":"nuovonatura"},"content":"            } else if (!descriptionDate[1].matches(DATE_REGEX)) {"},{"lineNumber":129,"author":{"gitId":"nuovonatura"},"content":"                throw new DukeException(\"\\tCannot recognise date.\");"},{"lineNumber":130,"author":{"gitId":"nuovonatura"},"content":"            } else {"},{"lineNumber":131,"author":{"gitId":"nuovonatura"},"content":"                return new CreateTaskCommand(TaskType.valueToType(commandParaPair[0]),"},{"lineNumber":132,"author":{"gitId":"nuovonatura"},"content":"                        descriptionDate[0],"},{"lineNumber":133,"author":{"gitId":"nuovonatura"},"content":"                        LocalDate.parse(descriptionDate[1]));"},{"lineNumber":134,"author":{"gitId":"nuovonatura"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":137}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.Task;"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.TaskType;"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":" * Represents a storage that read from and writes to a file."},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"    private final File file;"},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"     * Creates a new Storage object with the given file path."},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"     * @param filePath A String representation of the target file path."},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"    public Storage(String filePath) {"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"        this.file \u003d new File(filePath);"},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"     * Finds the file through file path reference."},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"     * Translates the file into an ArrayList of tasks."},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"     * @return The ArrayList of tasks translated from the file."},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":"     * @throws DukeException thrown if file not found."},{"lineNumber":37,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"nuovonatura"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {"},{"lineNumber":39,"author":{"gitId":"nuovonatura"},"content":"        ArrayList\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":41,"author":{"gitId":"nuovonatura"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"nuovonatura"},"content":"            Scanner fileReader \u003d new Scanner(file);"},{"lineNumber":43,"author":{"gitId":"nuovonatura"},"content":"            while (fileReader.hasNextLine()) {"},{"lineNumber":44,"author":{"gitId":"nuovonatura"},"content":"                String line \u003d fileReader.nextLine();"},{"lineNumber":45,"author":{"gitId":"nuovonatura"},"content":"                String[] command \u003d line.split(\" \\\\| \");"},{"lineNumber":46,"author":{"gitId":"nuovonatura"},"content":"                switch (command[0]) {"},{"lineNumber":47,"author":{"gitId":"nuovonatura"},"content":"                case \"T\":"},{"lineNumber":48,"author":{"gitId":"nuovonatura"},"content":"                    Task todo \u003d loadTodo(command);"},{"lineNumber":49,"author":{"gitId":"nuovonatura"},"content":"                    lst.add(todo);"},{"lineNumber":50,"author":{"gitId":"nuovonatura"},"content":"                    break;"},{"lineNumber":51,"author":{"gitId":"nuovonatura"},"content":"                case \"D\":"},{"lineNumber":52,"author":{"gitId":"nuovonatura"},"content":"                    Task deadline \u003d loadDeadline(command);"},{"lineNumber":53,"author":{"gitId":"nuovonatura"},"content":"                    lst.add(deadline);"},{"lineNumber":54,"author":{"gitId":"nuovonatura"},"content":"                    break;"},{"lineNumber":55,"author":{"gitId":"nuovonatura"},"content":"                case \"E\":"},{"lineNumber":56,"author":{"gitId":"nuovonatura"},"content":"                    Task event \u003d loadEvent(command);"},{"lineNumber":57,"author":{"gitId":"nuovonatura"},"content":"                    lst.add(event);"},{"lineNumber":58,"author":{"gitId":"nuovonatura"},"content":"                    break;"},{"lineNumber":59,"author":{"gitId":"nuovonatura"},"content":"                default:"},{"lineNumber":60,"author":{"gitId":"nuovonatura"},"content":"                }"},{"lineNumber":61,"author":{"gitId":"nuovonatura"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"nuovonatura"},"content":"            fileReader.close();"},{"lineNumber":63,"author":{"gitId":"nuovonatura"},"content":"        } catch (IOException e) {"},{"lineNumber":64,"author":{"gitId":"nuovonatura"},"content":"            throw new DukeException(\"\\tFile not Found.\");"},{"lineNumber":65,"author":{"gitId":"nuovonatura"},"content":"        } catch (Exception e) {"},{"lineNumber":66,"author":{"gitId":"nuovonatura"},"content":"            throw new DukeException(\"\\tError loading history. \" + e.getMessage());"},{"lineNumber":67,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"nuovonatura"},"content":"        return lst;"},{"lineNumber":69,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":71,"author":{"gitId":"nuovonatura"},"content":"    private Task loadTodo(String[] command) {"},{"lineNumber":72,"author":{"gitId":"nuovonatura"},"content":"        Task todo \u003d new Task(TaskType.TODO, command[2]);"},{"lineNumber":73,"author":{"gitId":"nuovonatura"},"content":"        if (command[1].equals(\"1\")) {"},{"lineNumber":74,"author":{"gitId":"nuovonatura"},"content":"            todo.setDone();"},{"lineNumber":75,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"nuovonatura"},"content":"        return todo;"},{"lineNumber":77,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":79,"author":{"gitId":"nuovonatura"},"content":"    private Task loadDeadline(String[] command) {"},{"lineNumber":80,"author":{"gitId":"nuovonatura"},"content":"        Task deadline \u003d new Task(TaskType.DEADLINE, command[2], LocalDate.parse(command[3]));"},{"lineNumber":81,"author":{"gitId":"nuovonatura"},"content":"        if (command[1].equals(\"1\")) {"},{"lineNumber":82,"author":{"gitId":"nuovonatura"},"content":"            deadline.setDone();"},{"lineNumber":83,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"nuovonatura"},"content":"        return deadline;"},{"lineNumber":85,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":87,"author":{"gitId":"nuovonatura"},"content":"    private Task loadEvent(String[] command) {"},{"lineNumber":88,"author":{"gitId":"nuovonatura"},"content":"        Task event \u003d new Task(TaskType.EVENT, command[2], LocalDate.parse(command[3]));"},{"lineNumber":89,"author":{"gitId":"nuovonatura"},"content":"        if (command[1].equals(\"1\")) {"},{"lineNumber":90,"author":{"gitId":"nuovonatura"},"content":"            event.setDone();"},{"lineNumber":91,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"nuovonatura"},"content":"        return event;"},{"lineNumber":93,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":95,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"nuovonatura"},"content":"     * Creates the directory if the targeted file path does not exist."},{"lineNumber":97,"author":{"gitId":"nuovonatura"},"content":"     * Translates the ArrayList of tasks into a String representation."},{"lineNumber":98,"author":{"gitId":"nuovonatura"},"content":"     * Writes the String representation of the task list into the targeted file."},{"lineNumber":99,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"nuovonatura"},"content":"     * @param lst the ArrayList of tasks from some TaskList."},{"lineNumber":101,"author":{"gitId":"nuovonatura"},"content":"     * @throws DukeException thrown if error during writing to file."},{"lineNumber":102,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"nuovonatura"},"content":"    public void write(ArrayList\u003cTask\u003e lst) throws DukeException {"},{"lineNumber":104,"author":{"gitId":"nuovonatura"},"content":"        try {"},{"lineNumber":105,"author":{"gitId":"nuovonatura"},"content":"            file.getParentFile().mkdir();"},{"lineNumber":106,"author":{"gitId":"nuovonatura"},"content":"            FileWriter fileWriter \u003d new FileWriter(file);"},{"lineNumber":107,"author":{"gitId":"nuovonatura"},"content":"            String listToString \u003d \"\";"},{"lineNumber":108,"author":{"gitId":"nuovonatura"},"content":"            for (Task t : lst) {"},{"lineNumber":109,"author":{"gitId":"nuovonatura"},"content":"                if (t.getType() \u003d\u003d TaskType.TODO) {"},{"lineNumber":110,"author":{"gitId":"nuovonatura"},"content":"                    listToString +\u003d \"T | \" + (t.getStatus() ? 1 : 0) + \" | \" + t.getDescription() + \"\\n\";"},{"lineNumber":111,"author":{"gitId":"nuovonatura"},"content":"                } else if (t.getType() \u003d\u003d TaskType.DEADLINE) {"},{"lineNumber":112,"author":{"gitId":"nuovonatura"},"content":"                    listToString +\u003d \"D | \" + (t.getStatus() ? 1 : 0) + \" | \" + t.getDescription() + \" | \""},{"lineNumber":113,"author":{"gitId":"nuovonatura"},"content":"                            + t.getDate().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \"\\n\";"},{"lineNumber":114,"author":{"gitId":"nuovonatura"},"content":"                } else {"},{"lineNumber":115,"author":{"gitId":"nuovonatura"},"content":"                    listToString +\u003d \"E | \" + (t.getStatus() ? 1 : 0) + \" | \" + t.getDescription() + \" | \""},{"lineNumber":116,"author":{"gitId":"nuovonatura"},"content":"                            + t.getDate().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \"\\n\";"},{"lineNumber":117,"author":{"gitId":"nuovonatura"},"content":"                }"},{"lineNumber":118,"author":{"gitId":"nuovonatura"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"nuovonatura"},"content":"            fileWriter.write(listToString);"},{"lineNumber":120,"author":{"gitId":"nuovonatura"},"content":"            fileWriter.close();"},{"lineNumber":121,"author":{"gitId":"nuovonatura"},"content":"        } catch (IOException e) {"},{"lineNumber":122,"author":{"gitId":"nuovonatura"},"content":"            throw new DukeException(\"Error during writing. \" + e.getMessage());"},{"lineNumber":123,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":125,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":126}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":" * Represents a task with a type, a description, a status, and a date."},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":"public class Task {"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"    private final TaskType type;"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"    private final String description;"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"    private boolean isDone;"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"    private final LocalDate date;"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"     * Creates a new Task object with the given type, description."},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"     * Assigns a date if it is a type of deadline or event."},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"     * @param type The type of the task."},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":"     * @param description A String representation of the description of the task."},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"     * @param date The date of deadline or event."},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"    public Task(TaskType type, String description, LocalDate... date) {"},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"        this.type \u003d type;"},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"        this.description \u003d description;"},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"        this.isDone \u003d false;"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"        this.date \u003d date.length \u003e 0 ? date[0] : null;"},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"     * Returns the type of the task."},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":"     * @return the type of the task."},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":"    public TaskType getType() {"},{"lineNumber":37,"author":{"gitId":"nuovonatura"},"content":"        return type;"},{"lineNumber":38,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":40,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"nuovonatura"},"content":"     * Returns the description of the task."},{"lineNumber":42,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"nuovonatura"},"content":"     * @return the description of the task."},{"lineNumber":44,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"nuovonatura"},"content":"    public String getDescription() {"},{"lineNumber":46,"author":{"gitId":"nuovonatura"},"content":"        return description;"},{"lineNumber":47,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":49,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"nuovonatura"},"content":"     * Returns the status of the task."},{"lineNumber":51,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"nuovonatura"},"content":"     * @return the status of the task."},{"lineNumber":53,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"nuovonatura"},"content":"    public boolean getStatus() {"},{"lineNumber":55,"author":{"gitId":"nuovonatura"},"content":"        return isDone;"},{"lineNumber":56,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":58,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"nuovonatura"},"content":"     * Returns the status icon of the task."},{"lineNumber":60,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"nuovonatura"},"content":"     * @return the status icon of the task."},{"lineNumber":62,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"nuovonatura"},"content":"    private String getStatusIcon() {"},{"lineNumber":64,"author":{"gitId":"nuovonatura"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":65,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":67,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"nuovonatura"},"content":"     * Returns the date of a deadline or event."},{"lineNumber":69,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"nuovonatura"},"content":"     * @return the date of a deadline or event."},{"lineNumber":71,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"nuovonatura"},"content":"    public LocalDate getDate() {"},{"lineNumber":73,"author":{"gitId":"nuovonatura"},"content":"        return date;"},{"lineNumber":74,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":76,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"nuovonatura"},"content":"     * Sets the task status to done."},{"lineNumber":78,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"nuovonatura"},"content":"    public void setDone() {"},{"lineNumber":80,"author":{"gitId":"nuovonatura"},"content":"        isDone \u003d true;"},{"lineNumber":81,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":83,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"nuovonatura"},"content":"     * Returns if a task has a date information."},{"lineNumber":85,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"nuovonatura"},"content":"     * @return if a task has a date information."},{"lineNumber":87,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"nuovonatura"},"content":"    public boolean hasDate() {"},{"lineNumber":89,"author":{"gitId":"nuovonatura"},"content":"        return date !\u003d null;"},{"lineNumber":90,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":92,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"nuovonatura"},"content":"     * Returns The String representation of a task."},{"lineNumber":94,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"nuovonatura"},"content":"     * @return the String representation of a task."},{"lineNumber":96,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"nuovonatura"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"nuovonatura"},"content":"    public String toString() {"},{"lineNumber":99,"author":{"gitId":"nuovonatura"},"content":"        String string \u003d \"[\";"},{"lineNumber":100,"author":{"gitId":"nuovonatura"},"content":"        switch (type) {"},{"lineNumber":101,"author":{"gitId":"nuovonatura"},"content":"        case TODO:"},{"lineNumber":102,"author":{"gitId":"nuovonatura"},"content":"            string +\u003d \"T][\" + getStatusIcon() + \"] \" + getDescription();"},{"lineNumber":103,"author":{"gitId":"nuovonatura"},"content":"            break;"},{"lineNumber":104,"author":{"gitId":"nuovonatura"},"content":"        case EVENT:"},{"lineNumber":105,"author":{"gitId":"nuovonatura"},"content":"            string +\u003d \"E][\" + getStatusIcon() + \"] \" + getDescription()"},{"lineNumber":106,"author":{"gitId":"nuovonatura"},"content":"                    + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":107,"author":{"gitId":"nuovonatura"},"content":"            break;"},{"lineNumber":108,"author":{"gitId":"nuovonatura"},"content":"        case DEADLINE:"},{"lineNumber":109,"author":{"gitId":"nuovonatura"},"content":"            string +\u003d \"D][\" + getStatusIcon() + \"] \" + getDescription()"},{"lineNumber":110,"author":{"gitId":"nuovonatura"},"content":"                    + \" (by: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":111,"author":{"gitId":"nuovonatura"},"content":"            break;"},{"lineNumber":112,"author":{"gitId":"nuovonatura"},"content":"        default:"},{"lineNumber":113,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"nuovonatura"},"content":"        return string;"},{"lineNumber":115,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":116}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":" * Represents a task list that stores all the tasks."},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"    private ArrayList\u003cTask\u003e list;"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"    private int activeTasks;"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":"     * Creates a new TaskList object with and empty list and 0 active tasks."},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"    public TaskList() {"},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"        this.list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"        this.activeTasks \u003d 0;"},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"     * Creates a new TaskList object with the given list and count the number of active tasks."},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"     * @param list The given list of tasks."},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"    public TaskList(ArrayList\u003cTask\u003e list) {"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"        this.list \u003d list;"},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"        activeTasks \u003d 0;"},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"        for (Task t : list) {"},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"            if (t.getStatus()) {"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"                activeTasks++;"},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":37,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"nuovonatura"},"content":"     * Adds a task to the TaskList to before all done tasks if it is undone and increment the active task count by 1,"},{"lineNumber":39,"author":{"gitId":"nuovonatura"},"content":"     * or to the last of the list if it is done and do not increment the active task count."},{"lineNumber":40,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"nuovonatura"},"content":"     * @param task The specified task."},{"lineNumber":42,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"nuovonatura"},"content":"    public void addTask(Task task) {"},{"lineNumber":44,"author":{"gitId":"nuovonatura"},"content":"        list.add(task.getStatus() ? list.size() : activeTasks, task);"},{"lineNumber":45,"author":{"gitId":"nuovonatura"},"content":"        activeTasks +\u003d task.getStatus() ? 0 : 1;"},{"lineNumber":46,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":48,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"nuovonatura"},"content":"     * Deletes a task from the TaskList and decrement the active task count by 1 if it is undone,"},{"lineNumber":50,"author":{"gitId":"nuovonatura"},"content":"     * or do not decrement the active task count if it is done."},{"lineNumber":51,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"nuovonatura"},"content":"     * @param task The specified task."},{"lineNumber":53,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"nuovonatura"},"content":"    public void deleteTask(Task task) {"},{"lineNumber":55,"author":{"gitId":"nuovonatura"},"content":"        list.remove(task);"},{"lineNumber":56,"author":{"gitId":"nuovonatura"},"content":"        activeTasks -\u003d task.getStatus() ? 0 : 1;"},{"lineNumber":57,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":59,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"nuovonatura"},"content":"     * Marks a task status to be done and move it to the last."},{"lineNumber":61,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"nuovonatura"},"content":"     * @param task The specified task."},{"lineNumber":63,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"nuovonatura"},"content":"    public void markTaskAsDone(Task task) {"},{"lineNumber":65,"author":{"gitId":"nuovonatura"},"content":"        task.setDone();"},{"lineNumber":66,"author":{"gitId":"nuovonatura"},"content":"        activeTasks--;"},{"lineNumber":67,"author":{"gitId":"nuovonatura"},"content":"        deleteTask(task);"},{"lineNumber":68,"author":{"gitId":"nuovonatura"},"content":"        addTask(task);"},{"lineNumber":69,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":71,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"nuovonatura"},"content":"     * Returns the task at the specified index in the list."},{"lineNumber":73,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"nuovonatura"},"content":"     * @param index The specified index of a task."},{"lineNumber":75,"author":{"gitId":"nuovonatura"},"content":"     * @return The task at the specified index in the list."},{"lineNumber":76,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"nuovonatura"},"content":"    public Task getTaskAtIndex(int index) {"},{"lineNumber":78,"author":{"gitId":"nuovonatura"},"content":"        assert index \u003c\u003d list.size() + 1;"},{"lineNumber":79,"author":{"gitId":"nuovonatura"},"content":"        return list.get(index - 1);"},{"lineNumber":80,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":82,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"nuovonatura"},"content":"     * Returns the ArrayList of tasks."},{"lineNumber":84,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"nuovonatura"},"content":"     * @return The ArrayList of tasks."},{"lineNumber":86,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"nuovonatura"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":88,"author":{"gitId":"nuovonatura"},"content":"        return list;"},{"lineNumber":89,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":91,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"nuovonatura"},"content":"     * Prints the list with specified mode."},{"lineNumber":93,"author":{"gitId":"nuovonatura"},"content":"     * Prints all the undone tasks in the list if the mode is undone."},{"lineNumber":94,"author":{"gitId":"nuovonatura"},"content":"     * Prints all tasks in the list if the mode is all."},{"lineNumber":95,"author":{"gitId":"nuovonatura"},"content":"     * Prints all tasks with description containing the mode keyword in any other condition."},{"lineNumber":96,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"nuovonatura"},"content":"     * @param mode The mode specified for printing the list."},{"lineNumber":98,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"nuovonatura"},"content":"    public void printList(String mode) {"},{"lineNumber":100,"author":{"gitId":"nuovonatura"},"content":"        int i \u003d 1;"},{"lineNumber":101,"author":{"gitId":"nuovonatura"},"content":"        for (Task t : list) {"},{"lineNumber":102,"author":{"gitId":"nuovonatura"},"content":"            switch (mode) {"},{"lineNumber":103,"author":{"gitId":"nuovonatura"},"content":"            case \"Undone\":"},{"lineNumber":104,"author":{"gitId":"nuovonatura"},"content":"                if (t.getStatus()) {"},{"lineNumber":105,"author":{"gitId":"nuovonatura"},"content":"                    continue;"},{"lineNumber":106,"author":{"gitId":"nuovonatura"},"content":"                }"},{"lineNumber":107,"author":{"gitId":"nuovonatura"},"content":"                break;"},{"lineNumber":108,"author":{"gitId":"nuovonatura"},"content":"            case \"All\":"},{"lineNumber":109,"author":{"gitId":"nuovonatura"},"content":"                break;"},{"lineNumber":110,"author":{"gitId":"nuovonatura"},"content":"            default:"},{"lineNumber":111,"author":{"gitId":"nuovonatura"},"content":"                if (!t.getDescription().contains(mode)) {"},{"lineNumber":112,"author":{"gitId":"nuovonatura"},"content":"                    continue;"},{"lineNumber":113,"author":{"gitId":"nuovonatura"},"content":"                }"},{"lineNumber":114,"author":{"gitId":"nuovonatura"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"nuovonatura"},"content":"            System.out.println(\"\\t\" + i + \". \" + t);"},{"lineNumber":116,"author":{"gitId":"nuovonatura"},"content":"            i++;"},{"lineNumber":117,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":120,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"nuovonatura"},"content":"     * Prints the tasks with the specified date information."},{"lineNumber":122,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"nuovonatura"},"content":"     * @param date The date information."},{"lineNumber":124,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"nuovonatura"},"content":"    public void printList(LocalDate date) {"},{"lineNumber":126,"author":{"gitId":"nuovonatura"},"content":"        int i \u003d 1;"},{"lineNumber":127,"author":{"gitId":"nuovonatura"},"content":"        for (Task t : list) {"},{"lineNumber":128,"author":{"gitId":"nuovonatura"},"content":"            if (!t.hasDate() || !t.getDate().equals(date)) {"},{"lineNumber":129,"author":{"gitId":"nuovonatura"},"content":"                continue;"},{"lineNumber":130,"author":{"gitId":"nuovonatura"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"nuovonatura"},"content":"            System.out.println(\"\\t\" + i + \". \" + t);"},{"lineNumber":132,"author":{"gitId":"nuovonatura"},"content":"            i++;"},{"lineNumber":133,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":135}},{"path":"src/main/java/duke/tasks/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":" * Represents different type of a task."},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"public enum TaskType {"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"    TODO(\"todo\"),"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"    DEADLINE(\"deadline\"),"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":"    EVENT(\"event\");"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"    private String type;"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"    TaskType(String type) {"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":"        this.type \u003d type;"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"     * Returns the value of the TaskType."},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":"     * @return value of the TaskType."},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"    public String getType() {"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"        return this.type;"},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"     * Returns the corresponding TaskType object from the specified value if found."},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"     * @param value The specified value to find in TaskType."},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"     * @return The corresponding TaskType object."},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"    public static TaskType valueToType(String value) {"},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":"        for (TaskType t : values()) {"},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"            if (t.type.equals(value)) {"},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":"                return t;"},{"lineNumber":37,"author":{"gitId":"nuovonatura"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"nuovonatura"},"content":"        return null;"},{"lineNumber":40,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":41}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":" * Represents the ui that interacts with the user."},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"public class Ui {"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"     * Shows a section dividing line."},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"    public void showLine() {"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"        System.out.println(\"----------------------------------------------------------------------------------------\");"},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":"     * Shows the welcome interface."},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"    public void showWelcome() {"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"        System.out.println(\"Hello!\\nI am Baymax, your personal idle time companion.\""},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"                + \"\\n\\tHow may I help you?\");"},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"     * Shows the farewell interface."},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"    public void showFarewell() {"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"        System.out.println(\"List saved!\\nIt was my pleasure assisting you.\\nSee you next time!\");"},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":"     * Shows the list interface."},{"lineNumber":37,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"nuovonatura"},"content":"    public void showList() {"},{"lineNumber":39,"author":{"gitId":"nuovonatura"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":40,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":42,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"nuovonatura"},"content":"     * Shows the done interface with the specified task."},{"lineNumber":44,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"nuovonatura"},"content":"     * @param task The task specified to be done"},{"lineNumber":46,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"nuovonatura"},"content":"    public void showDone(Task task) {"},{"lineNumber":48,"author":{"gitId":"nuovonatura"},"content":"        System.out.println(\"You have finished \" + task.getDescription() + \"!\\nMove on to the next one:\");"},{"lineNumber":49,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":51,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"nuovonatura"},"content":"     * Shows the snooze interface with the specified task."},{"lineNumber":53,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"nuovonatura"},"content":"     * @param task The task specified to be snoozed"},{"lineNumber":55,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"nuovonatura"},"content":"    public void showSnooze(Task task) {"},{"lineNumber":57,"author":{"gitId":"nuovonatura"},"content":"        System.out.println(task.getDescription() + \" is snoozed to new date: \" + task.getDate().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));"},{"lineNumber":58,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":60,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"nuovonatura"},"content":"     * Shows add interface with the specified task."},{"lineNumber":62,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"nuovonatura"},"content":"     * @param task The task specified to add."},{"lineNumber":64,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"nuovonatura"},"content":"    public void showAdd(Task task) {"},{"lineNumber":66,"author":{"gitId":"nuovonatura"},"content":"        System.out.println(\"You have added \" + task + \"!\\nNow you have these tasks:\");"},{"lineNumber":67,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":69,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"nuovonatura"},"content":"     * Shows delete interface with the specified task."},{"lineNumber":71,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"nuovonatura"},"content":"     * @param task The task specified to delete."},{"lineNumber":73,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"nuovonatura"},"content":"    public void showDelete(Task task) {"},{"lineNumber":75,"author":{"gitId":"nuovonatura"},"content":"        System.out.println(task.getDescription() + \" deleted. \\nCheck out other tasks:\");"},{"lineNumber":76,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":78,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"nuovonatura"},"content":"     * Shows date filtered list interface."},{"lineNumber":80,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"nuovonatura"},"content":"    public void showDateFilterList() {"},{"lineNumber":82,"author":{"gitId":"nuovonatura"},"content":"        System.out.println(\"You have these tasks on this date:\");"},{"lineNumber":83,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":85,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"nuovonatura"},"content":"     * Shows key filtered list interface."},{"lineNumber":87,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"nuovonatura"},"content":"     * @param key The key used to filter the list."},{"lineNumber":89,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"nuovonatura"},"content":"    public void showFind(String key) {"},{"lineNumber":91,"author":{"gitId":"nuovonatura"},"content":"        System.out.println(\"You have these tasks containing \\\"\" + key + \"\\\":\");"},{"lineNumber":92,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":94,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"nuovonatura"},"content":"     * Reads the input from the user."},{"lineNumber":96,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"nuovonatura"},"content":"     * @return The String representation of the input by the user."},{"lineNumber":98,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"nuovonatura"},"content":"    public String readCommand() {"},{"lineNumber":100,"author":{"gitId":"nuovonatura"},"content":"        Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":101,"author":{"gitId":"nuovonatura"},"content":"        return scanner.nextLine();"},{"lineNumber":102,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":104,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"nuovonatura"},"content":"     * Shows the error message."},{"lineNumber":106,"author":{"gitId":"nuovonatura"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"nuovonatura"},"content":"     * @param error The error message."},{"lineNumber":108,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"nuovonatura"},"content":"    public void showError(String error) {"},{"lineNumber":110,"author":{"gitId":"nuovonatura"},"content":"        System.out.println(error);"},{"lineNumber":111,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":113,"author":{"gitId":"nuovonatura"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"nuovonatura"},"content":"     * Shows loading error."},{"lineNumber":115,"author":{"gitId":"nuovonatura"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"nuovonatura"},"content":"    public void showLoadingError() {"},{"lineNumber":117,"author":{"gitId":"nuovonatura"},"content":"        System.out.println(\"Error loading file.\\nNew Duke Todo list created!\");"},{"lineNumber":118,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":119}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"nuovonatura":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.controllers.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"nuovonatura":19}},{"path":"src/test/java/duke/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"import duke.tasks.TaskType;"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":" * Represents a storage test."},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":" * @version 1.0"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":" */"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"public class StorageTest {"},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"    Storage storage1 \u003d new Storage(\"./src/test/tasks.txt\");"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"    Storage storage2 \u003d new Storage(\"./tasks.txt\");"},{"lineNumber":20,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":21,"author":{"gitId":"nuovonatura"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"nuovonatura"},"content":"    void load() {"},{"lineNumber":23,"author":{"gitId":"nuovonatura"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"nuovonatura"},"content":"            ArrayList\u003cTask\u003e list \u003d storage1.load();"},{"lineNumber":25,"author":{"gitId":"nuovonatura"},"content":"            Task task \u003d list.get(0);"},{"lineNumber":26,"author":{"gitId":"nuovonatura"},"content":"            assertTrue(list.size() \u003d\u003d 1);"},{"lineNumber":27,"author":{"gitId":"nuovonatura"},"content":"            assertTrue(task.getDescription().equals(\"what\"));"},{"lineNumber":28,"author":{"gitId":"nuovonatura"},"content":"            assertEquals(task.getType(), TaskType.DEADLINE);"},{"lineNumber":29,"author":{"gitId":"nuovonatura"},"content":"            assertEquals(task.getStatus(), false);"},{"lineNumber":30,"author":{"gitId":"nuovonatura"},"content":"        } catch (DukeException e) {"},{"lineNumber":31,"author":{"gitId":"nuovonatura"},"content":"            fail();"},{"lineNumber":32,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":35,"author":{"gitId":"nuovonatura"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"nuovonatura"},"content":"    void load_nonExistingFile() {"},{"lineNumber":37,"author":{"gitId":"nuovonatura"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"nuovonatura"},"content":"            storage2.load();"},{"lineNumber":39,"author":{"gitId":"nuovonatura"},"content":"            fail();"},{"lineNumber":40,"author":{"gitId":"nuovonatura"},"content":"        } catch (DukeException e) {"},{"lineNumber":41,"author":{"gitId":"nuovonatura"},"content":"            assertTrue(e.getMessage().equals(\"\\tFile not Found.\"));"},{"lineNumber":42,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nuovonatura"},"content":""},{"lineNumber":45,"author":{"gitId":"nuovonatura"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"nuovonatura"},"content":"    void write() {"},{"lineNumber":47,"author":{"gitId":"nuovonatura"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"nuovonatura"},"content":"        list.add(new Task(TaskType.DEADLINE, \"what\", LocalDate.parse(\"2019-01-01\")));"},{"lineNumber":49,"author":{"gitId":"nuovonatura"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"nuovonatura"},"content":"            storage1.write(list);"},{"lineNumber":51,"author":{"gitId":"nuovonatura"},"content":"        } catch (DukeException e) {"},{"lineNumber":52,"author":{"gitId":"nuovonatura"},"content":"            fail();"},{"lineNumber":53,"author":{"gitId":"nuovonatura"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"nuovonatura"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"nuovonatura"},"content":"}"}],"authorContributionMap":{"nuovonatura":55}},{"path":"src/test/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"D | 0 | what | 2019-01-01"}],"authorContributionMap":{"nuovonatura":1}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"blah"},{"lineNumber":2,"author":{"gitId":"nuovonatura"},"content":"what"},{"lineNumber":3,"author":{"gitId":"nuovonatura"},"content":"todo"},{"lineNumber":4,"author":{"gitId":"nuovonatura"},"content":"todo borrow book"},{"lineNumber":5,"author":{"gitId":"nuovonatura"},"content":"deadline return book"},{"lineNumber":6,"author":{"gitId":"nuovonatura"},"content":"deadline return book /by Sunday"},{"lineNumber":7,"author":{"gitId":"nuovonatura"},"content":"event project meeting"},{"lineNumber":8,"author":{"gitId":"nuovonatura"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":9,"author":{"gitId":"nuovonatura"},"content":"deadline homework /by today"},{"lineNumber":10,"author":{"gitId":"nuovonatura"},"content":"list"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"done 9"},{"lineNumber":12,"author":{"gitId":"nuovonatura"},"content":"done 2"},{"lineNumber":13,"author":{"gitId":"nuovonatura"},"content":"todo return book"},{"lineNumber":14,"author":{"gitId":"nuovonatura"},"content":"event lesson /at Friday 10-12am"},{"lineNumber":15,"author":{"gitId":"nuovonatura"},"content":"list"},{"lineNumber":16,"author":{"gitId":"nuovonatura"},"content":"delete 7"},{"lineNumber":17,"author":{"gitId":"nuovonatura"},"content":"delete 4"},{"lineNumber":18,"author":{"gitId":"nuovonatura"},"content":"list"},{"lineNumber":19,"author":{"gitId":"nuovonatura"},"content":"bye"}],"authorContributionMap":{"nuovonatura":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"nuovonatura"},"content":"SET JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"},{"lineNumber":2,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":5,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":8,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":11,"author":{"gitId":"nuovonatura"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"nuovonatura":2,"-":20}}]
