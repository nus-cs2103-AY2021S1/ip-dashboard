[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "csiongn": 2
    }
  },
  {
    "path": "sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "./src/main/java/Duke.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "./src/main/java/Task.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "./src/main/java/Deadline.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "./src/main/java/Todo.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "./src/main/java/Event.java"
      }
    ],
    "authorContributionMap": {
      "csiongn": 5
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class representing commands to add task to TaskList"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final String remaining;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public AddCommand(String type, String remaining) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.remaining \u003d remaining;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Executes the command to add a task by adding task into given TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param tasks TaskList representing list of current tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param ui Ui object to handle printing of outputs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param storage Storage object to handle saving of outputs to computer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws EmptyBodyException If command is to add event or deadline but no date and time is provided."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws UnknownInputException If an unrecognised command is given."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws EmptyBodyException, UnknownInputException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        switch (this.type) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                Task newTodo \u003d new Todo(remaining);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                ui.showMessage(tasks.createTask(newTodo));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            case \"deadline\": {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                String[] text \u003d remaining.split(\" /by \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                String description \u003d text[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                if (text.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    throw new EmptyBodyException(\"deadline\", \"deadline\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    LocalDate deadline \u003d LocalDate.parse(text[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    Task newDeadline \u003d new Deadline(description, deadline);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    ui.showMessage(tasks.createTask(newDeadline));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    throw new UnknownInputException(text[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            case \"event\": {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                String[] text \u003d remaining.split(\" /at \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                String description \u003d text[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                if (text.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    throw new EmptyBodyException(\"date and time\", \"event\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                String dateTime \u003d text[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                Task newEvent \u003d new Event(description, dateTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                ui.showMessage(tasks.createTask(newEvent));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                throw new UnknownInputException(this.type);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns whether the command is a command to exit."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 75
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "abstract class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Abstract Methods"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param tasks TaskList representing list of current tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param ui Ui object to handle printing of outputs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param storage Storage object to handle saving of outputs to computer"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    abstract boolean isExit();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 14
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class for a tasks with a deadline"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    protected LocalDate deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a new task with deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param deadline deadline of the task in yyyy-mm-dd format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws EmptyBodyException"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public Deadline(String description, LocalDate deadline) throws EmptyBodyException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // String Representation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.deadline + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 29
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class representing commands to delete a task"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final int taskNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Executes the command to delete a task by deleting specified task from given TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param tasks TaskList representing list of current tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param ui Ui object to handle printing of outputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param storage Storage object to handle saving of outputs to computer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws IndexOutOfBoundsDukeException If task number is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    void execute(TaskList tasks, Ui ui, Storage storage) throws IndexOutOfBoundsDukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        ui.showMessage(tasks.deleteTask(taskNumber));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns whether the command is a command to exit."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 36
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Command to mark a task as done."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final int taskNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Executes the command to mark a task as done in TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param tasks TaskList representing list of current tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param ui Ui object to handle printing of outputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param storage Storage object to handle saving of outputs to computer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws IndexOutOfBoundsDukeException If task number is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    void execute(TaskList tasks, Ui ui, Storage storage) throws IndexOutOfBoundsDukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        ui.showMessage(tasks.markAsDone(taskNumber));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns whether the command is a command to exit."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 37
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constants"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.tasks \u003d storage.read();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Wrap text in lines"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Scanner"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Runs the Duke bot."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                ui.showMessage(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        new Duke(\"./data/todo.txt\").run();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "csiongn": 47
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public DukeException (String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        super(\":((( OOPS!!! \" + errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 7
    }
  },
  {
    "path": "src/main/java/EmptyBodyException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class EmptyBodyException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public EmptyBodyException(String field, String type) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        super(String.format(\"The %s of a %s cannot be empty.\", field, type));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 7
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class to represent a task happening at a specified date and time."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    protected String dateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a new Event object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param description description of the event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param dateTime date and time of the event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws EmptyBodyException If the description is empty."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public Event(String description, String dateTime) throws EmptyBodyException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // String Representation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.dateTime + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 27
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Command to finish running the program"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private static final String EXIT \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Executes the command by saving the list of tasks to the computer and printing the result"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param tasks TaskList representing list of current tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param ui Ui object to handle printing of outputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param storage Storage object to handle saving of outputs to computer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        ui.showMessage(EXIT + \"\\n File saved!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns whether the command is a command to exit."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return true."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 31
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final String substring;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public FindCommand(String substring) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.substring \u003d substring;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        TaskList filteredTasks \u003d tasks.findTasks(this.substring);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        ui.showMessage(\"Here are your tasks matching \" + this.substring);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        ui.showMessage(filteredTasks.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 23
    }
  },
  {
    "path": "src/main/java/IndexOutOfBoundsDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class IndexOutOfBoundsDukeException extends DukeException{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public IndexOutOfBoundsDukeException(int number, int maxSize, String thing) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        super(String.format(\"Cannot find %s %s with only %s %s\", thing, number, maxSize, thing));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 7
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Command to list the current tasks the user has."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Executes the ListCommand by printing the list of tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param tasks the current list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param ui Ui object to handle printing."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param storage Storage object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        ui.showMessage(\"Here are the tasks in your list!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        ui.showMessage(tasks.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns whether the command is a command to exit."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 26
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import javax.swing.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class to handle parsing of input into commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Parses the given command in string form into a Command object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param textCommand the command to be parsed in string formed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return Command after being parsed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws EmptyBodyException If command in string form is empty."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws UnknownInputException If command in string form is not a recognised command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public static Command parse(String textCommand) throws EmptyBodyException, UnknownInputException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String[] words \u003d textCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String firstWord \u003d words[0];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String remaining \u003d words.length \u003e 1 ? words[1] : \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        switch (firstWord) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"delete\": {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            if (remaining.equals(\"\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                throw new EmptyBodyException(\"task number\", \"task\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(remaining);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"done\": {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            if (remaining.equals(\"\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                throw new EmptyBodyException(\"task number\", \"task\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(remaining);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"todo\": {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new AddCommand(\"todo\", remaining);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"deadline\": {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new AddCommand(\"deadline\", remaining);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"event\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new AddCommand(\"event\", remaining);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        case \"find\": {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new FindCommand(remaining);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new UnknownInputException(firstWord);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 57
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class to handle logic related to reading and writing of files to storage"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a storage object that reads and writes to a file at a specified filepath."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param filePath file path of file to read and write to."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Checks whether the file exists."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return Boolean representing whether the file exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean doesFileExist() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return file.exists();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates the file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void createFile() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        boolean createdDirectory \u003d file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        boolean createdFile \u003d file.createNewFile();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Saves a list to the file. Creates the file if it does not exist."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param lst TaskList to save to the file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void save(TaskList lst) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            FileOutputStream fileOutputStream \u003d new FileOutputStream(this.filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            ObjectOutputStream objectOutputStream \u003d new ObjectOutputStream(fileOutputStream);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            objectOutputStream.writeObject(lst);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            objectOutputStream.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Reads from the file containing a TaskList and returns it. If file does not exist, returns an"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * empty file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return The TaskList read from the file if one is read, otherwise an empty TaskList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public TaskList read() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            if (doesFileExist()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                FileInputStream fileInputStream \u003d new FileInputStream(this.filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                ObjectInputStream objectInputStream \u003d new ObjectInputStream(fileInputStream);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                TaskList lst \u003d (TaskList) objectInputStream.readObject();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                objectInputStream.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                return lst;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                createFile();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                return new TaskList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            System.out.println(\"Error reading file\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return new TaskList(); // Returns an empty list so that program can keep running"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 82
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a generic task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param description description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws EmptyBodyException If description is empty."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public Task(String description) throws EmptyBodyException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new EmptyBodyException(\"description\", this.getClass().toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return (this.isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // String Representation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 42
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a new TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public TaskList(List\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.taskList \u003d listOfTasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Adds a new task into the TaskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param newTask task to be added into the TaskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return String denoting result of adding the task into the TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String createTask(Task newTask) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        int newSize \u003d taskList.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String todoText \u003d String.format(\"Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                \" %s\\n\" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                \"Now you have %s tasks in the list\", newTask, newSize);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return todoText;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Marks a task with specified task number in TaskList as done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param taskNumber task number of task to be marked as done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return String denoting result of marking task with specified task number as done."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws IndexOutOfBoundsDukeException If task number given is not valid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String markAsDone(int taskNumber) throws IndexOutOfBoundsDukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Task task \u003d taskList.get(taskNumber - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String doneText \u003d String.format(\"Nice! I\u0027ve marked this task as done:\\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    \" %s\", task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return doneText;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new IndexOutOfBoundsDukeException(taskNumber, taskList.size(), \"task\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Deletes a task with specified task number."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param taskNumber task number of task to be deleted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return String denoting result of deleting task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws IndexOutOfBoundsDukeException If task number given is not valid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String deleteTask(int taskNumber) throws IndexOutOfBoundsDukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Task task \u003d taskList.get(taskNumber - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            taskList.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String deleteText \u003d String.format(\"Okay. I\u0027ve removed this task:\\n\" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    \" %s\", task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            return deleteText;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            throw new IndexOutOfBoundsDukeException(taskNumber, taskList.size(), \"task\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public TaskList findTasks(String substring) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         List\u003cTask\u003e listOfTasks \u003d Arrays.asList("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                 taskList.stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                 .filter(task -\u003e task.description.contains(substring)) // Filter tasks"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                 .toArray(Task[]::new)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "csiongn"
        },
        "content": "         return new TaskList(listOfTasks);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // String Representation"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        int sizeOfList \u003d taskList.size();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        for (int i \u003d 0; i \u003c sizeOfList; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            int number \u003d i + 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String text \u003d taskList.get(i).toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            sb.append(String.format(\"\\n %s. %s\", number, text));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 101
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a new Todo."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param description description of Todo."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @throws EmptyBodyException If description given is empty."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public Todo(String description) throws EmptyBodyException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // String Representation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 20
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": " * Class to handle input and output of program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Attributes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constants"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private static final String NAME \u003d \"DUKE\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private static final String INTRODUCTION \u003d String.format("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            \"Hello! I\u0027m %s\\n\" +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    \"I was created for the module CS2103T\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                    \"What can I do for you?\", NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Creates a new Ui object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Methods"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Reads the next line from standard input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return The next line from standard input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Returns whether there is another line in standard input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @return Boolean representing whether there is another line in standard input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public boolean hasCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        return sc.hasNext();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Prints the welcome message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        showMessage(INTRODUCTION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Prints a line."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        System.out.println(\"    ____________________________________________________________\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * Prints a given message."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     * @param message message to be printed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        System.out.println(\"    \" + message.replaceAll(\"\\n\", \"\\n    \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 68
    }
  },
  {
    "path": "src/main/java/UnknownInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class UnknownInputException extends DukeException {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    // Constructor"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public UnknownInputException(String input) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        super(String.format(\"I\u0027m sorry, but I don\u0027t know what %s means :-(\", input));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 7
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    private final TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void createTask_emptyTaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expected \u003d \"Got it. I\u0027ve added this task:\\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                \" [T][✘] cry\\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                \"Now you have 1 tasks in the list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Task newTask \u003d new Todo(\"cry\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String actual \u003d tasks.createTask(newTask);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (EmptyBodyException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void markAsDone_task() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expected \u003d \"Nice! I\u0027ve marked this task as done:\\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                \" [T][✓] cry\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Task newTask \u003d new Todo(\"cry\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            tasks.createTask(newTask);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String actual \u003d tasks.markAsDone(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IndexOutOfBoundsDukeException | EmptyBodyException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void deleteTask_task() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expected \u003d \"Okay. I\u0027ve removed this task:\\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                \" [T][✘] cry\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Task newTask \u003d new Todo(\"cry\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            tasks.createTask(newTask);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String actual \u003d tasks.deleteTask(1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (IndexOutOfBoundsDukeException | EmptyBodyException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void toString_task() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expected \u003d \"Here are the tasks in your list:\\n\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "csiongn"
        },
        "content": "                \" 1. [T][✘] cry\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            Task newTask \u003d new Todo(\"cry\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            tasks.createTask(newTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String actual \u003d tasks.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (EmptyBodyException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fail(\"Expected: \" + expected + \"\\n Actual:\" + e.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 68
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void toString_creatingTodo() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expected \u003d \"[T][✘] hehe\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            String actual \u003d new Todo(\"hehe\").toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            assertEquals(expected, actual);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        } catch (EmptyBodyException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "            fail(\"Expected: \" + expected + \"\\n Actual:\" + e.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    public void toString_creatingTodoWithEmptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        String expectedMessage \u003d \":((( OOPS!!! The description of a class Todo cannot be empty.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        EmptyBodyException e \u003d assertThrows(EmptyBodyException.class, () -\u003e new Todo(\"\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "csiongn"
        },
        "content": "        assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "csiongn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "csiongn": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "csiongn"
        },
        "content": "event"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "csiongn"
        },
        "content": "done"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "csiongn"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "csiongn"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "csiongn"
        },
        "content": "delete 6"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "csiongn"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "csiongn"
        },
        "content": "HAHAHAHAHAHHA"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "csiongn"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "csiongn"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "csiongn": 17
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "csiongn"
        },
        "content": "# delete saved todo file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "csiongn"
        },
        "content": "if [ -e \"./data\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "csiongn"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "csiongn"
        },
        "content": "    rm -rf ./data"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "csiongn"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "csiongn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "csiongn"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "# convert to UNIX format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "diff ACTUAL.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "csiongn": 7
    }
  },
  {
    "path": "text-ui-test/sources.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "csiongn"
        },
        "content": "../src/main/java/Duke.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "csiongn"
        },
        "content": "../src/main/java/Task.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "csiongn"
        },
        "content": "../src/main/java/Deadline.java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "csiongn"
        },
        "content": "../src/main/java/Todo.java"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "csiongn"
        },
        "content": "../src/main/java/Event.java"
      }
    ],
    "authorContributionMap": {
      "csiongn": 5
    }
  }
]
