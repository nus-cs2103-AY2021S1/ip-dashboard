[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"This is a todo application based off a project template. It\u0027s named after the Java mascot _Duke_. "},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"Given below are instructions on how to set it up."},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"   1. Select the `build.gradle`, and click `OK`"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"1. After the importing is complete, locate the `src/main/java/duke/Launcher.java` file, right-click it, and choose `Run Launcher.main()`. "},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"If the setup is correct, you should see something like the below:"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"![Startup image](docs/images/Startup.PNG)"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"## Using the Application"},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"Refer to the User Guide in `docs/README.md`. Enjoy!"}],"authorContributionMap":{"lowjiefeng1998":13,"-":15}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"compileJava.options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"tasks.withType(JavaCompile) {"},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"    options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"}"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":53,"author":{"gitId":"lowjiefeng1998"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":62,"author":{"gitId":"lowjiefeng1998"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":67,"author":{"gitId":"lowjiefeng1998"},"content":"    enableAssertions \u003d true"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":24,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"Duke is (yet another) task management application. It is based off a project template."},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"### Create"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"Create various types of tasks, based on what you need to track."},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"##### Todo"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"Record a basic task. It represents a task you need to complete, with no details on time."},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"##### Event"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"Record events with this. It represents an event you need to attend, with a start date and an end date."},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"##### Deadline"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"Record pressing deadlines with this. It represents a todo, but you can give it a deadline for tracking purposes."},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"### Read"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"Retrieve what you have previously recorded."},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"### Check"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"Mark those tasks that you have finished."},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"### Delete"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"Remove tasks that have cluttered your list."},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"### Find"},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"Locate tasks based on their description."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"### `todo [description]` - Create a todo task"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"Create a todo application."},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"Aliases: `t`"},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"Example of usage:"},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"`todo Use Duke!`"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":"### `event [description] /from [DD/MM/YYYY HH:mm] /till [DD/MM/YYYY HH:mm]` - Create an event"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"lowjiefeng1998"},"content":"Create an event. You have to follow the given format."},{"lineNumber":50,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":51,"author":{"gitId":"lowjiefeng1998"},"content":"Aliases: `e`"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"lowjiefeng1998"},"content":"`deadline Use Duke! /from 01/01/2020 08:00 /till 01/01/2020 10:00`"},{"lineNumber":56,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":57,"author":{"gitId":"lowjiefeng1998"},"content":"### `deadline [description] /by [DD/MM/YYYY HH:mm]` - Create a deadline"},{"lineNumber":58,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":59,"author":{"gitId":"lowjiefeng1998"},"content":"Create a deadline. You have to follow the given format."},{"lineNumber":60,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":61,"author":{"gitId":"lowjiefeng1998"},"content":"Aliases: `d`"},{"lineNumber":62,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":63,"author":{"gitId":"lowjiefeng1998"},"content":"Example of usage:"},{"lineNumber":64,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":65,"author":{"gitId":"lowjiefeng1998"},"content":"`deadline Use Duke! /by 01/01/2020 10:00`"},{"lineNumber":66,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":67,"author":{"gitId":"lowjiefeng1998"},"content":"### `list` - List all tasks"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"lowjiefeng1998"},"content":"List all the tasks you currently have."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"lowjiefeng1998"},"content":"Aliases: `ls` or `l`"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"lowjiefeng1998"},"content":"Example of usage:"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"lowjiefeng1998"},"content":"`list`"},{"lineNumber":76,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":77,"author":{"gitId":"lowjiefeng1998"},"content":"### `check [index] [index]` - Check off one or more tasks"},{"lineNumber":78,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":79,"author":{"gitId":"lowjiefeng1998"},"content":"Indicate that one or more tasks have been done. "},{"lineNumber":80,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":81,"author":{"gitId":"lowjiefeng1998"},"content":"The indexes are based off the list command. You have to provide at least one valid index. "},{"lineNumber":82,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":83,"author":{"gitId":"lowjiefeng1998"},"content":"Aliases: `ck`"},{"lineNumber":84,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":85,"author":{"gitId":"lowjiefeng1998"},"content":"Example of usage:"},{"lineNumber":86,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":87,"author":{"gitId":"lowjiefeng1998"},"content":"`check 1 2`"},{"lineNumber":88,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":89,"author":{"gitId":"lowjiefeng1998"},"content":"Expected outcome:"},{"lineNumber":90,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":91,"author":{"gitId":"lowjiefeng1998"},"content":"![Check outcome](images/check-outcome.JPG)"},{"lineNumber":92,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":93,"author":{"gitId":"lowjiefeng1998"},"content":"### `remove [index] [index]` - Delete one or more tasks"},{"lineNumber":94,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":95,"author":{"gitId":"lowjiefeng1998"},"content":"Delete one or more tasks."},{"lineNumber":96,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":97,"author":{"gitId":"lowjiefeng1998"},"content":"The indexes are based off the list command. You have to provide at least one valid index. "},{"lineNumber":98,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":99,"author":{"gitId":"lowjiefeng1998"},"content":"Aliases: `rm`"},{"lineNumber":100,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":101,"author":{"gitId":"lowjiefeng1998"},"content":"Example of usage:"},{"lineNumber":102,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":103,"author":{"gitId":"lowjiefeng1998"},"content":"`remove 1 2`"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"lowjiefeng1998"},"content":"![Remove outcome](images/remove-outcome.JPG)"},{"lineNumber":108,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":109,"author":{"gitId":"lowjiefeng1998"},"content":"### `find [search-term]` - Look for tasks with matching descriptions"},{"lineNumber":110,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":111,"author":{"gitId":"lowjiefeng1998"},"content":"Find tasks that contain the given search term."},{"lineNumber":112,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":113,"author":{"gitId":"lowjiefeng1998"},"content":"Aliases: `f`"},{"lineNumber":114,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":115,"author":{"gitId":"lowjiefeng1998"},"content":"Example of usage:"},{"lineNumber":116,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":117,"author":{"gitId":"lowjiefeng1998"},"content":"`find Duke`"},{"lineNumber":118,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":119,"author":{"gitId":"lowjiefeng1998"},"content":"### `bye` - End Duke"},{"lineNumber":120,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":121,"author":{"gitId":"lowjiefeng1998"},"content":"Exit from duke. This disables the input."},{"lineNumber":122,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":123,"author":{"gitId":"lowjiefeng1998"},"content":"Aliases: `exit` or `q`"},{"lineNumber":124,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":125,"author":{"gitId":"lowjiefeng1998"},"content":"Example of usage:"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"lowjiefeng1998"},"content":"`bye`"}],"authorContributionMap":{"lowjiefeng1998":108,"-":19}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.parser.UnknownCommandException;"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.storage.StorageException;"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskException;"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.ui.UI;"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.ui.UiException;"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":" * Handles the logic for the application."},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String FILE_PATH \u003d \"./data/taskList.txt\";"},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"    private boolean hasExited \u003d false;"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"    private TaskList taskList;"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"    private Storage storage;"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"    private final UI ui;"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"     * Creates an instance of Duke."},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"     * The filepath defaults to \"./data/taskList.txt\"."},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"    public Duke() {"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"        ui \u003d new UI();"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"        taskList \u003d new TaskList();"},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"            storage \u003d new Storage(FILE_PATH);"},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"            storage.load(taskList);"},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (StorageException e) {"},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"            ui.showErrorMessage(e.getMessage());"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"     * Accepts and processes user inputs."},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"     * This supports the CLI for Duke."},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"    private void run() {"},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":"        ui.showHelloMessage();"},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"        while (!hasExited) {"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":"            try {"},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":48,"author":{"gitId":"lowjiefeng1998"},"content":"                ui.showLine();"},{"lineNumber":49,"author":{"gitId":"lowjiefeng1998"},"content":"                Command command \u003d Parser.parse(fullCommand);"},{"lineNumber":50,"author":{"gitId":"lowjiefeng1998"},"content":"                String result \u003d command.execute(taskList, storage);"},{"lineNumber":51,"author":{"gitId":"lowjiefeng1998"},"content":"                ui.printResult(result);"},{"lineNumber":52,"author":{"gitId":"lowjiefeng1998"},"content":"                ui.showLine();"},{"lineNumber":53,"author":{"gitId":"lowjiefeng1998"},"content":"                hasExited \u003d command.isExit();"},{"lineNumber":54,"author":{"gitId":"lowjiefeng1998"},"content":"            } catch (UiException e) {"},{"lineNumber":55,"author":{"gitId":"lowjiefeng1998"},"content":"                ui.showLine();"},{"lineNumber":56,"author":{"gitId":"lowjiefeng1998"},"content":"                ui.showErrorMessage(e.getMessage());"},{"lineNumber":57,"author":{"gitId":"lowjiefeng1998"},"content":"                ui.showLine();"},{"lineNumber":58,"author":{"gitId":"lowjiefeng1998"},"content":"            } catch (UnknownCommandException | StorageException | TaskException e) {"},{"lineNumber":59,"author":{"gitId":"lowjiefeng1998"},"content":"                ui.showErrorMessage(e.getMessage());"},{"lineNumber":60,"author":{"gitId":"lowjiefeng1998"},"content":"                ui.showLine();"},{"lineNumber":61,"author":{"gitId":"lowjiefeng1998"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":64,"author":{"gitId":"lowjiefeng1998"},"content":"        ui.closeScanner();"},{"lineNumber":65,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":67,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"lowjiefeng1998"},"content":"     * Processes user inputs."},{"lineNumber":69,"author":{"gitId":"lowjiefeng1998"},"content":"     * This supports the GUI for Duke."},{"lineNumber":70,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param input User input text."},{"lineNumber":72,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return Duke logic response."},{"lineNumber":73,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"lowjiefeng1998"},"content":"    public String getResponse(String input) {"},{"lineNumber":75,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"lowjiefeng1998"},"content":"            Command command \u003d Parser.parse(input);"},{"lineNumber":77,"author":{"gitId":"lowjiefeng1998"},"content":"            String result \u003d command.execute(taskList, storage);"},{"lineNumber":78,"author":{"gitId":"lowjiefeng1998"},"content":"            hasExited \u003d command.isExit();"},{"lineNumber":79,"author":{"gitId":"lowjiefeng1998"},"content":"            return result;"},{"lineNumber":80,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (StorageException e) {"},{"lineNumber":81,"author":{"gitId":"lowjiefeng1998"},"content":"            e.printStackTrace();"},{"lineNumber":82,"author":{"gitId":"lowjiefeng1998"},"content":"            return \"I couldn\u0027t store your data properly.\";"},{"lineNumber":83,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (TaskException e) {"},{"lineNumber":84,"author":{"gitId":"lowjiefeng1998"},"content":"            return \"I couldn\u0027t create or update a task.\\n\""},{"lineNumber":85,"author":{"gitId":"lowjiefeng1998"},"content":"                + e.getMessage();"},{"lineNumber":86,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (UnknownCommandException e) {"},{"lineNumber":87,"author":{"gitId":"lowjiefeng1998"},"content":"            return \"I couldn\u0027t understand this command.\";"},{"lineNumber":88,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":91,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns if the program should exit."},{"lineNumber":93,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return True if an exit command had been received."},{"lineNumber":95,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"lowjiefeng1998"},"content":"    public boolean hasExited() {"},{"lineNumber":97,"author":{"gitId":"lowjiefeng1998"},"content":"        return hasExited;"},{"lineNumber":98,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":100,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"lowjiefeng1998"},"content":"     * Runs the Duke CLI program."},{"lineNumber":102,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param args Execution parameters."},{"lineNumber":104,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"lowjiefeng1998"},"content":"    public static void main(String[] args) {"},{"lineNumber":106,"author":{"gitId":"lowjiefeng1998"},"content":"        new Duke().run();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":105,"-":3}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.ui.MainWindow;"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"    public void start(Stage stage) {"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController();"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"            stage.setScene(scene);"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"            stage.getIcons().add(new Image(Main.class.getResourceAsStream(\"/images/Logo.png\")));"},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"            stage.centerOnScreen();"},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"            stage.setResizable(false);"},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"            stage.show();"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":40}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.storage.StorageException;"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskException;"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskType;"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":" * Encapsulates the logic for adding tasks."},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"public class AddCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"    private final TaskType taskType;"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs a AddCommand with a given TaskType."},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param args Arguments for the command."},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param taskType TaskType for which task to add."},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"    public AddCommand(String args, TaskType taskType) {"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"        super(args);"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"     * Dispatches the appropriate method to add a certain task type into the given taskList."},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param taskList The taskList to operate with."},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param storage The storage to operate with."},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return A message to indicate results."},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If exception happened while processing task."},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws StorageException If exception happened while storing."},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"    public String execute(TaskList taskList, Storage storage) throws TaskException, StorageException {"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"        Task newTask;"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"        switch (taskType) {"},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"        case DEADLINE:"},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"            newTask \u003d taskList.addDeadline(args);"},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"            break;"},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"        case EVENT:"},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":"            newTask \u003d taskList.addEvent(args);"},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":"        case TODO:"},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":"            newTask \u003d taskList.addTodo(args);"},{"lineNumber":48,"author":{"gitId":"lowjiefeng1998"},"content":"            break;"},{"lineNumber":49,"author":{"gitId":"lowjiefeng1998"},"content":"        default:"},{"lineNumber":50,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new TaskException(\"Oops. I didn\u0027t recognise this task.\");"},{"lineNumber":51,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"lowjiefeng1998"},"content":"        assert newTask !\u003d null : \"Task has not been created\";"},{"lineNumber":53,"author":{"gitId":"lowjiefeng1998"},"content":"        storage.save(taskList);"},{"lineNumber":54,"author":{"gitId":"lowjiefeng1998"},"content":"        return \"Alright! Adding one more item:\\n\" + newTask.toString();"},{"lineNumber":55,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":56}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.storage.StorageException;"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskException;"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":" * Encapsulates a Command."},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"    protected final String args;"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"    protected Command(String args) {"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"        this.args \u003d args;"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"     * Sends a signal to exit program."},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return false"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"    public boolean isExit() {"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"        return false;"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"     * Executes logic based on the given parameters."},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param taskList The taskList to operate with."},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param storage The storage to operate with."},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return A message to indicate results."},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If exception happened while processing task."},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws StorageException If exception happened while storing."},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"    public abstract String execute(TaskList taskList, Storage storage)"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"            throws TaskException, StorageException;"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":38}},{"path":"src/main/java/duke/command/CompleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.storage.StorageException;"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.InvalidTaskIndexException;"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":" * Encapsulates the logic for completing tasks."},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"public class CompleteCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String DELIMITER \u003d \" \";"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs a CompleteCommand."},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param args Arguments for the command."},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"    public CompleteCommand(String args) {"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"        super(args);"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"     * Marks one or more tasks as completed."},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param taskList The taskList to operate with."},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param storage The storage to operate with."},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The tasks that are now marked as completed."},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws InvalidTaskIndexException If one or more indexes are invalid."},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws StorageException If the file could not be saved after the operation."},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"    public String execute(TaskList taskList, Storage storage) throws InvalidTaskIndexException, StorageException {"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"        List\u003cTask\u003e completedTasks \u003d taskList.completeTasks(args.trim().split(DELIMITER));"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"        storage.save(taskList);"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"        StringBuilder string \u003d new StringBuilder(\"Neat! Marking these as complete:\");"},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"        for (Task task : completedTasks) {"},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"            string.append(\"\\n\").append(task.toString());"},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":"        return string.toString();"},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":46}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.storage.StorageException;"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.InvalidTaskIndexException;"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":" * Encapsulates the logic for deleting tasks."},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String DELIMITER \u003d \" \";"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs a DeleteCommand."},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param args Arguments for the command."},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"    public DeleteCommand(String args) {"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"        super(args);"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"     * Deletes one or more tasks."},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"     * This may cause the numbering of the list to no longer be contiguous. This is intentional."},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param taskList The taskList to operate with."},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param storage The storage to operate with."},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return A list of tasks that are now deleted."},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws InvalidTaskIndexException If one or more indexes are invalid."},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws StorageException If the file could not be saved after the operation."},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"    public String execute(TaskList taskList, Storage storage) throws InvalidTaskIndexException, StorageException {"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"        List\u003cTask\u003e deletedTasks \u003d taskList.deleteTask(args.trim().split(DELIMITER));"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"        storage.save(taskList);"},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"        StringBuilder string \u003d new StringBuilder(\"Alright! Deleting these:\");"},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"        for (Task task : deletedTasks) {"},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"            string.append(\"\\n\").append(task.toString());"},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"        return string.toString();"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":47}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.ui.UI;"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":" * Encapsulates the logic for exiting tasks."},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"public class ExitCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs a ExitCommand."},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param args Arguments for the command."},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"    public ExitCommand(String args) {"},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"        super(args);"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"     * Sends a signal to exit program."},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return true"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"    public boolean isExit() {"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"        return true;"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"     * Sends a signal to the main process to end the application."},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param taskList The taskList to operate with."},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param storage The storage to operate with."},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The exit message taken from the duke.ui.ui class."},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"    public String execute(TaskList taskList, Storage storage) {"},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"        return UI.getExitMessage();"},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":42}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":" * Encapsulates the logic for finding tasks."},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs a FindCommand."},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param searchTerm Search term to use."},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"    public FindCommand(String searchTerm) {"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"        super(searchTerm);"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"     * Performs a search on all the task descriptions."},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"     * The search is fuzzy."},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param taskList The taskList to operate with."},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param storage The storage to operate with."},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return A list of tasks whose description contains the search term"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"    public String execute(TaskList taskList, Storage storage) {"},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"        List\u003cTask\u003e results \u003d taskList.findTasks(args);"},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"        StringBuilder string \u003d new StringBuilder();"},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"        for (int i \u003d 0; i \u003c results.size(); i++) {"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"            if (i !\u003d 0) {"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"                string.append(\"\\n\");"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"            string.append(results.get(i).toString());"},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"        return string.toString();"},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":43}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":" * Encapsulates the logic for listing tasks."},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs a ListCommand."},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param args Arguments are unused."},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"    public ListCommand(String args) {"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"        super(args);"},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"     * Lists the tasks presents."},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"     * The numbering of the tasks may not be contiguous."},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param taskList The taskList to operate with."},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param storage The storage to operate with."},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return A string representing the tasks present with their index"},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"    public String execute(TaskList taskList, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"        String tasksString \u003d taskList.getTaskList();"},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"        if (tasksString.equals(\"\")) {"},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"            return \"You have no tasks. Add some here!\";"},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"        return tasksString;"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":38}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.command.AddCommand;"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.command.Command;"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.command.CompleteCommand;"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.command.ExitCommand;"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.command.FindCommand;"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.command.ListCommand;"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskType;"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":" * Encapsulates the parsing of user inputs."},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"public class Parser {"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final Set\u003cString\u003e COMMAND_ADD_TODO \u003d new HashSet\u003c\u003e(Arrays.asList(\"todo\", \"t\"));"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final Set\u003cString\u003e COMMAND_ADD_EVENT \u003d new HashSet\u003c\u003e(Arrays.asList(\"event\", \"e\"));"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final Set\u003cString\u003e COMMAND_ADD_DEADLINE \u003d new HashSet\u003c\u003e(Arrays.asList(\"deadline\", \"d\"));"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final Set\u003cString\u003e COMMAND_LIST \u003d new HashSet\u003c\u003e(Arrays.asList(\"list\", \"ls\", \"l\"));"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final Set\u003cString\u003e COMMAND_COMPLETE \u003d new HashSet\u003c\u003e(Arrays.asList(\"check\", \"ck\"));"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final Set\u003cString\u003e COMMAND_DELETE \u003d new HashSet\u003c\u003e(Arrays.asList(\"remove\", \"rm\"));"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final Set\u003cString\u003e COMMAND_FIND \u003d new HashSet\u003c\u003e(Arrays.asList(\"find\", \"f\"));"},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final Set\u003cString\u003e COMMAND_EXIT \u003d new HashSet\u003c\u003e(Arrays.asList(\"bye\", \"exit\", \"q\"));"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"     * Processes the full user input."},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param fullCommand user\u0027s input"},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return one of the subclasses of Command that represents the application logic"},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws UnknownCommandException if the user\u0027s command is unknown"},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"    public static Command parse(String fullCommand) throws UnknownCommandException {"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"        StringBuilder commandInput \u003d new StringBuilder();"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"        StringBuilder argsInput \u003d new StringBuilder();"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"        boolean isCommandFound \u003d false;"},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"        for (int i \u003d 0; i \u003c fullCommand.length(); i++) {"},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"            if (isCommandFound) {"},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"                argsInput.append(fullCommand.charAt(i));"},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"            } else if (fullCommand.charAt(i) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":"                isCommandFound \u003d true;"},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"            } else {"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":"                commandInput.append(fullCommand.charAt(i));"},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":50,"author":{"gitId":"lowjiefeng1998"},"content":"        String command \u003d commandInput.toString();"},{"lineNumber":51,"author":{"gitId":"lowjiefeng1998"},"content":"        String args \u003d argsInput.toString();"},{"lineNumber":52,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":53,"author":{"gitId":"lowjiefeng1998"},"content":"        if (COMMAND_ADD_DEADLINE.contains(command)) {"},{"lineNumber":54,"author":{"gitId":"lowjiefeng1998"},"content":"            return new AddCommand(args, TaskType.DEADLINE);"},{"lineNumber":55,"author":{"gitId":"lowjiefeng1998"},"content":"        } else if (COMMAND_ADD_EVENT.contains(command)) {"},{"lineNumber":56,"author":{"gitId":"lowjiefeng1998"},"content":"            return new AddCommand(args, TaskType.EVENT);"},{"lineNumber":57,"author":{"gitId":"lowjiefeng1998"},"content":"        } else if (COMMAND_ADD_TODO.contains(command)) {"},{"lineNumber":58,"author":{"gitId":"lowjiefeng1998"},"content":"            return new AddCommand(args, TaskType.TODO);"},{"lineNumber":59,"author":{"gitId":"lowjiefeng1998"},"content":"        } else if (COMMAND_COMPLETE.contains(command)) {"},{"lineNumber":60,"author":{"gitId":"lowjiefeng1998"},"content":"            return new CompleteCommand(args);"},{"lineNumber":61,"author":{"gitId":"lowjiefeng1998"},"content":"        } else if (COMMAND_DELETE.contains(command)) {"},{"lineNumber":62,"author":{"gitId":"lowjiefeng1998"},"content":"            return new DeleteCommand(args);"},{"lineNumber":63,"author":{"gitId":"lowjiefeng1998"},"content":"        } else if (COMMAND_EXIT.contains(command)) {"},{"lineNumber":64,"author":{"gitId":"lowjiefeng1998"},"content":"            return new ExitCommand(args);"},{"lineNumber":65,"author":{"gitId":"lowjiefeng1998"},"content":"        } else if (COMMAND_LIST.contains(command)) {"},{"lineNumber":66,"author":{"gitId":"lowjiefeng1998"},"content":"            return new ListCommand(args);"},{"lineNumber":67,"author":{"gitId":"lowjiefeng1998"},"content":"        } else if (COMMAND_FIND.contains(command)) {"},{"lineNumber":68,"author":{"gitId":"lowjiefeng1998"},"content":"            return new FindCommand(args);"},{"lineNumber":69,"author":{"gitId":"lowjiefeng1998"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new UnknownCommandException(\"Unknown command\");"},{"lineNumber":71,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":73}},{"path":"src/main/java/duke/parser/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":" * Represents an exception that happened when the command received is not recognised."},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"public class UnknownCommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"    public UnknownCommandException(String message) {"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":10}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import java.io.BufferedWriter;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"import java.io.FileOutputStream;"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"import java.io.OutputStreamWriter;"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"import java.io.Writer;"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"import java.nio.file.InvalidPathException;"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskException;"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskList;"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.task.TaskTypeDecodeException;"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":" * Encapsulates the logic for storing tasks."},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":" * It will create folders and file based on the given filePath in the constructor."},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":" * A connection to the file is created and maintained once this class is instantiated."},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"public class Storage {"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"    private final File file;"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs a Storage class."},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"     * A connection to the file is created and maintained once this class is instantiated."},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param filePath File to save the tasks in."},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws StorageException If the path cannot be created."},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"    public Storage(String filePath) throws StorageException {"},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"            Path path \u003d Path.of(filePath);"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"            File file \u003d path.toFile();"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"            createFileIfMissing(file);"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"            assert file.exists() : \"File does not exist after initialisation\";"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"            this.file \u003d file;"},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (InvalidPathException e) {"},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new StorageException(\"Invalid path.\");"},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":"     * Creates the directory if missing."},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param file The file instance to save the tasks in."},{"lineNumber":49,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws StorageException If the path cannot be created."},{"lineNumber":50,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"lowjiefeng1998"},"content":"    private void createFileIfMissing(File file) throws StorageException {"},{"lineNumber":52,"author":{"gitId":"lowjiefeng1998"},"content":"        if (file.exists()) {"},{"lineNumber":53,"author":{"gitId":"lowjiefeng1998"},"content":"            return;"},{"lineNumber":54,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":56,"author":{"gitId":"lowjiefeng1998"},"content":"        File parentDirectory \u003d file.getParentFile();"},{"lineNumber":57,"author":{"gitId":"lowjiefeng1998"},"content":"        if (!parentDirectory.exists()) {"},{"lineNumber":58,"author":{"gitId":"lowjiefeng1998"},"content":"            boolean didSucceed \u003d parentDirectory.mkdirs();"},{"lineNumber":59,"author":{"gitId":"lowjiefeng1998"},"content":"            if (!didSucceed) {"},{"lineNumber":60,"author":{"gitId":"lowjiefeng1998"},"content":"                throw new StorageException(\"Failed to create parent directory.\");"},{"lineNumber":61,"author":{"gitId":"lowjiefeng1998"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":64,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"lowjiefeng1998"},"content":"            boolean didSucceed \u003d file.createNewFile();"},{"lineNumber":66,"author":{"gitId":"lowjiefeng1998"},"content":"            if (!didSucceed) {"},{"lineNumber":67,"author":{"gitId":"lowjiefeng1998"},"content":"                throw new StorageException(\"Failed to create file.\");"},{"lineNumber":68,"author":{"gitId":"lowjiefeng1998"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (IOException e) {"},{"lineNumber":70,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new StorageException(\"Failed to create file.\");"},{"lineNumber":71,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":74,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"lowjiefeng1998"},"content":"     * Reads from the file and insert in the TaskList."},{"lineNumber":76,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param taskList TaskList instance to insert into"},{"lineNumber":78,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The given taskList."},{"lineNumber":79,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws StorageException If the file cannot be read or is missing."},{"lineNumber":80,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"lowjiefeng1998"},"content":"    public TaskList load(TaskList taskList) throws StorageException {"},{"lineNumber":82,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":83,"author":{"gitId":"lowjiefeng1998"},"content":"            Scanner reader \u003d new Scanner(file, StandardCharsets.UTF_8);"},{"lineNumber":84,"author":{"gitId":"lowjiefeng1998"},"content":"            while (reader.hasNextLine()) {"},{"lineNumber":85,"author":{"gitId":"lowjiefeng1998"},"content":"                String storageLine \u003d reader.nextLine();"},{"lineNumber":86,"author":{"gitId":"lowjiefeng1998"},"content":"                taskList.parseStorageLine(storageLine);"},{"lineNumber":87,"author":{"gitId":"lowjiefeng1998"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (IOException e) {"},{"lineNumber":89,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new StorageException(\"File remains missing even after initialisation.\");"},{"lineNumber":90,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (TaskTypeDecodeException e) {"},{"lineNumber":91,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new StorageException(\"Unknown task type. File may have been corrupted.\");"},{"lineNumber":92,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (TaskException e) {"},{"lineNumber":93,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new StorageException(\"Could not read one or more task.\");"},{"lineNumber":94,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":96,"author":{"gitId":"lowjiefeng1998"},"content":"        return taskList;"},{"lineNumber":97,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":99,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"lowjiefeng1998"},"content":"     * Saves the taskList into file."},{"lineNumber":101,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param taskList The taskList to read from."},{"lineNumber":103,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The File instance that has been newly written."},{"lineNumber":104,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws StorageException If the file is missing or the task cannot be represented in storage."},{"lineNumber":105,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"lowjiefeng1998"},"content":"    public File save(TaskList taskList) throws StorageException {"},{"lineNumber":107,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":108,"author":{"gitId":"lowjiefeng1998"},"content":"            String storageDocument \u003d taskList.getStorageDocument();"},{"lineNumber":109,"author":{"gitId":"lowjiefeng1998"},"content":"            Writer out \u003d new BufferedWriter(new OutputStreamWriter("},{"lineNumber":110,"author":{"gitId":"lowjiefeng1998"},"content":"                    new FileOutputStream(file), StandardCharsets.UTF_8));"},{"lineNumber":111,"author":{"gitId":"lowjiefeng1998"},"content":"            out.write(storageDocument);"},{"lineNumber":112,"author":{"gitId":"lowjiefeng1998"},"content":"            out.close();"},{"lineNumber":113,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (TaskTypeDecodeException e) {"},{"lineNumber":114,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new StorageException(\"One or more tasks cannot be saved.\");"},{"lineNumber":115,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (IOException e) {"},{"lineNumber":116,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new StorageException(\"File remains missing even after initialisation.\");"},{"lineNumber":117,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":119,"author":{"gitId":"lowjiefeng1998"},"content":"        return file;"},{"lineNumber":120,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":121}},{"path":"src/main/java/duke/storage/StorageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":" * Represents an exception that happened while storing the file."},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"public class StorageException extends Exception {"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"    public StorageException(String message) {"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":10}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":" * Encapsulates a task with a deadline."},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String DELIMITER_COMMAND \u003d \" /by \";"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"    private LocalDateTime deadline;"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs a deadline task that it not yet complete."},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param description Description for the deadline."},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param deadline Deadline for the deadline in DD/MM/YYYY HH:mm format."},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If the description is empty."},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"    public Deadline(String description, LocalDateTime deadline) throws TaskException {"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs a deadline task with full set of parameters."},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param description Description for the deadline."},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param deadline Deadline for the deadline in DD/MM/YYYY HH:mm format."},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param isCompleted If the task is completed already."},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If the description is empty."},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"    public Deadline(String description, String deadline, boolean isCompleted) throws TaskException {"},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"        super(description, isCompleted);"},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"        this.deadline \u003d LocalDateTime.parse(deadline);"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs a deadline task with parameters as a single string."},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param args Parameters for the args in the form of \"[description] /by [deadline in DD/MM/YYYY HH:mm]\""},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return New deadline instance."},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If the description is empty or the given string cannot be delimited."},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"    public static Deadline create(String args) throws TaskException {"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":"        String[] argsList \u003d args.split(DELIMITER_COMMAND);"},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":"        if (argsList.length \u003c 2) {"},{"lineNumber":48,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new TaskException(\"I need more arguments for to track an Event.\\n\""},{"lineNumber":49,"author":{"gitId":"lowjiefeng1998"},"content":"                    + \"The format should be \u003cdescription\u003e /by \u003ctime in DD/MM/YYYY HH:mm\u003e\");"},{"lineNumber":50,"author":{"gitId":"lowjiefeng1998"},"content":"        } else {"},{"lineNumber":51,"author":{"gitId":"lowjiefeng1998"},"content":"            LocalDateTime date \u003d LocalDateTime.parse(argsList[1], Task.DATE_FORMAT_PARSE);"},{"lineNumber":52,"author":{"gitId":"lowjiefeng1998"},"content":"            return new Deadline(argsList[0], date);"},{"lineNumber":53,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":56,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"lowjiefeng1998"},"content":"     * Converts the stored representation to a Deadline instance."},{"lineNumber":58,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param storageString Representation as given by its own `toStorageString()`."},{"lineNumber":60,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return New Deadline task based on the storage representation."},{"lineNumber":61,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If the description is empty, or if storage representation cannot be delimited."},{"lineNumber":62,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"lowjiefeng1998"},"content":"    public static Deadline parseStorageString(String storageString) throws TaskException {"},{"lineNumber":64,"author":{"gitId":"lowjiefeng1998"},"content":"        String[] inputList \u003d storageString.split(DELIMITER_STORAGE);"},{"lineNumber":65,"author":{"gitId":"lowjiefeng1998"},"content":"        if (inputList.length \u003c 3) {"},{"lineNumber":66,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new TaskException(\"Invalid storage string\");"},{"lineNumber":67,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"lowjiefeng1998"},"content":"        return new Deadline(inputList[0], inputList[1], isTaskCompleted(inputList[2]));"},{"lineNumber":69,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":71,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the type of the task."},{"lineNumber":73,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The Deadline task type."},{"lineNumber":75,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"lowjiefeng1998"},"content":"    public TaskType getTaskType() {"},{"lineNumber":78,"author":{"gitId":"lowjiefeng1998"},"content":"        return TaskType.DEADLINE;"},{"lineNumber":79,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":81,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the storage representation."},{"lineNumber":83,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The storage representation."},{"lineNumber":85,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"lowjiefeng1998"},"content":"    public String toStorageString() {"},{"lineNumber":88,"author":{"gitId":"lowjiefeng1998"},"content":"        return description + DELIMITER_STORAGE + deadline + DELIMITER_STORAGE + storeCompletionFlag();"},{"lineNumber":89,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":91,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the string representation of the current instance."},{"lineNumber":93,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return String representation of the current instance."},{"lineNumber":95,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"lowjiefeng1998"},"content":"    public String toString() {"},{"lineNumber":98,"author":{"gitId":"lowjiefeng1998"},"content":"        return printCompletionFlag() + \" | D | \" + description + \"\\nBy: \" + deadline.format(Task.DATE_FORMAT_DISPLAY);"},{"lineNumber":99,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":100}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":" * Encapsulates an event."},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"public class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String DELIMITER_AT \u003d \" /from \";"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String DELIMITER_BY \u003d \" /till \";"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String FORMAT \u003d \"The format should be \u003cdescription\u003e \""},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"            + \"/from \u003ctime in DD/MM/YYYY HH:mm\u003e /till \u003ctime in DD/MM/YYYY HH:mm\u003e\";"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"    private LocalDateTime dateFrom;"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"    private LocalDateTime dateTill;"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs an event task that it not yet complete."},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param description Description for the event."},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param dateFrom Date of the event start in DD/MM/YYYY HH:mm format."},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param dateTill Date of the event ends in DD/MM/YYYY HH:mm format."},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If the description is empty."},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"    public Event(String description, LocalDateTime dateFrom, LocalDateTime dateTill) throws TaskException {"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"        super(description);"},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"        this.dateFrom \u003d dateFrom;"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"        this.dateTill \u003d dateTill;"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs an event with full set of parameters."},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param description Description for the event."},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param dateFrom Date of the event start in DD/MM/YYYY HH:mm format."},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param dateTill Date of the event ends in DD/MM/YYYY HH:mm format."},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param isCompleted If the task is completed already."},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If the description is empty."},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"    private Event(String description, LocalDateTime dateFrom, LocalDateTime dateTill,"},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"                  boolean isCompleted) throws TaskException {"},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"        super(description, isCompleted);"},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"        this.dateFrom \u003d dateFrom;"},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":"        this.dateTill \u003d dateTill;"},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs an event task with parameters as a single string."},{"lineNumber":49,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param args Parameters for the args in the form of \"[description]"},{"lineNumber":51,"author":{"gitId":"lowjiefeng1998"},"content":"     *             /from [date in DD/MM/YYYY HH:mm] /till [date in DD/MM/YYYY HH:mm]\""},{"lineNumber":52,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return New event instance."},{"lineNumber":53,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If the description is empty or the given string cannot be delimited."},{"lineNumber":54,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"lowjiefeng1998"},"content":"    public static Event create(String args) throws TaskException {"},{"lineNumber":56,"author":{"gitId":"lowjiefeng1998"},"content":"        String[] fromList \u003d args.split(DELIMITER_AT);"},{"lineNumber":57,"author":{"gitId":"lowjiefeng1998"},"content":"        if (fromList.length \u003c 2) {"},{"lineNumber":58,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new TaskException(\"I need more arguments for to track an Event.\\n\""},{"lineNumber":59,"author":{"gitId":"lowjiefeng1998"},"content":"            + FORMAT);"},{"lineNumber":60,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":62,"author":{"gitId":"lowjiefeng1998"},"content":"        String[] tillList \u003d fromList[1].split(DELIMITER_BY);"},{"lineNumber":63,"author":{"gitId":"lowjiefeng1998"},"content":"        if (tillList.length \u003c 2) {"},{"lineNumber":64,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new TaskException(\"I need more arguments for to track an Event.\\n\""},{"lineNumber":65,"author":{"gitId":"lowjiefeng1998"},"content":"                    + FORMAT);"},{"lineNumber":66,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":68,"author":{"gitId":"lowjiefeng1998"},"content":"        String description \u003d fromList[0];"},{"lineNumber":69,"author":{"gitId":"lowjiefeng1998"},"content":"        String fromDateString \u003d tillList[0];"},{"lineNumber":70,"author":{"gitId":"lowjiefeng1998"},"content":"        String tillDateString \u003d tillList[1];"},{"lineNumber":71,"author":{"gitId":"lowjiefeng1998"},"content":"        LocalDateTime fromDate \u003d LocalDateTime.parse(fromDateString, Task.DATE_FORMAT_PARSE);"},{"lineNumber":72,"author":{"gitId":"lowjiefeng1998"},"content":"        LocalDateTime tillDate \u003d LocalDateTime.parse(tillDateString, Task.DATE_FORMAT_PARSE);"},{"lineNumber":73,"author":{"gitId":"lowjiefeng1998"},"content":"        return new Event(description, fromDate, tillDate);"},{"lineNumber":74,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":76,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"lowjiefeng1998"},"content":"     * Converts the stored representation to a Event instance."},{"lineNumber":78,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param storageString Representation as given by its own `toStorageString()`."},{"lineNumber":80,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return New Event task based on the storage representation."},{"lineNumber":81,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If the description is empty, or if storage representation cannot be delimited."},{"lineNumber":82,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"lowjiefeng1998"},"content":"    public static Event parseStorageString(String storageString) throws TaskException {"},{"lineNumber":84,"author":{"gitId":"lowjiefeng1998"},"content":"        String[] inputList \u003d storageString.split(DELIMITER_STORAGE);"},{"lineNumber":85,"author":{"gitId":"lowjiefeng1998"},"content":"        if (inputList.length \u003c 4) {"},{"lineNumber":86,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new TaskException(\"Invalid storage string\");"},{"lineNumber":87,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"lowjiefeng1998"},"content":"        return new Event(inputList[0], LocalDateTime.parse(inputList[1]), LocalDateTime.parse(inputList[2]),"},{"lineNumber":89,"author":{"gitId":"lowjiefeng1998"},"content":"                isTaskCompleted(inputList[3]));"},{"lineNumber":90,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":92,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the type of the task."},{"lineNumber":94,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The Event task type."},{"lineNumber":96,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"lowjiefeng1998"},"content":"    public TaskType getTaskType() {"},{"lineNumber":99,"author":{"gitId":"lowjiefeng1998"},"content":"        return TaskType.EVENT;"},{"lineNumber":100,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":102,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the storage representation."},{"lineNumber":104,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The storage representation."},{"lineNumber":106,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"lowjiefeng1998"},"content":"    public String toStorageString() {"},{"lineNumber":109,"author":{"gitId":"lowjiefeng1998"},"content":"        return description + DELIMITER_STORAGE"},{"lineNumber":110,"author":{"gitId":"lowjiefeng1998"},"content":"                + dateFrom + DELIMITER_STORAGE + dateTill + DELIMITER_STORAGE + storeCompletionFlag();"},{"lineNumber":111,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":113,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the string representation of the current instance."},{"lineNumber":115,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return String representation of the current instance."},{"lineNumber":117,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":119,"author":{"gitId":"lowjiefeng1998"},"content":"    public String toString() {"},{"lineNumber":120,"author":{"gitId":"lowjiefeng1998"},"content":"        return printCompletionFlag() + \" | E | \" + description"},{"lineNumber":121,"author":{"gitId":"lowjiefeng1998"},"content":"                + \"\\nPeriod: \" + dateFrom.format(Task.DATE_FORMAT_DISPLAY) + \" to \""},{"lineNumber":122,"author":{"gitId":"lowjiefeng1998"},"content":"                + dateTill.format(Task.DATE_FORMAT_DISPLAY);"},{"lineNumber":123,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":124}},{"path":"src/main/java/duke/task/InvalidTaskIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":" * Represents an exception that happened when the given index for the task is invalid."},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"public class InvalidTaskIndexException extends TaskException {"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"    public InvalidTaskIndexException(String message) {"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":10}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":" * Encapsulates a base representation of a Task."},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":" *"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":" * This base class provides a delimiter for storage."},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":" *"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":" * It also provides the display format for the datetime as dd MMM yy HH:mm (e.g. 01 Jan 20 15:00), and"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":" * the reading format of the datetime as dd/MM/yyyy HH:mm (e.g. 21/09/2020 19:00)."},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"public abstract class Task {"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"    protected static final String DELIMITER_STORAGE \u003d \" :: \";"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"    protected static final DateTimeFormatter DATE_FORMAT_DISPLAY \u003d DateTimeFormatter.ofPattern(\"dd MMM YY HH:mm\");"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"    protected static final DateTimeFormatter DATE_FORMAT_PARSE \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String COMPLETE \u003d \"✓\";"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String NOT_COMPLETE \u003d \"✘\";"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String STORE_COMPLETED \u003d COMPLETE;"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String STORE_INCOMPLETE \u003d NOT_COMPLETE;"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"    protected String description;"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"    protected boolean isComplete \u003d false;"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"    protected Task(String description) throws TaskException {"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"        verifyArgs(description);"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"        this.description \u003d description;"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"    protected Task(String description, boolean isComplete) throws TaskException {"},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"        verifyArgs(description);"},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"        this.description \u003d description;"},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"        this.isComplete \u003d isComplete;"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"     * Checks if the description is empty."},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param description Description of the task."},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If the description is empty."},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":"    private void verifyArgs(String description) throws TaskException {"},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"        if (description.equals(\"\")) {"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new TaskException(\"Did you provide any description for this task?\");"},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":50,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the type of the task."},{"lineNumber":52,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"lowjiefeng1998"},"content":"    public abstract TaskType getTaskType();"},{"lineNumber":54,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":55,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"lowjiefeng1998"},"content":"     * Indicates the task as completed."},{"lineNumber":57,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The calling instance."},{"lineNumber":59,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"lowjiefeng1998"},"content":"    public Task completeTask() {"},{"lineNumber":61,"author":{"gitId":"lowjiefeng1998"},"content":"        isComplete \u003d true;"},{"lineNumber":62,"author":{"gitId":"lowjiefeng1998"},"content":"        return this;"},{"lineNumber":63,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":65,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the completion for display purposes."},{"lineNumber":67,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return \"[✘]\" or \"[✓]\""},{"lineNumber":69,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"lowjiefeng1998"},"content":"    protected String printCompletionFlag() {"},{"lineNumber":71,"author":{"gitId":"lowjiefeng1998"},"content":"        String completionFlag \u003d isComplete ? COMPLETE : NOT_COMPLETE;"},{"lineNumber":72,"author":{"gitId":"lowjiefeng1998"},"content":"        return \"[\" + completionFlag + \"]\";"},{"lineNumber":73,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":75,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the storage representation of the completion status."},{"lineNumber":77,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return ✘ or ✓"},{"lineNumber":79,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"lowjiefeng1998"},"content":"    protected String storeCompletionFlag() {"},{"lineNumber":81,"author":{"gitId":"lowjiefeng1998"},"content":"        return isComplete ? STORE_COMPLETED : STORE_INCOMPLETE;"},{"lineNumber":82,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":84,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"lowjiefeng1998"},"content":"     * Converts the storage representation of the flag to completionStatus."},{"lineNumber":86,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param flag Storage representation of a task."},{"lineNumber":88,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return True if the given flag is ✓"},{"lineNumber":89,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"lowjiefeng1998"},"content":"    protected static boolean isTaskCompleted(String flag) {"},{"lineNumber":91,"author":{"gitId":"lowjiefeng1998"},"content":"        return flag.equals(STORE_COMPLETED);"},{"lineNumber":92,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":94,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the storage representation."},{"lineNumber":96,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The storage representation."},{"lineNumber":98,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"lowjiefeng1998"},"content":"    public abstract String toStorageString();"},{"lineNumber":100,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":101,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"lowjiefeng1998"},"content":"     * Checks if the task\u0027s description contains the searchTerm."},{"lineNumber":103,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param searchTerm Term to search with."},{"lineNumber":105,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return True if the description has the given searchTerm."},{"lineNumber":106,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"lowjiefeng1998"},"content":"    public boolean hasSearchTerm(String searchTerm) {"},{"lineNumber":108,"author":{"gitId":"lowjiefeng1998"},"content":"        return description.contains(searchTerm);"},{"lineNumber":109,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":111,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the string representation of the current instance."},{"lineNumber":113,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return String representation of the current instance."},{"lineNumber":115,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"lowjiefeng1998"},"content":"    public String toString() {"},{"lineNumber":118,"author":{"gitId":"lowjiefeng1998"},"content":"        return printCompletionFlag() + \" | \" + description;"},{"lineNumber":119,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":120}},{"path":"src/main/java/duke/task/TaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":" * Represents an exception that happened in the Task logic."},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"public class TaskException extends Exception {"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"    public TaskException(String message) {"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":10}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":" * Encapsulates an ArrayList of Tasks."},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"public class TaskList {"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"    private int nextIndex \u003d 1;"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"    private Map\u003cInteger, Task\u003e tasksMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"     * Adds the given task to the list."},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param task Task to be added."},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The given task."},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"    public Task addTask(Task task) {"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"        tasksMap.put(nextIndex, task);"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"        nextIndex++;"},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"        return task;"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"     * Adds a Todo task."},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param args String representing a Todo task\u0027s description."},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The new Todo instance."},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If the task cannot be created."},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"    public Task addTodo(String args) throws TaskException {"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"        Todo todo \u003d new Todo(args);"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"        tasksMap.put(nextIndex, todo);"},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"        nextIndex++;"},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"        return todo;"},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"     * Adds a Deadline task."},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param args String with parameters joined as specified in Deadline."},{"lineNumber":48,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The new Deadline instance."},{"lineNumber":49,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If the task cannot be created."},{"lineNumber":50,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"lowjiefeng1998"},"content":"    public Task addDeadline(String args) throws TaskException {"},{"lineNumber":52,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"lowjiefeng1998"},"content":"            Deadline deadline \u003d Deadline.create(args);"},{"lineNumber":54,"author":{"gitId":"lowjiefeng1998"},"content":"            tasksMap.put(nextIndex, deadline);"},{"lineNumber":55,"author":{"gitId":"lowjiefeng1998"},"content":"            nextIndex++;"},{"lineNumber":56,"author":{"gitId":"lowjiefeng1998"},"content":"            return deadline;"},{"lineNumber":57,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":58,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new TaskException(\"Invalid date format\");"},{"lineNumber":59,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":62,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"lowjiefeng1998"},"content":"     * Adds an Event."},{"lineNumber":64,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param args String with parameters joined as specified in Event."},{"lineNumber":66,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The new Event instance."},{"lineNumber":67,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If the task cannot be created."},{"lineNumber":68,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"lowjiefeng1998"},"content":"    public Task addEvent(String args) throws TaskException {"},{"lineNumber":70,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"lowjiefeng1998"},"content":"            Event event \u003d Event.create(args);"},{"lineNumber":72,"author":{"gitId":"lowjiefeng1998"},"content":"            tasksMap.put(nextIndex, event);"},{"lineNumber":73,"author":{"gitId":"lowjiefeng1998"},"content":"            nextIndex++;"},{"lineNumber":74,"author":{"gitId":"lowjiefeng1998"},"content":"            return event;"},{"lineNumber":75,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":76,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new TaskException(\"Invalid date format\");"},{"lineNumber":77,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":80,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"lowjiefeng1998"},"content":"     * Completes tasks at the given indexes."},{"lineNumber":82,"author":{"gitId":"lowjiefeng1998"},"content":"     * The given indexes should be as given in the list command."},{"lineNumber":83,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param indexes An array of indexes whose tasks should be completed."},{"lineNumber":85,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return Tasks that were completed."},{"lineNumber":86,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws InvalidTaskIndexException If any one index is invalid."},{"lineNumber":87,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"lowjiefeng1998"},"content":"    public List\u003cTask\u003e completeTasks(String... indexes) throws InvalidTaskIndexException {"},{"lineNumber":89,"author":{"gitId":"lowjiefeng1998"},"content":"        Set\u003cInteger\u003e intIndexes \u003d verifyIndexes(indexes);"},{"lineNumber":90,"author":{"gitId":"lowjiefeng1998"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":91,"author":{"gitId":"lowjiefeng1998"},"content":"        for (int taskIndex : intIndexes) {"},{"lineNumber":92,"author":{"gitId":"lowjiefeng1998"},"content":"            Task task \u003d tasksMap.get(taskIndex);"},{"lineNumber":93,"author":{"gitId":"lowjiefeng1998"},"content":"            task.completeTask();"},{"lineNumber":94,"author":{"gitId":"lowjiefeng1998"},"content":"            tasks.add(task);"},{"lineNumber":95,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"lowjiefeng1998"},"content":"        return tasks;"},{"lineNumber":97,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":99,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"lowjiefeng1998"},"content":"     * Deletes tasks at the given indexes."},{"lineNumber":101,"author":{"gitId":"lowjiefeng1998"},"content":"     * The given indexes should be as given in the list command."},{"lineNumber":102,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param indexes An array of indexes whose tasks should be deleted."},{"lineNumber":104,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return Tasks that were deleted."},{"lineNumber":105,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws InvalidTaskIndexException If any one index is invalid."},{"lineNumber":106,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"lowjiefeng1998"},"content":"    public List\u003cTask\u003e deleteTask(String... indexes) throws InvalidTaskIndexException {"},{"lineNumber":108,"author":{"gitId":"lowjiefeng1998"},"content":"        Set\u003cInteger\u003e intIndexes \u003d verifyIndexes(indexes);"},{"lineNumber":109,"author":{"gitId":"lowjiefeng1998"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":110,"author":{"gitId":"lowjiefeng1998"},"content":"        for (int taskIndex : intIndexes) {"},{"lineNumber":111,"author":{"gitId":"lowjiefeng1998"},"content":"            Task task \u003d tasksMap.remove(taskIndex);"},{"lineNumber":112,"author":{"gitId":"lowjiefeng1998"},"content":"            tasks.add(task);"},{"lineNumber":113,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"lowjiefeng1998"},"content":"        return tasks;"},{"lineNumber":115,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":117,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"lowjiefeng1998"},"content":"     * Verifies if the given list of indexes are valid and within the taskList range."},{"lineNumber":119,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param indexes List of indexes to verify. Each index should be based on the list command."},{"lineNumber":121,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return List of tasks corresponding to the list in the list command."},{"lineNumber":122,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws InvalidTaskIndexException If the given list contains one or more invalid indexes."},{"lineNumber":123,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"lowjiefeng1998"},"content":"    private Set\u003cInteger\u003e verifyIndexes(String... indexes) throws InvalidTaskIndexException {"},{"lineNumber":125,"author":{"gitId":"lowjiefeng1998"},"content":"        Set\u003cInteger\u003e taskIndexes \u003d new HashSet\u003c\u003e();"},{"lineNumber":126,"author":{"gitId":"lowjiefeng1998"},"content":"        for (String index : indexes) {"},{"lineNumber":127,"author":{"gitId":"lowjiefeng1998"},"content":"            try {"},{"lineNumber":128,"author":{"gitId":"lowjiefeng1998"},"content":"                int taskIndex \u003d Integer.parseInt(index);"},{"lineNumber":129,"author":{"gitId":"lowjiefeng1998"},"content":"                if (!tasksMap.containsKey(taskIndex)) {"},{"lineNumber":130,"author":{"gitId":"lowjiefeng1998"},"content":"                    throw new InvalidTaskIndexException(\"One or more indexes is not valid. \""},{"lineNumber":131,"author":{"gitId":"lowjiefeng1998"},"content":"                            + \"Please check the list again.\");"},{"lineNumber":132,"author":{"gitId":"lowjiefeng1998"},"content":"                }"},{"lineNumber":133,"author":{"gitId":"lowjiefeng1998"},"content":"                taskIndexes.add(taskIndex);"},{"lineNumber":134,"author":{"gitId":"lowjiefeng1998"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":135,"author":{"gitId":"lowjiefeng1998"},"content":"                throw new InvalidTaskIndexException(\"One or more indexes is not valid. \""},{"lineNumber":136,"author":{"gitId":"lowjiefeng1998"},"content":"                        + \"Please check the list again.\");"},{"lineNumber":137,"author":{"gitId":"lowjiefeng1998"},"content":"            }"},{"lineNumber":138,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"lowjiefeng1998"},"content":"        return taskIndexes;"},{"lineNumber":140,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":142,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"lowjiefeng1998"},"content":"     * Searches the taskList for tasks whose description contains the searchTerm."},{"lineNumber":144,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param searchTerm Search term to search with."},{"lineNumber":146,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return List of tasks whose description has the search term."},{"lineNumber":147,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"lowjiefeng1998"},"content":"    public List\u003cTask\u003e findTasks(String searchTerm) {"},{"lineNumber":149,"author":{"gitId":"lowjiefeng1998"},"content":"        List\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":150,"author":{"gitId":"lowjiefeng1998"},"content":"        for (int key : tasksMap.keySet()) {"},{"lineNumber":151,"author":{"gitId":"lowjiefeng1998"},"content":"            Task task \u003d tasksMap.get(key);"},{"lineNumber":152,"author":{"gitId":"lowjiefeng1998"},"content":"            if (task.hasSearchTerm(searchTerm)) {"},{"lineNumber":153,"author":{"gitId":"lowjiefeng1998"},"content":"                results.add(task);"},{"lineNumber":154,"author":{"gitId":"lowjiefeng1998"},"content":"            }"},{"lineNumber":155,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"lowjiefeng1998"},"content":"        return results;"},{"lineNumber":157,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":159,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":160,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns a string that represents all the tasks."},{"lineNumber":161,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"lowjiefeng1998"},"content":"    public String getStorageDocument() throws TaskTypeDecodeException {"},{"lineNumber":163,"author":{"gitId":"lowjiefeng1998"},"content":"        StringBuilder string \u003d new StringBuilder();"},{"lineNumber":164,"author":{"gitId":"lowjiefeng1998"},"content":"        boolean isFirst \u003d true;"},{"lineNumber":165,"author":{"gitId":"lowjiefeng1998"},"content":"        for (int key : tasksMap.keySet()) {"},{"lineNumber":166,"author":{"gitId":"lowjiefeng1998"},"content":"            Task task \u003d tasksMap.get(key);"},{"lineNumber":167,"author":{"gitId":"lowjiefeng1998"},"content":"            String taskStorageString \u003d TaskType.appendIdentifier(task.toStorageString(), task.getTaskType());"},{"lineNumber":168,"author":{"gitId":"lowjiefeng1998"},"content":"            if (isFirst) {"},{"lineNumber":169,"author":{"gitId":"lowjiefeng1998"},"content":"                string.append(taskStorageString);"},{"lineNumber":170,"author":{"gitId":"lowjiefeng1998"},"content":"                isFirst \u003d false;"},{"lineNumber":171,"author":{"gitId":"lowjiefeng1998"},"content":"            } else {"},{"lineNumber":172,"author":{"gitId":"lowjiefeng1998"},"content":"                string.append(\"\\n\").append(taskStorageString);"},{"lineNumber":173,"author":{"gitId":"lowjiefeng1998"},"content":"            }"},{"lineNumber":174,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"lowjiefeng1998"},"content":"        return string.toString();"},{"lineNumber":176,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":178,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"lowjiefeng1998"},"content":"     * Creates an task by reading a storage line."},{"lineNumber":180,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":181,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param line The storage line to interpret."},{"lineNumber":182,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"lowjiefeng1998"},"content":"    public void parseStorageLine(String line) throws TaskTypeDecodeException, TaskException {"},{"lineNumber":184,"author":{"gitId":"lowjiefeng1998"},"content":"        TaskType taskType \u003d TaskType.decodeTaskType(line);"},{"lineNumber":185,"author":{"gitId":"lowjiefeng1998"},"content":"        String taskStorageLine \u003d TaskType.getStorageLine(line, taskType);"},{"lineNumber":186,"author":{"gitId":"lowjiefeng1998"},"content":"        switch (taskType) {"},{"lineNumber":187,"author":{"gitId":"lowjiefeng1998"},"content":"        case DEADLINE:"},{"lineNumber":188,"author":{"gitId":"lowjiefeng1998"},"content":"            addTask(Deadline.parseStorageString(taskStorageLine));"},{"lineNumber":189,"author":{"gitId":"lowjiefeng1998"},"content":"            break;"},{"lineNumber":190,"author":{"gitId":"lowjiefeng1998"},"content":"        case EVENT:"},{"lineNumber":191,"author":{"gitId":"lowjiefeng1998"},"content":"            addTask(Event.parseStorageString(taskStorageLine));"},{"lineNumber":192,"author":{"gitId":"lowjiefeng1998"},"content":"            break;"},{"lineNumber":193,"author":{"gitId":"lowjiefeng1998"},"content":"        case TODO:"},{"lineNumber":194,"author":{"gitId":"lowjiefeng1998"},"content":"            addTask(Todo.parseStorageString(taskStorageLine));"},{"lineNumber":195,"author":{"gitId":"lowjiefeng1998"},"content":"            break;"},{"lineNumber":196,"author":{"gitId":"lowjiefeng1998"},"content":"        default:"},{"lineNumber":197,"author":{"gitId":"lowjiefeng1998"},"content":"            break;"},{"lineNumber":198,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":201,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the list of tasks."},{"lineNumber":203,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":204,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The tasks in a string format."},{"lineNumber":205,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":206,"author":{"gitId":"lowjiefeng1998"},"content":"    public String getTaskList() {"},{"lineNumber":207,"author":{"gitId":"lowjiefeng1998"},"content":"        StringBuilder string \u003d new StringBuilder();"},{"lineNumber":208,"author":{"gitId":"lowjiefeng1998"},"content":"        boolean isFirst \u003d true;"},{"lineNumber":209,"author":{"gitId":"lowjiefeng1998"},"content":"        for (int i \u003d 1; i \u003c nextIndex; i++) {"},{"lineNumber":210,"author":{"gitId":"lowjiefeng1998"},"content":"            boolean taskExists \u003d tasksMap.containsKey(i);"},{"lineNumber":211,"author":{"gitId":"lowjiefeng1998"},"content":"            if (isFirst \u0026\u0026 taskExists) {"},{"lineNumber":212,"author":{"gitId":"lowjiefeng1998"},"content":"                string.append(i).append(\": \").append(tasksMap.get(i).toString());"},{"lineNumber":213,"author":{"gitId":"lowjiefeng1998"},"content":"                isFirst \u003d false;"},{"lineNumber":214,"author":{"gitId":"lowjiefeng1998"},"content":"            } else if (taskExists) {"},{"lineNumber":215,"author":{"gitId":"lowjiefeng1998"},"content":"                string.append(\"\\n\").append(i).append(\": \").append(tasksMap.get(i).toString());"},{"lineNumber":216,"author":{"gitId":"lowjiefeng1998"},"content":"            }"},{"lineNumber":217,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":218,"author":{"gitId":"lowjiefeng1998"},"content":"        return string.toString();"},{"lineNumber":219,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":220}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":" * Enumerates through the types of Tasks."},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":" *"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":" * It also provides methods to append each task type with an identifier and decode them."},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"public enum TaskType {"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"    DEADLINE(\"ID_D\"),"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"    EVENT(\"ID_E\"),"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"    TODO(\"ID_T\");"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String IDENTIFIER_DELIMITER \u003d \" :: \";"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"    private final String id;"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"    TaskType(String id) {"},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"        this.id \u003d id;"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"     * Appends an identifier to a task\u0027s representation."},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param storageString Task\u0027s storage representation."},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param taskType Task\u0027s TaskType."},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return Storage string appended with the task\u0027s identifier."},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskTypeDecodeException If the given taskType is invalid."},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"    public static String appendIdentifier(String storageString, TaskType taskType) throws TaskTypeDecodeException {"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"        return taskType.id + IDENTIFIER_DELIMITER + storageString;"},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"     * Decodes a storage string that was created by `appendIdentifier()`."},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param storageString Storage string created by `appendIdentifier()`."},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The found TaskType."},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskTypeDecodeException If the storage string cannot be delimited or TaskType cannot be found."},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"    public static TaskType decodeTaskType(String storageString) throws TaskTypeDecodeException {"},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"            String identifier \u003d storageString.split(IDENTIFIER_DELIMITER)[0];"},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"            if (identifier.equals(TaskType.DEADLINE.id)) {"},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":"                return TaskType.DEADLINE;"},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"            } else if (identifier.equals(TaskType.EVENT.id)) {"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":"                return TaskType.EVENT;"},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":"            } else if (identifier.equals(TaskType.TODO.id)) {"},{"lineNumber":48,"author":{"gitId":"lowjiefeng1998"},"content":"                return TaskType.TODO;"},{"lineNumber":49,"author":{"gitId":"lowjiefeng1998"},"content":"            } else {"},{"lineNumber":50,"author":{"gitId":"lowjiefeng1998"},"content":"                throw new TaskTypeDecodeException(\"Unknown task type\");"},{"lineNumber":51,"author":{"gitId":"lowjiefeng1998"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":53,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new TaskTypeDecodeException(\"Invalid storage string.\");"},{"lineNumber":54,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":57,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"lowjiefeng1998"},"content":"     * Removes the identifier appended by `appendIdentifier()`."},{"lineNumber":59,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param input String generated by `appendIdentifier()`."},{"lineNumber":61,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param taskType The found TaskType."},{"lineNumber":62,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return String without the appended identifier."},{"lineNumber":63,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskTypeDecodeException If the given string is invalid."},{"lineNumber":64,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"lowjiefeng1998"},"content":"    public static String getStorageLine(String input, TaskType taskType) throws TaskTypeDecodeException {"},{"lineNumber":66,"author":{"gitId":"lowjiefeng1998"},"content":"        int start \u003d taskType.id.length() + IDENTIFIER_DELIMITER.length();"},{"lineNumber":67,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"lowjiefeng1998"},"content":"            StringBuilder string \u003d new StringBuilder();"},{"lineNumber":69,"author":{"gitId":"lowjiefeng1998"},"content":"            for (int i \u003d start; i \u003c input.length(); i++) {"},{"lineNumber":70,"author":{"gitId":"lowjiefeng1998"},"content":"                string.append(input.charAt(i));"},{"lineNumber":71,"author":{"gitId":"lowjiefeng1998"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"lowjiefeng1998"},"content":"            return string.toString();"},{"lineNumber":73,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":74,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new TaskTypeDecodeException(\"Storage string has been malformed.\");"},{"lineNumber":75,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":77}},{"path":"src/main/java/duke/task/TaskTypeDecodeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":" * Represents an exception that happened in the TaskType logic."},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"public class TaskTypeDecodeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"    public TaskTypeDecodeException(String message) {"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":10}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":" * Encapsulates a Todo task."},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":" *"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":" * This is simple extension of the Task class without additional attributes."},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"public class Todo extends Task {"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs a Todo task that is not yet completed."},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param description Description for the task."},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If description is empty."},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"    public Todo(String description) throws TaskException {"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs a Todo task with full set of parameters."},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param description Description for the task."},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param isComplete If the task is completed already."},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If the task description is empty."},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"    public Todo(String description, boolean isComplete) throws TaskException {"},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"        super(description, isComplete);"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"     * Converts the stored representation to a Todo instance."},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param storageString Representation as given by its own `toStorageString()`."},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return New Todo task based on the storage representation."},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws TaskException If the description is empty, or if storage representation cannot be delimited."},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"    public static Todo parseStorageString(String storageString) throws TaskException {"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"        String[] inputList \u003d storageString.split(DELIMITER_STORAGE);"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"        if (inputList.length \u003c 2) {"},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new TaskException(\"Invalid storage string\");"},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"        return new Todo(inputList[0], isTaskCompleted(inputList[1]));"},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the type of the task."},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The Todo task type."},{"lineNumber":49,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"lowjiefeng1998"},"content":"    public TaskType getTaskType() {"},{"lineNumber":52,"author":{"gitId":"lowjiefeng1998"},"content":"        return TaskType.TODO;"},{"lineNumber":53,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":55,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the storage representation."},{"lineNumber":57,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The storage representation of the Todo instance."},{"lineNumber":59,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"lowjiefeng1998"},"content":"    public String toStorageString() {"},{"lineNumber":62,"author":{"gitId":"lowjiefeng1998"},"content":"        return description + DELIMITER_STORAGE + storeCompletionFlag();"},{"lineNumber":63,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":65,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"lowjiefeng1998"},"content":"     * Checks if the given object is the same as the current instance."},{"lineNumber":67,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param o Alternative object to check."},{"lineNumber":69,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return True if the given object has the description and completion status."},{"lineNumber":70,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"lowjiefeng1998"},"content":"    public boolean equals(Object o) {"},{"lineNumber":73,"author":{"gitId":"lowjiefeng1998"},"content":"        if (o instanceof Todo) {"},{"lineNumber":74,"author":{"gitId":"lowjiefeng1998"},"content":"            Todo t \u003d (Todo) o;"},{"lineNumber":75,"author":{"gitId":"lowjiefeng1998"},"content":"            return isComplete \u003d\u003d t.isComplete"},{"lineNumber":76,"author":{"gitId":"lowjiefeng1998"},"content":"                    \u0026\u0026 description.equals(t.description);"},{"lineNumber":77,"author":{"gitId":"lowjiefeng1998"},"content":"        } else {"},{"lineNumber":78,"author":{"gitId":"lowjiefeng1998"},"content":"            return false;"},{"lineNumber":79,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":82,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the string representation of the current instance."},{"lineNumber":84,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return String representation of the current instance."},{"lineNumber":86,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"lowjiefeng1998"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"lowjiefeng1998"},"content":"    public String toString() {"},{"lineNumber":89,"author":{"gitId":"lowjiefeng1998"},"content":"        return printCompletionFlag() + \" | T | \" + description;"},{"lineNumber":90,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":91}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":" * Controller for a DialogBox."},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"lowjiefeng1998"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"lowjiefeng1998"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":52,"author":{"gitId":"lowjiefeng1998"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"lowjiefeng1998"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":56,"author":{"gitId":"lowjiefeng1998"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"lowjiefeng1998"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"lowjiefeng1998"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"lowjiefeng1998"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":61}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"    private VBox dialogContainer;"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"    private TextField userInput;"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"    private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/SpeechEmoji.png\"));"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/GeekEmoji.png\"));"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"     * Initialises the MainWindow. Sends a welcome message with the list of tasks."},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"    public void initialize() {"},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"        String helloMessage \u003d UI.getHelloMessage() + \"\\n\\nI\u0027ve saved these so far:\\n\""},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"                + duke.getResponse(\"list\");"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"                DialogBox.getDukeDialog(helloMessage, dukeImage)"},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"        );"},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"lowjiefeng1998"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"lowjiefeng1998"},"content":"    private void handleUserInput() {"},{"lineNumber":50,"author":{"gitId":"lowjiefeng1998"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":51,"author":{"gitId":"lowjiefeng1998"},"content":"        if (!input.equals(\"\")) {"},{"lineNumber":52,"author":{"gitId":"lowjiefeng1998"},"content":"            String response \u003d duke.getResponse(input);"},{"lineNumber":53,"author":{"gitId":"lowjiefeng1998"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":54,"author":{"gitId":"lowjiefeng1998"},"content":"                    DialogBox.getUserDialog(input, userImage),"},{"lineNumber":55,"author":{"gitId":"lowjiefeng1998"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":56,"author":{"gitId":"lowjiefeng1998"},"content":"            );"},{"lineNumber":57,"author":{"gitId":"lowjiefeng1998"},"content":"            userInput.clear();"},{"lineNumber":58,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":59,"author":{"gitId":"lowjiefeng1998"},"content":"            if (duke.hasExited()) {"},{"lineNumber":60,"author":{"gitId":"lowjiefeng1998"},"content":"                userInput.setDisable(true);"},{"lineNumber":61,"author":{"gitId":"lowjiefeng1998"},"content":"                sendButton.setDisable(true);"},{"lineNumber":62,"author":{"gitId":"lowjiefeng1998"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":65}},{"path":"src/main/java/duke/ui/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":" * Encapsulates the UI."},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":" *"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":" * Wraps around a Scanner for input and System.out for printing."},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"public class UI {"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String DIVIDER \u003d \"-----------------------------------------------------\";"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String HELLO_MESSAGE \u003d \"Greetings! I am Duke.\\nWhat can I do for you?\";"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String EXIT_MESSAGE \u003d \"Bye! See you around!\";"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"    private static final String ERROR_MESSAGE \u003d \"Hmm I didn\u0027t quite catch that.\";"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"    private final Scanner scanner;"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"     * Constructs the UI object."},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"    public UI() {"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"        this.scanner \u003d new Scanner(System.in);"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"     * Shows the a divider line that divides input and output."},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"    public void showLine() {"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"     * Shows a hello message."},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"    public void showHelloMessage() {"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":"        showLine();"},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"        System.out.println(HELLO_MESSAGE);"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"        showLine();"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"     * Shows an exit message."},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":"    public void showExitMessage() {"},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"        System.out.println(EXIT_MESSAGE);"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":48,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"lowjiefeng1998"},"content":"     * Shows the error message with text."},{"lineNumber":50,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param message Message from the Exception."},{"lineNumber":52,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"lowjiefeng1998"},"content":"    public void showErrorMessage(String message) {"},{"lineNumber":54,"author":{"gitId":"lowjiefeng1998"},"content":"        System.out.println(ERROR_MESSAGE + \"\\n\" + message);"},{"lineNumber":55,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":57,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"lowjiefeng1998"},"content":"     * Reads the next line in user\u0027s input."},{"lineNumber":59,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"lowjiefeng1998"},"content":"     * @return The full user\u0027s input."},{"lineNumber":61,"author":{"gitId":"lowjiefeng1998"},"content":"     * @throws UiException If user\u0027s input is empty or the scanner has no next line."},{"lineNumber":62,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"lowjiefeng1998"},"content":"    public String readCommand() throws UiException {"},{"lineNumber":64,"author":{"gitId":"lowjiefeng1998"},"content":"        if (scanner.hasNextLine()) {"},{"lineNumber":65,"author":{"gitId":"lowjiefeng1998"},"content":"            String line \u003d scanner.nextLine();"},{"lineNumber":66,"author":{"gitId":"lowjiefeng1998"},"content":"            if (!line.equals(\"\")) {"},{"lineNumber":67,"author":{"gitId":"lowjiefeng1998"},"content":"                return line;"},{"lineNumber":68,"author":{"gitId":"lowjiefeng1998"},"content":"            } else {"},{"lineNumber":69,"author":{"gitId":"lowjiefeng1998"},"content":"                throw new UiException(\"Input cannot be empty.\");"},{"lineNumber":70,"author":{"gitId":"lowjiefeng1998"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"lowjiefeng1998"},"content":"        } else {"},{"lineNumber":72,"author":{"gitId":"lowjiefeng1998"},"content":"            throw new UiException(\"Invalid call to readCommand\");"},{"lineNumber":73,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":76,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"lowjiefeng1998"},"content":"     * Shows a message."},{"lineNumber":78,"author":{"gitId":"lowjiefeng1998"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"lowjiefeng1998"},"content":"     * @param message Message to output."},{"lineNumber":80,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"lowjiefeng1998"},"content":"    public void printResult(String message) {"},{"lineNumber":82,"author":{"gitId":"lowjiefeng1998"},"content":"        System.out.println(message);"},{"lineNumber":83,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":85,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the hello message."},{"lineNumber":87,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"lowjiefeng1998"},"content":"    public static String getHelloMessage() {"},{"lineNumber":89,"author":{"gitId":"lowjiefeng1998"},"content":"        return HELLO_MESSAGE;"},{"lineNumber":90,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":92,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"lowjiefeng1998"},"content":"     * Returns the exit message."},{"lineNumber":94,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"lowjiefeng1998"},"content":"    public static String getExitMessage() {"},{"lineNumber":96,"author":{"gitId":"lowjiefeng1998"},"content":"        return EXIT_MESSAGE;"},{"lineNumber":97,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":99,"author":{"gitId":"lowjiefeng1998"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"lowjiefeng1998"},"content":"     * Closes the scanner."},{"lineNumber":101,"author":{"gitId":"lowjiefeng1998"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"lowjiefeng1998"},"content":"    public void closeScanner() {"},{"lineNumber":103,"author":{"gitId":"lowjiefeng1998"},"content":"        scanner.close();"},{"lineNumber":104,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":105}},{"path":"src/main/java/duke/ui/UiException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":" * Represents an exception that happened in the UI logic."},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"public class UiException extends Exception {"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"    public UiException (String message) {"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":10}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"Infinity\" minHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" spacing\u003d\"10.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" style\u003d\"-fx-text-fill: #ffffff;\"/\u003e"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"30.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"lowjiefeng1998":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"347.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"1.0\" style\u003d\"-fx-background-color: #3282b8; -fx-text-fill: #ffffff; -fx-font-size: 15; \"/\u003e"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"50.0\" AnchorPane.rightAnchor\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"2.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"        \u003cgraphic\u003e"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"            \u003cImageView fitHeight\u003d\"20.0\" fitWidth\u003d\"20.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"                \u003cImage url\u003d\"@/images/Send.png\"/\u003e"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"            \u003c/ImageView\u003e"},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"        \u003c/graphic\u003e"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"    \u003c/Button\u003e"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"560.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #1b262c;\"/\u003e"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"lowjiefeng1998":23}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"public class DeadlineTest {"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"    public void constructor_emptyDescription_taskException() {"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"        assertThrows(TaskException.class, () -\u003e new Deadline(\"\", LocalDateTime.now()));"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"    public void getTaskType() {"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"            Deadline t \u003d new Deadline(\"Some desc\", LocalDateTime.now());"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"            assertEquals(t.getTaskType(), TaskType.DEADLINE);"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (Exception e) {"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"            fail();"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":26}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"public class EventTest {"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"    public void constructor_emptyDescription_taskException() {"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"        assertThrows(TaskException.class, () -\u003e new Event(\"\", LocalDateTime.now(), LocalDateTime.now()));"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"    public void getTaskType() {"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"            Event t \u003d new Event(\"Some desc\", LocalDateTime.now(), LocalDateTime.now());"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"            assertEquals(t.getTaskType(), TaskType.EVENT);"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (Exception e) {"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"            fail();"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":26}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"public class TodoTest {"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"    public void constructor_emptyDescription_taskException() {"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"        assertThrows(TaskException.class, () -\u003e new Todo(\"\"));"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"    public void getTaskType() {"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"            Todo t \u003d new Todo(\"Some desc\");"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"            assertEquals(t.getTaskType(), TaskType.TODO);"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (Exception e) {"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"            fail();"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"    public void toStorageString() {"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"            Todo t \u003d new Todo(\"DESC\");"},{"lineNumber":31,"author":{"gitId":"lowjiefeng1998"},"content":"            assertEquals(\"DESC :: ✘\", t.toStorageString());"},{"lineNumber":32,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (Exception e) {"},{"lineNumber":33,"author":{"gitId":"lowjiefeng1998"},"content":"            fail();"},{"lineNumber":34,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":37,"author":{"gitId":"lowjiefeng1998"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"lowjiefeng1998"},"content":"    public void parseStorageString_validString() {"},{"lineNumber":39,"author":{"gitId":"lowjiefeng1998"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"lowjiefeng1998"},"content":"            String validString \u003d \"DESC :: [✘]\";"},{"lineNumber":41,"author":{"gitId":"lowjiefeng1998"},"content":"            Todo t \u003d Todo.parseStorageString(validString);"},{"lineNumber":42,"author":{"gitId":"lowjiefeng1998"},"content":"            assertTrue(t.equals(new Todo(\"DESC\")));"},{"lineNumber":43,"author":{"gitId":"lowjiefeng1998"},"content":"        } catch (Exception e) {"},{"lineNumber":44,"author":{"gitId":"lowjiefeng1998"},"content":"            fail();"},{"lineNumber":45,"author":{"gitId":"lowjiefeng1998"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"lowjiefeng1998"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"lowjiefeng1998"},"content":"}"}],"authorContributionMap":{"lowjiefeng1998":47}},{"path":"text-ui-test/data/taskList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"T | read book | ICOMP"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":"E | meeting | 2020-07-30T15:00 | COMP"},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"D | quiz2 submission | 2020-08-29T22:00 | ICOMP"}],"authorContributionMap":{"lowjiefeng1998":3}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lowjiefeng1998"},"content":"this should be rejected"},{"lineNumber":2,"author":{"gitId":"lowjiefeng1998"},"content":"todo"},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"todo test"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":"todo read book"},{"lineNumber":5,"author":{"gitId":"lowjiefeng1998"},"content":"list"},{"lineNumber":6,"author":{"gitId":"lowjiefeng1998"},"content":"event meeting /at 30/07/2020 15:00"},{"lineNumber":7,"author":{"gitId":"lowjiefeng1998"},"content":"event lunch with friends /at 17/07/2020 15:00"},{"lineNumber":8,"author":{"gitId":"lowjiefeng1998"},"content":"event dinner with friends /at unknown time"},{"lineNumber":9,"author":{"gitId":"lowjiefeng1998"},"content":"list"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"deadline quiz1 /by 30/08/2020 23:59"},{"lineNumber":11,"author":{"gitId":"lowjiefeng1998"},"content":"deadline quiz2 submission /by 29/08/2020 22:00"},{"lineNumber":12,"author":{"gitId":"lowjiefeng1998"},"content":"deadline quiz3 submission /by unknown time"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"list"},{"lineNumber":14,"author":{"gitId":"lowjiefeng1998"},"content":"done 0"},{"lineNumber":15,"author":{"gitId":"lowjiefeng1998"},"content":"done 100"},{"lineNumber":16,"author":{"gitId":"lowjiefeng1998"},"content":"done 1"},{"lineNumber":17,"author":{"gitId":"lowjiefeng1998"},"content":"list"},{"lineNumber":18,"author":{"gitId":"lowjiefeng1998"},"content":"done 3"},{"lineNumber":19,"author":{"gitId":"lowjiefeng1998"},"content":"list"},{"lineNumber":20,"author":{"gitId":"lowjiefeng1998"},"content":"done 1"},{"lineNumber":21,"author":{"gitId":"lowjiefeng1998"},"content":"list"},{"lineNumber":22,"author":{"gitId":"lowjiefeng1998"},"content":"delete 0"},{"lineNumber":23,"author":{"gitId":"lowjiefeng1998"},"content":"delete 100"},{"lineNumber":24,"author":{"gitId":"lowjiefeng1998"},"content":"delete 1"},{"lineNumber":25,"author":{"gitId":"lowjiefeng1998"},"content":"list"},{"lineNumber":26,"author":{"gitId":"lowjiefeng1998"},"content":"delete 3"},{"lineNumber":27,"author":{"gitId":"lowjiefeng1998"},"content":"list"},{"lineNumber":28,"author":{"gitId":"lowjiefeng1998"},"content":"delete 3"},{"lineNumber":29,"author":{"gitId":"lowjiefeng1998"},"content":"list"},{"lineNumber":30,"author":{"gitId":"lowjiefeng1998"},"content":"bye"}],"authorContributionMap":{"lowjiefeng1998":30}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"lowjiefeng1998"},"content":"SET JAVA_TOOL_OPTIONS\u003d-Dfile.encoding\u003dUTF-8"},{"lineNumber":4,"author":{"gitId":"lowjiefeng1998"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":6,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":9,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":10,"author":{"gitId":"lowjiefeng1998"},"content":"del /s \"data\\taskList.txt\""},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":13,"author":{"gitId":"lowjiefeng1998"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":14,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":15,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":17,"author":{"gitId":"-"},"content":")"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":21,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":24,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"lowjiefeng1998":4,"-":20}}]
